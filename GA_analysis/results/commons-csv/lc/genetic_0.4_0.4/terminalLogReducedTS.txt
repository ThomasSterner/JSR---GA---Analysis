WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[32m24.08.2022 - 00:24:26.651 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Current absolute path is: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/projects/commons-csv
[m[32m24.08.2022 - 00:24:26.654 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to jar: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/projects/commons-csv/target/commons-csv-1.7-fat-tests.jar
[m[32m24.08.2022 - 00:24:26.654 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to slicer: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/JSR/slicer/Slicer4J
[m[32m24.08.2022 - 00:24:26.654 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to out dir: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4
[m[32m24.08.2022 - 00:24:26.654 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to out logging jar: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/JSR/slicer/DynamicSlicingCore/DynamicSlicingLoggingClasses/DynamicSlicingLogger.jar
[m[m24.08.2022 - 00:24:27.293 [INFO ] ParsingStrategy.parseTestSuiteFromFilePath() - Parsing test suite from File Path
[m[m24.08.2022 - 00:24:27.293 [INFO ] CompilationUnitExtractor.parseCompilationUnitsFromFilePath() - Collecting compilation units from File Path /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/projects/commons-csv/src/test/java
[m[m24.08.2022 - 00:24:27.953 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m24.08.2022 - 00:24:27.954 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.issues.JiraCsv203Test::testQuoteModeAll has 1 assertions: 
 Assert.assertEquals("\"N/A\",\"Hello\",\"N/A\",\"World\"\r\n", buffer.toString()); ref {Assert, buffer} [41-41]
[m[m24.08.2022 - 00:24:27.954 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.issues.JiraCsv203Test::testQuoteModeAllNonNull has 1 assertions: 
 Assert.assertEquals("N/A,\"Hello\",N/A,\"World\"\r\n", buffer.toString()); ref {Assert, buffer} [55-55]
[m[m24.08.2022 - 00:24:27.955 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.issues.JiraCsv203Test::testWithoutQuoteMode has 1 assertions: 
 Assert.assertEquals("N/A,Hello,N/A,World\r\n", buffer.toString()); ref {Assert, buffer} [68-68]
[m[m24.08.2022 - 00:24:27.955 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.issues.JiraCsv203Test::testQuoteModeMinimal has 1 assertions: 
 Assert.assertEquals("N/A,Hello,N/A,World\r\n", buffer.toString()); ref {Assert, buffer} [82-82]
[m[m24.08.2022 - 00:24:27.955 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.issues.JiraCsv203Test::testQuoteModeNonNumeric has 1 assertions: 
 Assert.assertEquals("N/A,\"Hello\",N/A,\"World\"\r\n", buffer.toString()); ref {Assert, buffer} [96-96]
[m[m24.08.2022 - 00:24:27.955 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.issues.JiraCsv203Test::testWithoutNullString has 1 assertions: 
 Assert.assertEquals(",\"Hello\",,\"World\"\r\n", buffer.toString()); ref {Assert, buffer} [110-110]
[m[m24.08.2022 - 00:24:27.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.issues.JiraCsv203Test::testWithEmptyValues has 1 assertions: 
 Assert.assertEquals("\"\",\"Hello\",\"\",\"World\"\r\n", buffer.toString()); ref {Assert, buffer} [125-125]
[m[m24.08.2022 - 00:24:27.957 [INFO ] ParsingStrategy.parseTestSuite() - Found 10 test cases
[m[m24.08.2022 - 00:24:27.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatPredefinedTest::testDefault has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatPredefinedTest::testExcel has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatPredefinedTest::testMySQL has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatPredefinedTest::testOracle has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatPredefinedTest::testPostgreSqlCsv has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatPredefinedTest::testMongoDbCsv has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatPredefinedTest::testMongoDbTsv has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatPredefinedTest::testPostgreSqlText has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatPredefinedTest::testRFC4180 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatPredefinedTest::testTDF has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.973 [INFO ] ParsingStrategy.parseTestSuite() - Found 5 test cases
[m[m24.08.2022 - 00:24:27.973 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.ExtendedBufferedReaderTest::testEmptyInput has 5 assertions: 
 assertEquals(END_OF_STREAM, br.read()); ref {br, END_OF_STREAM} [38-38],
 assertEquals(END_OF_STREAM, br.lookAhead()); ref {br, END_OF_STREAM} [39-39],
 assertEquals(END_OF_STREAM, br.getLastChar()); ref {br, END_OF_STREAM} [40-40],
 assertNull(br.readLine()); ref {br} [41-41],
 assertEquals(0, br.read(new char[10], 0, 0)); ref {br} [42-42]
[m[m24.08.2022 - 00:24:27.975 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.ExtendedBufferedReaderTest::testReadLookahead1 has 46 assertions: 
 assertEquals(0, br.getCurrentLineNumber()); ref {br} [49-49],
 assertEquals('1', br.lookAhead()); ref {br} [50-50],
 assertEquals(UNDEFINED, br.getLastChar()); ref {br, UNDEFINED} [51-51],
 assertEquals(0, br.getCurrentLineNumber()); ref {br} [52-52],
 // Start line 1
assertEquals('1', br.read()); ref {br} [53-53],
 assertEquals('1', br.getLastChar()); ref {br} [54-54],
 assertEquals(1, br.getCurrentLineNumber()); ref {br} [56-56],
 assertEquals('\n', br.lookAhead()); ref {br} [57-57],
 assertEquals(1, br.getCurrentLineNumber()); ref {br} [58-58],
 assertEquals('1', br.getLastChar()); ref {br} [59-59],
 assertEquals('\n', br.read()); ref {br} [60-60],
 assertEquals(1, br.getCurrentLineNumber()); ref {br} [61-61],
 assertEquals('\n', br.getLastChar()); ref {br} [62-62],
 assertEquals(1, br.getCurrentLineNumber()); ref {br} [63-63],
 assertEquals('2', br.lookAhead()); ref {br} [65-65],
 assertEquals(1, br.getCurrentLineNumber()); ref {br} [66-66],
 assertEquals('\n', br.getLastChar()); ref {br} [67-67],
 assertEquals(1, br.getCurrentLineNumber()); ref {br} [68-68],
 // Start line 2
assertEquals('2', br.read()); ref {br} [69-69],
 assertEquals(2, br.getCurrentLineNumber()); ref {br} [70-70],
 assertEquals('2', br.getLastChar()); ref {br} [71-71],
 assertEquals('\r', br.lookAhead()); ref {br} [73-73],
 assertEquals(2, br.getCurrentLineNumber()); ref {br} [74-74],
 assertEquals('2', br.getLastChar()); ref {br} [75-75],
 assertEquals('\r', br.read()); ref {br} [76-76],
 assertEquals('\r', br.getLastChar()); ref {br} [77-77],
 assertEquals(2, br.getCurrentLineNumber()); ref {br} [78-78],
 assertEquals('3', br.lookAhead()); ref {br} [80-80],
 assertEquals('\r', br.getLastChar()); ref {br} [81-81],
 // Start line 3
assertEquals('3', br.read()); ref {br} [82-82],
 assertEquals('3', br.getLastChar()); ref {br} [83-83],
 assertEquals(3, br.getCurrentLineNumber()); ref {br} [84-84],
 assertEquals('\n', br.lookAhead()); ref {br} [86-86],
 assertEquals(3, br.getCurrentLineNumber()); ref {br} [87-87],
 assertEquals('3', br.getLastChar()); ref {br} [88-88],
 assertEquals('\n', br.read()); ref {br} [89-89],
 assertEquals(3, br.getCurrentLineNumber()); ref {br} [90-90],
 assertEquals('\n', br.getLastChar()); ref {br} [91-91],
 assertEquals(3, br.getCurrentLineNumber()); ref {br} [92-92],
 assertEquals(END_OF_STREAM, br.lookAhead()); ref {br, END_OF_STREAM} [94-94],
 assertEquals('\n', br.getLastChar()); ref {br} [95-95],
 assertEquals(END_OF_STREAM, br.read()); ref {br, END_OF_STREAM} [96-96],
 assertEquals(END_OF_STREAM, br.getLastChar()); ref {br, END_OF_STREAM} [97-97],
 assertEquals(END_OF_STREAM, br.read()); ref {br, END_OF_STREAM} [98-98],
 assertEquals(END_OF_STREAM, br.lookAhead()); ref {br, END_OF_STREAM} [99-99],
 assertEquals(3, br.getCurrentLineNumber()); ref {br} [100-100]
[m[m24.08.2022 - 00:24:27.976 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.ExtendedBufferedReaderTest::testReadLookahead2 has 7 assertions: 
 assertEquals(3, br.read(res, 0, 3)); ref {br, res} [114-114],
 assertArrayEquals(ref, res); ref {res, ref} [115-115],
 assertEquals('c', br.getLastChar()); ref {br} [116-116],
 assertEquals('d', br.lookAhead()); ref {br} [118-118],
 assertEquals(1, br.read(res, 4, 1)); ref {br, res} [120-120],
 assertArrayEquals(ref, res); ref {res, ref} [121-121],
 assertEquals('d', br.getLastChar()); ref {br} [122-122]
[m[m24.08.2022 - 00:24:27.977 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.ExtendedBufferedReaderTest::testReadLine has 29 assertions: 
 assertNull(br.readLine()); ref {br} [129-129],
 assertEquals("", br.readLine()); ref {br} [132-132],
 assertNull(br.readLine()); ref {br} [133-133],
 assertEquals(0, br.getCurrentLineNumber()); ref {br} [136-136],
 assertEquals("foo", br.readLine()); ref {br} [137-137],
 assertEquals(1, br.getCurrentLineNumber()); ref {br} [138-138],
 assertEquals("", br.readLine()); ref {br} [139-139],
 assertEquals(2, br.getCurrentLineNumber()); ref {br} [140-140],
 assertEquals("hello", br.readLine()); ref {br} [141-141],
 assertEquals(3, br.getCurrentLineNumber()); ref {br} [142-142],
 assertNull(br.readLine()); ref {br} [143-143],
 assertEquals(3, br.getCurrentLineNumber()); ref {br} [144-144],
 assertEquals('f', br.read()); ref {br} [147-147],
 assertEquals('o', br.lookAhead()); ref {br} [148-148],
 assertEquals("oo", br.readLine()); ref {br} [149-149],
 assertEquals(1, br.getCurrentLineNumber()); ref {br} [150-150],
 assertEquals('\n', br.lookAhead()); ref {br} [151-151],
 assertEquals("", br.readLine()); ref {br} [152-152],
 assertEquals(2, br.getCurrentLineNumber()); ref {br} [153-153],
 assertEquals('h', br.lookAhead()); ref {br} [154-154],
 assertEquals("hello", br.readLine()); ref {br} [155-155],
 assertNull(br.readLine()); ref {br} [156-156],
 assertEquals(3, br.getCurrentLineNumber()); ref {br} [157-157],
 assertEquals("foo", br.readLine()); ref {br} [160-160],
 assertEquals('b', br.lookAhead()); ref {br} [161-161],
 assertEquals("baar", br.readLine()); ref {br} [162-162],
 assertEquals('f', br.lookAhead()); ref {br} [163-163],
 assertEquals("foo", br.readLine()); ref {br} [164-164],
 assertNull(br.readLine()); ref {br} [165-165]
[m[m24.08.2022 - 00:24:27.978 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.ExtendedBufferedReaderTest::testReadChar has 6 assertions: 
 assertEquals(0, br.getCurrentLineNumber()); ref {br} [184-184],
 assertEquals(EOLeolct, br.getCurrentLineNumber()); ref {EOLeolct, br} [188-188],
 assertEquals(0, br.getCurrentLineNumber()); ref {br} [191-191],
 assertEquals(EOLeolct, br.getCurrentLineNumber()); ref {EOLeolct, br} [195-195],
 assertEquals(0, br.getCurrentLineNumber()); ref {br} [198-198],
 assertEquals(EOLeolct, br.getCurrentLineNumber()); ref {EOLeolct, br} [203-203]
[m[m24.08.2022 - 00:24:27.979 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m24.08.2022 - 00:24:27.979 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.issues.JiraCsv198Test::test has 2 assertions: 
 Assert.assertNotNull(pointsOfReference); ref {Assert, pointsOfReference} [37-37],
 Assert.assertNotNull(locationType); ref {Assert, locationType} [42-42]
[m[m24.08.2022 - 00:24:27.980 [INFO ] ParsingStrategy.parseTestSuite() - Found 12 test cases
[m[m24.08.2022 - 00:24:27.980 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFileParserTestUnParameterized::testCSVFile0 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.980 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFileParserTestUnParameterized::testCSVUrl0 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.980 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFileParserTestUnParameterized::testCSVFile1 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.981 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFileParserTestUnParameterized::testCSVUrl1 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.981 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFileParserTestUnParameterized::testCSVFile2 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.981 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFileParserTestUnParameterized::testCSVUrl2 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.981 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFileParserTestUnParameterized::testCSVFile3 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.981 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFileParserTestUnParameterized::testCSVUrl3 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.981 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFileParserTestUnParameterized::testCSVFile4 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.981 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFileParserTestUnParameterized::testCSVUrl4 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.982 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFileParserTestUnParameterized::testCSVFile5 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:27.982 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFileParserTestUnParameterized::testCSVUrl5 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.065 [INFO ] ParsingStrategy.parseTestSuite() - Found 56 test cases
[m[m24.08.2022 - 00:24:28.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testDelimiterSameAsCommentStartThrowsException has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testDelimiterSameAsEscapeThrowsException has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testDuplicateHeaderElements has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEquals has 7 assertions: 
 assertFalse(right.equals(null)); ref {right} [84-84],
 assertFalse(right.equals("A String Instance")); ref {right} [85-85],
 assertEquals(right, right); ref {right} [87-87],
 assertEquals(right, left); ref {left, right} [88-88],
 assertEquals(left, right); ref {left, right} [89-89],
 assertEquals(right.hashCode(), right.hashCode()); ref {right} [91-91],
 assertEquals(right.hashCode(), left.hashCode()); ref {left, right} [92-92]
[m[m24.08.2022 - 00:24:28.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsCommentStart has 1 assertions: 
 assertNotEquals(right, left); ref {left, right} [104-104]
[m[m24.08.2022 - 00:24:28.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsDelimiter has 1 assertions: 
 assertNotEquals(right, left); ref {left, right} [112-112]
[m[m24.08.2022 - 00:24:28.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsEscape has 1 assertions: 
 assertNotEquals(right, left); ref {left, right} [125-125]
[m[m24.08.2022 - 00:24:28.068 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsHeader has 1 assertions: 
 assertNotEquals(right, left); ref {left, right} [142-142]
[m[m24.08.2022 - 00:24:28.068 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsIgnoreEmptyLines has 1 assertions: 
 assertNotEquals(right, left); ref {left, right} [157-157]
[m[m24.08.2022 - 00:24:28.068 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsIgnoreSurroundingSpaces has 1 assertions: 
 assertNotEquals(right, left); ref {left, right} [171-171]
[m[m24.08.2022 - 00:24:28.068 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsLeftNoQuoteRightQuote has 1 assertions: 
 assertNotEquals(left, right); ref {left, right} [179-179]
[m[m24.08.2022 - 00:24:28.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsNoQuotes has 1 assertions: 
 assertEquals(left, right); ref {left, right} [187-187]
[m[m24.08.2022 - 00:24:28.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsNullString has 1 assertions: 
 assertNotEquals(right, left); ref {left, right} [204-204]
[m[m24.08.2022 - 00:24:28.071 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsOne has 79 assertions: 
 assertEquals('\\', (char) cSVFormatOne.getEscapeCharacter()); ref {cSVFormatOne} [214-214],
 assertNull(cSVFormatOne.getQuoteMode()); ref {cSVFormatOne} [215-215],
 assertTrue(cSVFormatOne.getIgnoreEmptyLines()); ref {cSVFormatOne} [217-217],
 assertFalse(cSVFormatOne.getSkipHeaderRecord()); ref {cSVFormatOne} [218-218],
 assertFalse(cSVFormatOne.getIgnoreHeaderCase()); ref {cSVFormatOne} [220-220],
 assertNull(cSVFormatOne.getCommentMarker()); ref {cSVFormatOne} [221-221],
 assertFalse(cSVFormatOne.isCommentMarkerSet()); ref {cSVFormatOne} [223-223],
 assertTrue(cSVFormatOne.isQuoteCharacterSet()); ref {cSVFormatOne} [224-224],
 assertEquals('|', cSVFormatOne.getDelimiter()); ref {cSVFormatOne} [226-226],
 assertFalse(cSVFormatOne.getAllowMissingColumnNames()); ref {cSVFormatOne} [227-227],
 assertTrue(cSVFormatOne.isEscapeCharacterSet()); ref {cSVFormatOne} [229-229],
 assertEquals("\n", cSVFormatOne.getRecordSeparator()); ref {cSVFormatOne} [230-230],
 assertEquals('\"', (char) cSVFormatOne.getQuoteCharacter()); ref {cSVFormatOne} [232-232],
 assertFalse(cSVFormatOne.getTrailingDelimiter()); ref {cSVFormatOne} [233-233],
 assertFalse(cSVFormatOne.getTrim()); ref {cSVFormatOne} [235-235],
 assertFalse(cSVFormatOne.isNullStringSet()); ref {cSVFormatOne} [236-236],
 assertNull(cSVFormatOne.getNullString()); ref {cSVFormatOne} [238-238],
 assertFalse(cSVFormatOne.getIgnoreSurroundingSpaces()); ref {cSVFormatOne} [239-239],
 assertTrue(cSVFormatTwo.isEscapeCharacterSet()); ref {cSVFormatTwo} [242-242],
 assertNull(cSVFormatTwo.getQuoteCharacter()); ref {cSVFormatTwo} [243-243],
 assertFalse(cSVFormatTwo.getAllowMissingColumnNames()); ref {cSVFormatTwo} [245-245],
 assertEquals(QuoteMode.ALL_NON_NULL, cSVFormatTwo.getQuoteMode()); ref {QuoteMode.ALL_NON_NULL, QuoteMode, cSVFormatTwo} [246-246],
 assertEquals('\t', cSVFormatTwo.getDelimiter()); ref {cSVFormatTwo} [248-248],
 assertEquals("\n", cSVFormatTwo.getRecordSeparator()); ref {cSVFormatTwo} [249-249],
 assertFalse(cSVFormatTwo.isQuoteCharacterSet()); ref {cSVFormatTwo} [251-251],
 assertTrue(cSVFormatTwo.isNullStringSet()); ref {cSVFormatTwo} [252-252],
 assertEquals('\\', (char) cSVFormatTwo.getEscapeCharacter()); ref {cSVFormatTwo} [254-254],
 assertFalse(cSVFormatTwo.getIgnoreHeaderCase()); ref {cSVFormatTwo} [255-255],
 assertFalse(cSVFormatTwo.getTrim()); ref {cSVFormatTwo} [257-257],
 assertFalse(cSVFormatTwo.getIgnoreEmptyLines()); ref {cSVFormatTwo} [258-258],
 assertEquals("\\N", cSVFormatTwo.getNullString()); ref {cSVFormatTwo} [260-260],
 assertFalse(cSVFormatTwo.getIgnoreSurroundingSpaces()); ref {cSVFormatTwo} [261-261],
 assertFalse(cSVFormatTwo.getTrailingDelimiter()); ref {cSVFormatTwo} [263-263],
 assertFalse(cSVFormatTwo.getSkipHeaderRecord()); ref {cSVFormatTwo} [264-264],
 assertNull(cSVFormatTwo.getCommentMarker()); ref {cSVFormatTwo} [266-266],
 assertFalse(cSVFormatTwo.isCommentMarkerSet()); ref {cSVFormatTwo} [267-267],
 assertNotSame(cSVFormatTwo, cSVFormatOne); ref {cSVFormatOne, cSVFormatTwo} [269-269],
 assertFalse(cSVFormatTwo.equals(cSVFormatOne)); ref {cSVFormatOne, cSVFormatTwo} [270-270],
 assertEquals('\\', (char) cSVFormatOne.getEscapeCharacter()); ref {cSVFormatOne} [272-272],
 assertNull(cSVFormatOne.getQuoteMode()); ref {cSVFormatOne} [273-273],
 assertTrue(cSVFormatOne.getIgnoreEmptyLines()); ref {cSVFormatOne} [275-275],
 assertFalse(cSVFormatOne.getSkipHeaderRecord()); ref {cSVFormatOne} [276-276],
 assertFalse(cSVFormatOne.getIgnoreHeaderCase()); ref {cSVFormatOne} [278-278],
 assertNull(cSVFormatOne.getCommentMarker()); ref {cSVFormatOne} [279-279],
 assertFalse(cSVFormatOne.isCommentMarkerSet()); ref {cSVFormatOne} [281-281],
 assertTrue(cSVFormatOne.isQuoteCharacterSet()); ref {cSVFormatOne} [282-282],
 assertEquals('|', cSVFormatOne.getDelimiter()); ref {cSVFormatOne} [284-284],
 assertFalse(cSVFormatOne.getAllowMissingColumnNames()); ref {cSVFormatOne} [285-285],
 assertTrue(cSVFormatOne.isEscapeCharacterSet()); ref {cSVFormatOne} [287-287],
 assertEquals("\n", cSVFormatOne.getRecordSeparator()); ref {cSVFormatOne} [288-288],
 assertEquals('\"', (char) cSVFormatOne.getQuoteCharacter()); ref {cSVFormatOne} [290-290],
 assertFalse(cSVFormatOne.getTrailingDelimiter()); ref {cSVFormatOne} [291-291],
 assertFalse(cSVFormatOne.getTrim()); ref {cSVFormatOne} [293-293],
 assertFalse(cSVFormatOne.isNullStringSet()); ref {cSVFormatOne} [294-294],
 assertNull(cSVFormatOne.getNullString()); ref {cSVFormatOne} [296-296],
 assertFalse(cSVFormatOne.getIgnoreSurroundingSpaces()); ref {cSVFormatOne} [297-297],
 assertTrue(cSVFormatTwo.isEscapeCharacterSet()); ref {cSVFormatTwo} [299-299],
 assertNull(cSVFormatTwo.getQuoteCharacter()); ref {cSVFormatTwo} [300-300],
 assertFalse(cSVFormatTwo.getAllowMissingColumnNames()); ref {cSVFormatTwo} [302-302],
 assertEquals(QuoteMode.ALL_NON_NULL, cSVFormatTwo.getQuoteMode()); ref {QuoteMode.ALL_NON_NULL, QuoteMode, cSVFormatTwo} [303-303],
 assertEquals('\t', cSVFormatTwo.getDelimiter()); ref {cSVFormatTwo} [305-305],
 assertEquals("\n", cSVFormatTwo.getRecordSeparator()); ref {cSVFormatTwo} [306-306],
 assertFalse(cSVFormatTwo.isQuoteCharacterSet()); ref {cSVFormatTwo} [308-308],
 assertTrue(cSVFormatTwo.isNullStringSet()); ref {cSVFormatTwo} [309-309],
 assertEquals('\\', (char) cSVFormatTwo.getEscapeCharacter()); ref {cSVFormatTwo} [311-311],
 assertFalse(cSVFormatTwo.getIgnoreHeaderCase()); ref {cSVFormatTwo} [312-312],
 assertFalse(cSVFormatTwo.getTrim()); ref {cSVFormatTwo} [314-314],
 assertFalse(cSVFormatTwo.getIgnoreEmptyLines()); ref {cSVFormatTwo} [315-315],
 assertEquals("\\N", cSVFormatTwo.getNullString()); ref {cSVFormatTwo} [317-317],
 assertFalse(cSVFormatTwo.getIgnoreSurroundingSpaces()); ref {cSVFormatTwo} [318-318],
 assertFalse(cSVFormatTwo.getTrailingDelimiter()); ref {cSVFormatTwo} [320-320],
 assertFalse(cSVFormatTwo.getSkipHeaderRecord()); ref {cSVFormatTwo} [321-321],
 assertNull(cSVFormatTwo.getCommentMarker()); ref {cSVFormatTwo} [323-323],
 assertFalse(cSVFormatTwo.isCommentMarkerSet()); ref {cSVFormatTwo} [324-324],
 assertNotSame(cSVFormatOne, cSVFormatTwo); ref {cSVFormatOne, cSVFormatTwo} [326-326],
 assertNotSame(cSVFormatTwo, cSVFormatOne); ref {cSVFormatOne, cSVFormatTwo} [327-327],
 assertFalse(cSVFormatOne.equals(cSVFormatTwo)); ref {cSVFormatOne, cSVFormatTwo} [329-329],
 assertFalse(cSVFormatTwo.equals(cSVFormatOne)); ref {cSVFormatOne, cSVFormatTwo} [330-330],
 assertFalse(cSVFormatTwo.equals(cSVFormatOne)); ref {cSVFormatOne, cSVFormatTwo} [332-332]
[m[m24.08.2022 - 00:24:28.071 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsQuoteChar has 1 assertions: 
 assertNotEquals(right, left); ref {left, right} [341-341]
[m[m24.08.2022 - 00:24:28.072 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsQuotePolicy has 1 assertions: 
 assertNotEquals(right, left); ref {left, right} [352-352]
[m[m24.08.2022 - 00:24:28.072 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsRecordSeparator has 1 assertions: 
 assertNotEquals(right, left); ref {left, right} [368-368]
[m[m24.08.2022 - 00:24:28.072 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsSkipHeaderRecord has 1 assertions: 
 assertNotEquals(right, left); ref {left, right} [386-386]
[m[m24.08.2022 - 00:24:28.073 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEqualsWithNull has 37 assertions: 
 assertEquals('\\', (char) cSVFormat.getEscapeCharacter()); ref {cSVFormat} [394-394],
 assertFalse(cSVFormat.getIgnoreSurroundingSpaces()); ref {cSVFormat} [395-395],
 assertFalse(cSVFormat.getTrailingDelimiter()); ref {cSVFormat} [397-397],
 assertFalse(cSVFormat.getTrim()); ref {cSVFormat} [398-398],
 assertTrue(cSVFormat.isQuoteCharacterSet()); ref {cSVFormat} [400-400],
 assertEquals("\\N", cSVFormat.getNullString()); ref {cSVFormat} [401-401],
 assertFalse(cSVFormat.getIgnoreHeaderCase()); ref {cSVFormat} [403-403],
 assertTrue(cSVFormat.isEscapeCharacterSet()); ref {cSVFormat} [404-404],
 assertFalse(cSVFormat.isCommentMarkerSet()); ref {cSVFormat} [406-406],
 assertNull(cSVFormat.getCommentMarker()); ref {cSVFormat} [407-407],
 assertFalse(cSVFormat.getAllowMissingColumnNames()); ref {cSVFormat} [409-409],
 assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat.getQuoteMode()); ref {QuoteMode.ALL_NON_NULL, QuoteMode, cSVFormat} [410-410],
 assertEquals('\t', cSVFormat.getDelimiter()); ref {cSVFormat} [412-412],
 assertFalse(cSVFormat.getSkipHeaderRecord()); ref {cSVFormat} [413-413],
 assertEquals("\n", cSVFormat.getRecordSeparator()); ref {cSVFormat} [415-415],
 assertFalse(cSVFormat.getIgnoreEmptyLines()); ref {cSVFormat} [416-416],
 assertEquals('\"', (char) cSVFormat.getQuoteCharacter()); ref {cSVFormat} [418-418],
 assertTrue(cSVFormat.isNullStringSet()); ref {cSVFormat} [419-419],
 assertEquals('\\', (char) cSVFormat.getEscapeCharacter()); ref {cSVFormat} [421-421],
 assertFalse(cSVFormat.getIgnoreSurroundingSpaces()); ref {cSVFormat} [422-422],
 assertFalse(cSVFormat.getTrailingDelimiter()); ref {cSVFormat} [424-424],
 assertFalse(cSVFormat.getTrim()); ref {cSVFormat} [425-425],
 assertTrue(cSVFormat.isQuoteCharacterSet()); ref {cSVFormat} [427-427],
 assertEquals("\\N", cSVFormat.getNullString()); ref {cSVFormat} [428-428],
 assertFalse(cSVFormat.getIgnoreHeaderCase()); ref {cSVFormat} [430-430],
 assertTrue(cSVFormat.isEscapeCharacterSet()); ref {cSVFormat} [431-431],
 assertFalse(cSVFormat.isCommentMarkerSet()); ref {cSVFormat} [433-433],
 assertNull(cSVFormat.getCommentMarker()); ref {cSVFormat} [434-434],
 assertFalse(cSVFormat.getAllowMissingColumnNames()); ref {cSVFormat} [436-436],
 assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat.getQuoteMode()); ref {QuoteMode.ALL_NON_NULL, QuoteMode, cSVFormat} [437-437],
 assertEquals('\t', cSVFormat.getDelimiter()); ref {cSVFormat} [439-439],
 assertFalse(cSVFormat.getSkipHeaderRecord()); ref {cSVFormat} [440-440],
 assertEquals("\n", cSVFormat.getRecordSeparator()); ref {cSVFormat} [442-442],
 assertFalse(cSVFormat.getIgnoreEmptyLines()); ref {cSVFormat} [443-443],
 assertEquals('\"', (char) cSVFormat.getQuoteCharacter()); ref {cSVFormat} [445-445],
 assertTrue(cSVFormat.isNullStringSet()); ref {cSVFormat} [446-446],
 assertFalse(cSVFormat.equals(null)); ref {cSVFormat} [448-448]
[m[m24.08.2022 - 00:24:28.073 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEscapeSameAsCommentStartThrowsException has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.073 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testEscapeSameAsCommentStartThrowsExceptionForWrapperType has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.074 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testFormat has 3 assertions: 
 assertEquals("", format.format()); ref {format} [467-467],
 assertEquals("a,b,c", format.format("a", "b", "c")); ref {format} [468-468],
 assertEquals("\"x,y\",z", format.format("x,y", "z")); ref {format} [469-469]
[m[m24.08.2022 - 00:24:28.074 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testFormatThrowsNullPointerException has 1 assertions: 
 assertEquals(CSVFormat.class.getName(), e.getStackTrace()[0].getClassName()); ref {e} [481-481]
[m[m24.08.2022 - 00:24:28.074 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testGetHeader has 2 assertions: 
 assertFalse(Arrays.equals(formatWithHeader.getHeader(), headerCopy)); ref {headerCopy, formatWithHeader, Arrays} [495-495],
 assertNotSame(formatWithHeader.getHeader(), headerCopy); ref {headerCopy, formatWithHeader} [496-496]
[m[m24.08.2022 - 00:24:28.074 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testHashCodeAndWithIgnoreHeaderCase has 5 assertions: 
 assertTrue(cSVFormatTwo.getIgnoreHeaderCase()); ref {cSVFormatTwo} [506-506],
 assertFalse(cSVFormatTwo.getTrailingDelimiter()); ref {cSVFormatTwo} [507-507],
 assertTrue(cSVFormatTwo.equals(cSVFormat)); ref {cSVFormat, cSVFormatTwo} [509-509],
 assertFalse(cSVFormatTwo.getAllowMissingColumnNames()); ref {cSVFormatTwo} [510-510],
 assertFalse(cSVFormatTwo.getTrim()); ref {cSVFormatTwo} [512-512]
[m[m24.08.2022 - 00:24:28.075 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testNewFormat has 36 assertions: 
 assertFalse(cSVFormat.getSkipHeaderRecord()); ref {cSVFormat} [521-521],
 assertFalse(cSVFormat.isEscapeCharacterSet()); ref {cSVFormat} [522-522],
 assertNull(cSVFormat.getRecordSeparator()); ref {cSVFormat} [524-524],
 assertNull(cSVFormat.getQuoteMode()); ref {cSVFormat} [525-525],
 assertNull(cSVFormat.getCommentMarker()); ref {cSVFormat} [527-527],
 assertFalse(cSVFormat.getIgnoreHeaderCase()); ref {cSVFormat} [528-528],
 assertFalse(cSVFormat.getAllowMissingColumnNames()); ref {cSVFormat} [530-530],
 assertFalse(cSVFormat.getTrim()); ref {cSVFormat} [531-531],
 assertFalse(cSVFormat.isNullStringSet()); ref {cSVFormat} [533-533],
 assertNull(cSVFormat.getEscapeCharacter()); ref {cSVFormat} [534-534],
 assertFalse(cSVFormat.getIgnoreSurroundingSpaces()); ref {cSVFormat} [536-536],
 assertFalse(cSVFormat.getTrailingDelimiter()); ref {cSVFormat} [537-537],
 assertEquals('X', cSVFormat.getDelimiter()); ref {cSVFormat} [539-539],
 assertNull(cSVFormat.getNullString()); ref {cSVFormat} [540-540],
 assertFalse(cSVFormat.isQuoteCharacterSet()); ref {cSVFormat} [542-542],
 assertFalse(cSVFormat.isCommentMarkerSet()); ref {cSVFormat} [543-543],
 assertNull(cSVFormat.getQuoteCharacter()); ref {cSVFormat} [545-545],
 assertFalse(cSVFormat.getIgnoreEmptyLines()); ref {cSVFormat} [546-546],
 assertFalse(cSVFormat.getSkipHeaderRecord()); ref {cSVFormat} [548-548],
 assertFalse(cSVFormat.isEscapeCharacterSet()); ref {cSVFormat} [549-549],
 assertNull(cSVFormat.getRecordSeparator()); ref {cSVFormat} [551-551],
 assertNull(cSVFormat.getQuoteMode()); ref {cSVFormat} [552-552],
 assertNull(cSVFormat.getCommentMarker()); ref {cSVFormat} [554-554],
 assertFalse(cSVFormat.getIgnoreHeaderCase()); ref {cSVFormat} [555-555],
 assertFalse(cSVFormat.getAllowMissingColumnNames()); ref {cSVFormat} [557-557],
 assertFalse(cSVFormat.getTrim()); ref {cSVFormat} [558-558],
 assertFalse(cSVFormat.isNullStringSet()); ref {cSVFormat} [560-560],
 assertNull(cSVFormat.getEscapeCharacter()); ref {cSVFormat} [561-561],
 assertFalse(cSVFormat.getIgnoreSurroundingSpaces()); ref {cSVFormat} [563-563],
 assertFalse(cSVFormat.getTrailingDelimiter()); ref {cSVFormat} [564-564],
 assertEquals('X', cSVFormat.getDelimiter()); ref {cSVFormat} [566-566],
 assertNull(cSVFormat.getNullString()); ref {cSVFormat} [567-567],
 assertFalse(cSVFormat.isQuoteCharacterSet()); ref {cSVFormat} [569-569],
 assertFalse(cSVFormat.isCommentMarkerSet()); ref {cSVFormat} [570-570],
 assertNull(cSVFormat.getQuoteCharacter()); ref {cSVFormat} [572-572],
 assertFalse(cSVFormat.getIgnoreEmptyLines()); ref {cSVFormat} [573-573]
[m[m24.08.2022 - 00:24:28.075 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testNullRecordSeparatorCsv106 has 2 assertions: 
 assertNotNull(formatStr); ref {formatStr} [581-581],
 assertFalse(formatStr.endsWith("null")); ref {formatStr} [582-582]
[m[m24.08.2022 - 00:24:28.075 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testQuoteCharSameAsCommentStartThrowsException has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.075 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.076 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testQuoteCharSameAsDelimiterThrowsException has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.076 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testQuotePolicyNoneWithoutEscapeThrowsException has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.076 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testRFC4180 has 7 assertions: 
 assertEquals(null, RFC4180.getCommentMarker()); ref {RFC4180} [608-608],
 assertEquals(',', RFC4180.getDelimiter()); ref {RFC4180} [609-609],
 assertEquals(null, RFC4180.getEscapeCharacter()); ref {RFC4180} [610-610],
 assertFalse(RFC4180.getIgnoreEmptyLines()); ref {RFC4180} [611-611],
 assertEquals(Character.valueOf('"'), RFC4180.getQuoteCharacter()); ref {Character, RFC4180} [612-612],
 assertEquals(null, RFC4180.getQuoteMode()); ref {RFC4180} [613-613],
 assertEquals("\r\n", RFC4180.getRecordSeparator()); ref {RFC4180} [614-614]
[m[m24.08.2022 - 00:24:28.076 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testSerialization has 8 assertions: 
 assertNotNull(format); ref {format} [630-630],
 assertEquals("delimiter", CSVFormat.DEFAULT.getDelimiter(), format.getDelimiter()); ref {CSVFormat.DEFAULT, format, CSVFormat} [631-631],
 assertEquals("encapsulator", CSVFormat.DEFAULT.getQuoteCharacter(), format.getQuoteCharacter()); ref {CSVFormat.DEFAULT, format, CSVFormat} [632-632],
 assertEquals("comment start", CSVFormat.DEFAULT.getCommentMarker(), format.getCommentMarker()); ref {CSVFormat.DEFAULT, format, CSVFormat} [633-633],
 assertEquals("record separator", CSVFormat.DEFAULT.getRecordSeparator(), format.getRecordSeparator()); ref {CSVFormat.DEFAULT, format, CSVFormat} [634-634],
 assertEquals("escape", CSVFormat.DEFAULT.getEscapeCharacter(), format.getEscapeCharacter()); ref {CSVFormat.DEFAULT, format, CSVFormat} [635-635],
 assertEquals("trim", CSVFormat.DEFAULT.getIgnoreSurroundingSpaces(), format.getIgnoreSurroundingSpaces()); ref {CSVFormat.DEFAULT, format, CSVFormat} [636-636],
 assertEquals("empty lines", CSVFormat.DEFAULT.getIgnoreEmptyLines(), format.getIgnoreEmptyLines()); ref {CSVFormat.DEFAULT, format, CSVFormat} [637-637]
[m[m24.08.2022 - 00:24:28.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testToString has 1 assertions: 
 assertEquals("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", string); ref {string} [645-645]
[m[m24.08.2022 - 00:24:28.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testToStringAndWithCommentMarkerTakingCharacter has 98 assertions: 
 assertNull(cSVFormat.getEscapeCharacter()); ref {cSVFormat} [655-655],
 assertTrue(cSVFormat.isQuoteCharacterSet()); ref {cSVFormat} [656-656],
 assertFalse(cSVFormat.getTrim()); ref {cSVFormat} [658-658],
 assertFalse(cSVFormat.getIgnoreSurroundingSpaces()); ref {cSVFormat} [659-659],
 assertFalse(cSVFormat.getTrailingDelimiter()); ref {cSVFormat} [661-661],
 assertEquals(',', cSVFormat.getDelimiter()); ref {cSVFormat} [662-662],
 assertFalse(cSVFormat.getIgnoreHeaderCase()); ref {cSVFormat} [664-664],
 assertEquals("\r\n", cSVFormat.getRecordSeparator()); ref {cSVFormat} [665-665],
 assertFalse(cSVFormat.isCommentMarkerSet()); ref {cSVFormat} [667-667],
 assertNull(cSVFormat.getCommentMarker()); ref {cSVFormat} [668-668],
 assertFalse(cSVFormat.isNullStringSet()); ref {cSVFormat} [670-670],
 assertFalse(cSVFormat.getAllowMissingColumnNames()); ref {cSVFormat} [671-671],
 assertFalse(cSVFormat.isEscapeCharacterSet()); ref {cSVFormat} [673-673],
 assertFalse(cSVFormat.getSkipHeaderRecord()); ref {cSVFormat} [674-674],
 assertNull(cSVFormat.getNullString()); ref {cSVFormat} [676-676],
 assertNull(cSVFormat.getQuoteMode()); ref {cSVFormat} [677-677],
 assertTrue(cSVFormat.getIgnoreEmptyLines()); ref {cSVFormat} [679-679],
 assertEquals('\"', (char) cSVFormat.getQuoteCharacter()); ref {cSVFormat} [680-680],
 assertNull(cSVFormat.getEscapeCharacter()); ref {cSVFormat} [686-686],
 assertTrue(cSVFormat.isQuoteCharacterSet()); ref {cSVFormat} [687-687],
 assertFalse(cSVFormat.getTrim()); ref {cSVFormat} [689-689],
 assertFalse(cSVFormat.getIgnoreSurroundingSpaces()); ref {cSVFormat} [690-690],
 assertFalse(cSVFormat.getTrailingDelimiter()); ref {cSVFormat} [692-692],
 assertEquals(',', cSVFormat.getDelimiter()); ref {cSVFormat} [693-693],
 assertFalse(cSVFormat.getIgnoreHeaderCase()); ref {cSVFormat} [695-695],
 assertEquals("\r\n", cSVFormat.getRecordSeparator()); ref {cSVFormat} [696-696],
 assertFalse(cSVFormat.isCommentMarkerSet()); ref {cSVFormat} [698-698],
 assertNull(cSVFormat.getCommentMarker()); ref {cSVFormat} [699-699],
 assertFalse(cSVFormat.isNullStringSet()); ref {cSVFormat} [701-701],
 assertFalse(cSVFormat.getAllowMissingColumnNames()); ref {cSVFormat} [702-702],
 assertFalse(cSVFormat.isEscapeCharacterSet()); ref {cSVFormat} [704-704],
 assertFalse(cSVFormat.getSkipHeaderRecord()); ref {cSVFormat} [705-705],
 assertNull(cSVFormat.getNullString()); ref {cSVFormat} [707-707],
 assertNull(cSVFormat.getQuoteMode()); ref {cSVFormat} [708-708],
 assertTrue(cSVFormat.getIgnoreEmptyLines()); ref {cSVFormat} [710-710],
 assertEquals('\"', (char) cSVFormat.getQuoteCharacter()); ref {cSVFormat} [711-711],
 assertFalse(cSVFormatTwo.isNullStringSet()); ref {cSVFormatTwo} [713-713],
 assertFalse(cSVFormatTwo.getAllowMissingColumnNames()); ref {cSVFormatTwo} [714-714],
 assertEquals('\"', (char) cSVFormatTwo.getQuoteCharacter()); ref {cSVFormatTwo} [716-716],
 assertNull(cSVFormatTwo.getNullString()); ref {cSVFormatTwo} [717-717],
 assertEquals(',', cSVFormatTwo.getDelimiter()); ref {cSVFormatTwo} [719-719],
 assertFalse(cSVFormatTwo.getTrailingDelimiter()); ref {cSVFormatTwo} [720-720],
 assertTrue(cSVFormatTwo.isCommentMarkerSet()); ref {cSVFormatTwo} [722-722],
 assertFalse(cSVFormatTwo.getIgnoreHeaderCase()); ref {cSVFormatTwo} [723-723],
 assertFalse(cSVFormatTwo.getTrim()); ref {cSVFormatTwo} [725-725],
 assertNull(cSVFormatTwo.getEscapeCharacter()); ref {cSVFormatTwo} [726-726],
 assertTrue(cSVFormatTwo.isQuoteCharacterSet()); ref {cSVFormatTwo} [728-728],
 assertFalse(cSVFormatTwo.getIgnoreSurroundingSpaces()); ref {cSVFormatTwo} [729-729],
 assertEquals("\r\n", cSVFormatTwo.getRecordSeparator()); ref {cSVFormatTwo} [731-731],
 assertNull(cSVFormatTwo.getQuoteMode()); ref {cSVFormatTwo} [732-732],
 assertEquals('n', (char) cSVFormatTwo.getCommentMarker()); ref {cSVFormatTwo} [734-734],
 assertFalse(cSVFormatTwo.getSkipHeaderRecord()); ref {cSVFormatTwo} [735-735],
 assertFalse(cSVFormatTwo.isEscapeCharacterSet()); ref {cSVFormatTwo} [737-737],
 assertTrue(cSVFormatTwo.getIgnoreEmptyLines()); ref {cSVFormatTwo} [738-738],
 assertNotSame(cSVFormat, cSVFormatTwo); ref {cSVFormat, cSVFormatTwo} [740-740],
 assertNotSame(cSVFormatTwo, cSVFormat); ref {cSVFormat, cSVFormatTwo} [741-741],
 assertFalse(cSVFormatTwo.equals(cSVFormat)); ref {cSVFormat, cSVFormatTwo} [743-743],
 assertNull(cSVFormat.getEscapeCharacter()); ref {cSVFormat} [745-745],
 assertTrue(cSVFormat.isQuoteCharacterSet()); ref {cSVFormat} [746-746],
 assertFalse(cSVFormat.getTrim()); ref {cSVFormat} [748-748],
 assertFalse(cSVFormat.getIgnoreSurroundingSpaces()); ref {cSVFormat} [749-749],
 assertFalse(cSVFormat.getTrailingDelimiter()); ref {cSVFormat} [751-751],
 assertEquals(',', cSVFormat.getDelimiter()); ref {cSVFormat} [752-752],
 assertFalse(cSVFormat.getIgnoreHeaderCase()); ref {cSVFormat} [754-754],
 assertEquals("\r\n", cSVFormat.getRecordSeparator()); ref {cSVFormat} [755-755],
 assertFalse(cSVFormat.isCommentMarkerSet()); ref {cSVFormat} [757-757],
 assertNull(cSVFormat.getCommentMarker()); ref {cSVFormat} [758-758],
 assertFalse(cSVFormat.isNullStringSet()); ref {cSVFormat} [760-760],
 assertFalse(cSVFormat.getAllowMissingColumnNames()); ref {cSVFormat} [761-761],
 assertFalse(cSVFormat.isEscapeCharacterSet()); ref {cSVFormat} [763-763],
 assertFalse(cSVFormat.getSkipHeaderRecord()); ref {cSVFormat} [764-764],
 assertNull(cSVFormat.getNullString()); ref {cSVFormat} [766-766],
 assertNull(cSVFormat.getQuoteMode()); ref {cSVFormat} [767-767],
 assertTrue(cSVFormat.getIgnoreEmptyLines()); ref {cSVFormat} [769-769],
 assertEquals('\"', (char) cSVFormat.getQuoteCharacter()); ref {cSVFormat} [770-770],
 assertFalse(cSVFormatTwo.isNullStringSet()); ref {cSVFormatTwo} [772-772],
 assertFalse(cSVFormatTwo.getAllowMissingColumnNames()); ref {cSVFormatTwo} [773-773],
 assertEquals('\"', (char) cSVFormatTwo.getQuoteCharacter()); ref {cSVFormatTwo} [775-775],
 assertNull(cSVFormatTwo.getNullString()); ref {cSVFormatTwo} [776-776],
 assertEquals(',', cSVFormatTwo.getDelimiter()); ref {cSVFormatTwo} [778-778],
 assertFalse(cSVFormatTwo.getTrailingDelimiter()); ref {cSVFormatTwo} [779-779],
 assertTrue(cSVFormatTwo.isCommentMarkerSet()); ref {cSVFormatTwo} [781-781],
 assertFalse(cSVFormatTwo.getIgnoreHeaderCase()); ref {cSVFormatTwo} [782-782],
 assertFalse(cSVFormatTwo.getTrim()); ref {cSVFormatTwo} [784-784],
 assertNull(cSVFormatTwo.getEscapeCharacter()); ref {cSVFormatTwo} [785-785],
 assertTrue(cSVFormatTwo.isQuoteCharacterSet()); ref {cSVFormatTwo} [787-787],
 assertFalse(cSVFormatTwo.getIgnoreSurroundingSpaces()); ref {cSVFormatTwo} [788-788],
 assertEquals("\r\n", cSVFormatTwo.getRecordSeparator()); ref {cSVFormatTwo} [790-790],
 assertNull(cSVFormatTwo.getQuoteMode()); ref {cSVFormatTwo} [791-791],
 assertEquals('n', (char) cSVFormatTwo.getCommentMarker()); ref {cSVFormatTwo} [793-793],
 assertFalse(cSVFormatTwo.getSkipHeaderRecord()); ref {cSVFormatTwo} [794-794],
 assertFalse(cSVFormatTwo.isEscapeCharacterSet()); ref {cSVFormatTwo} [796-796],
 assertTrue(cSVFormatTwo.getIgnoreEmptyLines()); ref {cSVFormatTwo} [797-797],
 assertNotSame(cSVFormat, cSVFormatTwo); ref {cSVFormat, cSVFormatTwo} [799-799],
 assertNotSame(cSVFormatTwo, cSVFormat); ref {cSVFormat, cSVFormatTwo} [800-800],
 assertFalse(cSVFormat.equals(cSVFormatTwo)); ref {cSVFormat, cSVFormatTwo} [802-802],
 assertFalse(cSVFormatTwo.equals(cSVFormat)); ref {cSVFormat, cSVFormatTwo} [804-804],
 assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<n> " + "RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormatTwo.toString()); ref {cSVFormatTwo} [805-807]
[m[m24.08.2022 - 00:24:28.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithCommentStart has 1 assertions: 
 assertEquals(Character.valueOf('#'), formatWithCommentStart.getCommentMarker()); ref {formatWithCommentStart, Character} [814-814]
[m[m24.08.2022 - 00:24:28.079 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithCommentStartCRThrowsException has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.079 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithDelimiter has 1 assertions: 
 assertEquals('!', formatWithDelimiter.getDelimiter()); ref {formatWithDelimiter} [825-825]
[m[m24.08.2022 - 00:24:28.079 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithDelimiterLFThrowsException has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.079 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithEmptyEnum has 1 assertions: 
 Assert.assertTrue(formatWithHeader.getHeader().length == 0); ref {Assert, formatWithHeader, formatWithHeader.getHeader().length} [836-836]
[m[m24.08.2022 - 00:24:28.079 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithEscape has 1 assertions: 
 assertEquals(Character.valueOf('&'), formatWithEscape.getEscapeCharacter()); ref {Character, formatWithEscape} [842-842]
[m[m24.08.2022 - 00:24:28.079 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithEscapeCRThrowsExceptions has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.080 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithFirstRecordAsHeader has 2 assertions: 
 assertTrue(formatWithFirstRecordAsHeader.getSkipHeaderRecord()); ref {formatWithFirstRecordAsHeader} [853-853],
 assertTrue(formatWithFirstRecordAsHeader.getHeader().length == 0); ref {formatWithFirstRecordAsHeader.getHeader().length, formatWithFirstRecordAsHeader} [854-854]
[m[m24.08.2022 - 00:24:28.080 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithHeader has 2 assertions: 
 assertArrayEquals(header, formatWithHeader.getHeader()); ref {header, formatWithHeader} [862-862],
 assertNotSame(header, formatWithHeader.getHeader()); ref {header, formatWithHeader} [863-863]
[m[m24.08.2022 - 00:24:28.081 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithHeaderComments has 99 assertions: 
 assertEquals('\"', (char) cSVFormat.getQuoteCharacter()); ref {cSVFormat} [871-871],
 assertFalse(cSVFormat.isCommentMarkerSet()); ref {cSVFormat} [872-872],
 assertFalse(cSVFormat.isEscapeCharacterSet()); ref {cSVFormat} [874-874],
 assertTrue(cSVFormat.isQuoteCharacterSet()); ref {cSVFormat} [875-875],
 assertFalse(cSVFormat.getSkipHeaderRecord()); ref {cSVFormat} [877-877],
 assertNull(cSVFormat.getQuoteMode()); ref {cSVFormat} [878-878],
 assertEquals(',', cSVFormat.getDelimiter()); ref {cSVFormat} [880-880],
 assertTrue(cSVFormat.getIgnoreEmptyLines()); ref {cSVFormat} [881-881],
 assertFalse(cSVFormat.getIgnoreHeaderCase()); ref {cSVFormat} [883-883],
 assertNull(cSVFormat.getCommentMarker()); ref {cSVFormat} [884-884],
 assertEquals("\r\n", cSVFormat.getRecordSeparator()); ref {cSVFormat} [886-886],
 assertFalse(cSVFormat.getTrailingDelimiter()); ref {cSVFormat} [887-887],
 assertFalse(cSVFormat.getAllowMissingColumnNames()); ref {cSVFormat} [889-889],
 assertFalse(cSVFormat.getTrim()); ref {cSVFormat} [890-890],
 assertFalse(cSVFormat.isNullStringSet()); ref {cSVFormat} [892-892],
 assertNull(cSVFormat.getNullString()); ref {cSVFormat} [893-893],
 assertFalse(cSVFormat.getIgnoreSurroundingSpaces()); ref {cSVFormat} [895-895],
 assertNull(cSVFormat.getEscapeCharacter()); ref {cSVFormat} [896-896],
 assertEquals('\"', (char) cSVFormat.getQuoteCharacter()); ref {cSVFormat} [901-901],
 assertFalse(cSVFormat.isCommentMarkerSet()); ref {cSVFormat} [902-902],
 assertFalse(cSVFormat.isEscapeCharacterSet()); ref {cSVFormat} [904-904],
 assertTrue(cSVFormat.isQuoteCharacterSet()); ref {cSVFormat} [905-905],
 assertFalse(cSVFormat.getSkipHeaderRecord()); ref {cSVFormat} [907-907],
 assertNull(cSVFormat.getQuoteMode()); ref {cSVFormat} [908-908],
 assertEquals(',', cSVFormat.getDelimiter()); ref {cSVFormat} [910-910],
 assertTrue(cSVFormat.getIgnoreEmptyLines()); ref {cSVFormat} [911-911],
 assertFalse(cSVFormat.getIgnoreHeaderCase()); ref {cSVFormat} [913-913],
 assertNull(cSVFormat.getCommentMarker()); ref {cSVFormat} [914-914],
 assertEquals("\r\n", cSVFormat.getRecordSeparator()); ref {cSVFormat} [916-916],
 assertFalse(cSVFormat.getTrailingDelimiter()); ref {cSVFormat} [917-917],
 assertFalse(cSVFormat.getAllowMissingColumnNames()); ref {cSVFormat} [919-919],
 assertFalse(cSVFormat.getTrim()); ref {cSVFormat} [920-920],
 assertFalse(cSVFormat.isNullStringSet()); ref {cSVFormat} [922-922],
 assertNull(cSVFormat.getNullString()); ref {cSVFormat} [923-923],
 assertFalse(cSVFormat.getIgnoreSurroundingSpaces()); ref {cSVFormat} [925-925],
 assertNull(cSVFormat.getEscapeCharacter()); ref {cSVFormat} [926-926],
 assertFalse(cSVFormatTwo.getIgnoreHeaderCase()); ref {cSVFormatTwo} [928-928],
 assertNull(cSVFormatTwo.getQuoteMode()); ref {cSVFormatTwo} [929-929],
 assertTrue(cSVFormatTwo.getIgnoreEmptyLines()); ref {cSVFormatTwo} [931-931],
 assertFalse(cSVFormatTwo.getIgnoreSurroundingSpaces()); ref {cSVFormatTwo} [932-932],
 assertNull(cSVFormatTwo.getEscapeCharacter()); ref {cSVFormatTwo} [934-934],
 assertFalse(cSVFormatTwo.getTrim()); ref {cSVFormatTwo} [935-935],
 assertFalse(cSVFormatTwo.isEscapeCharacterSet()); ref {cSVFormatTwo} [937-937],
 assertTrue(cSVFormatTwo.isQuoteCharacterSet()); ref {cSVFormatTwo} [938-938],
 assertFalse(cSVFormatTwo.getSkipHeaderRecord()); ref {cSVFormatTwo} [940-940],
 assertEquals('\"', (char) cSVFormatTwo.getQuoteCharacter()); ref {cSVFormatTwo} [941-941],
 assertFalse(cSVFormatTwo.getAllowMissingColumnNames()); ref {cSVFormatTwo} [943-943],
 assertNull(cSVFormatTwo.getNullString()); ref {cSVFormatTwo} [944-944],
 assertFalse(cSVFormatTwo.isNullStringSet()); ref {cSVFormatTwo} [946-946],
 assertFalse(cSVFormatTwo.getTrailingDelimiter()); ref {cSVFormatTwo} [947-947],
 assertEquals("\r\n", cSVFormatTwo.getRecordSeparator()); ref {cSVFormatTwo} [949-949],
 assertEquals(',', cSVFormatTwo.getDelimiter()); ref {cSVFormatTwo} [950-950],
 assertNull(cSVFormatTwo.getCommentMarker()); ref {cSVFormatTwo} [952-952],
 assertFalse(cSVFormatTwo.isCommentMarkerSet()); ref {cSVFormatTwo} [953-953],
 assertNotSame(cSVFormat, cSVFormatTwo); ref {cSVFormat, cSVFormatTwo} [955-955],
 assertNotSame(cSVFormatTwo, cSVFormat); ref {cSVFormat, cSVFormatTwo} [956-956],
 assertTrue(cSVFormatTwo.equals(cSVFormat)); ref {cSVFormat, cSVFormatTwo} [958-958],
 assertEquals('\"', (char) cSVFormat.getQuoteCharacter()); ref {cSVFormat} [962-962],
 assertFalse(cSVFormat.isCommentMarkerSet()); ref {cSVFormat} [963-963],
 assertFalse(cSVFormat.isEscapeCharacterSet()); ref {cSVFormat} [965-965],
 assertTrue(cSVFormat.isQuoteCharacterSet()); ref {cSVFormat} [966-966],
 assertFalse(cSVFormat.getSkipHeaderRecord()); ref {cSVFormat} [968-968],
 assertNull(cSVFormat.getQuoteMode()); ref {cSVFormat} [969-969],
 assertEquals(',', cSVFormat.getDelimiter()); ref {cSVFormat} [971-971],
 assertTrue(cSVFormat.getIgnoreEmptyLines()); ref {cSVFormat} [972-972],
 assertFalse(cSVFormat.getIgnoreHeaderCase()); ref {cSVFormat} [974-974],
 assertNull(cSVFormat.getCommentMarker()); ref {cSVFormat} [975-975],
 assertEquals("\r\n", cSVFormat.getRecordSeparator()); ref {cSVFormat} [977-977],
 assertFalse(cSVFormat.getTrailingDelimiter()); ref {cSVFormat} [978-978],
 assertFalse(cSVFormat.getAllowMissingColumnNames()); ref {cSVFormat} [980-980],
 assertFalse(cSVFormat.getTrim()); ref {cSVFormat} [981-981],
 assertFalse(cSVFormat.isNullStringSet()); ref {cSVFormat} [983-983],
 assertNull(cSVFormat.getNullString()); ref {cSVFormat} [984-984],
 assertFalse(cSVFormat.getIgnoreSurroundingSpaces()); ref {cSVFormat} [986-986],
 assertNull(cSVFormat.getEscapeCharacter()); ref {cSVFormat} [987-987],
 assertFalse(cSVFormatTwo.getIgnoreHeaderCase()); ref {cSVFormatTwo} [989-989],
 assertNull(cSVFormatTwo.getQuoteMode()); ref {cSVFormatTwo} [990-990],
 assertTrue(cSVFormatTwo.getIgnoreEmptyLines()); ref {cSVFormatTwo} [992-992],
 assertFalse(cSVFormatTwo.getIgnoreSurroundingSpaces()); ref {cSVFormatTwo} [993-993],
 assertNull(cSVFormatTwo.getEscapeCharacter()); ref {cSVFormatTwo} [995-995],
 assertFalse(cSVFormatTwo.getTrim()); ref {cSVFormatTwo} [996-996],
 assertFalse(cSVFormatTwo.isEscapeCharacterSet()); ref {cSVFormatTwo} [998-998],
 assertTrue(cSVFormatTwo.isQuoteCharacterSet()); ref {cSVFormatTwo} [999-999],
 assertFalse(cSVFormatTwo.getSkipHeaderRecord()); ref {cSVFormatTwo} [1001-1001],
 assertEquals('\"', (char) cSVFormatTwo.getQuoteCharacter()); ref {cSVFormatTwo} [1002-1002],
 assertFalse(cSVFormatTwo.getAllowMissingColumnNames()); ref {cSVFormatTwo} [1004-1004],
 assertNull(cSVFormatTwo.getNullString()); ref {cSVFormatTwo} [1005-1005],
 assertFalse(cSVFormatTwo.isNullStringSet()); ref {cSVFormatTwo} [1007-1007],
 assertFalse(cSVFormatTwo.getTrailingDelimiter()); ref {cSVFormatTwo} [1008-1008],
 assertEquals("\r\n", cSVFormatTwo.getRecordSeparator()); ref {cSVFormatTwo} [1010-1010],
 assertEquals(',', cSVFormatTwo.getDelimiter()); ref {cSVFormatTwo} [1011-1011],
 assertNull(cSVFormatTwo.getCommentMarker()); ref {cSVFormatTwo} [1013-1013],
 assertFalse(cSVFormatTwo.isCommentMarkerSet()); ref {cSVFormatTwo} [1014-1014],
 assertNotSame(cSVFormat, cSVFormatTwo); ref {cSVFormat, cSVFormatTwo} [1016-1016],
 assertNotSame(cSVFormatTwo, cSVFormat); ref {cSVFormat, cSVFormatTwo} [1017-1017],
 assertNotNull(string); ref {string} [1019-1019],
 assertTrue(cSVFormat.equals(cSVFormatTwo)); ref {cSVFormat, cSVFormatTwo} [1020-1020],
 assertTrue(cSVFormatTwo.equals(cSVFormat)); ref {cSVFormat, cSVFormatTwo} [1022-1022],
 assertEquals(",,,,,,,", string); ref {string} [1023-1023]
[m[m24.08.2022 - 00:24:28.081 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithHeaderEnum has 1 assertions: 
 assertArrayEquals(new String[] { "Name", "Email", "Phone" }, formatWithHeader.getHeader()); ref {formatWithHeader} [1030-1030]
[m[m24.08.2022 - 00:24:28.082 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithIgnoreEmptyLines has 2 assertions: 
 assertFalse(CSVFormat.DEFAULT.withIgnoreEmptyLines(false).getIgnoreEmptyLines()); ref {CSVFormat.DEFAULT, CSVFormat} [1036-1036],
 assertTrue(CSVFormat.DEFAULT.withIgnoreEmptyLines().getIgnoreEmptyLines()); ref {CSVFormat.DEFAULT, CSVFormat} [1037-1037]
[m[m24.08.2022 - 00:24:28.082 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithIgnoreSurround has 2 assertions: 
 assertFalse(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(false).getIgnoreSurroundingSpaces()); ref {CSVFormat.DEFAULT, CSVFormat} [1043-1043],
 assertTrue(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces().getIgnoreSurroundingSpaces()); ref {CSVFormat.DEFAULT, CSVFormat} [1044-1044]
[m[m24.08.2022 - 00:24:28.082 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithNullString has 1 assertions: 
 assertEquals("null", formatWithNullString.getNullString()); ref {formatWithNullString} [1051-1051]
[m[m24.08.2022 - 00:24:28.082 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithQuoteChar has 1 assertions: 
 assertEquals(Character.valueOf('"'), formatWithQuoteChar.getQuoteCharacter()); ref {formatWithQuoteChar, Character} [1058-1058]
[m[m24.08.2022 - 00:24:28.082 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithQuoteLFThrowsException has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.082 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithQuotePolicy has 1 assertions: 
 assertEquals(QuoteMode.ALL, formatWithQuotePolicy.getQuoteMode()); ref {QuoteMode, QuoteMode.ALL, formatWithQuotePolicy} [1071-1071]
[m[m24.08.2022 - 00:24:28.083 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithRecordSeparatorCR has 1 assertions: 
 assertEquals(String.valueOf(CR), formatWithRecordSeparator.getRecordSeparator()); ref {formatWithRecordSeparator, String, CR} [1078-1078]
[m[m24.08.2022 - 00:24:28.083 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithRecordSeparatorCRLF has 1 assertions: 
 assertEquals(CRLF, formatWithRecordSeparator.getRecordSeparator()); ref {CRLF, formatWithRecordSeparator} [1084-1084]
[m[m24.08.2022 - 00:24:28.083 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithRecordSeparatorLF has 1 assertions: 
 assertEquals(String.valueOf(LF), formatWithRecordSeparator.getRecordSeparator()); ref {formatWithRecordSeparator, LF, String} [1090-1090]
[m[m24.08.2022 - 00:24:28.083 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVFormatTest::testWithSystemRecordSeparator has 1 assertions: 
 assertEquals(System.getProperty("line.separator"), formatWithRecordSeparator.getRecordSeparator()); ref {formatWithRecordSeparator, System} [1096-1096]
[m[m24.08.2022 - 00:24:28.085 [INFO ] ParsingStrategy.parseTestSuite() - Found 4 test cases
[m[m24.08.2022 - 00:24:28.086 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.TokenMatchersTest::testHasType has 4 assertions: 
 assertFalse(hasType(Token.Type.COMMENT).matches(token)); ref {Token.Type.COMMENT, Token.Type, Token, token} [43-43],
 assertFalse(hasType(Token.Type.EOF).matches(token)); ref {Token.Type, Token, Token.Type.EOF, token} [44-44],
 assertFalse(hasType(Token.Type.EORECORD).matches(token)); ref {Token.Type, Token, Token.Type.EORECORD, token} [45-45],
 assertTrue(hasType(Token.Type.TOKEN).matches(token)); ref {Token.Type, Token.Type.TOKEN, Token, token} [46-46]
[m[m24.08.2022 - 00:24:28.086 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.TokenMatchersTest::testHasContent has 2 assertions: 
 assertFalse(hasContent("This is not the token's content").matches(token)); ref {token} [51-51],
 assertTrue(hasContent("content").matches(token)); ref {token} [52-52]
[m[m24.08.2022 - 00:24:28.086 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.TokenMatchersTest::testIsReady has 2 assertions: 
 assertTrue(isReady().matches(token)); ref {token} [57-57],
 assertFalse(isReady().matches(token)); ref {token} [59-59]
[m[m24.08.2022 - 00:24:28.086 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.TokenMatchersTest::testMatches has 4 assertions: 
 assertTrue(matches(Token.Type.TOKEN, "content").matches(token)); ref {Token.Type, Token.Type.TOKEN, Token, token} [64-64],
 assertFalse(matches(Token.Type.EOF, "content").matches(token)); ref {Token.Type, Token, Token.Type.EOF, token} [65-65],
 assertFalse(matches(Token.Type.TOKEN, "not the content").matches(token)); ref {Token.Type, Token.Type.TOKEN, Token, token} [66-66],
 assertFalse(matches(Token.Type.EORECORD, "not the content").matches(token)); ref {Token.Type, Token, Token.Type.EORECORD, token} [67-67]
[m[m24.08.2022 - 00:24:28.123 [INFO ] ParsingStrategy.parseTestSuite() - Found 99 test cases
[m[m24.08.2022 - 00:24:28.123 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testCloseBackwardCompatibility has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.123 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testCloseWithCsvFormatAutoFlushOff has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.123 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testCloseWithCsvFormatAutoFlushOn has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testCloseWithFlushOff has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testCloseWithFlushOn has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testDelimeterQuoted has 1 assertions: 
 assertEquals("'a,b,c',xyz", sw.toString()); ref {sw} [296-296]
[m[m24.08.2022 - 00:24:28.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testDelimeterQuoteNone has 1 assertions: 
 assertEquals("a!,b!,c,xyz", sw.toString()); ref {sw} [307-307]
[m[m24.08.2022 - 00:24:28.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testDelimiterEscaped has 1 assertions: 
 assertEquals("a!,b!,c,xyz", sw.toString()); ref {sw} [317-317]
[m[m24.08.2022 - 00:24:28.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testDelimiterPlain has 1 assertions: 
 assertEquals("a,b,c,xyz", sw.toString()); ref {sw} [327-327]
[m[m24.08.2022 - 00:24:28.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testDisabledComment has 1 assertions: 
 assertEquals("", sw.toString()); ref {sw} [336-336]
[m[m24.08.2022 - 00:24:28.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testDontQuoteEuroFirstChar has 1 assertions: 
 assertEquals(EURO_CH + ",Deux" + recordSeparator, sw.toString()); ref {sw, EURO_CH, recordSeparator} [345-345]
[m[m24.08.2022 - 00:24:28.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEolEscaped has 1 assertions: 
 assertEquals("a!rb!nc,x\fy\bz", sw.toString()); ref {sw} [355-355]
[m[m24.08.2022 - 00:24:28.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEolPlain has 1 assertions: 
 assertEquals("a\rb\nc,x\fy\bz", sw.toString()); ref {sw} [365-365]
[m[m24.08.2022 - 00:24:28.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEolQuoted has 1 assertions: 
 assertEquals("'a\rb\nc',x\by\fz", sw.toString()); ref {sw} [375-375]
[m[m24.08.2022 - 00:24:28.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash1 has 1 assertions: 
 assertEquals("\\", sw.toString()); ref {sw} [385-385]
[m[m24.08.2022 - 00:24:28.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash2 has 1 assertions: 
 assertEquals("'\\\r'", sw.toString()); ref {sw} [394-394]
[m[m24.08.2022 - 00:24:28.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash3 has 1 assertions: 
 assertEquals("'X\\\r'", sw.toString()); ref {sw} [403-403]
[m[m24.08.2022 - 00:24:28.126 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash4 has 1 assertions: 
 assertEquals("\\\\", sw.toString()); ref {sw} [412-412]
[m[m24.08.2022 - 00:24:28.126 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash5 has 1 assertions: 
 assertEquals("\\\\", sw.toString()); ref {sw} [421-421]
[m[m24.08.2022 - 00:24:28.126 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEscapeNull1 has 1 assertions: 
 assertEquals("\\", sw.toString()); ref {sw} [430-430]
[m[m24.08.2022 - 00:24:28.126 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEscapeNull2 has 1 assertions: 
 assertEquals("\"\\\r\"", sw.toString()); ref {sw} [439-439]
[m[m24.08.2022 - 00:24:28.126 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEscapeNull3 has 1 assertions: 
 assertEquals("\"X\\\r\"", sw.toString()); ref {sw} [448-448]
[m[m24.08.2022 - 00:24:28.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEscapeNull4 has 1 assertions: 
 assertEquals("\\\\", sw.toString()); ref {sw} [457-457]
[m[m24.08.2022 - 00:24:28.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testEscapeNull5 has 1 assertions: 
 assertEquals("\\\\", sw.toString()); ref {sw} [466-466]
[m[m24.08.2022 - 00:24:28.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testExcelPrintAllArrayOfArrays has 1 assertions: 
 assertEquals("r1c1,r1c2" + recordSeparator + "r2c1,r2c2" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [474-474]
[m[m24.08.2022 - 00:24:28.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testExcelPrintAllArrayOfLists has 1 assertions: 
 assertEquals("r1c1,r1c2" + recordSeparator + "r2c1,r2c2" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [484-484]
[m[m24.08.2022 - 00:24:28.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testExcelPrintAllIterableOfArrays has 1 assertions: 
 assertEquals("r1c1,r1c2" + recordSeparator + "r2c1,r2c2" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [493-493]
[m[m24.08.2022 - 00:24:28.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testExcelPrintAllIterableOfLists has 1 assertions: 
 assertEquals("r1c1,r1c2" + recordSeparator + "r2c1,r2c2" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [503-503]
[m[m24.08.2022 - 00:24:28.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testExcelPrinter1 has 1 assertions: 
 assertEquals("a,b" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [512-512]
[m[m24.08.2022 - 00:24:28.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testExcelPrinter2 has 1 assertions: 
 assertEquals("\"a,b\",b" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [521-521]
[m[m24.08.2022 - 00:24:28.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testHeader has 1 assertions: 
 assertEquals("C1,C2,C3\r\na,b,c\r\nx,y,z\r\n", sw.toString()); ref {sw} [532-532]
[m[m24.08.2022 - 00:24:28.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testHeaderCommentExcel has 1 assertions: 
 assertEquals("# Generated by Apache Commons CSV 1.1\r\n# " + now + "\r\nCol1,Col2\r\nA,B\r\nC,D\r\n", sw.toString()); ref {sw, now} [542-543]
[m[m24.08.2022 - 00:24:28.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testHeaderCommentTdf has 1 assertions: 
 assertEquals("# Generated by Apache Commons CSV 1.1\r\n# " + now + "\r\nCol1\tCol2\r\nA\tB\r\nC\tD\r\n", sw.toString()); ref {sw, now} [553-554]
[m[m24.08.2022 - 00:24:28.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testHeaderNotSet has 1 assertions: 
 assertEquals("a,b,c\r\nx,y,z\r\n", sw.toString()); ref {sw} [564-564]
[m[m24.08.2022 - 00:24:28.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testInvalidFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [572-572]
[m[m24.08.2022 - 00:24:28.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testJdbcPrinter has 1 assertions: 
 assertEquals("1,r1,\"long text 1\"" + recordSeparator + "2,r2,\"" + longText2 + "\"" + recordSeparator, sw.toString()); ref {sw, longText2, recordSeparator} [586-587]
[m[m24.08.2022 - 00:24:28.129 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testJdbcPrinterWithResultSet has 1 assertions: 
 assertEquals("ID,NAME,TEXT" + recordSeparator + "1,r1,\"long text 1\"" + recordSeparator + "2,r2,\"" + longText2 + "\"" + recordSeparator, sw.toString()); ref {sw, longText2, recordSeparator} [602-603]
[m[m24.08.2022 - 00:24:28.129 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testJdbcPrinterWithResultSetMetaData has 1 assertions: 
 assertEquals("ID,NAME,TEXT" + recordSeparator + "1,r1,\"long text 1\"" + recordSeparator + "2,r2,\"" + longText2 + "\"" + recordSeparator, sw.toString()); ref {sw, longText2, recordSeparator} [616-617]
[m[m24.08.2022 - 00:24:28.129 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testJira135_part1 has 2 assertions: 
 assertEquals(expected, sw.toString()); ref {sw, expected} [633-633],
 assertArrayEquals(expectNulls(list.toArray(), format), record0); ref {format, record0, list} [635-635]
[m[m24.08.2022 - 00:24:28.129 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testJira135_part2 has 2 assertions: 
 assertEquals(expected, sw.toString()); ref {sw, expected} [649-649],
 assertArrayEquals(expectNulls(list.toArray(), format), record0); ref {format, record0, list} [651-651]
[m[m24.08.2022 - 00:24:28.129 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testJira135_part3 has 2 assertions: 
 assertEquals(expected, sw.toString()); ref {sw, expected} [665-665],
 assertArrayEquals(expectNulls(list.toArray(), format), record0); ref {format, record0, list} [667-667]
[m[m24.08.2022 - 00:24:28.130 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testJira135All has 2 assertions: 
 assertEquals(expected, sw.toString()); ref {sw, expected} [683-683],
 assertArrayEquals(expectNulls(list.toArray(), format), record0); ref {format, record0, list} [685-685]
[m[m24.08.2022 - 00:24:28.130 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testMongoDbCsvBasic has 1 assertions: 
 assertEquals("a,b" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [693-693]
[m[m24.08.2022 - 00:24:28.130 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testMongoDbCsvCommaInValue has 1 assertions: 
 assertEquals("\"a,b\",c" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [702-702]
[m[m24.08.2022 - 00:24:28.130 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testMongoDbCsvDoubleQuoteInValue has 1 assertions: 
 assertEquals("\"a \"\"c\"\" b\",d" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [711-711]
[m[m24.08.2022 - 00:24:28.130 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testMongoDbCsvTabInValue has 1 assertions: 
 assertEquals("a\tb,c" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [720-720]
[m[m24.08.2022 - 00:24:28.130 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testMongoDbTsvCommaInValue has 1 assertions: 
 assertEquals("a,b\tc" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [729-729]
[m[m24.08.2022 - 00:24:28.130 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testMongoDbTsvTabInValue has 1 assertions: 
 assertEquals("\"a\tb\"\tc" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [738-738]
[m[m24.08.2022 - 00:24:28.131 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testMongoDbTsvBasic has 1 assertions: 
 assertEquals("a\tb" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [747-747]
[m[m24.08.2022 - 00:24:28.131 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testMultiLineComment has 1 assertions: 
 assertEquals("# This is a comment" + recordSeparator + "# on multiple lines" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [757-758]
[m[m24.08.2022 - 00:24:28.131 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testMySqlNullOutput has 18 assertions: 
 assertEquals(expected, writer.toString()); ref {expected, writer} [771-771],
 assertArrayEquals(new Object[2], record0); ref {record0} [773-773],
 assertEquals(expected, writer.toString()); ref {expected, writer} [782-782],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [784-784],
 assertEquals(expected, writer.toString()); ref {expected, writer} [793-793],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [795-795],
 assertEquals(expected, writer.toString()); ref {expected, writer} [804-804],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [806-806],
 assertEquals(expected, writer.toString()); ref {expected, writer} [815-815],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [817-817],
 assertEquals(expected, writer.toString()); ref {expected, writer} [826-826],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [828-828],
 assertEquals(expected, writer.toString()); ref {expected, writer} [837-837],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [839-839],
 assertEquals(expected, writer.toString()); ref {expected, writer} [848-848],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [850-850],
 assertEquals(expected, writer.toString()); ref {expected, writer} [859-859],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [861-861]
[m[m24.08.2022 - 00:24:28.131 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testMySqlNullStringDefault has 1 assertions: 
 assertEquals("\\N", CSVFormat.MYSQL.getNullString()); ref {CSVFormat.MYSQL, CSVFormat} [866-866]
[m[m24.08.2022 - 00:24:28.131 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testNewCsvPrinterAppendableNullFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [872-872]
[m[m24.08.2022 - 00:24:28.131 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testNewCsvPrinterNullAppendableFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [879-879]
[m[m24.08.2022 - 00:24:28.132 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testParseCustomNullValues has 5 assertions: 
 assertEquals("a,NULL,b" + recordSeparator, csvString); ref {csvString, recordSeparator} [891-891],
 assertEquals("a", record.get(0)); ref {record} [895-895],
 assertEquals(null, record.get(1)); ref {record} [896-896],
 assertEquals("b", record.get(2)); ref {record} [897-897],
 assertFalse(iterator.hasNext()); ref {iterator} [898-898]
[m[m24.08.2022 - 00:24:28.132 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPlainEscaped has 1 assertions: 
 assertEquals("abc,xyz", sw.toString()); ref {sw} [908-908]
[m[m24.08.2022 - 00:24:28.132 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPlainPlain has 1 assertions: 
 assertEquals("abc,xyz", sw.toString()); ref {sw} [918-918]
[m[m24.08.2022 - 00:24:28.132 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPlainQuoted has 1 assertions: 
 assertEquals("abc", sw.toString()); ref {sw} [927-927]
[m[m24.08.2022 - 00:24:28.132 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPostgreSqlCsvNullOutput has 18 assertions: 
 assertEquals(expected, writer.toString()); ref {expected, writer} [941-941],
 assertArrayEquals(new Object[2], record0); ref {record0} [943-943],
 assertEquals(expected, writer.toString()); ref {expected, writer} [952-952],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [954-954],
 assertEquals(expected, writer.toString()); ref {expected, writer} [963-963],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [965-965],
 assertEquals(expected, writer.toString()); ref {expected, writer} [974-974],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [976-976],
 assertEquals(expected, writer.toString()); ref {expected, writer} [985-985],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [987-987],
 assertEquals(expected, writer.toString()); ref {expected, writer} [996-996],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [998-998],
 assertEquals(expected, writer.toString()); ref {expected, writer} [1007-1007],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [1009-1009],
 assertEquals(expected, writer.toString()); ref {expected, writer} [1018-1018],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [1020-1020],
 assertEquals(expected, writer.toString()); ref {expected, writer} [1029-1029],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [1031-1031]
[m[m24.08.2022 - 00:24:28.133 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPostgreSqlCsvTextOutput has 18 assertions: 
 assertEquals(expected, writer.toString()); ref {expected, writer} [1044-1044],
 assertArrayEquals(new Object[2], record0); ref {record0} [1046-1046],
 assertEquals(expected, writer.toString()); ref {expected, writer} [1055-1055],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [1057-1057],
 assertEquals(expected, writer.toString()); ref {expected, writer} [1066-1066],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [1068-1068],
 assertEquals(expected, writer.toString()); ref {expected, writer} [1077-1077],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [1079-1079],
 assertEquals(expected, writer.toString()); ref {expected, writer} [1088-1088],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [1090-1090],
 assertEquals(expected, writer.toString()); ref {expected, writer} [1099-1099],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [1101-1101],
 assertEquals(expected, writer.toString()); ref {expected, writer} [1110-1110],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [1112-1112],
 assertEquals(expected, writer.toString()); ref {expected, writer} [1121-1121],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [1123-1123],
 assertEquals(expected, writer.toString()); ref {expected, writer} [1132-1132],
 assertArrayEquals(expectNulls(s, format), record0); ref {s, format, record0} [1134-1134]
[m[m24.08.2022 - 00:24:28.133 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPostgreSqlNullStringDefaultCsv has 1 assertions: 
 assertEquals("", CSVFormat.POSTGRESQL_CSV.getNullString()); ref {CSVFormat.POSTGRESQL_CSV, CSVFormat} [1139-1139]
[m[m24.08.2022 - 00:24:28.133 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPostgreSqlNullStringDefaultText has 1 assertions: 
 assertEquals("\\N", CSVFormat.POSTGRESQL_TEXT.getNullString()); ref {CSVFormat.POSTGRESQL_TEXT, CSVFormat} [1144-1144]
[m[m24.08.2022 - 00:24:28.133 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrint has 1 assertions: 
 assertEquals("a,b\\c" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1152-1152]
[m[m24.08.2022 - 00:24:28.133 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrintCustomNullValues has 1 assertions: 
 assertEquals("a,NULL,b" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1161-1161]
[m[m24.08.2022 - 00:24:28.133 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrinter1 has 1 assertions: 
 assertEquals("a,b" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1170-1170]
[m[m24.08.2022 - 00:24:28.134 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrinter2 has 1 assertions: 
 assertEquals("\"a,b\",b" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1179-1179]
[m[m24.08.2022 - 00:24:28.134 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrinter3 has 1 assertions: 
 assertEquals("\"a, b\",\"b \"" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1188-1188]
[m[m24.08.2022 - 00:24:28.134 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrinter4 has 1 assertions: 
 assertEquals("a,\"b\"\"c\"" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1197-1197]
[m[m24.08.2022 - 00:24:28.134 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrinter5 has 1 assertions: 
 assertEquals("a,\"b\nc\"" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1206-1206]
[m[m24.08.2022 - 00:24:28.134 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrinter6 has 1 assertions: 
 assertEquals("a,\"b\r\nc\"" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1215-1215]
[m[m24.08.2022 - 00:24:28.134 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrinter7 has 1 assertions: 
 assertEquals("a,b\\c" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1224-1224]
[m[m24.08.2022 - 00:24:28.134 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrintNullValues has 1 assertions: 
 assertEquals("a,,b" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1233-1233]
[m[m24.08.2022 - 00:24:28.135 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrintOnePositiveInteger has 1 assertions: 
 assertEquals(String.valueOf(Integer.MAX_VALUE), sw.toString()); ref {Integer, sw, Integer.MAX_VALUE, String} [1242-1242]
[m[m24.08.2022 - 00:24:28.135 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrintRecordsWithEmptyVector has 1 assertions: 
 assertEquals(expectedCapacity, vector.capacity()); ref {expectedCapacity, vector} [1256-1256]
[m[m24.08.2022 - 00:24:28.135 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrintRecordsWithObjectArray has 2 assertions: 
 assertEquals(6, charArrayWriter.size()); ref {charArrayWriter} [1272-1272],
 assertEquals("\n\n\n\n\n\n", charArrayWriter.toString()); ref {charArrayWriter} [1273-1273]
[m[m24.08.2022 - 00:24:28.135 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrintRecordsWithResultSetOneRow has 1 assertions: 
 assertEquals(0, resultSet.getRow()); ref {resultSet} [1282-1282]
[m[m24.08.2022 - 00:24:28.135 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrintToFileWithCharsetUtf16Be has 1 assertions: 
 assertEquals("a,b\\c" + recordSeparator, FileUtils.readFileToString(file, StandardCharsets.UTF_16BE)); ref {file, FileUtils, StandardCharsets.UTF_16BE, StandardCharsets, recordSeparator} [1293-1293]
[m[m24.08.2022 - 00:24:28.135 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrintToFileWithDefaultCharset has 1 assertions: 
 assertEquals("a,b\\c" + recordSeparator, FileUtils.readFileToString(file, Charset.defaultCharset())); ref {file, FileUtils, Charset, recordSeparator} [1302-1302]
[m[m24.08.2022 - 00:24:28.136 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testPrintToPathWithDefaultCharset has 1 assertions: 
 assertEquals("a,b\\c" + recordSeparator, FileUtils.readFileToString(file, Charset.defaultCharset())); ref {file, FileUtils, Charset, recordSeparator} [1311-1311]
[m[m24.08.2022 - 00:24:28.136 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testQuoteAll has 1 assertions: 
 assertEquals("\"a\",\"b\nc\",\"d\"" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1319-1319]
[m[m24.08.2022 - 00:24:28.136 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testQuoteCommaFirstChar has 1 assertions: 
 assertEquals("\",\"" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1328-1328]
[m[m24.08.2022 - 00:24:28.136 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testQuoteNonNumeric has 1 assertions: 
 assertEquals("\"a\",\"b\nc\",1" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1337-1337]
[m[m24.08.2022 - 00:24:28.136 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testRandomDefault has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.136 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testRandomExcel has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.136 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testRandomMongoDbCsv has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.136 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testRandomMySql has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.137 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testRandomOracle has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.137 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testRandomPostgreSqlCsv has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.137 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testRandomPostgreSqlText has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.137 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testRandomRfc4180 has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.137 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testRandomTdf has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.137 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testSingleLineComment has 1 assertions: 
 assertEquals("# This is a comment" + recordSeparator, sw.toString()); ref {sw, recordSeparator} [1395-1395]
[m[m24.08.2022 - 00:24:28.137 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testSingleQuoteQuoted has 1 assertions: 
 assertEquals("'a''b''c',xyz", sw.toString()); ref {sw} [1405-1405]
[m[m24.08.2022 - 00:24:28.138 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testSkipHeaderRecordFalse has 1 assertions: 
 assertEquals("C1,C2,C3\r\na,b,c\r\nx,y,z\r\n", sw.toString()); ref {sw} [1417-1417]
[m[m24.08.2022 - 00:24:28.138 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testSkipHeaderRecordTrue has 1 assertions: 
 assertEquals("a,b,c\r\nx,y,z\r\n", sw.toString()); ref {sw} [1430-1430]
[m[m24.08.2022 - 00:24:28.138 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testTrailingDelimiterOnTwoColumns has 1 assertions: 
 assertEquals("A,B,\r\n", sw.toString()); ref {sw} [1439-1439]
[m[m24.08.2022 - 00:24:28.138 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testTrimOffOneColumn has 1 assertions: 
 assertEquals("\" A \"", sw.toString()); ref {sw} [1448-1448]
[m[m24.08.2022 - 00:24:28.138 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testTrimOnOneColumn has 1 assertions: 
 assertEquals("A", sw.toString()); ref {sw} [1457-1457]
[m[m24.08.2022 - 00:24:28.138 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVPrinterTest::testTrimOnTwoColumns has 1 assertions: 
 assertEquals("A,B", sw.toString()); ref {sw} [1467-1467]
[m[m24.08.2022 - 00:24:28.140 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m24.08.2022 - 00:24:28.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.perf.PerformanceTest::testParseBigFileRepeat has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.perf.PerformanceTest::testReadBigFile has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.141 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m24.08.2022 - 00:24:28.141 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m24.08.2022 - 00:24:28.142 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.issues.JiraCsv164Test::testJiraCsv154_withCommentMarker has 1 assertions: 
 assertTrue(s, s.contains(comment)); ref {s, comment} [40-40]
[m[m24.08.2022 - 00:24:28.142 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.issues.JiraCsv164Test::testJiraCsv154_withHeaderComments has 1 assertions: 
 assertTrue(s, s.contains(comment)); ref {s, comment} [54-54]
[m[m24.08.2022 - 00:24:28.143 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m24.08.2022 - 00:24:28.143 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.issues.JiraCsv167Test::parse has 2 assertions: 
 // Comment lines are concatenated, in this example 4 lines become 2 comments.
Assert.assertEquals(totcomment, comments); ref {Assert, comments, totcomment} [80-80],
 // records includes the header
Assert.assertEquals(totrecs, records); ref {Assert, records, totrecs} [81-81]
[m[m24.08.2022 - 00:24:28.147 [INFO ] ParsingStrategy.parseTestSuite() - Found 18 test cases
[m[m24.08.2022 - 00:24:28.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testGetInt has 3 assertions: 
 assertEquals(values[0], record.get(0)); ref {values, record} [64-64],
 assertEquals(values[1], record.get(1)); ref {values, record} [65-65],
 assertEquals(values[2], record.get(2)); ref {values, record} [66-66]
[m[m24.08.2022 - 00:24:28.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testGetString has 3 assertions: 
 assertEquals(values[0], recordWithHeader.get("first")); ref {values, recordWithHeader} [71-71],
 assertEquals(values[1], recordWithHeader.get("second")); ref {values, recordWithHeader} [72-72],
 assertEquals(values[2], recordWithHeader.get("third")); ref {values, recordWithHeader} [73-73]
[m[m24.08.2022 - 00:24:28.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testGetStringInconsistentRecord has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testGetStringNoHeader has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testGetUnmappedEnum has 1 assertions: 
 assertNull(recordWithHeader.get(EnumFixture.UNKNOWN_COLUMN)); ref {EnumFixture.UNKNOWN_COLUMN, EnumFixture, recordWithHeader} [89-89]
[m[m24.08.2022 - 00:24:28.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testGetUnmappedName has 1 assertions: 
 assertNull(recordWithHeader.get("fourth")); ref {recordWithHeader} [94-94]
[m[m24.08.2022 - 00:24:28.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testGetUnmappedNegativeInt has 1 assertions: 
 assertNull(recordWithHeader.get(Integer.MIN_VALUE)); ref {Integer, recordWithHeader, Integer.MIN_VALUE} [99-99]
[m[m24.08.2022 - 00:24:28.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testGetUnmappedPositiveInt has 1 assertions: 
 assertNull(recordWithHeader.get(Integer.MAX_VALUE)); ref {Integer, recordWithHeader, Integer.MAX_VALUE} [104-104]
[m[m24.08.2022 - 00:24:28.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testIsConsistent has 3 assertions: 
 assertTrue(record.isConsistent()); ref {record} [109-109],
 assertTrue(recordWithHeader.isConsistent()); ref {recordWithHeader} [110-110],
 // We are working on a copy of the map, so the record should still be OK.
assertTrue(recordWithHeader.isConsistent()); ref {recordWithHeader} [114-114]
[m[m24.08.2022 - 00:24:28.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testIsInconsistent has 1 assertions: 
 assertFalse(record1.isConsistent()); ref {record1} [125-125]
[m[m24.08.2022 - 00:24:28.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testIsMapped has 3 assertions: 
 assertFalse(record.isMapped("first")); ref {record} [131-131],
 assertTrue(recordWithHeader.isMapped("first")); ref {recordWithHeader} [132-132],
 assertFalse(recordWithHeader.isMapped("fourth")); ref {recordWithHeader} [133-133]
[m[m24.08.2022 - 00:24:28.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testIsSet has 3 assertions: 
 assertFalse(record.isSet("first")); ref {record} [138-138],
 assertTrue(recordWithHeader.isSet("first")); ref {recordWithHeader} [139-139],
 assertFalse(recordWithHeader.isSet("fourth")); ref {recordWithHeader} [140-140]
[m[m24.08.2022 - 00:24:28.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testIterator has 1 assertions: 
 assertEquals(values[i], value); ref {values, i, value} [147-147]
[m[m24.08.2022 - 00:24:28.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testPutInMap has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testRemoveAndAddColumns has 1 assertions: 
 Assert.assertEquals("A,B,C,NewValue" + CSVFormat.DEFAULT.getRecordSeparator(), printer.getOut().toString()); ref {CSVFormat.DEFAULT, Assert, printer, CSVFormat} [173-173]
[m[m24.08.2022 - 00:24:28.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testToMap has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testToMapWithShortRecord has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVRecordTest::testToMapWithNoHeader has 2 assertions: 
 assertNotNull("Map is not null.", map); ref {map} [196-196],
 assertTrue("Map is empty.", map.isEmpty()); ref {map} [197-197]
[m[m24.08.2022 - 00:24:28.165 [INFO ] ParsingStrategy.parseTestSuite() - Found 26 test cases
[m[m24.08.2022 - 00:24:28.165 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testSurroundingSpacesAreDeleted has 7 assertions: 
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "noSpaces")); ref {parser, TOKEN} [62-62],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "leadingSpaces")); ref {parser, TOKEN} [63-63],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "trailingSpaces")); ref {parser, TOKEN} [64-64],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "surroundingSpaces")); ref {parser, TOKEN} [65-65],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "")); ref {parser, TOKEN} [66-66],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "")); ref {parser, TOKEN} [67-67],
 assertThat(parser.nextToken(new Token()), matches(EOF, "")); ref {parser, EOF} [68-68]
[m[m24.08.2022 - 00:24:28.165 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testSurroundingTabsAreDeleted has 7 assertions: 
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "noTabs")); ref {parser, TOKEN} [76-76],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "leadingTab")); ref {parser, TOKEN} [77-77],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "trailingTab")); ref {parser, TOKEN} [78-78],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "surroundingTabs")); ref {parser, TOKEN} [79-79],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "")); ref {parser, TOKEN} [80-80],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "")); ref {parser, TOKEN} [81-81],
 assertThat(parser.nextToken(new Token()), matches(EOF, "")); ref {parser, EOF} [82-82]
[m[m24.08.2022 - 00:24:28.166 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testIgnoreEmptyLines has 10 assertions: 
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "first")); ref {parser, TOKEN} [92-92],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "line")); ref {parser, TOKEN} [93-93],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "")); ref {parser, EORECORD} [94-94],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "second")); ref {parser, TOKEN} [95-95],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "line")); ref {parser, EORECORD} [96-96],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "third line ")); ref {parser, EORECORD} [97-97],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "last")); ref {parser, TOKEN} [98-98],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, " line ")); ref {parser, EORECORD} [99-99],
 assertThat(parser.nextToken(new Token()), matches(EOF, "")); ref {parser, EOF} [100-100],
 assertThat(parser.nextToken(new Token()), matches(EOF, "")); ref {parser, EOF} [101-101]
[m[m24.08.2022 - 00:24:28.166 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testComments has 14 assertions: 
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "first")); ref {parser, TOKEN} [111-111],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "line")); ref {parser, TOKEN} [112-112],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "")); ref {parser, EORECORD} [113-113],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "second")); ref {parser, TOKEN} [114-114],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "line")); ref {parser, TOKEN} [115-115],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "tokenWith#no-comment")); ref {parser, EORECORD} [116-116],
 assertThat(parser.nextToken(new Token()), matches(COMMENT, "comment line")); ref {parser, COMMENT} [117-117],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "third")); ref {parser, TOKEN} [118-118],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "line")); ref {parser, TOKEN} [119-119],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "#no-comment")); ref {parser, EORECORD} [120-120],
 assertThat(parser.nextToken(new Token()), matches(COMMENT, "penultimate comment")); ref {parser, COMMENT} [121-121],
 assertThat(parser.nextToken(new Token()), matches(COMMENT, "Final comment")); ref {parser, COMMENT} [122-122],
 assertThat(parser.nextToken(new Token()), matches(EOF, "")); ref {parser, EOF} [123-123],
 assertThat(parser.nextToken(new Token()), matches(EOF, "")); ref {parser, EOF} [124-124]
[m[m24.08.2022 - 00:24:28.166 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testCommentsAndEmptyLines has 24 assertions: 
 assertFalse("Should not ignore empty lines", format.getIgnoreEmptyLines()); ref {format} [145-145],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "1")); ref {parser, TOKEN} [148-148],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "2")); ref {parser, TOKEN} [149-149],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "3")); ref {parser, TOKEN} [150-150],
 // 1
assertThat(parser.nextToken(new Token()), matches(EORECORD, "")); ref {parser, EORECORD} [151-151],
 // 1b
assertThat(parser.nextToken(new Token()), matches(EORECORD, "")); ref {parser, EORECORD} [152-152],
 // 1c
assertThat(parser.nextToken(new Token()), matches(EORECORD, "")); ref {parser, EORECORD} [153-153],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "a")); ref {parser, TOKEN} [154-154],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "b x")); ref {parser, TOKEN} [155-155],
 // 2
assertThat(parser.nextToken(new Token()), matches(EORECORD, "c#no-comment")); ref {parser, EORECORD} [156-156],
 // 3
assertThat(parser.nextToken(new Token()), matches(COMMENT, "foo")); ref {parser, COMMENT} [157-157],
 // 4
assertThat(parser.nextToken(new Token()), matches(EORECORD, "")); ref {parser, EORECORD} [158-158],
 // 4b
assertThat(parser.nextToken(new Token()), matches(EORECORD, "")); ref {parser, EORECORD} [159-159],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "d")); ref {parser, TOKEN} [160-160],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "e")); ref {parser, TOKEN} [161-161],
 // 5
assertThat(parser.nextToken(new Token()), matches(EORECORD, "#no-comment")); ref {parser, EORECORD} [162-162],
 // 5b
assertThat(parser.nextToken(new Token()), matches(EORECORD, "")); ref {parser, EORECORD} [163-163],
 // 5c
assertThat(parser.nextToken(new Token()), matches(EORECORD, "")); ref {parser, EORECORD} [164-164],
 // 6
assertThat(parser.nextToken(new Token()), matches(COMMENT, "penultimate comment")); ref {parser, COMMENT} [165-165],
 // 6b
assertThat(parser.nextToken(new Token()), matches(EORECORD, "")); ref {parser, EORECORD} [166-166],
 // 6c
assertThat(parser.nextToken(new Token()), matches(EORECORD, "")); ref {parser, EORECORD} [167-167],
 // 7
assertThat(parser.nextToken(new Token()), matches(COMMENT, "Final comment")); ref {parser, COMMENT} [168-168],
 assertThat(parser.nextToken(new Token()), matches(EOF, "")); ref {parser, EOF} [169-169],
 assertThat(parser.nextToken(new Token()), matches(EOF, "")); ref {parser, EOF} [170-170]
[m[m24.08.2022 - 00:24:28.167 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testBackslashWithoutEscaping has 8 assertions: 
 assertFalse(format.isEscapeCharacterSet()); ref {format} [182-182],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "a")); ref {parser, TOKEN} [184-184],
 // an unquoted single backslash is not an escape char
assertThat(parser.nextToken(new Token()), matches(TOKEN, "\\")); ref {parser, TOKEN} [186-186],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "")); ref {parser, TOKEN} [187-187],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "b\\")); ref {parser, EORECORD} [188-188],
 // an unquoted single backslash is not an escape char
assertThat(parser.nextToken(new Token()), matches(TOKEN, "\\")); ref {parser, TOKEN} [190-190],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "")); ref {parser, TOKEN} [191-191],
 assertThat(parser.nextToken(new Token()), matches(EOF, "")); ref {parser, EOF} [192-192]
[m[m24.08.2022 - 00:24:28.167 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testBackslashWithEscaping has 8 assertions: 
 assertTrue(format.isEscapeCharacterSet()); ref {format} [204-204],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "a")); ref {parser, TOKEN} [206-206],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, ",")); ref {parser, TOKEN} [207-207],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "b\\")); ref {parser, EORECORD} [208-208],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, ",")); ref {parser, TOKEN} [209-209],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "\nc")); ref {parser, TOKEN} [210-210],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "d\r")); ref {parser, EORECORD} [211-211],
 assertThat(parser.nextToken(new Token()), matches(EOF, "e")); ref {parser, EOF} [212-212]
[m[m24.08.2022 - 00:24:28.167 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testNextToken4 has 12 assertions: 
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "a")); ref {parser, TOKEN} [224-224],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "foo")); ref {parser, TOKEN} [225-225],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "b")); ref {parser, EORECORD} [226-226],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "a")); ref {parser, TOKEN} [227-227],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, " foo")); ref {parser, TOKEN} [228-228],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "b")); ref {parser, EORECORD} [229-229],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "a")); ref {parser, TOKEN} [230-230],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "foo ")); ref {parser, TOKEN} [231-231],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "b")); ref {parser, EORECORD} [232-232],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "a")); ref {parser, TOKEN} [233-233],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, " foo ")); ref {parser, TOKEN} [234-234],
 // assertTokenEquals(EORECORD, "b", parser.nextToken(new Token()));
assertThat(parser.nextToken(new Token()), matches(EOF, "b")); ref {parser, EOF} [236-236]
[m[m24.08.2022 - 00:24:28.168 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testNextToken5 has 5 assertions: 
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "a")); ref {parser, TOKEN} [245-245],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "foo\n")); ref {parser, TOKEN} [246-246],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "b")); ref {parser, EORECORD} [247-247],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "foo\n  baar ,,,")); ref {parser, EORECORD} [248-248],
 assertThat(parser.nextToken(new Token()), matches(EOF, "\n\t \n")); ref {parser, EOF} [249-249]
[m[m24.08.2022 - 00:24:28.168 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testNextToken6 has 2 assertions: 
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "a")); ref {parser, TOKEN} [262-262],
 assertThat(parser.nextToken(new Token()), matches(EORECORD, "b and ' more\n")); ref {parser, EORECORD} [263-263]
[m[m24.08.2022 - 00:24:28.168 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testDelimiterIsWhitespace has 6 assertions: 
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "one")); ref {parser, TOKEN} [272-272],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "two")); ref {parser, TOKEN} [273-273],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "")); ref {parser, TOKEN} [274-274],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "four")); ref {parser, TOKEN} [275-275],
 assertThat(parser.nextToken(new Token()), matches(TOKEN, "five")); ref {parser, TOKEN} [276-276],
 assertThat(parser.nextToken(new Token()), matches(EOF, "six")); ref {parser, EOF} [277-277]
[m[m24.08.2022 - 00:24:28.168 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testEscapedCR has 1 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character" + CR + "Escaped")); ref {lexer, CR} [284-284]
[m[m24.08.2022 - 00:24:28.168 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testCR has 2 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character")); ref {lexer} [291-291],
 assertThat(lexer.nextToken(new Token()), hasContent("NotEscaped")); ref {lexer} [292-292]
[m[m24.08.2022 - 00:24:28.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testEscapedLF has 1 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character" + LF + "Escaped")); ref {LF, lexer} [299-299]
[m[m24.08.2022 - 00:24:28.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testLF has 2 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character")); ref {lexer} [306-306],
 assertThat(lexer.nextToken(new Token()), hasContent("NotEscaped")); ref {lexer} [307-307]
[m[m24.08.2022 - 00:24:28.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testEscapedTab has 1 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character" + TAB + "Escaped")); ref {TAB, lexer} [314-314]
[m[m24.08.2022 - 00:24:28.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testTab has 1 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character" + TAB + "NotEscaped")); ref {TAB, lexer} [322-322]
[m[m24.08.2022 - 00:24:28.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testEscapedBackspace has 1 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character" + BACKSPACE + "Escaped")); ref {BACKSPACE, lexer} [329-329]
[m[m24.08.2022 - 00:24:28.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testBackspace has 1 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character" + BACKSPACE + "NotEscaped")); ref {BACKSPACE, lexer} [336-336]
[m[m24.08.2022 - 00:24:28.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testEscapedFF has 1 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character" + FF + "Escaped")); ref {FF, lexer} [343-343]
[m[m24.08.2022 - 00:24:28.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testFF has 1 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character" + FF + "NotEscaped")); ref {FF, lexer} [350-350]
[m[m24.08.2022 - 00:24:28.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testEscapedMySqlNullValue has 1 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character\\NEscaped")); ref {lexer} [358-358]
[m[m24.08.2022 - 00:24:28.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testEscapedCharacter has 1 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character\\aEscaped")); ref {lexer} [365-365]
[m[m24.08.2022 - 00:24:28.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testEscapedControlCharacter has 1 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character" + CR + "Escaped")); ref {lexer, CR} [373-373]
[m[m24.08.2022 - 00:24:28.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testEscapedControlCharacter2 has 1 assertions: 
 assertThat(lexer.nextToken(new Token()), hasContent("character" + CR + "Escaped")); ref {lexer, CR} [380-380]
[m[m24.08.2022 - 00:24:28.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.LexerTest::testEscapingAtEOF has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.196 [INFO ] ParsingStrategy.parseTestSuite() - Found 81 test cases
[m[m24.08.2022 - 00:24:28.197 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testBackslashEscaping has 1 assertions: 
 assertTrue(records.size() > 0); ref {records} [125-125]
[m[m24.08.2022 - 00:24:28.197 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testBackslashEscaping2 has 1 assertions: 
 assertTrue(records.size() > 0); ref {records} [152-152]
[m[m24.08.2022 - 00:24:28.197 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testBackslashEscapingOld has 3 assertions: 
 assertEquals(res.length, records.size()); ref {res, records, res.length} [171-171],
 assertTrue(records.size() > 0); ref {records} [172-172],
 assertArrayEquals(res[i], records.get(i).values()); ref {res, records, i} [174-174]
[m[m24.08.2022 - 00:24:28.197 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testBOM has 1 assertions: 
 Assert.assertNotNull(string); ref {Assert, string} [186-186]
[m[m24.08.2022 - 00:24:28.197 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testBOMInputStream_ParserWithInputStream has 1 assertions: 
 Assert.assertNotNull(string); ref {Assert, string} [198-198]
[m[m24.08.2022 - 00:24:28.198 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testBOMInputStream_ParserWithReader has 1 assertions: 
 Assert.assertNotNull(string); ref {Assert, string} [210-210]
[m[m24.08.2022 - 00:24:28.198 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testBOMInputStream_parseWithReader has 1 assertions: 
 Assert.assertNotNull(string); ref {Assert, string} [222-222]
[m[m24.08.2022 - 00:24:28.198 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testCarriageReturnEndings has 1 assertions: 
 assertEquals(4, records.size()); ref {records} [233-233]
[m[m24.08.2022 - 00:24:28.198 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testCarriageReturnLineFeedEndings has 1 assertions: 
 assertEquals(4, records.size()); ref {records} [242-242]
[m[m24.08.2022 - 00:24:28.198 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testClose has 2 assertions: 
 assertTrue(records.hasNext()); ref {records} [252-252],
 assertFalse(records.hasNext()); ref {records} [254-254]
[m[m24.08.2022 - 00:24:28.198 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testCSV57 has 2 assertions: 
 assertNotNull(list); ref {list} [262-262],
 assertEquals(0, list.size()); ref {list} [263-263]
[m[m24.08.2022 - 00:24:28.198 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testDefaultFormat has 2 assertions: 
 assertFalse(format.isCommentMarkerSet()); ref {format} [277-277],
 assertTrue(records.size() > 0); ref {records} [282-282]
[m[m24.08.2022 - 00:24:28.198 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testDuplicateHeadersNotAllowed has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testDuplicateHeadersAllowedByDefault has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testEmptyFileHeaderParsing has 2 assertions: 
 assertNull(parser.nextRecord()); ref {parser} [309-309],
 assertTrue(parser.getHeaderNames().isEmpty()); ref {parser} [310-310]
[m[m24.08.2022 - 00:24:28.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testEmptyFile has 1 assertions: 
 assertNull(parser.nextRecord()); ref {parser} [317-317]
[m[m24.08.2022 - 00:24:28.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviorCSV has 3 assertions: 
 assertEquals(res.length, records.size()); ref {res, records, res.length} [329-329],
 assertTrue(records.size() > 0); ref {records} [330-330],
 assertArrayEquals(res[i], records.get(i).values()); ref {res, records, i} [332-332]
[m[m24.08.2022 - 00:24:28.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviorExcel has 3 assertions: 
 assertEquals(res.length, records.size()); ref {res, records, res.length} [346-346],
 assertTrue(records.size() > 0); ref {records} [347-347],
 assertArrayEquals(res[i], records.get(i).values()); ref {res, records, i} [349-349]
[m[m24.08.2022 - 00:24:28.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviorCSV has 3 assertions: 
 assertEquals(res.length, records.size()); ref {res, records, res.length} [365-365],
 assertTrue(records.size() > 0); ref {records} [366-366],
 assertArrayEquals(res[i], records.get(i).values()); ref {res, records, i} [368-368]
[m[m24.08.2022 - 00:24:28.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviorExcel has 3 assertions: 
 assertEquals(res.length, records.size()); ref {res, records, res.length} [385-385],
 assertTrue(records.size() > 0); ref {records} [386-386],
 assertArrayEquals(res[i], records.get(i).values()); ref {res, records, i} [388-388]
[m[m24.08.2022 - 00:24:28.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testExcelFormat1 has 3 assertions: 
 assertEquals(res.length, records.size()); ref {res, records, res.length} [402-402],
 assertTrue(records.size() > 0); ref {records} [403-403],
 assertArrayEquals(res[i], records.get(i).values()); ref {res, records, i} [405-405]
[m[m24.08.2022 - 00:24:28.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testExcelFormat2 has 3 assertions: 
 assertEquals(res.length, records.size()); ref {res, records, res.length} [416-416],
 assertTrue(records.size() > 0); ref {records} [417-417],
 assertArrayEquals(res[i], records.get(i).values()); ref {res, records, i} [419-419]
[m[m24.08.2022 - 00:24:28.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testExcelHeaderCountLessThanData has 3 assertions: 
 Assert.assertEquals("a", record.get("A")); ref {Assert, record} [433-433],
 Assert.assertEquals("b", record.get("B")); ref {Assert, record} [434-434],
 Assert.assertEquals("c", record.get("C")); ref {Assert, record} [435-435]
[m[m24.08.2022 - 00:24:28.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testFirstEndOfLineCr has 2 assertions: 
 assertEquals(4, records.size()); ref {records} [445-445],
 assertEquals("\r", parser.getFirstEndOfLine()); ref {parser} [446-446]
[m[m24.08.2022 - 00:24:28.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testFirstEndOfLineCrLf has 2 assertions: 
 assertEquals(4, records.size()); ref {records} [455-455],
 assertEquals("\r\n", parser.getFirstEndOfLine()); ref {parser} [456-456]
[m[m24.08.2022 - 00:24:28.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testFirstEndOfLineLf has 2 assertions: 
 assertEquals(4, records.size()); ref {records} [465-465],
 assertEquals("\n", parser.getFirstEndOfLine()); ref {parser} [466-466]
[m[m24.08.2022 - 00:24:28.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testForEach has 4 assertions: 
 assertEquals(3, records.size()); ref {records} [477-477],
 assertArrayEquals(new String[] { "a", "b", "c" }, records.get(0).values()); ref {records} [478-478],
 assertArrayEquals(new String[] { "1", "2", "3" }, records.get(1).values()); ref {records} [479-479],
 assertArrayEquals(new String[] { "x", "y", "z" }, records.get(2).values()); ref {records} [480-480]
[m[m24.08.2022 - 00:24:28.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetHeaderMap has 8 assertions: 
 // Headers are iterated in column order.
Assert.assertEquals("A", columnNames.next()); ref {Assert, columnNames} [491-491],
 Assert.assertEquals("B", columnNames.next()); ref {Assert, columnNames} [492-492],
 Assert.assertEquals("C", columnNames.next()); ref {Assert, columnNames} [493-493],
 assertTrue(records.hasNext()); ref {records} [498-498],
 assertEquals(record.get(0), record.get("A")); ref {record} [500-500],
 assertEquals(record.get(1), record.get("B")); ref {record} [501-501],
 assertEquals(record.get(2), record.get("C")); ref {record} [502-502],
 assertFalse(records.hasNext()); ref {records} [505-505]
[m[m24.08.2022 - 00:24:28.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetHeaderNames has 3 assertions: 
 Assert.assertNotNull(headerNames); ref {Assert, headerNames} [515-515],
 Assert.assertEquals(nameIndexMap.size(), headerNames.size()); ref {Assert, nameIndexMap, headerNames} [516-516],
 Assert.assertEquals(i, nameIndexMap.get(name).intValue()); ref {Assert, nameIndexMap, name, i} [519-519]
[m[m24.08.2022 - 00:24:28.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetHeaderNamesReadOnly has 1 assertions: 
 Assert.assertNotNull(headerNames); ref {Assert, headerNames} [529-529]
[m[m24.08.2022 - 00:24:28.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetLine has 2 assertions: 
 assertArrayEquals(re, parser.nextRecord().values()); ref {re, parser} [543-543],
 assertNull(parser.nextRecord()); ref {parser} [546-546]
[m[m24.08.2022 - 00:24:28.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetLineNumberWithCR has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetLineNumberWithCRLF has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetLineNumberWithLF has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetOneLine has 1 assertions: 
 assertArrayEquals(RESULT[0], record.values()); ref {record, RESULT} [569-569]
[m[m24.08.2022 - 00:24:28.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetOneLineOneParser has 2 assertions: 
 assertArrayEquals(RESULT[0], record1.values()); ref {record1, RESULT} [586-586],
 assertArrayEquals(RESULT[1], record2.values()); ref {record2, RESULT} [590-590]
[m[m24.08.2022 - 00:24:28.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetRecordNumberWithCR has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetRecordNumberWithCRLF has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetRecordNumberWithLF has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetRecordPositionWithCRLF has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetRecordPositionWithLF has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetRecords has 3 assertions: 
 assertEquals(RESULT.length, records.size()); ref {RESULT.length, records, RESULT} [623-623],
 assertTrue(records.size() > 0); ref {records} [624-624],
 assertArrayEquals(RESULT[i], records.get(i).values()); ref {records, i, RESULT} [626-626]
[m[m24.08.2022 - 00:24:28.203 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testGetRecordWithMultiLineValues has 17 assertions: 
 assertEquals(0, parser.getRecordNumber()); ref {parser} [637-637],
 assertEquals(0, parser.getCurrentLineNumber()); ref {parser} [638-638],
 assertNotNull(record = parser.nextRecord()); ref {parser, record} [639-639],
 assertEquals(3, parser.getCurrentLineNumber()); ref {parser} [640-640],
 assertEquals(1, record.getRecordNumber()); ref {record} [641-641],
 assertEquals(1, parser.getRecordNumber()); ref {parser} [642-642],
 assertNotNull(record = parser.nextRecord()); ref {parser, record} [643-643],
 assertEquals(6, parser.getCurrentLineNumber()); ref {parser} [644-644],
 assertEquals(2, record.getRecordNumber()); ref {record} [645-645],
 assertEquals(2, parser.getRecordNumber()); ref {parser} [646-646],
 assertNotNull(record = parser.nextRecord()); ref {parser, record} [647-647],
 assertEquals(8, parser.getCurrentLineNumber()); ref {parser} [648-648],
 assertEquals(3, record.getRecordNumber()); ref {record} [649-649],
 assertEquals(3, parser.getRecordNumber()); ref {parser} [650-650],
 assertNull(record = parser.nextRecord()); ref {parser, record} [651-651],
 assertEquals(8, parser.getCurrentLineNumber()); ref {parser} [652-652],
 assertEquals(3, parser.getRecordNumber()); ref {parser} [653-653]
[m[m24.08.2022 - 00:24:28.203 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testHeader has 5 assertions: 
 assertTrue(records.hasNext()); ref {records} [664-664],
 assertEquals(record.get(0), record.get("a")); ref {record} [666-666],
 assertEquals(record.get(1), record.get("b")); ref {record} [667-667],
 assertEquals(record.get(2), record.get("c")); ref {record} [668-668],
 assertFalse(records.hasNext()); ref {records} [671-671]
[m[m24.08.2022 - 00:24:28.203 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testHeaderComment has 5 assertions: 
 assertTrue(records.hasNext()); ref {records} [681-681],
 assertEquals(record.get(0), record.get("a")); ref {record} [683-683],
 assertEquals(record.get(1), record.get("b")); ref {record} [684-684],
 assertEquals(record.get(2), record.get("c")); ref {record} [685-685],
 assertFalse(records.hasNext()); ref {records} [688-688]
[m[m24.08.2022 - 00:24:28.203 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testHeaderMissing has 4 assertions: 
 assertTrue(records.hasNext()); ref {records} [698-698],
 assertEquals(record.get(0), record.get("a")); ref {record} [700-700],
 assertEquals(record.get(2), record.get("c")); ref {record} [701-701],
 assertFalse(records.hasNext()); ref {records} [704-704]
[m[m24.08.2022 - 00:24:28.203 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testHeaderMissingWithNull has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.204 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testHeadersMissing has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.204 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testHeadersMissingException has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.204 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testIgnoreCaseHeaderMapping has 3 assertions: 
 assertEquals("1", record.get("one")); ref {record} [731-731],
 assertEquals("2", record.get("two")); ref {record} [732-732],
 assertEquals("3", record.get("THREE")); ref {record} [733-733]
[m[m24.08.2022 - 00:24:28.204 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testIgnoreEmptyLines has 1 assertions: 
 assertEquals(3, records.size()); ref {records} [743-743]
[m[m24.08.2022 - 00:24:28.204 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testInvalidFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [751-751]
[m[m24.08.2022 - 00:24:28.204 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testIterator has 8 assertions: 
 assertTrue(iterator.hasNext()); ref {iterator} [761-761],
 assertArrayEquals(new String[] { "a", "b", "c" }, iterator.next().values()); ref {iterator} [768-768],
 assertArrayEquals(new String[] { "1", "2", "3" }, iterator.next().values()); ref {iterator} [769-769],
 assertTrue(iterator.hasNext()); ref {iterator} [770-770],
 assertTrue(iterator.hasNext()); ref {iterator} [771-771],
 assertTrue(iterator.hasNext()); ref {iterator} [772-772],
 assertArrayEquals(new String[] { "x", "y", "z" }, iterator.next().values()); ref {iterator} [773-773],
 assertFalse(iterator.hasNext()); ref {iterator} [774-774]
[m[m24.08.2022 - 00:24:28.204 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testIteratorSequenceBreaking has 6 assertions: 
 assertEquals(String.valueOf(recordNumber), record.get(0)); ref {recordNumber, record, String} [796-796],
 assertEquals(String.valueOf(recordNumber), record.get(0)); ref {recordNumber, record, String} [805-805],
 assertEquals(String.valueOf(recordNumber), record.get(0)); ref {recordNumber, record, String} [814-814],
 assertEquals(String.valueOf(recordNumber), record.get(0)); ref {recordNumber, record, String} [821-821],
 assertEquals(String.valueOf(recordNumber), record.get(0)); ref {recordNumber, record, String} [830-830],
 assertEquals(String.valueOf(recordNumber), record.get(0)); ref {recordNumber, record, String} [838-838]
[m[m24.08.2022 - 00:24:28.205 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testLineFeedEndings has 1 assertions: 
 assertEquals(4, records.size()); ref {records} [848-848]
[m[m24.08.2022 - 00:24:28.205 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testMappedButNotSetAsOutlook2007ContactExport has 20 assertions: 
 assertTrue(record.isMapped("A")); ref {record} [861-861],
 assertTrue(record.isMapped("B")); ref {record} [862-862],
 assertTrue(record.isMapped("C")); ref {record} [863-863],
 assertTrue(record.isSet("A")); ref {record} [864-864],
 assertTrue(record.isSet("B")); ref {record} [865-865],
 assertFalse(record.isSet("C")); ref {record} [866-866],
 assertEquals("1", record.get("A")); ref {record} [867-867],
 assertEquals("2", record.get("B")); ref {record} [868-868],
 assertFalse(record.isConsistent()); ref {record} [869-869],
 assertTrue(record.isMapped("A")); ref {record} [873-873],
 assertTrue(record.isMapped("B")); ref {record} [874-874],
 assertTrue(record.isMapped("C")); ref {record} [875-875],
 assertTrue(record.isSet("A")); ref {record} [876-876],
 assertTrue(record.isSet("B")); ref {record} [877-877],
 assertTrue(record.isSet("C")); ref {record} [878-878],
 assertEquals("x", record.get("A")); ref {record} [879-879],
 assertEquals("y", record.get("B")); ref {record} [880-880],
 assertEquals("z", record.get("C")); ref {record} [881-881],
 assertTrue(record.isConsistent()); ref {record} [882-882],
 assertFalse(records.hasNext()); ref {records} [884-884]
[m[m24.08.2022 - 00:24:28.205 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testMongoDbCsv has 6 assertions: 
 assertEquals("a a", first.get(0)); ref {first} [895-895],
 assertEquals("b", first.get(1)); ref {first} [896-896],
 assertEquals("c", first.get(2)); ref {first} [897-897],
 assertEquals("d", second.get(0)); ref {second} [900-900],
 assertEquals("e", second.get(1)); ref {second} [901-901],
 assertEquals("f", second.get(2)); ref {second} [902-902]
[m[m24.08.2022 - 00:24:28.205 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testMultipleIterators has 6 assertions: 
 assertEquals("a", first.get(0)); ref {first} [913-913],
 assertEquals("b", first.get(1)); ref {first} [914-914],
 assertEquals("c", first.get(2)); ref {first} [915-915],
 assertEquals("d", second.get(0)); ref {second} [918-918],
 assertEquals("e", second.get(1)); ref {second} [919-919],
 assertEquals("f", second.get(2)); ref {second} [920-920]
[m[m24.08.2022 - 00:24:28.205 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testNewCSVParserNullReaderFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [927-927]
[m[m24.08.2022 - 00:24:28.205 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testNewCSVParserReaderNullFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [934-934]
[m[m24.08.2022 - 00:24:28.205 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testNoHeaderMap has 1 assertions: 
 Assert.assertNull(parser.getHeaderMap()); ref {Assert, parser} [941-941]
[m[m24.08.2022 - 00:24:28.206 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testParse has 0 assertions: 
 
[m[m24.08.2022 - 00:24:28.206 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testParseFileNullFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [981-981]
[m[m24.08.2022 - 00:24:28.206 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testParseNullFileFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [988-988]
[m[m24.08.2022 - 00:24:28.206 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testParseNullPathFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [995-995]
[m[m24.08.2022 - 00:24:28.206 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testParseNullStringFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [1002-1002]
[m[m24.08.2022 - 00:24:28.206 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testParseNullUrlCharsetFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [1009-1009]
[m[m24.08.2022 - 00:24:28.206 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testParserUrlNullCharsetFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [1016-1016]
[m[m24.08.2022 - 00:24:28.206 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testParseStringNullFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [1023-1023]
[m[m24.08.2022 - 00:24:28.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testParseUrlCharsetNullFormat has 1 assertions: 
 Assert.fail("This test should have thrown an exception."); ref {Assert} [1030-1030]
[m[m24.08.2022 - 00:24:28.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testProvidedHeader has 9 assertions: 
 assertTrue(records.hasNext()); ref {records} [1041-1041],
 assertTrue(record.isMapped("A")); ref {record} [1043-1043],
 assertTrue(record.isMapped("B")); ref {record} [1044-1044],
 assertTrue(record.isMapped("C")); ref {record} [1045-1045],
 assertFalse(record.isMapped("NOT MAPPED")); ref {record} [1046-1046],
 assertEquals(record.get(0), record.get("A")); ref {record} [1047-1047],
 assertEquals(record.get(1), record.get("B")); ref {record} [1048-1048],
 assertEquals(record.get(2), record.get("C")); ref {record} [1049-1049],
 assertFalse(records.hasNext()); ref {records} [1052-1052]
[m[m24.08.2022 - 00:24:28.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testProvidedHeaderAuto has 9 assertions: 
 assertTrue(records.hasNext()); ref {records} [1062-1062],
 assertTrue(record.isMapped("a")); ref {record} [1064-1064],
 assertTrue(record.isMapped("b")); ref {record} [1065-1065],
 assertTrue(record.isMapped("c")); ref {record} [1066-1066],
 assertFalse(record.isMapped("NOT MAPPED")); ref {record} [1067-1067],
 assertEquals(record.get(0), record.get("a")); ref {record} [1068-1068],
 assertEquals(record.get(1), record.get("b")); ref {record} [1069-1069],
 assertEquals(record.get(2), record.get("c")); ref {record} [1070-1070],
 assertFalse(records.hasNext()); ref {records} [1073-1073]
[m[m24.08.2022 - 00:24:28.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testRoundtrip has 1 assertions: 
 assertEquals(input, out.toString()); ref {input, out} [1084-1084]
[m[m24.08.2022 - 00:24:28.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testSkipAutoHeader has 3 assertions: 
 assertEquals("1", record.get("a")); ref {record} [1093-1093],
 assertEquals("2", record.get("b")); ref {record} [1094-1094],
 assertEquals("3", record.get("c")); ref {record} [1095-1095]
[m[m24.08.2022 - 00:24:28.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testSkipHeaderOverrideDuplicateHeaders has 3 assertions: 
 assertEquals("1", record.get("X")); ref {record} [1104-1104],
 assertEquals("2", record.get("Y")); ref {record} [1105-1105],
 assertEquals("3", record.get("Z")); ref {record} [1106-1106]
[m[m24.08.2022 - 00:24:28.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testSkipSetAltHeaders has 3 assertions: 
 assertEquals("1", record.get("X")); ref {record} [1115-1115],
 assertEquals("2", record.get("Y")); ref {record} [1116-1116],
 assertEquals("3", record.get("Z")); ref {record} [1117-1117]
[m[m24.08.2022 - 00:24:28.208 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testSkipSetHeader has 3 assertions: 
 assertEquals("1", record.get("a")); ref {record} [1126-1126],
 assertEquals("2", record.get("b")); ref {record} [1127-1127],
 assertEquals("3", record.get("c")); ref {record} [1128-1128]
[m[m24.08.2022 - 00:24:28.208 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testStartWithEmptyLinesThenHeaders has 3 assertions: 
 assertEquals(res.length, records.size()); ref {res, records, res.length} [1141-1141],
 assertTrue(records.size() > 0); ref {records} [1142-1142],
 assertArrayEquals(res[i], records.get(i).values()); ref {res, records, i} [1144-1144]
[m[m24.08.2022 - 00:24:28.208 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testTrailingDelimiter has 4 assertions: 
 assertEquals("1", record.get("X")); ref {record} [1156-1156],
 assertEquals("2", record.get("Y")); ref {record} [1157-1157],
 assertEquals("3", record.get("Z")); ref {record} [1158-1158],
 Assert.assertEquals(3, record.size()); ref {Assert, record} [1159-1159]
[m[m24.08.2022 - 00:24:28.208 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testTrim has 4 assertions: 
 assertEquals("1", record.get("X")); ref {record} [1168-1168],
 assertEquals("2", record.get("Y")); ref {record} [1169-1169],
 assertEquals("3", record.get("Z")); ref {record} [1170-1170],
 Assert.assertEquals(3, record.size()); ref {Assert, record} [1171-1171]
[m[m24.08.2022 - 00:24:28.208 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.CSVParserTest::testRepeatedHeadersAreReturnedInCSVRecordHeaderNames has 1 assertions: 
 assertEquals(Arrays.asList("header1", "header2", "header1"), record.getParser().getHeaderNames()); ref {record, Arrays} [1179-1179]
[m[m24.08.2022 - 00:24:28.209 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m24.08.2022 - 00:24:28.209 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m24.08.2022 - 00:24:28.210 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m24.08.2022 - 00:24:28.210 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.AssertionsTest::testNotNull has 1 assertions: 
 Assertions.notNull(new Object(), "object"); ref {Assertions} [28-28]
[m[m24.08.2022 - 00:24:28.210 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.csv.AssertionsTest::testNotNullNull has 1 assertions: 
 Assertions.notNull(null, "object"); ref {Assertions} [33-33]
[m[m24.08.2022 - 00:24:28.212 [INFO ] ParsingStrategy.mergePartialSuites() - ====================================================================
[m[m24.08.2022 - 00:24:28.212 [INFO ] ParsingStrategy.mergePartialSuites() - Finished parsing the test suite.
[m[m24.08.2022 - 00:24:28.214 [INFO ] ParsingStrategy.mergePartialSuites() - It contains 311 test cases and 976 assertions.
[m[m24.08.2022 - 00:24:28.318 [INFO ] JUnitTestSuiteReducer.reduce() - Starting test suite reduction
[m[32m24.08.2022 - 00:58:50.158 [DEBUG] GeneticReductionStrategy.reduce() - Jenetics Statistics:
[m[32m24.08.2022 - 00:58:50.179 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m24.08.2022 - 00:58:50.179 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |  Time statistics                                                          |
[m[32m24.08.2022 - 00:58:50.179 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m24.08.2022 - 00:58:50.179 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |             Selection: sum=0.144029955000 s; mean=0.001600332833 s        |
[m[32m24.08.2022 - 00:58:50.179 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |              Altering: sum=5.603166042000 s; mean=0.062257400467 s        |
[m[32m24.08.2022 - 00:58:50.179 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |   Fitness calculation: sum=2036.676032586000 s; mean=22.629733695400 s    |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |     Overall execution: sum=2042.409733777000 s; mean=22.693441486411 s    |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |  Evolution statistics                                                     |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |           Generations: 90                                                 |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |               Altered: sum=33,924,937; mean=376943.744444444              |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                Killed: sum=0; mean=0.000000000                            |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |              Invalids: sum=0; mean=0.000000000                            |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |  Population statistics                                                    |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                   Age: max=35; mean=2.099818; var=12.264584               |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |               Fitness:                                                    |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      min  = -1.000000000000                               |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      max  = 371.000000000000                              |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      mean = 142.411617777778                              |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      var  = 16878.460185160984                            |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      std  = 129.917128143909                              |
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m24.08.2022 - 00:58:50.180 [DEBUG] GeneticReductionStrategy.reduce() - Best Result:
[m[32m24.08.2022 - 00:58:50.181 [DEBUG] GeneticReductionStrategy.reduce() - [00001000|01001001|10111101|10011010|10000000|11011101|10101111|01101101|10001011|11110000|10111101|10111010|11010001|01111111|11011111|11011111|11111001|10100011|11110111|01111000|10000110|11111011|11101101|11101010|11000001|00010101|11011001|01011111|11111111|11111111|11111111|11111111|11111111|11011111|11011111|11111111|11111111|11111111|01010000] -> 371
[m[32m24.08.2022 - 00:58:50.277 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testQuoteModeAll
[m[32m24.08.2022 - 00:58:50.277 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithoutNullString
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefault
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExcel
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMySQL
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOracle
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPostgreSqlCsv
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMongoDbCsv
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMongoDbTsv
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPostgreSqlText
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRFC4180
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTDF
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEmptyInput
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadLookahead1
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadLookahead2
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadChar
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCSVUrl0
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCSVUrl1
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCSVFile2
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCSVUrl2
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCSVUrl3
[m[32m24.08.2022 - 00:58:50.278 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCSVFile4
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCSVUrl4
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCSVUrl5
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDelimiterSameAsCommentStartThrowsException
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDelimiterSameAsEscapeThrowsException
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDuplicateHeaderElements
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsCommentStart
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsDelimiter
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsEscape
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsHeader
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsIgnoreEmptyLines
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsIgnoreSurroundingSpaces
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsLeftNoQuoteRightQuote
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsNoQuotes
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsNullString
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsQuoteChar
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsQuotePolicy
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsRecordSeparator
[m[32m24.08.2022 - 00:58:50.279 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsSkipHeaderRecord
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsWithNull
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeSameAsCommentStartThrowsException
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeSameAsCommentStartThrowsExceptionForWrapperType
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatThrowsNullPointerException
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetHeader
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCodeAndWithIgnoreHeaderCase
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewFormat
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullRecordSeparatorCsv106
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testQuoteCharSameAsCommentStartThrowsException
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testQuoteCharSameAsDelimiterThrowsException
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testQuotePolicyNoneWithoutEscapeThrowsException
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRFC4180
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerialization
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToStringAndWithCommentMarkerTakingCharacter
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithCommentStart
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithCommentStartCRThrowsException
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithDelimiter
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithDelimiterLFThrowsException
[m[32m24.08.2022 - 00:58:50.280 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithEmptyEnum
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithEscape
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithEscapeCRThrowsExceptions
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithFirstRecordAsHeader
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithHeader
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithHeaderComments
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithHeaderEnum
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithIgnoreEmptyLines
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithIgnoreSurround
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithNullString
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithQuoteChar
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithQuoteLFThrowsException
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithQuotePolicy
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithRecordSeparatorCR
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithRecordSeparatorCRLF
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithRecordSeparatorLF
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithSystemRecordSeparator
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHasType
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsReady
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseBackwardCompatibility
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseWithCsvFormatAutoFlushOff
[m[32m24.08.2022 - 00:58:50.281 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseWithFlushOff
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseWithFlushOn
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDelimeterQuoteNone
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDelimiterEscaped
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDelimiterPlain
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDisabledComment
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDontQuoteEuroFirstChar
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEolEscaped
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEolPlain
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeBackslash3
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeBackslash5
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeNull1
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeNull4
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeNull5
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExcelPrintAllArrayOfArrays
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExcelPrintAllArrayOfLists
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExcelPrintAllIterableOfArrays
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExcelPrintAllIterableOfLists
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExcelPrinter1
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExcelPrinter2
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHeader
[m[32m24.08.2022 - 00:58:50.282 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHeaderCommentExcel
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHeaderNotSet
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInvalidFormat
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJdbcPrinter
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJdbcPrinterWithResultSet
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJdbcPrinterWithResultSetMetaData
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMongoDbCsvBasic
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMongoDbCsvCommaInValue
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMongoDbCsvTabInValue
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMongoDbTsvCommaInValue
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMongoDbTsvTabInValue
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMongoDbTsvBasic
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiLineComment
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMySqlNullOutput
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMySqlNullStringDefault
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewCsvPrinterAppendableNullFormat
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewCsvPrinterNullAppendableFormat
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPlainEscaped
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPostgreSqlNullStringDefaultText
[m[32m24.08.2022 - 00:58:50.283 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrintCustomNullValues
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrinter2
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrinter3
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrinter5
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrinter6
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrinter7
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrintNullValues
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrintRecordsWithEmptyVector
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrintToFileWithCharsetUtf16Be
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrintToFileWithDefaultCharset
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrintToPathWithDefaultCharset
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testQuoteAll
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testQuoteNonNumeric
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRandomTdf
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSingleLineComment
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSingleQuoteQuoted
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkipHeaderRecordFalse
[m[32m24.08.2022 - 00:58:50.284 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkipHeaderRecordTrue
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTrailingDelimiterOnTwoColumns
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTrimOnOneColumn
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJiraCsv154_withHeaderComments
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetStringInconsistentRecord
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetStringNoHeader
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetUnmappedName
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetUnmappedNegativeInt
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsConsistent
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsInconsistent
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSet
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIterator
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPutInMap
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAndAddColumns
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToMapWithNoHeader
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSurroundingSpacesAreDeleted
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSurroundingTabsAreDeleted
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBackslashWithEscaping
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextToken4
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextToken6
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCR
[m[32m24.08.2022 - 00:58:50.285 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapedLF
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLF
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapedTab
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTab
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBackspace
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapedControlCharacter2
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapingAtEOF
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBackslashEscaping
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBackslashEscaping2
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBOMInputStream_ParserWithInputStream
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBOMInputStream_ParserWithReader
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBOMInputStream_parseWithReader
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCarriageReturnEndings
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCarriageReturnLineFeedEndings
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClose
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCSV57
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultFormat
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDuplicateHeadersNotAllowed
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDuplicateHeadersAllowedByDefault
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEmptyFile
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEmptyLineBehaviorCSV
[m[32m24.08.2022 - 00:58:50.286 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEndOfFileBehaviorCSV
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExcelFormat2
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExcelHeaderCountLessThanData
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFirstEndOfLineCrLf
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFirstEndOfLineLf
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testForEach
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetHeaderNames
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetLine
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetOneLine
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetRecordPositionWithLF
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetRecordWithMultiLineValues
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHeader
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHeaderMissing
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHeadersMissing
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHeadersMissingException
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIgnoreCaseHeaderMapping
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIgnoreEmptyLines
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIterator
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIteratorSequenceBreaking
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMappedButNotSetAsOutlook2007ContactExport
[m[32m24.08.2022 - 00:58:50.287 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultipleIterators
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewCSVParserNullReaderFormat
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewCSVParserReaderNullFormat
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoHeaderMap
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseFileNullFormat
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseNullFileFormat
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseNullPathFormat
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseNullStringFormat
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseNullUrlCharsetFormat
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParserUrlNullCharsetFormat
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseUrlCharsetNullFormat
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkipAutoHeader
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTrailingDelimiter
[m[32m24.08.2022 - 00:58:50.288 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTrim
[m[m24.08.2022 - 00:58:50.291 [INFO ] JUnitTestSuiteReducer.reduce() - Finished test suite reduction
[m[m24.08.2022 - 00:58:50.291 [INFO ] JUnitTestSuiteReducer.reduce() - Reduced test suite from 311 to 215 test cases: 96 redundant test cases found
[m[m24.08.2022 - 00:58:50.293 [INFO ] JUnitTestSuiteReducer.generateReport() - Generated report and wrote it to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/tsr-report-%x%.xml
[m[m24.08.2022 - 00:58:50.293 [INFO ] CompilationUnitExtractor.parseCompilationUnitsFromFilePath() - Collecting compilation units from File Path /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/projects/commons-csv/src/test/java
[m[m24.08.2022 - 00:58:50.591 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote JiraCsv203Test.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/issues/JiraCsv203Test.java
[m[m24.08.2022 - 00:58:50.591 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CSVFormatPredefinedTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/CSVFormatPredefinedTest.java
[m[m24.08.2022 - 00:58:50.593 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ExtendedBufferedReaderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/ExtendedBufferedReaderTest.java
[m[m24.08.2022 - 00:58:50.594 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote JiraCsv213Test.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/issues/JiraCsv213Test.java
[m[m24.08.2022 - 00:58:50.594 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote JiraCsv198Test.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/issues/JiraCsv198Test.java
[m[m24.08.2022 - 00:58:50.596 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CSVFileParserTestUnParameterized.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/CSVFileParserTestUnParameterized.java
[m[m24.08.2022 - 00:58:50.602 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CSVFormatTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/CSVFormatTest.java
[m[m24.08.2022 - 00:58:50.603 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TokenMatchersTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/TokenMatchersTest.java
[m[m24.08.2022 - 00:58:50.615 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CSVPrinterTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/CSVPrinterTest.java
[m[m24.08.2022 - 00:58:50.617 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote PerformanceTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/perf/PerformanceTest.java
[m[m24.08.2022 - 00:58:50.617 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TokenMatchers.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/TokenMatchers.java
[m[m24.08.2022 - 00:58:50.618 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote JiraCsv164Test.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/issues/JiraCsv164Test.java
[m[m24.08.2022 - 00:58:50.618 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote JiraCsv167Test.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/issues/JiraCsv167Test.java
[m[m24.08.2022 - 00:58:50.620 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CSVRecordTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/CSVRecordTest.java
[m[m24.08.2022 - 00:58:50.622 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote LexerTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/LexerTest.java
[m[m24.08.2022 - 00:58:50.632 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CSVParserTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/CSVParserTest.java
[m[m24.08.2022 - 00:58:50.634 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote PerformanceTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/PerformanceTest.java
[m[m24.08.2022 - 00:58:50.634 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote Utils.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/Utils.java
[m[m24.08.2022 - 00:58:50.635 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AssertionsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen/org/apache/commons/csv/AssertionsTest.java
[m[m24.08.2022 - 00:58:50.635 [INFO ] JUnitJSRFacade.logTime() - ******************************************************************
[m[m24.08.2022 - 00:58:50.635 [INFO ] JUnitJSRFacade.logTime() - * Facade Statistics:
[m[m24.08.2022 - 00:58:50.635 [INFO ] JUnitJSRFacade.logTime() - * Parsing took: 0.921 seconds
[m[m24.08.2022 - 00:58:50.635 [INFO ] JUnitJSRFacade.logTime() - * Reduction took: 2062.079 seconds
[m[m24.08.2022 - 00:58:50.635 [INFO ] JUnitJSRFacade.logTime() - * Serialization took: 0.342 seconds
[m[m24.08.2022 - 00:58:50.635 [INFO ] JUnitJSRFacade.logTime() - * Overall: 2063.342 seconds
[m[m24.08.2022 - 00:58:50.635 [INFO ] JUnitJSRFacade.logTime() - ******************************************************************
[mSuccessfully reduced your test suite!
+----------------------------------- Summary -----------------------------------+
| Test suite size: 311 test cases
+-------------------------------------------------------------------------------+
| Found 215 relevant test cases:
|    org.apache.commons.csv.issues.JiraCsv203Test:testQuoteModeAll
|    org.apache.commons.csv.issues.JiraCsv203Test:testWithoutNullString
|    org.apache.commons.csv.CSVFormatPredefinedTest:testDefault
|    org.apache.commons.csv.CSVFormatPredefinedTest:testExcel
|    org.apache.commons.csv.CSVFormatPredefinedTest:testMySQL
|    org.apache.commons.csv.CSVFormatPredefinedTest:testOracle
|    org.apache.commons.csv.CSVFormatPredefinedTest:testPostgreSqlCsv
|    org.apache.commons.csv.CSVFormatPredefinedTest:testMongoDbCsv
|    org.apache.commons.csv.CSVFormatPredefinedTest:testMongoDbTsv
|    org.apache.commons.csv.CSVFormatPredefinedTest:testPostgreSqlText
|    org.apache.commons.csv.CSVFormatPredefinedTest:testRFC4180
|    org.apache.commons.csv.CSVFormatPredefinedTest:testTDF
|    org.apache.commons.csv.ExtendedBufferedReaderTest:testEmptyInput
|    org.apache.commons.csv.ExtendedBufferedReaderTest:testReadLookahead1
|    org.apache.commons.csv.ExtendedBufferedReaderTest:testReadLookahead2
|    org.apache.commons.csv.ExtendedBufferedReaderTest:testReadChar
|    org.apache.commons.csv.CSVFileParserTestUnParameterized:testCSVUrl0
|    org.apache.commons.csv.CSVFileParserTestUnParameterized:testCSVUrl1
|    org.apache.commons.csv.CSVFileParserTestUnParameterized:testCSVFile2
|    org.apache.commons.csv.CSVFileParserTestUnParameterized:testCSVUrl2
|    org.apache.commons.csv.CSVFileParserTestUnParameterized:testCSVUrl3
|    org.apache.commons.csv.CSVFileParserTestUnParameterized:testCSVFile4
|    org.apache.commons.csv.CSVFileParserTestUnParameterized:testCSVUrl4
|    org.apache.commons.csv.CSVFileParserTestUnParameterized:testCSVUrl5
|    org.apache.commons.csv.CSVFormatTest:testDelimiterSameAsCommentStartThrowsException
|    org.apache.commons.csv.CSVFormatTest:testDelimiterSameAsEscapeThrowsException
|    org.apache.commons.csv.CSVFormatTest:testDuplicateHeaderElements
|    org.apache.commons.csv.CSVFormatTest:testEquals
|    org.apache.commons.csv.CSVFormatTest:testEqualsCommentStart
|    org.apache.commons.csv.CSVFormatTest:testEqualsDelimiter
|    org.apache.commons.csv.CSVFormatTest:testEqualsEscape
|    org.apache.commons.csv.CSVFormatTest:testEqualsHeader
|    org.apache.commons.csv.CSVFormatTest:testEqualsIgnoreEmptyLines
|    org.apache.commons.csv.CSVFormatTest:testEqualsIgnoreSurroundingSpaces
|    org.apache.commons.csv.CSVFormatTest:testEqualsLeftNoQuoteRightQuote
|    org.apache.commons.csv.CSVFormatTest:testEqualsNoQuotes
|    org.apache.commons.csv.CSVFormatTest:testEqualsNullString
|    org.apache.commons.csv.CSVFormatTest:testEqualsQuoteChar
|    org.apache.commons.csv.CSVFormatTest:testEqualsQuotePolicy
|    org.apache.commons.csv.CSVFormatTest:testEqualsRecordSeparator
|    org.apache.commons.csv.CSVFormatTest:testEqualsSkipHeaderRecord
|    org.apache.commons.csv.CSVFormatTest:testEqualsWithNull
|    org.apache.commons.csv.CSVFormatTest:testEscapeSameAsCommentStartThrowsException
|    org.apache.commons.csv.CSVFormatTest:testEscapeSameAsCommentStartThrowsExceptionForWrapperType
|    org.apache.commons.csv.CSVFormatTest:testFormatThrowsNullPointerException
|    org.apache.commons.csv.CSVFormatTest:testGetHeader
|    org.apache.commons.csv.CSVFormatTest:testHashCodeAndWithIgnoreHeaderCase
|    org.apache.commons.csv.CSVFormatTest:testNewFormat
|    org.apache.commons.csv.CSVFormatTest:testNullRecordSeparatorCsv106
|    org.apache.commons.csv.CSVFormatTest:testQuoteCharSameAsCommentStartThrowsException
|    org.apache.commons.csv.CSVFormatTest:testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType
|    org.apache.commons.csv.CSVFormatTest:testQuoteCharSameAsDelimiterThrowsException
|    org.apache.commons.csv.CSVFormatTest:testQuotePolicyNoneWithoutEscapeThrowsException
|    org.apache.commons.csv.CSVFormatTest:testRFC4180
|    org.apache.commons.csv.CSVFormatTest:testSerialization
|    org.apache.commons.csv.CSVFormatTest:testToString
|    org.apache.commons.csv.CSVFormatTest:testToStringAndWithCommentMarkerTakingCharacter
|    org.apache.commons.csv.CSVFormatTest:testWithCommentStart
|    org.apache.commons.csv.CSVFormatTest:testWithCommentStartCRThrowsException
|    org.apache.commons.csv.CSVFormatTest:testWithDelimiter
|    org.apache.commons.csv.CSVFormatTest:testWithDelimiterLFThrowsException
|    org.apache.commons.csv.CSVFormatTest:testWithEmptyEnum
|    org.apache.commons.csv.CSVFormatTest:testWithEscape
|    org.apache.commons.csv.CSVFormatTest:testWithEscapeCRThrowsExceptions
|    org.apache.commons.csv.CSVFormatTest:testWithFirstRecordAsHeader
|    org.apache.commons.csv.CSVFormatTest:testWithHeader
|    org.apache.commons.csv.CSVFormatTest:testWithHeaderComments
|    org.apache.commons.csv.CSVFormatTest:testWithHeaderEnum
|    org.apache.commons.csv.CSVFormatTest:testWithIgnoreEmptyLines
|    org.apache.commons.csv.CSVFormatTest:testWithIgnoreSurround
|    org.apache.commons.csv.CSVFormatTest:testWithNullString
|    org.apache.commons.csv.CSVFormatTest:testWithQuoteChar
|    org.apache.commons.csv.CSVFormatTest:testWithQuoteLFThrowsException
|    org.apache.commons.csv.CSVFormatTest:testWithQuotePolicy
|    org.apache.commons.csv.CSVFormatTest:testWithRecordSeparatorCR
|    org.apache.commons.csv.CSVFormatTest:testWithRecordSeparatorCRLF
|    org.apache.commons.csv.CSVFormatTest:testWithRecordSeparatorLF
|    org.apache.commons.csv.CSVFormatTest:testWithSystemRecordSeparator
|    org.apache.commons.csv.TokenMatchersTest:testHasType
|    org.apache.commons.csv.TokenMatchersTest:testIsReady
|    org.apache.commons.csv.CSVPrinterTest:testCloseBackwardCompatibility
|    org.apache.commons.csv.CSVPrinterTest:testCloseWithCsvFormatAutoFlushOff
|    org.apache.commons.csv.CSVPrinterTest:testCloseWithFlushOff
|    org.apache.commons.csv.CSVPrinterTest:testCloseWithFlushOn
|    org.apache.commons.csv.CSVPrinterTest:testDelimeterQuoteNone
|    org.apache.commons.csv.CSVPrinterTest:testDelimiterEscaped
|    org.apache.commons.csv.CSVPrinterTest:testDelimiterPlain
|    org.apache.commons.csv.CSVPrinterTest:testDisabledComment
|    org.apache.commons.csv.CSVPrinterTest:testDontQuoteEuroFirstChar
|    org.apache.commons.csv.CSVPrinterTest:testEolEscaped
|    org.apache.commons.csv.CSVPrinterTest:testEolPlain
|    org.apache.commons.csv.CSVPrinterTest:testEscapeBackslash3
|    org.apache.commons.csv.CSVPrinterTest:testEscapeBackslash5
|    org.apache.commons.csv.CSVPrinterTest:testEscapeNull1
|    org.apache.commons.csv.CSVPrinterTest:testEscapeNull4
|    org.apache.commons.csv.CSVPrinterTest:testEscapeNull5
|    org.apache.commons.csv.CSVPrinterTest:testExcelPrintAllArrayOfArrays
|    org.apache.commons.csv.CSVPrinterTest:testExcelPrintAllArrayOfLists
|    org.apache.commons.csv.CSVPrinterTest:testExcelPrintAllIterableOfArrays
|    org.apache.commons.csv.CSVPrinterTest:testExcelPrintAllIterableOfLists
|    org.apache.commons.csv.CSVPrinterTest:testExcelPrinter1
|    org.apache.commons.csv.CSVPrinterTest:testExcelPrinter2
|    org.apache.commons.csv.CSVPrinterTest:testHeader
|    org.apache.commons.csv.CSVPrinterTest:testHeaderCommentExcel
|    org.apache.commons.csv.CSVPrinterTest:testHeaderNotSet
|    org.apache.commons.csv.CSVPrinterTest:testInvalidFormat
|    org.apache.commons.csv.CSVPrinterTest:testJdbcPrinter
|    org.apache.commons.csv.CSVPrinterTest:testJdbcPrinterWithResultSet
|    org.apache.commons.csv.CSVPrinterTest:testJdbcPrinterWithResultSetMetaData
|    org.apache.commons.csv.CSVPrinterTest:testMongoDbCsvBasic
|    org.apache.commons.csv.CSVPrinterTest:testMongoDbCsvCommaInValue
|    org.apache.commons.csv.CSVPrinterTest:testMongoDbCsvTabInValue
|    org.apache.commons.csv.CSVPrinterTest:testMongoDbTsvCommaInValue
|    org.apache.commons.csv.CSVPrinterTest:testMongoDbTsvTabInValue
|    org.apache.commons.csv.CSVPrinterTest:testMongoDbTsvBasic
|    org.apache.commons.csv.CSVPrinterTest:testMultiLineComment
|    org.apache.commons.csv.CSVPrinterTest:testMySqlNullOutput
|    org.apache.commons.csv.CSVPrinterTest:testMySqlNullStringDefault
|    org.apache.commons.csv.CSVPrinterTest:testNewCsvPrinterAppendableNullFormat
|    org.apache.commons.csv.CSVPrinterTest:testNewCsvPrinterNullAppendableFormat
|    org.apache.commons.csv.CSVPrinterTest:testPlainEscaped
|    org.apache.commons.csv.CSVPrinterTest:testPostgreSqlNullStringDefaultText
|    org.apache.commons.csv.CSVPrinterTest:testPrintCustomNullValues
|    org.apache.commons.csv.CSVPrinterTest:testPrinter2
|    org.apache.commons.csv.CSVPrinterTest:testPrinter3
|    org.apache.commons.csv.CSVPrinterTest:testPrinter5
|    org.apache.commons.csv.CSVPrinterTest:testPrinter6
|    org.apache.commons.csv.CSVPrinterTest:testPrinter7
|    org.apache.commons.csv.CSVPrinterTest:testPrintNullValues
|    org.apache.commons.csv.CSVPrinterTest:testPrintRecordsWithEmptyVector
|    org.apache.commons.csv.CSVPrinterTest:testPrintToFileWithCharsetUtf16Be
|    org.apache.commons.csv.CSVPrinterTest:testPrintToFileWithDefaultCharset
|    org.apache.commons.csv.CSVPrinterTest:testPrintToPathWithDefaultCharset
|    org.apache.commons.csv.CSVPrinterTest:testQuoteAll
|    org.apache.commons.csv.CSVPrinterTest:testQuoteNonNumeric
|    org.apache.commons.csv.CSVPrinterTest:testRandomTdf
|    org.apache.commons.csv.CSVPrinterTest:testSingleLineComment
|    org.apache.commons.csv.CSVPrinterTest:testSingleQuoteQuoted
|    org.apache.commons.csv.CSVPrinterTest:testSkipHeaderRecordFalse
|    org.apache.commons.csv.CSVPrinterTest:testSkipHeaderRecordTrue
|    org.apache.commons.csv.CSVPrinterTest:testTrailingDelimiterOnTwoColumns
|    org.apache.commons.csv.CSVPrinterTest:testTrimOnOneColumn
|    org.apache.commons.csv.issues.JiraCsv164Test:testJiraCsv154_withHeaderComments
|    org.apache.commons.csv.CSVRecordTest:testGetStringInconsistentRecord
|    org.apache.commons.csv.CSVRecordTest:testGetStringNoHeader
|    org.apache.commons.csv.CSVRecordTest:testGetUnmappedName
|    org.apache.commons.csv.CSVRecordTest:testGetUnmappedNegativeInt
|    org.apache.commons.csv.CSVRecordTest:testIsConsistent
|    org.apache.commons.csv.CSVRecordTest:testIsInconsistent
|    org.apache.commons.csv.CSVRecordTest:testIsSet
|    org.apache.commons.csv.CSVRecordTest:testIterator
|    org.apache.commons.csv.CSVRecordTest:testPutInMap
|    org.apache.commons.csv.CSVRecordTest:testRemoveAndAddColumns
|    org.apache.commons.csv.CSVRecordTest:testToMapWithNoHeader
|    org.apache.commons.csv.LexerTest:testSurroundingSpacesAreDeleted
|    org.apache.commons.csv.LexerTest:testSurroundingTabsAreDeleted
|    org.apache.commons.csv.LexerTest:testBackslashWithEscaping
|    org.apache.commons.csv.LexerTest:testNextToken4
|    org.apache.commons.csv.LexerTest:testNextToken6
|    org.apache.commons.csv.LexerTest:testCR
|    org.apache.commons.csv.LexerTest:testEscapedLF
|    org.apache.commons.csv.LexerTest:testLF
|    org.apache.commons.csv.LexerTest:testEscapedTab
|    org.apache.commons.csv.LexerTest:testTab
|    org.apache.commons.csv.LexerTest:testBackspace
|    org.apache.commons.csv.LexerTest:testEscapedControlCharacter2
|    org.apache.commons.csv.LexerTest:testEscapingAtEOF
|    org.apache.commons.csv.CSVParserTest:testBackslashEscaping
|    org.apache.commons.csv.CSVParserTest:testBackslashEscaping2
|    org.apache.commons.csv.CSVParserTest:testBOMInputStream_ParserWithInputStream
|    org.apache.commons.csv.CSVParserTest:testBOMInputStream_ParserWithReader
|    org.apache.commons.csv.CSVParserTest:testBOMInputStream_parseWithReader
|    org.apache.commons.csv.CSVParserTest:testCarriageReturnEndings
|    org.apache.commons.csv.CSVParserTest:testCarriageReturnLineFeedEndings
|    org.apache.commons.csv.CSVParserTest:testClose
|    org.apache.commons.csv.CSVParserTest:testCSV57
|    org.apache.commons.csv.CSVParserTest:testDefaultFormat
|    org.apache.commons.csv.CSVParserTest:testDuplicateHeadersNotAllowed
|    org.apache.commons.csv.CSVParserTest:testDuplicateHeadersAllowedByDefault
|    org.apache.commons.csv.CSVParserTest:testEmptyFile
|    org.apache.commons.csv.CSVParserTest:testEmptyLineBehaviorCSV
|    org.apache.commons.csv.CSVParserTest:testEndOfFileBehaviorCSV
|    org.apache.commons.csv.CSVParserTest:testExcelFormat2
|    org.apache.commons.csv.CSVParserTest:testExcelHeaderCountLessThanData
|    org.apache.commons.csv.CSVParserTest:testFirstEndOfLineCrLf
|    org.apache.commons.csv.CSVParserTest:testFirstEndOfLineLf
|    org.apache.commons.csv.CSVParserTest:testForEach
|    org.apache.commons.csv.CSVParserTest:testGetHeaderNames
|    org.apache.commons.csv.CSVParserTest:testGetLine
|    org.apache.commons.csv.CSVParserTest:testGetOneLine
|    org.apache.commons.csv.CSVParserTest:testGetRecordPositionWithLF
|    org.apache.commons.csv.CSVParserTest:testGetRecordWithMultiLineValues
|    org.apache.commons.csv.CSVParserTest:testHeader
|    org.apache.commons.csv.CSVParserTest:testHeaderMissing
|    org.apache.commons.csv.CSVParserTest:testHeadersMissing
|    org.apache.commons.csv.CSVParserTest:testHeadersMissingException
|    org.apache.commons.csv.CSVParserTest:testIgnoreCaseHeaderMapping
|    org.apache.commons.csv.CSVParserTest:testIgnoreEmptyLines
|    org.apache.commons.csv.CSVParserTest:testIterator
|    org.apache.commons.csv.CSVParserTest:testIteratorSequenceBreaking
|    org.apache.commons.csv.CSVParserTest:testMappedButNotSetAsOutlook2007ContactExport
|    org.apache.commons.csv.CSVParserTest:testMultipleIterators
|    org.apache.commons.csv.CSVParserTest:testNewCSVParserNullReaderFormat
|    org.apache.commons.csv.CSVParserTest:testNewCSVParserReaderNullFormat
|    org.apache.commons.csv.CSVParserTest:testNoHeaderMap
|    org.apache.commons.csv.CSVParserTest:testParseFileNullFormat
|    org.apache.commons.csv.CSVParserTest:testParseNullFileFormat
|    org.apache.commons.csv.CSVParserTest:testParseNullPathFormat
|    org.apache.commons.csv.CSVParserTest:testParseNullStringFormat
|    org.apache.commons.csv.CSVParserTest:testParseNullUrlCharsetFormat
|    org.apache.commons.csv.CSVParserTest:testParserUrlNullCharsetFormat
|    org.apache.commons.csv.CSVParserTest:testParseUrlCharsetNullFormat
|    org.apache.commons.csv.CSVParserTest:testSkipAutoHeader
|    org.apache.commons.csv.CSVParserTest:testTrailingDelimiter
|    org.apache.commons.csv.CSVParserTest:testTrim
+-------------------------------------------------------------------------------+
| Found 96 redundant test cases:
|    org.apache.commons.csv.issues.JiraCsv203Test:testQuoteModeAllNonNull
|    org.apache.commons.csv.issues.JiraCsv203Test:testWithoutQuoteMode
|    org.apache.commons.csv.issues.JiraCsv203Test:testQuoteModeMinimal
|    org.apache.commons.csv.issues.JiraCsv203Test:testQuoteModeNonNumeric
|    org.apache.commons.csv.issues.JiraCsv203Test:testWithEmptyValues
|    org.apache.commons.csv.ExtendedBufferedReaderTest:testReadLine
|    org.apache.commons.csv.issues.JiraCsv198Test:test
|    org.apache.commons.csv.CSVFileParserTestUnParameterized:testCSVFile0
|    org.apache.commons.csv.CSVFileParserTestUnParameterized:testCSVFile1
|    org.apache.commons.csv.CSVFileParserTestUnParameterized:testCSVFile3
|    org.apache.commons.csv.CSVFileParserTestUnParameterized:testCSVFile5
|    org.apache.commons.csv.CSVFormatTest:testEqualsOne
|    org.apache.commons.csv.CSVFormatTest:testFormat
|    org.apache.commons.csv.TokenMatchersTest:testHasContent
|    org.apache.commons.csv.TokenMatchersTest:testMatches
|    org.apache.commons.csv.CSVPrinterTest:testCloseWithCsvFormatAutoFlushOn
|    org.apache.commons.csv.CSVPrinterTest:testDelimeterQuoted
|    org.apache.commons.csv.CSVPrinterTest:testEolQuoted
|    org.apache.commons.csv.CSVPrinterTest:testEscapeBackslash1
|    org.apache.commons.csv.CSVPrinterTest:testEscapeBackslash2
|    org.apache.commons.csv.CSVPrinterTest:testEscapeBackslash4
|    org.apache.commons.csv.CSVPrinterTest:testEscapeNull2
|    org.apache.commons.csv.CSVPrinterTest:testEscapeNull3
|    org.apache.commons.csv.CSVPrinterTest:testHeaderCommentTdf
|    org.apache.commons.csv.CSVPrinterTest:testMongoDbCsvDoubleQuoteInValue
|    org.apache.commons.csv.CSVPrinterTest:testParseCustomNullValues
|    org.apache.commons.csv.CSVPrinterTest:testPlainPlain
|    org.apache.commons.csv.CSVPrinterTest:testPlainQuoted
|    org.apache.commons.csv.CSVPrinterTest:testPostgreSqlNullStringDefaultCsv
|    org.apache.commons.csv.CSVPrinterTest:testPrint
|    org.apache.commons.csv.CSVPrinterTest:testPrinter1
|    org.apache.commons.csv.CSVPrinterTest:testPrinter4
|    org.apache.commons.csv.CSVPrinterTest:testPrintOnePositiveInteger
|    org.apache.commons.csv.CSVPrinterTest:testPrintRecordsWithObjectArray
|    org.apache.commons.csv.CSVPrinterTest:testQuoteCommaFirstChar
|    org.apache.commons.csv.CSVPrinterTest:testRandomDefault
|    org.apache.commons.csv.CSVPrinterTest:testRandomExcel
|    org.apache.commons.csv.CSVPrinterTest:testRandomMySql
|    org.apache.commons.csv.CSVPrinterTest:testRandomRfc4180
|    org.apache.commons.csv.CSVPrinterTest:testTrimOffOneColumn
|    org.apache.commons.csv.CSVPrinterTest:testTrimOnTwoColumns
|    org.apache.commons.csv.perf.PerformanceTest:testParseBigFileRepeat
|    org.apache.commons.csv.perf.PerformanceTest:testReadBigFile
|    org.apache.commons.csv.issues.JiraCsv164Test:testJiraCsv154_withCommentMarker
|    org.apache.commons.csv.issues.JiraCsv167Test:parse
|    org.apache.commons.csv.CSVRecordTest:testGetInt
|    org.apache.commons.csv.CSVRecordTest:testGetString
|    org.apache.commons.csv.CSVRecordTest:testGetUnmappedEnum
|    org.apache.commons.csv.CSVRecordTest:testGetUnmappedPositiveInt
|    org.apache.commons.csv.CSVRecordTest:testIsMapped
|    org.apache.commons.csv.CSVRecordTest:testToMap
|    org.apache.commons.csv.CSVRecordTest:testToMapWithShortRecord
|    org.apache.commons.csv.LexerTest:testIgnoreEmptyLines
|    org.apache.commons.csv.LexerTest:testComments
|    org.apache.commons.csv.LexerTest:testCommentsAndEmptyLines
|    org.apache.commons.csv.LexerTest:testBackslashWithoutEscaping
|    org.apache.commons.csv.LexerTest:testNextToken5
|    org.apache.commons.csv.LexerTest:testDelimiterIsWhitespace
|    org.apache.commons.csv.LexerTest:testEscapedCR
|    org.apache.commons.csv.LexerTest:testEscapedBackspace
|    org.apache.commons.csv.LexerTest:testEscapedFF
|    org.apache.commons.csv.LexerTest:testFF
|    org.apache.commons.csv.LexerTest:testEscapedMySqlNullValue
|    org.apache.commons.csv.LexerTest:testEscapedCharacter
|    org.apache.commons.csv.LexerTest:testEscapedControlCharacter
|    org.apache.commons.csv.CSVParserTest:testEmptyFileHeaderParsing
|    org.apache.commons.csv.CSVParserTest:testEmptyLineBehaviorExcel
|    org.apache.commons.csv.CSVParserTest:testEndOfFileBehaviorExcel
|    org.apache.commons.csv.CSVParserTest:testExcelFormat1
|    org.apache.commons.csv.CSVParserTest:testFirstEndOfLineCr
|    org.apache.commons.csv.CSVParserTest:testGetHeaderMap
|    org.apache.commons.csv.CSVParserTest:testGetHeaderNamesReadOnly
|    org.apache.commons.csv.CSVParserTest:testGetLineNumberWithCR
|    org.apache.commons.csv.CSVParserTest:testGetLineNumberWithCRLF
|    org.apache.commons.csv.CSVParserTest:testGetLineNumberWithLF
|    org.apache.commons.csv.CSVParserTest:testGetOneLineOneParser
|    org.apache.commons.csv.CSVParserTest:testGetRecordNumberWithCR
|    org.apache.commons.csv.CSVParserTest:testGetRecordNumberWithCRLF
|    org.apache.commons.csv.CSVParserTest:testGetRecordNumberWithLF
|    org.apache.commons.csv.CSVParserTest:testGetRecordPositionWithCRLF
|    org.apache.commons.csv.CSVParserTest:testGetRecords
|    org.apache.commons.csv.CSVParserTest:testHeaderComment
|    org.apache.commons.csv.CSVParserTest:testHeaderMissingWithNull
|    org.apache.commons.csv.CSVParserTest:testInvalidFormat
|    org.apache.commons.csv.CSVParserTest:testLineFeedEndings
|    org.apache.commons.csv.CSVParserTest:testParse
|    org.apache.commons.csv.CSVParserTest:testParseStringNullFormat
|    org.apache.commons.csv.CSVParserTest:testProvidedHeader
|    org.apache.commons.csv.CSVParserTest:testProvidedHeaderAuto
|    org.apache.commons.csv.CSVParserTest:testRoundtrip
|    org.apache.commons.csv.CSVParserTest:testSkipHeaderOverrideDuplicateHeaders
|    org.apache.commons.csv.CSVParserTest:testSkipSetAltHeaders
|    org.apache.commons.csv.CSVParserTest:testSkipSetHeader
|    org.apache.commons.csv.CSVParserTest:testRepeatedHeadersAreReturnedInCSVRecordHeaderNames
|    org.apache.commons.csv.AssertionsTest:testNotNull
|    org.apache.commons.csv.AssertionsTest:testNotNullNull
+-------------------------------------------------------------------------------+
| Wrote reduced test suite code to: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-csv/lc/genetic_0.4_0.4/gen
+-------------------------------------------------------------------------------+
