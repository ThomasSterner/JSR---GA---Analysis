WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[32m31.08.2022 - 16:58:06.292 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Current absolute path is: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/projects/commons-io
[m[32m31.08.2022 - 16:58:06.295 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to jar: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/projects/commons-io/target/commons-io-2.6-fat-tests.jar
[m[32m31.08.2022 - 16:58:06.296 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to slicer: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/JSR/slicer/Slicer4J
[m[32m31.08.2022 - 16:58:06.296 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to out dir: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6
[m[32m31.08.2022 - 16:58:06.296 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to out logging jar: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/JSR/slicer/DynamicSlicingCore/DynamicSlicingLoggingClasses/DynamicSlicingLogger.jar
[m[m31.08.2022 - 16:58:06.981 [INFO ] ParsingStrategy.parseTestSuiteFromFilePath() - Parsing test suite from File Path
[m[m31.08.2022 - 16:58:06.981 [INFO ] CompilationUnitExtractor.parseCompilationUnitsFromFilePath() - Collecting compilation units from File Path /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/projects/commons-io/src/test/java
[m[m31.08.2022 - 16:58:07.879 [INFO ] ParsingStrategy.parseTestSuite() - Found 5 test cases
[m[m31.08.2022 - 16:58:07.880 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase::testAdd has 4 assertions: 
 assertEquals("file filters count: ", i, fileFilter.getFileFilters().size()); ref {fileFilter, i} [63-63],
 assertEquals("file filters count: ", i + 1, fileFilter.getFileFilters().size()); ref {fileFilter, i} [65-65],
 assertTrue("found file filter", filters.contains(filter)); ref {filter, filters} [68-68],
 assertEquals("file filters count", filters.size(), fileFilter.getFileFilters().size()); ref {fileFilter, filters} [70-70]
[m[m31.08.2022 - 16:58:07.880 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase::testRemove has 2 assertions: 
 assertTrue("file filter removed", !fileFilter.getFileFilters().contains(filter)); ref {filter, fileFilter} [83-83],
 assertEquals("file filters count", 0, fileFilter.getFileFilters().size()); ref {fileFilter} [85-85]
[m[m31.08.2022 - 16:58:07.880 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase::testNoFilters has 2 assertions: 
 assertFileFiltering(1, (IOFileFilter) fileFilter, file, false); ref {fileFilter, file} [92-92],
 assertFilenameFiltering(1, (IOFileFilter) fileFilter, file, false); ref {fileFilter, file} [93-93]
[m[m31.08.2022 - 16:58:07.881 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase::testFilterBuiltUsingConstructor has 6 assertions: 
 assertFileFiltering(i, filter, this.file, fileResults); ref {filter, i, this.file, fileResults} [117-117],
 assertTrueFiltersInvoked(i, trueFilters, trueResults); ref {trueFilters, i, trueResults} [118-118],
 assertFalseFiltersInvoked(i, falseFilters, falseResults); ref {falseResults, falseFilters, i} [119-119],
 assertFilenameFiltering(i, filter, this.file, filenameResults); ref {filter, filenameResults, i, this.file} [124-124],
 assertTrueFiltersInvoked(i, trueFilters, trueResults); ref {trueFilters, i, trueResults} [125-125],
 assertFalseFiltersInvoked(i, falseFilters, falseResults); ref {falseResults, falseFilters, i} [126-126]
[m[m31.08.2022 - 16:58:07.881 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase::testFilterBuiltUsingAdd has 6 assertions: 
 assertFileFiltering(i, filter, this.file, fileResults); ref {filter, i, this.file, fileResults} [151-151],
 assertTrueFiltersInvoked(i, trueFilters, trueResults); ref {trueFilters, i, trueResults} [152-152],
 assertFalseFiltersInvoked(i, falseFilters, falseResults); ref {falseResults, falseFilters, i} [153-153],
 assertFilenameFiltering(i, filter, this.file, filenameResults); ref {filter, filenameResults, i, this.file} [158-158],
 assertTrueFiltersInvoked(i, trueFilters, trueResults); ref {trueFilters, i, trueResults} [159-159],
 assertFalseFiltersInvoked(i, falseFilters, falseResults); ref {falseResults, falseFilters, i} [160-160]
[m[m31.08.2022 - 16:58:07.884 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m31.08.2022 - 16:58:07.885 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.ComparatorAbstractTestCase::testComparator has 3 assertions: 
 assertEquals("equal", 0, comparator.compare(equalFile1, equalFile2)); ref {comparator, equalFile2, equalFile1} [69-69],
 assertTrue("less", comparator.compare(lessFile, moreFile) < 0); ref {comparator, lessFile, moreFile} [70-70],
 assertTrue("more", comparator.compare(moreFile, lessFile) > 0); ref {comparator, lessFile, moreFile} [71-71]
[m[m31.08.2022 - 16:58:07.885 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.ComparatorAbstractTestCase::testReverseComparator has 3 assertions: 
 assertEquals("equal", 0, reverse.compare(equalFile1, equalFile2)); ref {equalFile2, equalFile1, reverse} [79-79],
 assertTrue("less", reverse.compare(moreFile, lessFile) < 0); ref {lessFile, reverse, moreFile} [80-80],
 assertTrue("more", reverse.compare(lessFile, moreFile) > 0); ref {lessFile, reverse, moreFile} [81-81]
[m[m31.08.2022 - 16:58:07.885 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.ComparatorAbstractTestCase::testSortArrayNull has 1 assertions: 
 assertNull(comparator.sort((File[]) null)); ref {comparator} [89-89]
[m[m31.08.2022 - 16:58:07.885 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.ComparatorAbstractTestCase::testSortArray has 3 assertions: 
 assertSame("equal", lessFile, files[0]); ref {lessFile, files} [102-102],
 assertSame("less", equalFile1, files[1]); ref {files, equalFile1} [103-103],
 assertSame("more", moreFile, files[2]); ref {files, moreFile} [104-104]
[m[m31.08.2022 - 16:58:07.886 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.ComparatorAbstractTestCase::testSortList has 3 assertions: 
 assertSame("equal", lessFile, files.get(0)); ref {lessFile, files} [117-117],
 assertSame("less", equalFile1, files.get(1)); ref {files, equalFile1} [118-118],
 assertSame("more", moreFile, files.get(2)); ref {files, moreFile} [119-119]
[m[m31.08.2022 - 16:58:07.886 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.ComparatorAbstractTestCase::testSortListNull has 1 assertions: 
 assertNull(comparator.sort((List<File>) null)); ref {comparator} [127-127]
[m[m31.08.2022 - 16:58:07.886 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.ComparatorAbstractTestCase::testToString has 2 assertions: 
 assertNotNull("comparator", comparator.toString()); ref {comparator} [135-135],
 assertTrue("reverse", reverse.toString().startsWith("ReverseComparator[")); ref {reverse} [136-136]
[m[m31.08.2022 - 16:58:07.886 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:07.886 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:07.887 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:07.888 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:07.888 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ProxyReaderTest::testNullCharArray has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.888 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ProxyReaderTest::testNullCharBuffer has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.895 [INFO ] ParsingStrategy.parseTestSuite() - Found 11 test cases
[m[m31.08.2022 - 16:58:07.895 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CopyUtilsTest::testCtor has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.896 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CopyUtilsTest::copy_byteArrayToOutputStream has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [73-73],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [74-74]
[m[m31.08.2022 - 16:58:07.896 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CopyUtilsTest::copy_byteArrayToWriter has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [86-86],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [87-87]
[m[m31.08.2022 - 16:58:07.896 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CopyUtilsTest::testCopy_byteArrayToWriterWithEncoding has 1 assertions: 
 assertEquals(inDataStr, writer.toString()); ref {inDataStr, writer} [96-96]
[m[m31.08.2022 - 16:58:07.896 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CopyUtilsTest::testCopy_inputStreamToOutputStream has 4 assertions: 
 assertEquals("Not all bytes were read", 0, in.available()); ref {in} [110-110],
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [111-111],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [112-112],
 assertEquals(inData.length, count); ref {inData.length, inData, count} [113-113]
[m[m31.08.2022 - 16:58:07.896 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CopyUtilsTest::copy_inputStreamToWriter has 3 assertions: 
 assertEquals("Not all bytes were read", 0, in.available()); ref {in} [129-129],
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [130-130],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [131-131]
[m[m31.08.2022 - 16:58:07.897 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CopyUtilsTest::copy_inputStreamToWriterWithEncoding has 1 assertions: 
 assertEquals(inDataStr, writer.toString()); ref {inDataStr, writer} [140-140]
[m[m31.08.2022 - 16:58:07.897 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CopyUtilsTest::testCopy_readerToOutputStream has 2 assertions: 
 // Note: this method *does* flush. It is equivalent to:
// OutputStreamWriter _out = new OutputStreamWriter(fout);
// IOUtils.copy( fin, _out, 4096 ); // copy( Reader, Writer, int );
// _out.flush();
// out = fout;
// Note: rely on the method to flush
assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [161-161],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [162-162]
[m[m31.08.2022 - 16:58:07.897 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CopyUtilsTest::copy_readerToWriter has 3 assertions: 
 assertEquals("The number of characters returned by copy is wrong", inData.length, count); ref {inData.length, inData, count} [178-181],
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [182-182],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [183-183]
[m[m31.08.2022 - 16:58:07.897 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CopyUtilsTest::copy_stringToOutputStream has 2 assertions: 
 // Note: this method *does* flush. It is equivalent to:
// OutputStreamWriter _out = new OutputStreamWriter(fout);
// IOUtils.copy( str, _out, 4096 ); // copy( Reader, Writer, int );
// _out.flush();
// out = fout;
// note: we don't flush here; this IOUtils method does it for us
assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [201-201],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [202-202]
[m[m31.08.2022 - 16:58:07.898 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CopyUtilsTest::copy_stringToWriter has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [216-216],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [217-217]
[m[m31.08.2022 - 16:58:07.957 [INFO ] ParsingStrategy.parseTestSuite() - Found 142 test cases
[m[m31.08.2022 - 16:58:07.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testGetFile has 3 assertions: 
 assertEquals("A", expected_A, FileUtils.getFile("src")); ref {expected_A, FileUtils} [162-162],
 assertEquals("B", expected_B, FileUtils.getFile("src", "main")); ref {expected_B, FileUtils} [163-163],
 assertEquals("C", expected_C, FileUtils.getFile("src", "main", "java")); ref {expected_C, FileUtils} [164-164]
[m[m31.08.2022 - 16:58:07.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testGetFile_Parent has 3 assertions: 
 assertEquals("A", expected_A, FileUtils.getFile(parent, "src")); ref {parent, expected_A, FileUtils} [179-179],
 assertEquals("B", expected_B, FileUtils.getFile(parent, "src", "main")); ref {parent, expected_B, FileUtils} [180-180],
 assertEquals("C", expected_C, FileUtils.getFile(parent, "src", "main", "java")); ref {parent, expected_C, FileUtils} [181-181]
[m[m31.08.2022 - 16:58:07.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testGetTempDirectoryPath has 1 assertions: 
 assertEquals(System.getProperty("java.io.tmpdir"), FileUtils.getTempDirectoryPath()); ref {FileUtils, System} [198-199]
[m[m31.08.2022 - 16:58:07.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testGetTempDirectory has 1 assertions: 
 assertEquals(tempDirectory, FileUtils.getTempDirectory()); ref {tempDirectory, FileUtils} [205-205]
[m[m31.08.2022 - 16:58:07.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testGetUserDirectoryPath has 1 assertions: 
 assertEquals(System.getProperty("user.home"), FileUtils.getUserDirectoryPath()); ref {FileUtils, System} [210-211]
[m[m31.08.2022 - 16:58:07.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testGetUserDirectory has 1 assertions: 
 assertEquals(userDirectory, FileUtils.getUserDirectory()); ref {userDirectory, FileUtils} [217-217]
[m[m31.08.2022 - 16:58:07.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::test_openInputStream_exists has 1 assertions: 
 assertEquals('H', in.read()); ref {in} [226-226]
[m[m31.08.2022 - 16:58:07.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::test_openInputStream_existsButIsDirectory has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::test_openInputStream_notExists has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::test_openOutputStream_noParentCreateFile has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::test_openOutputStream_noParentNoFile has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::test_openOutputStream_exists has 1 assertions: 
 assertTrue(file.exists()); ref {file} [287-287]
[m[m31.08.2022 - 16:58:07.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::test_openOutputStream_existsButIsDirectory has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::test_openOutputStream_notExists has 1 assertions: 
 assertTrue(file.exists()); ref {file} [307-307]
[m[m31.08.2022 - 16:58:07.960 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::test_openOutputStream_notExistsCannotCreate has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.960 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testByteCountToDisplaySizeBigInteger has 20 assertions: 
 assertEquals(FileUtils.byteCountToDisplaySize(BigInteger.ZERO), "0 bytes"); ref {FileUtils, BigInteger.ZERO, BigInteger} [341-341],
 assertEquals(FileUtils.byteCountToDisplaySize(BigInteger.ONE), "1 bytes"); ref {FileUtils, BigInteger, BigInteger.ONE} [342-342],
 assertEquals(FileUtils.byteCountToDisplaySize(b1023), "1023 bytes"); ref {FileUtils, b1023} [343-343],
 assertEquals(FileUtils.byteCountToDisplaySize(KB1), "1 KB"); ref {FileUtils, KB1} [344-344],
 assertEquals(FileUtils.byteCountToDisplaySize(b1025), "1 KB"); ref {FileUtils, b1025} [345-345],
 assertEquals(FileUtils.byteCountToDisplaySize(MB1.subtract(BigInteger.ONE)), "1023 KB"); ref {FileUtils, BigInteger, MB1, BigInteger.ONE} [346-346],
 assertEquals(FileUtils.byteCountToDisplaySize(MB1), "1 MB"); ref {FileUtils, MB1} [347-347],
 assertEquals(FileUtils.byteCountToDisplaySize(MB1.add(BigInteger.ONE)), "1 MB"); ref {FileUtils, BigInteger, MB1, BigInteger.ONE} [348-348],
 assertEquals(FileUtils.byteCountToDisplaySize(GB1.subtract(BigInteger.ONE)), "1023 MB"); ref {FileUtils, GB1, BigInteger, BigInteger.ONE} [349-349],
 assertEquals(FileUtils.byteCountToDisplaySize(GB1), "1 GB"); ref {FileUtils, GB1} [350-350],
 assertEquals(FileUtils.byteCountToDisplaySize(GB1.add(BigInteger.ONE)), "1 GB"); ref {FileUtils, GB1, BigInteger, BigInteger.ONE} [351-351],
 assertEquals(FileUtils.byteCountToDisplaySize(GB2), "2 GB"); ref {FileUtils, GB2} [352-352],
 assertEquals(FileUtils.byteCountToDisplaySize(GB2.subtract(BigInteger.ONE)), "1 GB"); ref {FileUtils, GB2, BigInteger, BigInteger.ONE} [353-353],
 assertEquals(FileUtils.byteCountToDisplaySize(TB1), "1 TB"); ref {TB1, FileUtils} [354-354],
 assertEquals(FileUtils.byteCountToDisplaySize(PB1), "1 PB"); ref {FileUtils, PB1} [355-355],
 assertEquals(FileUtils.byteCountToDisplaySize(EB1), "1 EB"); ref {FileUtils, EB1} [356-356],
 assertEquals(FileUtils.byteCountToDisplaySize(Long.MAX_VALUE), "7 EB"); ref {Long.MAX_VALUE, FileUtils, Long} [357-357],
 // Other MAX_VALUEs
assertEquals(FileUtils.byteCountToDisplaySize(BigInteger.valueOf(Character.MAX_VALUE)), "63 KB"); ref {Character.MAX_VALUE, Character, FileUtils, BigInteger} [359-359],
 assertEquals(FileUtils.byteCountToDisplaySize(BigInteger.valueOf(Short.MAX_VALUE)), "31 KB"); ref {FileUtils, BigInteger, Short.MAX_VALUE, Short} [360-360],
 assertEquals(FileUtils.byteCountToDisplaySize(BigInteger.valueOf(Integer.MAX_VALUE)), "1 GB"); ref {Integer, FileUtils, BigInteger, Integer.MAX_VALUE} [361-361]
[m[m31.08.2022 - 16:58:07.961 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testByteCountToDisplaySizeLong has 20 assertions: 
 assertEquals(FileUtils.byteCountToDisplaySize(0), "0 bytes"); ref {FileUtils} [367-367],
 assertEquals(FileUtils.byteCountToDisplaySize(1), "1 bytes"); ref {FileUtils} [368-368],
 assertEquals(FileUtils.byteCountToDisplaySize(1023), "1023 bytes"); ref {FileUtils} [369-369],
 assertEquals(FileUtils.byteCountToDisplaySize(1024), "1 KB"); ref {FileUtils} [370-370],
 assertEquals(FileUtils.byteCountToDisplaySize(1025), "1 KB"); ref {FileUtils} [371-371],
 assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1023), "1023 KB"); ref {FileUtils} [372-372],
 assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1024), "1 MB"); ref {FileUtils} [373-373],
 assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1025), "1 MB"); ref {FileUtils} [374-374],
 assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1024 * 1023), "1023 MB"); ref {FileUtils} [375-375],
 assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1024 * 1024), "1 GB"); ref {FileUtils} [376-376],
 assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1024 * 1025), "1 GB"); ref {FileUtils} [377-377],
 assertEquals(FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 2), "2 GB"); ref {FileUtils} [378-378],
 assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1024 * 1024 * 2 - 1), "1 GB"); ref {FileUtils} [379-379],
 assertEquals(FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 1024), "1 TB"); ref {FileUtils} [380-380],
 assertEquals(FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 1024 * 1024), "1 PB"); ref {FileUtils} [381-381],
 assertEquals(FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 1024 * 1024 * 1024), "1 EB"); ref {FileUtils} [382-382],
 assertEquals(FileUtils.byteCountToDisplaySize(Long.MAX_VALUE), "7 EB"); ref {Long.MAX_VALUE, FileUtils, Long} [383-383],
 // Other MAX_VALUEs
assertEquals(FileUtils.byteCountToDisplaySize(Character.MAX_VALUE), "63 KB"); ref {Character.MAX_VALUE, Character, FileUtils} [385-385],
 assertEquals(FileUtils.byteCountToDisplaySize(Short.MAX_VALUE), "31 KB"); ref {FileUtils, Short.MAX_VALUE, Short} [386-386],
 assertEquals(FileUtils.byteCountToDisplaySize(Integer.MAX_VALUE), "1 GB"); ref {Integer, FileUtils, Integer.MAX_VALUE} [387-387]
[m[m31.08.2022 - 16:58:07.961 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToFile1 has 1 assertions: 
 assertTrue(file.toString().contains("file.txt")); ref {file} [395-395]
[m[m31.08.2022 - 16:58:07.961 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToFile2 has 1 assertions: 
 assertTrue(file.toString().contains("file name%20.txt")); ref {file} [402-402]
[m[m31.08.2022 - 16:58:07.961 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToFile3 has 2 assertions: 
 assertEquals(null, FileUtils.toFile(null)); ref {FileUtils} [407-407],
 assertEquals(null, FileUtils.toFile(new URL("http://jakarta.apache.org"))); ref {FileUtils} [408-408]
[m[m31.08.2022 - 16:58:07.961 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToFile4 has 1 assertions: 
 assertTrue(file.toString().contains("file% %me.txt%")); ref {file} [415-415]
[m[m31.08.2022 - 16:58:07.961 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToFile5 has 1 assertions: 
 assertEquals("both are 100 % true", file.toString()); ref {file} [423-423]
[m[m31.08.2022 - 16:58:07.962 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToFileUtf8 has 1 assertions: 
 assertTrue(file.toString().contains("\u00E4\u00F6\u00FC\u00DF")); ref {file} [430-430]
[m[m31.08.2022 - 16:58:07.962 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testDecodeUrl has 6 assertions: 
 assertEquals("", FileUtils.decodeUrl("")); ref {FileUtils} [435-435],
 assertEquals("foo", FileUtils.decodeUrl("foo")); ref {FileUtils} [436-436],
 assertEquals("+", FileUtils.decodeUrl("+")); ref {FileUtils} [437-437],
 assertEquals("% ", FileUtils.decodeUrl("%25%20")); ref {FileUtils} [438-438],
 assertEquals("%20", FileUtils.decodeUrl("%2520")); ref {FileUtils} [439-439],
 assertEquals("jar:file:/C:/dir/sub dir/1.0/foo-1.0.jar!/org/Bar.class", FileUtils.decodeUrl("jar:file:/C:/dir/sub%20dir/1.0/foo-1.0.jar!/org/Bar.class")); ref {FileUtils} [440-441]
[m[m31.08.2022 - 16:58:07.962 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testDecodeUrlLenient has 6 assertions: 
 assertEquals(" ", FileUtils.decodeUrl(" ")); ref {FileUtils} [446-446],
 assertEquals("\u00E4\u00F6\u00FC\u00DF", FileUtils.decodeUrl("\u00E4\u00F6\u00FC\u00DF")); ref {FileUtils} [447-447],
 assertEquals("%", FileUtils.decodeUrl("%")); ref {FileUtils} [448-448],
 assertEquals("% ", FileUtils.decodeUrl("%%20")); ref {FileUtils} [449-449],
 assertEquals("%2", FileUtils.decodeUrl("%2")); ref {FileUtils} [450-450],
 assertEquals("%2G", FileUtils.decodeUrl("%2G")); ref {FileUtils} [451-451]
[m[m31.08.2022 - 16:58:07.962 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testDecodeUrlNullSafe has 1 assertions: 
 assertNull(FileUtils.decodeUrl(null)); ref {FileUtils} [456-456]
[m[m31.08.2022 - 16:58:07.962 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testDecodeUrlEncodingUtf8 has 1 assertions: 
 assertEquals("\u00E4\u00F6\u00FC\u00DF", FileUtils.decodeUrl("%C3%A4%C3%B6%C3%BC%C3%9F")); ref {FileUtils} [461-461]
[m[m31.08.2022 - 16:58:07.962 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToFiles1 has 3 assertions: 
 assertEquals(urls.length, files.length); ref {urls, files.length, files, urls.length} [474-474],
 assertEquals("File: " + files[0], true, files[0].toString().contains("file1.txt")); ref {files} [475-475],
 assertEquals("File: " + files[1], true, files[1].toString().contains("file2.txt")); ref {files} [476-476]
[m[m31.08.2022 - 16:58:07.963 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToFiles2 has 3 assertions: 
 assertEquals(urls.length, files.length); ref {urls, files.length, files, urls.length} [487-487],
 assertEquals("File: " + files[0], true, files[0].toString().contains("file1.txt")); ref {files} [488-488],
 assertEquals("File: " + files[1], null, files[1]); ref {files} [489-489]
[m[m31.08.2022 - 16:58:07.963 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToFiles3 has 1 assertions: 
 assertEquals(0, files.length); ref {files.length, files} [497-497]
[m[m31.08.2022 - 16:58:07.963 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToFiles3a has 1 assertions: 
 assertEquals(0, files.length); ref {files.length, files} [505-505]
[m[m31.08.2022 - 16:58:07.963 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToFiles4 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.963 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToURLs1 has 7 assertions: 
 assertEquals(files.length, urls.length); ref {urls, files.length, files, urls.length} [532-532],
 assertTrue(urls[0].toExternalForm().startsWith("file:")); ref {urls} [533-533],
 assertTrue(urls[0].toExternalForm().contains("file1.txt")); ref {urls} [534-534],
 assertTrue(urls[1].toExternalForm().startsWith("file:")); ref {urls} [535-535],
 assertTrue(urls[1].toExternalForm().contains("file2.txt")); ref {urls} [536-536],
 // Test escaped char
assertTrue(urls[2].toExternalForm().startsWith("file:")); ref {urls} [539-539],
 assertTrue(urls[2].toExternalForm().contains("test%20file.txt")); ref {urls} [540-540]
[m[m31.08.2022 - 16:58:07.964 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testToURLs3a has 1 assertions: 
 assertEquals(0, urls.length); ref {urls, urls.length} [568-568]
[m[m31.08.2022 - 16:58:07.964 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testContentEquals has 12 assertions: 
 // both don't  exist
assertTrue(FileUtils.contentEquals(file, file)); ref {file, FileUtils} [579-579],
 assertTrue(FileUtils.contentEquals(file, file2)); ref {file, FileUtils, file2} [580-580],
 assertTrue(FileUtils.contentEquals(file2, file2)); ref {FileUtils, file2} [581-581],
 assertTrue(FileUtils.contentEquals(file2, file)); ref {file, FileUtils, file2} [582-582],
 assertFalse(FileUtils.contentEquals(objFile1, objFile2)); ref {FileUtils, objFile1, objFile2} [614-614],
 assertFalse(FileUtils.contentEquals(objFile1b, objFile2)); ref {FileUtils, objFile1b, objFile2} [615-615],
 assertTrue(FileUtils.contentEquals(objFile1, objFile1b)); ref {FileUtils, objFile1b, objFile1} [616-616],
 assertTrue(FileUtils.contentEquals(objFile1, objFile1)); ref {FileUtils, objFile1} [618-618],
 assertTrue(FileUtils.contentEquals(objFile1b, objFile1b)); ref {FileUtils, objFile1b} [619-619],
 assertTrue(FileUtils.contentEquals(objFile2, objFile2)); ref {FileUtils, objFile2} [620-620],
 assertTrue(FileUtils.contentEquals(file, file)); ref {file, FileUtils} [625-625],
 assertTrue(FileUtils.contentEquals(file, file2)); ref {file, FileUtils, file2} [626-626]
[m[m31.08.2022 - 16:58:07.964 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testContentEqualsIgnoreEOL has 30 assertions: 
 // both don't  exist
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null)); ref {FileUtils, file1} [635-635],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null)); ref {FileUtils, file2, file1} [636-636],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(file2, file2, null)); ref {FileUtils, file2} [637-637],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(file2, file1, null)); ref {FileUtils, file2, file1} [638-638],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null)); ref {tfile1, FileUtils} [661-661],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null)); ref {tfile2, FileUtils} [662-662],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null)); ref {tfile3, FileUtils} [663-663],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null)); ref {tfile1, tfile2, FileUtils} [665-665],
 assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null)); ref {tfile1, tfile3, FileUtils} [666-666],
 assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null)); ref {tfile2, tfile3, FileUtils} [667-667],
 assertNotNull(urlCR); ref {urlCR} [670-670],
 assertTrue(cr.exists()); ref {cr} [672-672],
 assertNotNull(urlCRLF); ref {urlCRLF} [675-675],
 assertTrue(crlf.exists()); ref {crlf} [677-677],
 assertNotNull(urlLF); ref {urlLF} [680-680],
 assertTrue(lf.exists()); ref {lf} [682-682],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, cr, null)); ref {FileUtils, cr} [684-684],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null)); ref {FileUtils, crlf} [685-685],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(lf, lf, null)); ref {FileUtils, lf} [686-686],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, crlf, null)); ref {FileUtils, crlf, cr} [688-688],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, lf, null)); ref {FileUtils, lf, cr} [689-689],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf, lf, null)); ref {FileUtils, crlf, lf} [690-690],
 // Check the files behave OK when EOL is not ignored
assertTrue(FileUtils.contentEquals(cr, cr)); ref {FileUtils, cr} [693-693],
 assertTrue(FileUtils.contentEquals(crlf, crlf)); ref {FileUtils, crlf} [694-694],
 assertTrue(FileUtils.contentEquals(lf, lf)); ref {FileUtils, lf} [695-695],
 assertFalse(FileUtils.contentEquals(cr, crlf)); ref {FileUtils, crlf, cr} [697-697],
 assertFalse(FileUtils.contentEquals(cr, lf)); ref {FileUtils, lf, cr} [698-698],
 assertFalse(FileUtils.contentEquals(crlf, lf)); ref {FileUtils, crlf, lf} [699-699],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null)); ref {FileUtils, file1} [704-704],
 assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null)); ref {FileUtils, file2, file1} [705-705]
[m[m31.08.2022 - 16:58:07.965 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyURLToFile has 1 assertions: 
 assertTrue("Content is not equal.", IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis)); ref {fis, IOUtils, resourceName} [722-726]
[m[m31.08.2022 - 16:58:07.965 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyURLToFileWithTimeout has 1 assertions: 
 assertTrue("Content is not equal.", IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis)); ref {fis, IOUtils, resourceName} [743-747]
[m[m31.08.2022 - 16:58:07.965 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testForceMkdir has 2 assertions: 
 assertTrue("Test file does not exist.", testFile.exists()); ref {testFile} [763-763],
 assertTrue("Directory was not created.", testFile.exists()); ref {testFile} [776-776]
[m[m31.08.2022 - 16:58:07.965 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testForceMkdirParent has 8 assertions: 
 // Tests with existing directory
assertTrue(getTestDirectory().exists()); ref {} [782-782],
 assertFalse(testParentDir.exists()); ref {testParentDir} [785-785],
 assertFalse(testParentDir.exists()); ref {testParentDir} [787-787],
 assertFalse(testFile.exists()); ref {testFile} [788-788],
 assertTrue(testParentDir.exists()); ref {testParentDir} [791-791],
 assertFalse(testFile.exists()); ref {testFile} [792-792],
 assertTrue(testParentDir.exists()); ref {testParentDir} [795-795],
 assertFalse(testFile.exists()); ref {testFile} [796-796]
[m[m31.08.2022 - 16:58:07.965 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testSizeOfDirectory has 1 assertions: 
 assertEquals("Unexpected directory size", TEST_DIRECTORY_SIZE, FileUtils.sizeOfDirectory(file)); ref {TEST_DIRECTORY_SIZE, file, FileUtils} [829-832]
[m[m31.08.2022 - 16:58:07.966 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testSizeOfDirectoryAsBigInteger has 2 assertions: 
 assertEquals("Unexpected directory size", TEST_DIRECTORY_SIZE_BI, FileUtils.sizeOfDirectoryAsBigInteger(file)); ref {file, FileUtils, TEST_DIRECTORY_SIZE_BI} [877-877],
 assertEquals("Unexpected directory size", TEST_DIRECTORY_SIZE_GT_ZERO_BI, FileUtils.sizeOfDirectoryAsBigInteger(file)); ref {file, FileUtils, TEST_DIRECTORY_SIZE_GT_ZERO_BI} [897-898]
[m[m31.08.2022 - 16:58:07.966 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCompareSizeOf has 2 assertions: 
 assertEquals("Size should not change", sizeLong1, sizeLong2); ref {sizeLong1, sizeLong2} [911-911],
 assertEquals("longSize should equal BigSize", sizeLong1, sizeBig.longValue()); ref {sizeBig, sizeLong1} [912-912]
[m[m31.08.2022 - 16:58:07.966 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testSizeOf has 3 assertions: 
 // New file
assertEquals(0, FileUtils.sizeOf(file)); ref {file, FileUtils} [938-938],
 // Existing file
assertEquals("Unexpected files size", testFile1Size, FileUtils.sizeOf(testFile1)); ref {testFile1, FileUtils, testFile1Size} [942-944],
 // Existing directory
assertEquals("Unexpected directory size", TEST_DIRECTORY_SIZE, FileUtils.sizeOf(getTestDirectory())); ref {TEST_DIRECTORY_SIZE, FileUtils} [947-949]
[m[m31.08.2022 - 16:58:07.966 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testSizeOfAsBigInteger has 3 assertions: 
 // New file
assertEquals(BigInteger.ZERO, FileUtils.sizeOfAsBigInteger(file)); ref {file, BigInteger.ZERO, FileUtils, BigInteger} [975-975],
 // Existing file
assertEquals("Unexpected files size", BigInteger.valueOf(testFile1Size), FileUtils.sizeOfAsBigInteger(testFile1)); ref {testFile1, FileUtils, BigInteger, testFile1Size} [979-981],
 // Existing directory
assertEquals("Unexpected directory size", TEST_DIRECTORY_SIZE_BI, FileUtils.sizeOfAsBigInteger(getTestDirectory())); ref {FileUtils, TEST_DIRECTORY_SIZE_BI} [984-986]
[m[m31.08.2022 - 16:58:07.966 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testIsFileNewerOlder has 16 assertions: 
 // Test isFileNewer()
assertFalse("Old File - Newer - File", FileUtils.isFileNewer(oldFile, reference)); ref {reference, oldFile, FileUtils} [1052-1052],
 assertFalse("Old File - Newer - Date", FileUtils.isFileNewer(oldFile, date)); ref {date, oldFile, FileUtils} [1053-1053],
 assertFalse("Old File - Newer - Mili", FileUtils.isFileNewer(oldFile, now)); ref {oldFile, FileUtils, now} [1054-1054],
 assertTrue("New File - Newer - File", FileUtils.isFileNewer(newFile, reference)); ref {reference, FileUtils, newFile} [1055-1055],
 assertTrue("New File - Newer - Date", FileUtils.isFileNewer(newFile, date)); ref {date, FileUtils, newFile} [1056-1056],
 assertTrue("New File - Newer - Mili", FileUtils.isFileNewer(newFile, now)); ref {FileUtils, now, newFile} [1057-1057],
 assertFalse("Invalid - Newer - File", FileUtils.isFileNewer(invalidFile, reference)); ref {reference, FileUtils, invalidFile} [1058-1058],
 assertTrue("Message should contain: " + invalidFileName + " but was: " + message, message.contains(invalidFileName)); ref {invalidFileName, message} [1065-1065],
 // Test isFileOlder()
assertTrue("Old File - Older - File", FileUtils.isFileOlder(oldFile, reference)); ref {reference, oldFile, FileUtils} [1069-1069],
 assertTrue("Old File - Older - Date", FileUtils.isFileOlder(oldFile, date)); ref {date, oldFile, FileUtils} [1070-1070],
 assertTrue("Old File - Older - Mili", FileUtils.isFileOlder(oldFile, now)); ref {oldFile, FileUtils, now} [1071-1071],
 assertFalse("New File - Older - File", FileUtils.isFileOlder(newFile, reference)); ref {reference, FileUtils, newFile} [1072-1072],
 assertFalse("New File - Older - Date", FileUtils.isFileOlder(newFile, date)); ref {date, FileUtils, newFile} [1073-1073],
 assertFalse("New File - Older - Mili", FileUtils.isFileOlder(newFile, now)); ref {FileUtils, now, newFile} [1074-1074],
 assertFalse("Invalid - Older - File", FileUtils.isFileOlder(invalidFile, reference)); ref {reference, FileUtils, invalidFile} [1075-1075],
 assertTrue("Message should contain: " + invalidFileName + " but was: " + message, message.contains(invalidFileName)); ref {invalidFileName, message} [1081-1081]
[m[m31.08.2022 - 16:58:07.967 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyFile1 has 2 assertions: 
 assertTrue("Check Exist", destination.exists()); ref {destination} [1165-1165],
 assertEquals("Check Full copy", testFile1Size, destination.length()); ref {destination, testFile1Size} [1166-1166]
[m[m31.08.2022 - 16:58:07.967 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyFileToOutputStream has 2 assertions: 
 assertEquals("Check Full copy size", testFile1Size, destination.size()); ref {destination, testFile1Size} [1176-1176],
 Assert.assertArrayEquals("Check Full copy", expected, destination.toByteArray()); ref {Assert, expected, destination} [1178-1178]
[m[m31.08.2022 - 16:58:07.967 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyFileLarge has 2 assertions: 
 assertTrue("Check Exist", destination.exists()); ref {destination} [1204-1204],
 assertEquals("Check Full copy", largeFile.length(), destination.length()); ref {destination, largeFile} [1205-1205]
[m[m31.08.2022 - 16:58:07.967 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyFile2 has 2 assertions: 
 assertTrue("Check Exist", destination.exists()); ref {destination} [1217-1217],
 assertEquals("Check Full copy", testFile2Size, destination.length()); ref {destination, testFile2Size} [1218-1218]
[m[m31.08.2022 - 16:58:07.967 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyToSelf has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.967 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyFile2WithoutFileDatePreservation has 2 assertions: 
 assertTrue("Check Exist", destination.exists()); ref {destination} [1247-1247],
 assertEquals("Check Full copy", testFile2Size, destination.length()); ref {destination, testFile2Size} [1248-1248]
[m[m31.08.2022 - 16:58:07.968 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyDirectoryToDirectory_NonExistingDest has 5 assertions: 
 assertTrue("Check exists", destDir.exists()); ref {destDir} [1289-1289],
 assertTrue("Check exists", actualDestDir.exists()); ref {actualDestDir} [1290-1290],
 assertTrue("Size > 0", srcSize > 0); ref {srcSize} [1292-1292],
 assertEquals("Check size", srcSize, FileUtils.sizeOfDirectory(actualDestDir)); ref {FileUtils, srcSize, actualDestDir} [1293-1293],
 assertTrue(new File(actualDestDir, "sub/A.txt").exists()); ref {actualDestDir} [1294-1294]
[m[m31.08.2022 - 16:58:07.968 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyDirectoryToNonExistingDest has 4 assertions: 
 assertTrue("Check exists", destDir.exists()); ref {destDir} [1332-1332],
 assertTrue("Size > 0", sizeOfSrcDirectory > 0); ref {sizeOfSrcDirectory} [1334-1334],
 assertEquals("Check size", sizeOfSrcDirectory, FileUtils.sizeOfDirectory(destDir)); ref {FileUtils, sizeOfSrcDirectory, destDir} [1335-1335],
 assertTrue(new File(destDir, "sub/A.txt").exists()); ref {destDir} [1336-1336]
[m[m31.08.2022 - 16:58:07.968 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyDirectoryToExistingDest has 3 assertions: 
 assertTrue("Size > 0", srcSize > 0); ref {srcSize} [1376-1376],
 assertEquals(srcSize, FileUtils.sizeOfDirectory(destDir)); ref {FileUtils, destDir, srcSize} [1377-1377],
 assertTrue(new File(destDir, "sub/A.txt").exists()); ref {destDir} [1378-1378]
[m[m31.08.2022 - 16:58:07.968 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyDirectoryFiltered has 4 assertions: 
 assertEquals(3, files.size()); ref {files} [1393-1393],
 assertEquals("parent", files.get(0).getName()); ref {files} [1394-1394],
 assertEquals("child", files.get(1).getName()); ref {files} [1395-1395],
 assertEquals("file3.txt", files.get(2).getName()); ref {files} [1396-1396]
[m[m31.08.2022 - 16:58:07.968 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyDirectoryPreserveDates has 12 assertions: 
 assertTrue(1000000000000L != target.lastModified()); ref {target} [1422-1422],
 assertTrue(1000000001000L != targetDirectory.lastModified()); ref {targetDirectory} [1423-1423],
 assertTrue(1000000002000L != targetFile.lastModified()); ref {targetFile} [1424-1424],
 assertEquals(1000000000000L, target.lastModified()); ref {target} [1429-1429],
 assertEquals(1000000001000L, targetDirectory.lastModified()); ref {targetDirectory} [1430-1430],
 assertEquals(1000000002000L, targetFile.lastModified()); ref {targetFile} [1431-1431],
 assertEquals(1000000000000L, target.lastModified()); ref {target} [1437-1437],
 assertEquals(1000000001000L, targetDirectory.lastModified()); ref {targetDirectory} [1438-1438],
 assertEquals(1000000002000L, targetFile.lastModified()); ref {targetFile} [1439-1439],
 assertEquals(1000000000000L, target.lastModified()); ref {target} [1445-1445],
 assertEquals(1000000001000L, targetDirectory.lastModified()); ref {targetDirectory} [1446-1446],
 assertEquals(1000000002000L, targetFile.lastModified()); ref {targetFile} [1447-1447]
[m[m31.08.2022 - 16:58:07.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyDirectoryToChild has 4 assertions: 
 assertEquals(expectedCount, LIST_WALKER.list(grandParentDir).size()); ref {LIST_WALKER, grandParentDir, expectedCount} [1464-1464],
 assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir)); ref {FileUtils, grandParentDir, expectedSize} [1465-1465],
 assertTrue("Count > 0", expectedCount > 0); ref {expectedCount} [1466-1466],
 assertTrue("Size > 0", expectedSize > 0); ref {expectedSize} [1467-1467]
[m[m31.08.2022 - 16:58:07.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyDirectoryToGrandChild has 3 assertions: 
 assertEquals(expectedCount, LIST_WALKER.list(grandParentDir).size()); ref {LIST_WALKER, grandParentDir, expectedCount} [1481-1481],
 assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir)); ref {FileUtils, grandParentDir, expectedSize} [1482-1482],
 assertTrue("Size > 0", expectedSize > 0); ref {expectedSize} [1483-1483]
[m[m31.08.2022 - 16:58:07.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyDirectoryToItself has 1 assertions: 
 assertEquals(1, LIST_WALKER.list(dir).size()); ref {LIST_WALKER, dir} [1492-1492]
[m[m31.08.2022 - 16:58:07.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyDirectoryErrors has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyToDirectoryWithFile has 2 assertions: 
 assertTrue("Check Exists", destination.exists()); ref {destination} [1566-1566],
 assertEquals("Check Full Copy", testFile1Size, destination.length()); ref {destination, testFile1Size} [1567-1567]
[m[m31.08.2022 - 16:58:07.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyToDirectoryWithFileSourceIsNull has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyToDirectoryWithFileSourceDoesNotExist has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyToDirectoryWithDirectory has 6 assertions: 
 // Check the directory was created
assertTrue("Check Exists", outputDirDestination.exists()); ref {outputDirDestination} [1601-1601],
 assertTrue("Check Directory", outputDirDestination.isDirectory()); ref {outputDirDestination} [1602-1602],
 // Check each file
assertTrue("Check Exists", destFile1.exists()); ref {destFile1} [1605-1605],
 assertEquals("Check Full Copy", testFile1Size, destFile1.length()); ref {testFile1Size, destFile1} [1606-1606],
 assertTrue("Check Exists", destFile2.exists()); ref {destFile2} [1607-1607],
 assertEquals("Check Full Copy", testFile2Size, destFile2.length()); ref {destFile2, testFile2Size} [1608-1608]
[m[m31.08.2022 - 16:58:07.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyToDirectoryWithIterable has 4 assertions: 
 // Check each file
assertTrue("Check Exists", destFile1.exists()); ref {destFile1} [1627-1627],
 assertEquals("Check Full Copy", testFile1Size, destFile1.length()); ref {testFile1Size, destFile1} [1628-1628],
 assertTrue("Check Exists", destFile2.exists()); ref {destFile2} [1629-1629],
 assertEquals("Check Full Copy", testFile2Size, destFile2.length()); ref {destFile2, testFile2Size} [1630-1630]
[m[m31.08.2022 - 16:58:07.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyToDirectoryWithIterableSourceIsNull has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyToDirectoryWithIterableSourceDoesNotExist has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testForceDeleteAFile1 has 2 assertions: 
 assertTrue("Copy1.txt doesn't exist to delete", destination.exists()); ref {destination} [1650-1650],
 assertTrue("Check No Exist", !destination.exists()); ref {destination} [1652-1652]
[m[m31.08.2022 - 16:58:07.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testForceDeleteAFile2 has 2 assertions: 
 assertTrue("Copy2.txt doesn't exist to delete", destination.exists()); ref {destination} [1659-1659],
 assertTrue("Check No Exist", !destination.exists()); ref {destination} [1661-1661]
[m[m31.08.2022 - 16:58:07.971 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testForceDeleteAFile3 has 1 assertions: 
 assertTrue("Check No Exist", !destination.exists()); ref {destination} [1667-1667]
[m[m31.08.2022 - 16:58:07.971 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyFile1ToDir has 2 assertions: 
 assertTrue("Check Exist", destination.exists()); ref {destination} [1690-1690],
 assertEquals("Check Full copy", testFile1Size, destination.length()); ref {destination, testFile1Size} [1691-1691]
[m[m31.08.2022 - 16:58:07.971 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testCopyFile2ToDir has 2 assertions: 
 assertTrue("Check Exist", destination.exists()); ref {destination} [1717-1717],
 assertEquals("Check Full copy", testFile2Size, destination.length()); ref {destination, testFile2Size} [1718-1718]
[m[m31.08.2022 - 16:58:07.971 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testForceDeleteDir has 2 assertions: 
 assertTrue("TestDirectory must exist", testDirectory.exists()); ref {testDirectory} [1729-1729],
 assertFalse("TestDirectory must not exist", testDirectory.exists()); ref {testDirectory} [1731-1731]
[m[m31.08.2022 - 16:58:07.971 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testFileUtils has 5 assertions: 
 assertTrue(file2.exists()); ref {file2} [1751-1751],
 assertTrue(file2.length() > 0); ref {file2} [1752-1752],
 assertTrue("Second file's contents correct", filename.equals(file2contents)); ref {filename, file2contents} [1755-1757],
 assertTrue(file2.delete()); ref {file2} [1759-1759],
 assertEquals("FileUtils.fileRead()", "This is a test", contents); ref {contents} [1762-1762]
[m[m31.08.2022 - 16:58:07.971 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testTouch has 10 assertions: 
 assertTrue("Bad test: test file still exists", !file.exists()); ref {file} [1772-1772],
 assertTrue("FileUtils.touch() created file", file.exists()); ref {file} [1774-1774],
 assertEquals("Created empty file.", 0, file.length()); ref {file} [1776-1776],
 assertEquals("Wrote one byte to file", 1, file.length()); ref {file} [1779-1779],
 assertEquals("Bad test: set lastModified failed", true, res); ref {res} [1782-1782],
 assertEquals("Bad test: set lastModified set incorrect value", y2k, file.lastModified()); ref {y2k, file} [1783-1783],
 assertEquals("FileUtils.touch() didn't empty the file.", 1, file.length()); ref {file} [1786-1786],
 assertEquals("FileUtils.touch() changed lastModified", false, y2k == file.lastModified()); ref {y2k, file} [1787-1787],
 assertEquals("FileUtils.touch() changed lastModified to more than now-3s", true, file.lastModified() >= now - 3000); ref {file, now} [1788-1788],
 assertEquals("FileUtils.touch() changed lastModified to less than now+3s", true, file.lastModified() <= now + 3000); ref {file, now} [1789-1789]
[m[m31.08.2022 - 16:58:07.971 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testListFiles has 2 assertions: 
 assertEquals(fileNames.length, files.size()); ref {fileNames.length, files, fileNames} [1826-1826],
 assertEquals(foundFileNames.size(), fileNames.length); ref {foundFileNames, fileNames.length, fileNames} [1840-1840]
[m[m31.08.2022 - 16:58:07.972 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testListFilesWithDirs has 5 assertions: 
 assertEquals(4, files.size()); ref {files} [1874-1874],
 assertTrue("Should contain the directory.", files.contains(subDir1)); ref {files, subDir1} [1875-1875],
 assertTrue("Should contain the directory.", files.contains(subDir2)); ref {files, subDir2} [1876-1876],
 assertTrue("Should contain the file.", files.contains(someFile)); ref {files, someFile} [1877-1877],
 assertTrue("Should contain the directory.", files.contains(subDir3)); ref {files, subDir3} [1878-1878]
[m[m31.08.2022 - 16:58:07.972 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testIterateFiles has 1 assertions: 
 assertEquals(foundFileNames.size(), fileNames.length); ref {foundFileNames, fileNames.length, fileNames} [1925-1925]
[m[m31.08.2022 - 16:58:07.972 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testIterateFilesAndDirs has 2 assertions: 
 assertTrue("Should contain the directory/file", filesAndDirs.contains(file)); ref {file, filesAndDirs} [1965-1965],
 assertEquals(filesCount, filesAndDirs.size()); ref {filesCount, filesAndDirs} [1968-1968]
[m[m31.08.2022 - 16:58:07.972 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testReadFileToStringWithDefaultEncoding has 1 assertions: 
 assertEquals("Hello /u1234", data); ref {data} [1980-1980]
[m[m31.08.2022 - 16:58:07.972 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testReadFileToStringWithEncoding has 1 assertions: 
 assertEquals("Hello /u1234", data); ref {data} [1992-1992]
[m[m31.08.2022 - 16:58:07.972 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testReadFileToByteArray has 4 assertions: 
 assertEquals(3, data.length); ref {data.length, data} [2005-2005],
 assertEquals(11, data[0]); ref {data} [2006-2006],
 assertEquals(21, data[1]); ref {data} [2007-2007],
 assertEquals(31, data[2]); ref {data} [2008-2008]
[m[m31.08.2022 - 16:58:07.972 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testReadLines has 1 assertions: 
 assertEquals(Arrays.asList(data), lines); ref {data, Arrays, lines} [2019-2019]
[m[m31.08.2022 - 16:58:07.973 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteStringToFile1 has 1 assertions: 
 TestUtils.assertEqualContent(text, file); ref {TestUtils, file, text} [2030-2030]
[m[m31.08.2022 - 16:58:07.973 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteStringToFile2 has 1 assertions: 
 TestUtils.assertEqualContent(text, file); ref {TestUtils, file, text} [2038-2038]
[m[m31.08.2022 - 16:58:07.973 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteStringToFile3 has 1 assertions: 
 TestUtils.assertEqualContent(text, file); ref {TestUtils, file, text} [2046-2046]
[m[m31.08.2022 - 16:58:07.973 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteCharSequence1 has 1 assertions: 
 TestUtils.assertEqualContent(text, file); ref {TestUtils, file, text} [2054-2054]
[m[m31.08.2022 - 16:58:07.973 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteCharSequence2 has 1 assertions: 
 TestUtils.assertEqualContent(text, file); ref {TestUtils, file, text} [2062-2062]
[m[m31.08.2022 - 16:58:07.973 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteByteArrayToFile has 1 assertions: 
 TestUtils.assertEqualContent(data, file); ref {TestUtils, file, data} [2070-2070]
[m[m31.08.2022 - 16:58:07.973 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteByteArrayToFile_WithOffsetAndLength has 1 assertions: 
 TestUtils.assertEqualContent(writtenData, file); ref {TestUtils, file, writtenData} [2080-2080]
[m[m31.08.2022 - 16:58:07.973 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteLines_4arg has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2094-2094]
[m[m31.08.2022 - 16:58:07.974 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteLines_4arg_Writer_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, file.length()); ref {file} [2102-2102]
[m[m31.08.2022 - 16:58:07.974 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteLines_4arg_nullSeparator has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2118-2118]
[m[m31.08.2022 - 16:58:07.974 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteLines_3arg_nullSeparator has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2134-2134]
[m[m31.08.2022 - 16:58:07.974 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2150-2150]
[m[m31.08.2022 - 16:58:07.974 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2165-2165]
[m[m31.08.2022 - 16:58:07.974 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2181-2181]
[m[m31.08.2022 - 16:58:07.974 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2196-2196]
[m[m31.08.2022 - 16:58:07.974 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2213-2213]
[m[m31.08.2022 - 16:58:07.974 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2228-2228]
[m[m31.08.2022 - 16:58:07.975 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2244-2244]
[m[m31.08.2022 - 16:58:07.975 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2259-2259]
[m[m31.08.2022 - 16:58:07.975 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2272-2272]
[m[m31.08.2022 - 16:58:07.975 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2284-2284]
[m[m31.08.2022 - 16:58:07.975 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2297-2297]
[m[m31.08.2022 - 16:58:07.975 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2309-2309]
[m[m31.08.2022 - 16:58:07.975 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2322-2322]
[m[m31.08.2022 - 16:58:07.975 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2334-2334]
[m[m31.08.2022 - 16:58:07.976 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2347-2347]
[m[m31.08.2022 - 16:58:07.976 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2359-2359]
[m[m31.08.2022 - 16:58:07.976 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2372-2372]
[m[m31.08.2022 - 16:58:07.976 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2384-2384]
[m[m31.08.2022 - 16:58:07.976 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2397-2397]
[m[m31.08.2022 - 16:58:07.976 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [2410-2410]
[m[m31.08.2022 - 16:58:07.976 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testChecksumCRC32 has 1 assertions: 
 assertEquals(expectedValue, resultValue); ref {resultValue, expectedValue} [2429-2429]
[m[m31.08.2022 - 16:58:07.976 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testChecksum has 2 assertions: 
 assertSame(testChecksum, resultChecksum); ref {testChecksum, resultChecksum} [2449-2449],
 assertEquals(expectedValue, resultValue); ref {resultValue, expectedValue} [2450-2450]
[m[m31.08.2022 - 16:58:07.976 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testChecksumOnNullFile has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.977 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testChecksumOnNullChecksum has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.977 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testChecksumOnDirectory has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.977 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testChecksumDouble has 1 assertions: 
 assertEquals(expectedValue, resultValue); ref {resultValue, expectedValue} [2511-2511]
[m[m31.08.2022 - 16:58:07.977 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testDeleteDirectoryWithNonDirectory has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.977 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testDeleteQuietlyForNull has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.977 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testDeleteQuietlyDir has 4 assertions: 
 assertTrue(testDirectory.exists()); ref {testDirectory} [2550-2550],
 assertTrue(testFile.exists()); ref {testFile} [2551-2551],
 assertFalse("Check No Exist", testDirectory.exists()); ref {testDirectory} [2553-2553],
 assertFalse("Check No Exist", testFile.exists()); ref {testFile} [2554-2554]
[m[m31.08.2022 - 16:58:07.977 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testDeleteQuietlyFile has 2 assertions: 
 assertTrue(testFile.exists()); ref {testFile} [2572-2572],
 assertFalse("Check No Exist", testFile.exists()); ref {testFile} [2574-2574]
[m[m31.08.2022 - 16:58:07.977 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testDeleteQuietlyNonExistent has 1 assertions: 
 assertFalse(testFile.exists()); ref {testFile} [2580-2580]
[m[m31.08.2022 - 16:58:07.977 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveFile_Rename has 2 assertions: 
 assertTrue("Check Exist", destination.exists()); ref {destination} [2594-2594],
 assertTrue("Original deleted", !testFile1.exists()); ref {testFile1} [2595-2595]
[m[m31.08.2022 - 16:58:07.978 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveFile_CopyDelete has 2 assertions: 
 assertTrue("Check Exist", destination.exists()); ref {destination} [2612-2612],
 assertTrue("Original deleted", !src.exists()); ref {src} [2613-2613]
[m[m31.08.2022 - 16:58:07.978 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveFile_CopyDelete_Failed has 2 assertions: 
 // exepected
assertTrue("Check Rollback", !destination.exists()); ref {destination} [2641-2641],
 assertTrue("Original exists", src.exists()); ref {src} [2642-2642]
[m[m31.08.2022 - 16:58:07.978 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveFile_Errors has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.978 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveFileToDirectory has 4 assertions: 
 assertFalse("Check Exist before", destDir.exists()); ref {destDir} [2708-2708],
 assertFalse("Check Exist before", movedFile.exists()); ref {movedFile} [2709-2709],
 assertTrue("Check Exist after", movedFile.exists()); ref {movedFile} [2712-2712],
 assertTrue("Original deleted", !testFile1.exists()); ref {testFile1} [2713-2713]
[m[m31.08.2022 - 16:58:07.978 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveFileToDirectory_Errors has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.978 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveDirectory_Rename has 4 assertions: 
 // Check results
assertTrue("Check Exist", destination.exists()); ref {destination} [2796-2796],
 assertTrue("Original deleted", !src.exists()); ref {src} [2797-2797],
 assertTrue("Check dir moved", movedDir.exists()); ref {movedDir} [2800-2800],
 assertTrue("Check file moved", movedFile.exists()); ref {movedFile} [2801-2801]
[m[m31.08.2022 - 16:58:07.978 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveDirectory_CopyDelete has 4 assertions: 
 // Check results
assertTrue("Check Exist", destination.exists()); ref {destination} [2838-2838],
 assertTrue("Original deleted", !src.exists()); ref {src} [2839-2839],
 assertTrue("Check dir moved", movedDir.exists()); ref {movedDir} [2842-2842],
 assertTrue("Check file moved", movedFile.exists()); ref {movedFile} [2843-2843]
[m[m31.08.2022 - 16:58:07.979 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveDirectory_Errors has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.979 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveDirectoryToDirectory has 6 assertions: 
 assertFalse("Check Exist before", destDir.exists()); ref {destDir} [2916-2916],
 // Check results
assertTrue("Check Exist after", destDir.exists()); ref {destDir} [2922-2922],
 assertTrue("Original deleted", !src.exists()); ref {src} [2923-2923],
 assertTrue("Check dir moved", movedDir.exists()); ref {movedDir} [2927-2927],
 assertTrue("Check child dir moved", movedChildDir.exists()); ref {movedChildDir} [2928-2928],
 assertTrue("Check file moved", movedFile.exists()); ref {movedFile} [2929-2929]
[m[m31.08.2022 - 16:58:07.979 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveDirectoryToDirectory_Errors has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.979 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveToDirectory has 6 assertions: 
 assertFalse("Check File Doesnt exist", movedFile.exists()); ref {movedFile} [3006-3006],
 assertFalse("Check Dir Doesnt exist", movedDir.exists()); ref {movedDir} [3007-3007],
 assertTrue("Check File exists", movedFile.exists()); ref {movedFile} [3011-3011],
 assertFalse("Check Original File doesn't exist", testFile.exists()); ref {testFile} [3012-3012],
 assertTrue("Check Dir exists", movedDir.exists()); ref {movedDir} [3016-3016],
 assertFalse("Check Original Dir doesn't exist", testDir.exists()); ref {testDir} [3017-3017]
[m[m31.08.2022 - 16:58:07.979 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testMoveToDirectory_Errors has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.979 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testIO300 has 3 assertions: 
 assertTrue(dest.mkdirs()); ref {dest} [3049-3049],
 assertTrue(src.exists()); ref {src} [3050-3050],
 assertTrue(src.exists()); ref {src} [3057-3057]
[m[m31.08.2022 - 16:58:07.979 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testIO276 has 2 assertions: 
 assertTrue(dir + " should not be present", dir.mkdirs()); ref {dir} [3063-3063],
 assertTrue(file + " should not be present", file.createNewFile()); ref {file} [3065-3065]
[m[m31.08.2022 - 16:58:07.979 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsTestCase::testIncorrectOutputSize has 1 assertions: 
 assertTrue(msg, msg.contains("Failed to copy full contents")); ref {msg} [3094-3094]
[m[m31.08.2022 - 16:58:07.980 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:07.981 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:07.981 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.InfiniteCircularInputStreamTest::should_cycle_bytes has 1 assertions: 
 assertStreamOutput(input, expected); ref {input, expected} [33-33]
[m[m31.08.2022 - 16:58:07.981 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.InfiniteCircularInputStreamTest::should_handle_whole_range_of_bytes has 1 assertions: 
 assertStreamOutput(contentToCycle, expectedOutput); ref {contentToCycle, expectedOutput} [47-47]
[m[m31.08.2022 - 16:58:07.982 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:07.982 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m31.08.2022 - 16:58:07.983 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.WindowsLineEndingInputStreamTest::simpleString has 1 assertions: 
 assertEquals("abc\r\n", roundtrip("abc")); ref {} [29-29]
[m[m31.08.2022 - 16:58:07.983 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.WindowsLineEndingInputStreamTest::inTheMiddleOfTheLine has 1 assertions: 
 assertEquals("a\r\nbc\r\n", roundtrip("a\r\nbc")); ref {} [34-34]
[m[m31.08.2022 - 16:58:07.983 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.WindowsLineEndingInputStreamTest::multipleBlankLines has 1 assertions: 
 assertEquals("a\r\n\r\nbc\r\n", roundtrip("a\r\n\r\nbc")); ref {} [39-39]
[m[m31.08.2022 - 16:58:07.983 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.WindowsLineEndingInputStreamTest::twoLinesAtEnd has 1 assertions: 
 assertEquals("a\r\n\r\n", roundtrip("a\r\n\r\n")); ref {} [44-44]
[m[m31.08.2022 - 16:58:07.983 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.WindowsLineEndingInputStreamTest::linuxLinefeeds has 1 assertions: 
 assertEquals("ab\r\nc", roundtrip); ref {roundtrip} [50-50]
[m[m31.08.2022 - 16:58:07.983 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.WindowsLineEndingInputStreamTest::malformed has 1 assertions: 
 assertEquals("a\rbc", roundtrip("a\rbc", false)); ref {} [56-56]
[m[m31.08.2022 - 16:58:07.983 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.WindowsLineEndingInputStreamTest::retainLineFeed has 2 assertions: 
 assertEquals("a\r\n\r\n", roundtrip("a\r\n\r\n", false)); ref {} [61-61],
 assertEquals("a", roundtrip("a", false)); ref {} [62-62]
[m[m31.08.2022 - 16:58:07.987 [INFO ] ParsingStrategy.parseTestSuite() - Found 15 test cases
[m[m31.08.2022 - 16:58:07.987 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testFilter has 2 assertions: 
 assertEquals("Result Size", 1 + dirs.length + ioFiles.length + outputFiles.length, results.size()); ref {outputFiles, ioFiles.length, ioFiles, outputFiles.length, dirs, dirs.length, results} [82-82],
 assertTrue("Start Dir", results.contains(javaDir)); ref {results, javaDir} [83-83]
[m[m31.08.2022 - 16:58:07.987 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testFilterAndLimitA has 2 assertions: 
 assertEquals("[A] Result Size", 1, results.size()); ref {results} [95-95],
 assertTrue("[A] Start Dir", results.contains(javaDir)); ref {results, javaDir} [96-96]
[m[m31.08.2022 - 16:58:07.987 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testFilterAndLimitB has 3 assertions: 
 assertEquals("[B] Result Size", 2, results.size()); ref {results} [105-105],
 assertTrue("[B] Start Dir", results.contains(javaDir)); ref {results, javaDir} [106-106],
 assertTrue("[B] Org Dir", results.contains(orgDir)); ref {orgDir, results} [107-107]
[m[m31.08.2022 - 16:58:07.988 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testFilterAndLimitC has 5 assertions: 
 assertEquals("[C] Result Size", 4, results.size()); ref {results} [116-116],
 assertTrue("[C] Start Dir", results.contains(javaDir)); ref {results, javaDir} [117-117],
 assertTrue("[C] Org Dir", results.contains(orgDir)); ref {orgDir, results} [118-118],
 assertTrue("[C] Apache Dir", results.contains(apacheDir)); ref {apacheDir, results} [119-119],
 assertTrue("[C] Commons Dir", results.contains(commonsDir)); ref {commonsDir, results} [120-120]
[m[m31.08.2022 - 16:58:07.988 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testFilterAndLimitD has 2 assertions: 
 assertEquals("[D] Result Size", 1 + dirs.length + ioFiles.length, results.size()); ref {ioFiles.length, ioFiles, dirs, dirs.length, results} [129-129],
 assertTrue("[D] Start Dir", results.contains(javaDir)); ref {results, javaDir} [130-130]
[m[m31.08.2022 - 16:58:07.988 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testFilterDirAndFile1 has 2 assertions: 
 assertEquals("[DirAndFile1] Result Size", 1 + dirs.length + ioFiles.length, results.size()); ref {ioFiles.length, ioFiles, dirs, dirs.length, results} [141-141],
 assertTrue("[DirAndFile1] Start Dir", results.contains(javaDir)); ref {results, javaDir} [142-142]
[m[m31.08.2022 - 16:58:07.988 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testFilterDirAndFile2 has 2 assertions: 
 assertTrue("[DirAndFile2] Result Size", results.size() > 1 + dirs.length + ioFiles.length); ref {ioFiles.length, ioFiles, dirs, dirs.length, results} [153-153],
 assertTrue("[DirAndFile2] Start Dir", results.contains(javaDir)); ref {results, javaDir} [154-154]
[m[m31.08.2022 - 16:58:07.988 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testFilterDirAndFile3 has 2 assertions: 
 assertEquals("[DirAndFile3] Result Size", 1 + dirs.length, resultDirs.size()); ref {resultDirs, dirs, dirs.length} [166-166],
 assertTrue("[DirAndFile3] Start Dir", results.contains(javaDir)); ref {results, javaDir} [167-167]
[m[m31.08.2022 - 16:58:07.988 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testFilterDirAndFile4 has 2 assertions: 
 assertEquals("[DirAndFile4] Result Size", ioFiles.length, resultFiles.size()); ref {ioFiles.length, ioFiles, resultFiles} [178-178],
 assertTrue("[DirAndFile4] Start Dir", results.contains(javaDir)); ref {results, javaDir} [179-179]
[m[m31.08.2022 - 16:58:07.988 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testLimitToCurrent has 2 assertions: 
 assertEquals("Result Size", 1, results.size()); ref {results} [189-189],
 assertTrue("Current Dir", results.contains(new File("."))); ref {results} [190-190]
[m[m31.08.2022 - 16:58:07.988 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testMissingStartDirectory has 2 assertions: 
 assertEquals("Result Size", 1, results.size()); ref {results} [202-202],
 assertTrue("Current Dir", results.contains(invalidDir)); ref {invalidDir, results} [203-203]
[m[m31.08.2022 - 16:58:07.988 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testHandleStartDirectoryFalse has 1 assertions: 
 assertEquals("Result Size", 0, results.size()); ref {results} [220-220]
[m[m31.08.2022 - 16:58:07.989 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testCancel has 5 assertions: 
 assertEquals("File:  " + cancelName, cancelName, cancel.getFile().getName()); ref {cancel, cancelName} [292-292],
 assertEquals("Depth: " + cancelName, 5, cancel.getDepth()); ref {cancel, cancelName} [293-293],
 assertEquals("File:  " + cancelName, cancelName, cancel.getFile().getName()); ref {cancel, cancelName} [304-304],
 assertEquals("Depth: " + cancelName, 3, cancel.getDepth()); ref {cancel, cancelName} [305-305],
 assertEquals("Suppress:  " + cancelName, cancelName, lastFile.getName()); ref {cancelName, lastFile} [314-314]
[m[m31.08.2022 - 16:58:07.989 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testMultiThreadCancel has 5 assertions: 
 assertEquals(cancelName, last.getName()); ref {last, cancelName} [334-334],
 assertEquals("Depth: " + cancelName, 5, cancel.getDepth()); ref {cancel, cancelName} [335-335],
 assertEquals("File:  " + cancelName, cancelName, cancel.getFile().getName()); ref {cancel, cancelName} [347-347],
 assertEquals("Depth: " + cancelName, 3, cancel.getDepth()); ref {cancel, cancelName} [348-348],
 assertEquals("Suppress:  " + cancelName, cancelName, lastFile.getName()); ref {cancelName, lastFile} [358-358]
[m[m31.08.2022 - 16:58:07.989 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCase::testFilterString has 1 assertions: 
 assertEquals("Result Size", outputFiles.length + ioFiles.length, results.size()); ref {outputFiles, ioFiles.length, ioFiles, outputFiles.length, results} [371-371]
[m[m31.08.2022 - 16:58:07.989 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:07.989 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CloseShieldInputStreamTest::testClose has 3 assertions: 
 assertFalse("closed", closed); ref {closed} [58-58],
 assertEquals("read()", -1, shielded.read()); ref {shielded} [59-59],
 assertEquals("read()", data[0], original.read()); ref {original, data} [60-60]
[m[m31.08.2022 - 16:58:07.990 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 16:58:07.990 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ChunkedWriterTest::write_four_chunks has 1 assertions: 
 assertEquals(4, numWrites.get()); ref {numWrites} [36-36]
[m[m31.08.2022 - 16:58:07.990 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ChunkedWriterTest::write_two_chunks_default_constructor has 1 assertions: 
 assertEquals(2, numWrites.get()); ref {numWrites} [48-48]
[m[m31.08.2022 - 16:58:07.990 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ChunkedWriterTest::negative_chunksize_not_permitted has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.991 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 16:58:07.992 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.TeeOutputStreamTest::testCloseBranchIOException has 2 assertions: 
 Assert.fail("Expected " + IOException.class.getName()); ref {Assert} [63-63],
 Assert.assertTrue(goodOs.closed); ref {goodOs, Assert, goodOs.closed} [65-65]
[m[m31.08.2022 - 16:58:07.992 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.TeeOutputStreamTest::testCloseMainIOException has 2 assertions: 
 Assert.fail("Expected " + IOException.class.getName()); ref {Assert} [80-80],
 Assert.assertTrue(goodOs.closed); ref {goodOs, Assert, goodOs.closed} [82-82]
[m[m31.08.2022 - 16:58:07.992 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.TeeOutputStreamTest::testTee has 3 assertions: 
 assertByteArrayEquals("TeeOutputStream.write(int)", baos1.toByteArray(), baos2.toByteArray()); ref {baos1, baos2} [94-94],
 assertByteArrayEquals("TeeOutputStream.write(byte[])", baos1.toByteArray(), baos2.toByteArray()); ref {baos1, baos2} [101-101],
 assertByteArrayEquals("TeeOutputStream.write(byte[], int, int)", baos1.toByteArray(), baos2.toByteArray()); ref {baos1, baos2} [107-107]
[m[m31.08.2022 - 16:58:07.992 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 16:58:07.992 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.UnixLineEndingInputStreamTest::simpleString has 1 assertions: 
 assertEquals("abc\n", roundtrip("abc")); ref {} [31-31]
[m[m31.08.2022 - 16:58:07.992 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.UnixLineEndingInputStreamTest::inTheMiddleOfTheLine has 1 assertions: 
 assertEquals("a\nbc\n", roundtrip("a\r\nbc")); ref {} [36-36]
[m[m31.08.2022 - 16:58:07.993 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.UnixLineEndingInputStreamTest::multipleBlankLines has 1 assertions: 
 assertEquals("a\n\nbc\n", roundtrip("a\r\n\r\nbc")); ref {} [41-41]
[m[m31.08.2022 - 16:58:07.993 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.UnixLineEndingInputStreamTest::twoLinesAtEnd has 1 assertions: 
 assertEquals("a\n\n", roundtrip("a\r\n\r\n")); ref {} [46-46]
[m[m31.08.2022 - 16:58:07.993 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.UnixLineEndingInputStreamTest::crOnlyEnsureAtEof has 1 assertions: 
 assertEquals("a\nb\n", roundtrip("a\rb")); ref {} [53-53]
[m[m31.08.2022 - 16:58:07.993 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.UnixLineEndingInputStreamTest::crOnlyNotAtEof has 1 assertions: 
 assertEquals("a\nb", roundtrip("a\rb", false)); ref {} [60-60]
[m[m31.08.2022 - 16:58:07.993 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.UnixLineEndingInputStreamTest::crAtEnd has 1 assertions: 
 assertEquals("a\n", roundtrip("a\r")); ref {} [65-65]
[m[m31.08.2022 - 16:58:07.993 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.UnixLineEndingInputStreamTest::retainLineFeed has 2 assertions: 
 assertEquals("a\n\n", roundtrip("a\r\n\r\n", false)); ref {} [71-71],
 assertEquals("a", roundtrip("a", false)); ref {} [72-72]
[m[m31.08.2022 - 16:58:07.994 [INFO ] ParsingStrategy.parseTestSuite() - Found 5 test cases
[m[m31.08.2022 - 16:58:07.994 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.RegexpClassNameMatcherTest::testSimplePatternFromString has 2 assertions: 
 assertTrue(ca.matches("foo.should.match")); ref {ca} [33-33],
 assertFalse(ca.matches("bar.should.not.match")); ref {ca} [34-34]
[m[m31.08.2022 - 16:58:07.994 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.RegexpClassNameMatcherTest::testSimplePatternFromPattern has 2 assertions: 
 assertTrue(ca.matches("foo.should.match")); ref {ca} [40-40],
 assertFalse(ca.matches("bar.should.not.match")); ref {ca} [41-41]
[m[m31.08.2022 - 16:58:07.994 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.RegexpClassNameMatcherTest::testOrPattern has 3 assertions: 
 assertTrue(ca.matches("foo.should.match")); ref {ca} [47-47],
 assertTrue(ca.matches("bar.should.match")); ref {ca} [48-48],
 assertFalse(ca.matches("zoo.should.not.match")); ref {ca} [49-49]
[m[m31.08.2022 - 16:58:07.994 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.RegexpClassNameMatcherTest::testNullStringPattern has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.994 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.RegexpClassNameMatcherTest::testNullPatternPattern has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.995 [INFO ] ParsingStrategy.parseTestSuite() - Found 5 test cases
[m[m31.08.2022 - 16:58:07.995 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BrokenInputStreamTest::testRead has 3 assertions: 
 assertEquals(exception, e); ref {exception, e} [50-50],
 assertEquals(exception, e); ref {exception, e} [57-57],
 assertEquals(exception, e); ref {exception, e} [64-64]
[m[m31.08.2022 - 16:58:07.995 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BrokenInputStreamTest::testAvailable has 1 assertions: 
 assertEquals(exception, e); ref {exception, e} [74-74]
[m[m31.08.2022 - 16:58:07.995 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BrokenInputStreamTest::testSkip has 1 assertions: 
 assertEquals(exception, e); ref {exception, e} [84-84]
[m[m31.08.2022 - 16:58:07.995 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BrokenInputStreamTest::testReset has 1 assertions: 
 assertEquals(exception, e); ref {exception, e} [94-94]
[m[m31.08.2022 - 16:58:07.995 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BrokenInputStreamTest::testClose has 1 assertions: 
 assertEquals(exception, e); ref {exception, e} [104-104]
[m[m31.08.2022 - 16:58:07.995 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:07.996 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.MessageDigestCalculatingInputStreamTest::test has 1 assertions: 
 assertArrayEquals(expect, got); ref {expect, got} [45-45]
[m[m31.08.2022 - 16:58:07.996 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:07.997 [INFO ] ParsingStrategy.parseTestSuite() - Found 4 test cases
[m[m31.08.2022 - 16:58:07.997 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.AutoCloseInputStreamTest::testClose has 2 assertions: 
 assertTrue("closed", closed); ref {closed} [56-56],
 assertEquals("read()", -1, stream.read()); ref {stream} [57-57]
[m[m31.08.2022 - 16:58:07.997 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.AutoCloseInputStreamTest::testRead has 4 assertions: 
 assertEquals("read()", element, stream.read()); ref {stream, element} [64-64],
 assertFalse("closed", closed); ref {closed} [65-65],
 assertEquals("read()", -1, stream.read()); ref {stream} [67-67],
 assertTrue("closed", closed); ref {closed} [68-68]
[m[m31.08.2022 - 16:58:07.997 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.AutoCloseInputStreamTest::testReadBuffer has 5 assertions: 
 assertFalse("closed", closed); ref {closed} [76-76],
 assertEquals("read(b)", data[total + i], b[i]); ref {total, b, data, i} [78-78],
 assertEquals("read(b)", data.length, total); ref {data.length, total, data} [82-82],
 assertTrue("closed", closed); ref {closed} [83-83],
 assertEquals("read(b)", -1, stream.read(b)); ref {b, stream} [84-84]
[m[m31.08.2022 - 16:58:07.997 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.AutoCloseInputStreamTest::testReadBufferOffsetLength has 5 assertions: 
 assertFalse("closed", closed); ref {closed} [92-92],
 assertEquals("read(b, off, len)", data.length, total); ref {data.length, total, data} [95-95],
 assertEquals("read(b, off, len)", data[i], b[i]); ref {b, data, i} [97-97],
 assertTrue("closed", closed); ref {closed} [99-99],
 assertEquals("read(b, off, len)", -1, stream.read(b, 0, b.length)); ref {b, b.length, stream} [100-100]
[m[m31.08.2022 - 16:58:07.998 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 16:58:07.999 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ReaderInputStreamTest::testUTF8WithSingleByteRead has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.999 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ReaderInputStreamTest::testLargeUTF8WithSingleByteRead has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.999 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ReaderInputStreamTest::testUTF8WithBufferedRead has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.999 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ReaderInputStreamTest::testLargeUTF8WithBufferedRead has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.999 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ReaderInputStreamTest::testUTF16WithSingleByteRead has 0 assertions: 
 
[m[m31.08.2022 - 16:58:07.999 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ReaderInputStreamTest::testReadZero has 3 assertions: 
 assertEquals(0, r.read(bytes, 0, 0)); ref {r, bytes} [114-114],
 assertEquals(inStr.length(), r.read(bytes, 0, inStr.length() + 1)); ref {r, inStr, bytes} [115-115],
 // Should always return 0 for length == 0
assertEquals(0, r.read(bytes, 0, 0)); ref {r, bytes} [117-117]
[m[m31.08.2022 - 16:58:07.999 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ReaderInputStreamTest::testReadZeroEmptyString has 4 assertions: 
 // Should always return 0 for length == 0
assertEquals(0, r.read(bytes, 0, 0)); ref {r, bytes} [127-127],
 assertEquals(-1, r.read(bytes, 0, 1)); ref {r, bytes} [128-128],
 assertEquals(0, r.read(bytes, 0, 0)); ref {r, bytes} [129-129],
 assertEquals(-1, r.read(bytes, 0, 1)); ref {r, bytes} [130-130]
[m[m31.08.2022 - 16:58:08.000 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ReaderInputStreamTest::testCharsetMismatchInfiniteLoop has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.001 [INFO ] ParsingStrategy.parseTestSuite() - Found 4 test cases
[m[m31.08.2022 - 16:58:08.001 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TaggedInputStreamTest::testEmptyStream has 4 assertions: 
 assertEquals(0, stream.available()); ref {stream} [40-40],
 assertEquals(-1, stream.read()); ref {stream} [41-41],
 assertEquals(-1, stream.read(new byte[1])); ref {stream} [42-42],
 assertEquals(-1, stream.read(new byte[1], 0, 1)); ref {stream} [43-43]
[m[m31.08.2022 - 16:58:08.001 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TaggedInputStreamTest::testNormalStream has 7 assertions: 
 assertEquals(3, stream.available()); ref {stream} [51-51],
 assertEquals('a', stream.read()); ref {stream} [52-52],
 assertEquals(1, stream.read(buffer)); ref {stream, buffer} [54-54],
 assertEquals('b', buffer[0]); ref {buffer} [55-55],
 assertEquals(1, stream.read(buffer, 0, 1)); ref {stream, buffer} [56-56],
 assertEquals('c', buffer[0]); ref {buffer} [57-57],
 assertEquals(-1, stream.read()); ref {stream} [58-58]
[m[m31.08.2022 - 16:58:08.001 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TaggedInputStreamTest::testBrokenStream has 6 assertions: 
 assertTrue(stream.isCauseOf(e)); ref {stream, e} [73-73],
 assertEquals(exception, e2); ref {exception, e2} [78-78],
 assertTrue(stream.isCauseOf(e)); ref {stream, e} [87-87],
 assertEquals(exception, e2); ref {exception, e2} [92-92],
 assertTrue(stream.isCauseOf(e)); ref {stream, e} [101-101],
 assertEquals(exception, e2); ref {exception, e2} [106-106]
[m[m31.08.2022 - 16:58:08.001 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TaggedInputStreamTest::testOtherException has 2 assertions: 
 assertFalse(stream.isCauseOf(exception)); ref {exception, stream} [117-117],
 assertFalse(stream.isCauseOf(new TaggedIOException(exception, UUID.randomUUID()))); ref {exception, stream, UUID} [118-119]
[m[m31.08.2022 - 16:58:08.002 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.002 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ClosedInputStreamTest::testRead has 1 assertions: 
 assertEquals("read()", -1, cis.read()); ref {cis} [31-31]
[m[m31.08.2022 - 16:58:08.003 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 16:58:08.003 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CharsetsTestCase::testRequiredCharsets has 6 assertions: 
 // test for what we expect to be there as of Java 6
// Make sure the object at the given key is the right one
Assert.assertEquals(requiredCharsets.get("US-ASCII").name(), "US-ASCII"); ref {Assert, requiredCharsets} [38-38],
 Assert.assertEquals(requiredCharsets.get("ISO-8859-1").name(), "ISO-8859-1"); ref {Assert, requiredCharsets} [39-39],
 Assert.assertEquals(requiredCharsets.get("UTF-8").name(), "UTF-8"); ref {Assert, requiredCharsets} [40-40],
 Assert.assertEquals(requiredCharsets.get("UTF-16").name(), "UTF-16"); ref {Assert, requiredCharsets} [41-41],
 Assert.assertEquals(requiredCharsets.get("UTF-16BE").name(), "UTF-16BE"); ref {Assert, requiredCharsets} [42-42],
 Assert.assertEquals(requiredCharsets.get("UTF-16LE").name(), "UTF-16LE"); ref {Assert, requiredCharsets} [43-43]
[m[m31.08.2022 - 16:58:08.003 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CharsetsTestCase::testIso8859_1 has 1 assertions: 
 Assert.assertEquals("ISO-8859-1", Charsets.ISO_8859_1.name()); ref {Assert, Charsets.ISO_8859_1, Charsets} [48-48]
[m[m31.08.2022 - 16:58:08.003 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CharsetsTestCase::testToCharset has 4 assertions: 
 Assert.assertEquals(Charset.defaultCharset(), Charsets.toCharset((String) null)); ref {Assert, Charset, Charsets} [53-53],
 Assert.assertEquals(Charset.defaultCharset(), Charsets.toCharset((Charset) null)); ref {Assert, Charset, Charsets} [54-54],
 Assert.assertEquals(Charset.defaultCharset(), Charsets.toCharset(Charset.defaultCharset())); ref {Assert, Charset, Charsets} [55-55],
 Assert.assertEquals(Charset.forName("UTF-8"), Charsets.toCharset(Charset.forName("UTF-8"))); ref {Assert, Charset, Charsets} [56-56]
[m[m31.08.2022 - 16:58:08.003 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CharsetsTestCase::testUsAscii has 1 assertions: 
 Assert.assertEquals("US-ASCII", Charsets.US_ASCII.name()); ref {Assert, Charsets.US_ASCII, Charsets} [61-61]
[m[m31.08.2022 - 16:58:08.004 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CharsetsTestCase::testUtf16 has 1 assertions: 
 Assert.assertEquals("UTF-16", Charsets.UTF_16.name()); ref {Assert, Charsets.UTF_16, Charsets} [66-66]
[m[m31.08.2022 - 16:58:08.004 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CharsetsTestCase::testUtf16Be has 1 assertions: 
 Assert.assertEquals("UTF-16BE", Charsets.UTF_16BE.name()); ref {Assert, Charsets.UTF_16BE, Charsets} [71-71]
[m[m31.08.2022 - 16:58:08.004 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CharsetsTestCase::testUtf16Le has 1 assertions: 
 Assert.assertEquals("UTF-16LE", Charsets.UTF_16LE.name()); ref {Charsets.UTF_16LE, Assert, Charsets} [76-76]
[m[m31.08.2022 - 16:58:08.004 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.CharsetsTestCase::testUtf8 has 1 assertions: 
 Assert.assertEquals("UTF-8", Charsets.UTF_8.name()); ref {Assert, Charsets.UTF_8, Charsets} [81-81]
[m[m31.08.2022 - 16:58:08.005 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:08.005 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DemuxTestCase::testOutputStream has 4 assertions: 
 assertEquals("Data1", DATA1, getOutput(T1)); ref {DATA1, T1} [116-116],
 assertEquals("Data2", DATA2, getOutput(T2)); ref {DATA2, T2} [117-117],
 assertEquals("Data3", DATA3, getOutput(T3)); ref {DATA3, T3} [118-118],
 assertEquals("Data4", DATA4, getOutput(T4)); ref {T4, DATA4} [119-119]
[m[m31.08.2022 - 16:58:08.005 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DemuxTestCase::testInputStream has 4 assertions: 
 assertEquals("Data1", DATA1, getInput(T1)); ref {DATA1, T1} [134-134],
 assertEquals("Data2", DATA2, getInput(T2)); ref {DATA2, T2} [135-135],
 assertEquals("Data3", DATA3, getInput(T3)); ref {DATA3, T3} [136-136],
 assertEquals("Data4", DATA4, getInput(T4)); ref {T4, DATA4} [137-137]
[m[m31.08.2022 - 16:58:08.007 [INFO ] ParsingStrategy.parseTestSuite() - Found 11 test cases
[m[m31.08.2022 - 16:58:08.007 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsDirectoryContainsTestCase::testCanonicalPath has 4 assertions: 
 assertTrue(FileUtils.directoryContains(directory1, file1ByRelativeDirectory2)); ref {FileUtils, directory1, file1ByRelativeDirectory2} [80-80],
 assertTrue(FileUtils.directoryContains(directory2, file2ByRelativeDirectory1)); ref {file2ByRelativeDirectory1, FileUtils, directory2} [81-81],
 assertFalse(FileUtils.directoryContains(directory1, file2ByRelativeDirectory1)); ref {file2ByRelativeDirectory1, FileUtils, directory1} [83-83],
 assertFalse(FileUtils.directoryContains(directory2, file1ByRelativeDirectory2)); ref {FileUtils, directory2, file1ByRelativeDirectory2} [84-84]
[m[m31.08.2022 - 16:58:08.007 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsDirectoryContainsTestCase::testDirectoryContainsDirectory has 4 assertions: 
 assertTrue(FileUtils.directoryContains(top, directory1)); ref {top, FileUtils, directory1} [89-89],
 assertTrue(FileUtils.directoryContains(top, directory2)); ref {top, FileUtils, directory2} [90-90],
 assertTrue(FileUtils.directoryContains(top, directory3)); ref {top, FileUtils, directory3} [91-91],
 assertTrue(FileUtils.directoryContains(directory2, directory3)); ref {FileUtils, directory3, directory2} [92-92]
[m[m31.08.2022 - 16:58:08.007 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsDirectoryContainsTestCase::testDirectoryContainsFile has 2 assertions: 
 assertTrue(FileUtils.directoryContains(directory1, file1)); ref {FileUtils, directory1, file1} [97-97],
 assertTrue(FileUtils.directoryContains(directory2, file2)); ref {FileUtils, directory2, file2} [98-98]
[m[m31.08.2022 - 16:58:08.007 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsDirectoryContainsTestCase::testDirectoryDoesNotContainFile has 4 assertions: 
 assertFalse(FileUtils.directoryContains(directory1, file2)); ref {FileUtils, directory1, file2} [103-103],
 assertFalse(FileUtils.directoryContains(directory2, file1)); ref {FileUtils, directory2, file1} [104-104],
 assertFalse(FileUtils.directoryContains(directory1, file3)); ref {FileUtils, directory1, file3} [106-106],
 assertFalse(FileUtils.directoryContains(directory2, file3)); ref {FileUtils, directory2, file3} [107-107]
[m[m31.08.2022 - 16:58:08.007 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsDirectoryContainsTestCase::testDirectoryDoesNotContainsDirectory has 4 assertions: 
 assertFalse(FileUtils.directoryContains(directory1, top)); ref {top, FileUtils, directory1} [112-112],
 assertFalse(FileUtils.directoryContains(directory2, top)); ref {top, FileUtils, directory2} [113-113],
 assertFalse(FileUtils.directoryContains(directory3, top)); ref {top, FileUtils, directory3} [114-114],
 assertFalse(FileUtils.directoryContains(directory3, directory2)); ref {FileUtils, directory3, directory2} [115-115]
[m[m31.08.2022 - 16:58:08.007 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsDirectoryContainsTestCase::testDirectoryDoesNotExist has 2 assertions: 
 assertFalse(dir.exists()); ref {dir} [121-121],
 assertFalse(FileUtils.directoryContains(dir, file1)); ref {FileUtils, file1, dir} [123-123]
[m[m31.08.2022 - 16:58:08.007 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsDirectoryContainsTestCase::testSameFile has 1 assertions: 
 assertTrue(FileUtils.directoryContains(file1, file1)); ref {FileUtils, file1} [133-133]
[m[m31.08.2022 - 16:58:08.008 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsDirectoryContainsTestCase::testIO466 has 1 assertions: 
 assertFalse(FileUtils.directoryContains(directory1, fooFile)); ref {fooFile, FileUtils, directory1} [143-143]
[m[m31.08.2022 - 16:58:08.008 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsDirectoryContainsTestCase::testFileDoesNotExist has 3 assertions: 
 assertFalse(FileUtils.directoryContains(top, null)); ref {top, FileUtils} [148-148],
 assertFalse(file.exists()); ref {file} [150-150],
 assertFalse(FileUtils.directoryContains(top, file)); ref {file, top, FileUtils} [151-151]
[m[m31.08.2022 - 16:58:08.008 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsDirectoryContainsTestCase::testFileDoesNotExistBug has 3 assertions: 
 assertTrue("Check directory exists", top.exists()); ref {top} [161-161],
 assertFalse("Check file does not exist", file.exists()); ref {file} [162-162],
 assertFalse("Direcory does not contain unrealized file", FileUtils.directoryContains(top, file)); ref {file, top, FileUtils} [163-163]
[m[m31.08.2022 - 16:58:08.008 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsDirectoryContainsTestCase::testUnrealizedContainment has 3 assertions: 
 assertFalse(dir.exists()); ref {dir} [170-170],
 assertFalse(file.exists()); ref {file} [171-171],
 assertTrue(FileUtils.directoryContains(dir, file)); ref {file, FileUtils, dir} [173-173]
[m[m31.08.2022 - 16:58:08.008 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.030 [INFO ] ParsingStrategy.parseTestSuite() - Found 47 test cases
[m[m31.08.2022 - 16:58:08.030 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testSuffix has 13 assertions: 
 assertFiltering(filter, new File("fred.tes"), true); ref {filter} [95-95],
 assertFiltering(filter, new File("fred.est"), true); ref {filter} [96-96],
 // case-sensitive
assertFiltering(filter, new File("fred.EST"), false); ref {filter} [97-97],
 assertFiltering(filter, new File("fred.exe"), false); ref {filter} [98-98],
 assertFiltering(filter, new File("fred"), false); ref {filter} [103-103],
 assertFiltering(filter, new File(".tes"), true); ref {filter} [104-104],
 assertFiltering(filter, new File("fred.test"), true); ref {filter} [105-105],
 assertFiltering(filter, new File("test"), true); ref {filter} [108-108],
 assertFiltering(filter, new File("fred"), false); ref {filter} [109-109],
 assertTrue(filter.accept(testFile.getParentFile(), testFile.getName())); ref {filter, testFile} [111-111],
 assertTrue(!filter.accept(fredFile.getParentFile(), fredFile.getName())); ref {filter, fredFile} [112-112],
 assertTrue(!listFilter.accept(testFile.getParentFile(), testFile.getName())); ref {testFile, listFilter} [117-117],
 assertTrue(listFilter.accept(fredFile.getParentFile(), fredFile.getName())); ref {listFilter, fredFile} [118-118]
[m[m31.08.2022 - 16:58:08.030 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testSuffixCaseInsensitive has 14 assertions: 
 assertFiltering(filter, new File("foo.tes"), true); ref {filter} [143-143],
 assertFiltering(filter, new File("foo.est"), true); ref {filter} [144-144],
 // case-sensitive
assertFiltering(filter, new File("foo.EST"), true); ref {filter} [145-145],
 // case-sensitive
assertFiltering(filter, new File("foo.TES"), true); ref {filter} [146-146],
 assertFiltering(filter, new File("foo.exe"), false); ref {filter} [147-147],
 assertFiltering(filter, new File("test"), true); ref {filter} [150-150],
 assertFiltering(filter, new File("TEST"), true); ref {filter} [151-151],
 assertFiltering(filter, new File("bar.tes"), true); ref {filter} [155-155],
 assertFiltering(filter, new File("bar.est"), true); ref {filter} [156-156],
 // case-sensitive
assertFiltering(filter, new File("bar.EST"), true); ref {filter} [157-157],
 // case-sensitive
assertFiltering(filter, new File("bar.TES"), true); ref {filter} [158-158],
 assertFiltering(filter, new File("bar.exe"), false); ref {filter} [159-159],
 assertFiltering(filter, new File("test"), true); ref {filter} [181-181],
 assertFiltering(filter, new File("TEST"), true); ref {filter} [182-182]
[m[m31.08.2022 - 16:58:08.031 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testDirectory has 7 assertions: 
 assertFiltering(filter, new File("src/"), true); ref {filter} [196-196],
 assertFiltering(filter, new File("src/main/java/"), true); ref {filter} [197-197],
 assertFiltering(filter, new File("pom.xml"), false); ref {filter} [199-199],
 assertFiltering(filter, new File("imaginary"), false); ref {filter} [201-201],
 assertFiltering(filter, new File("imaginary/"), false); ref {filter} [202-202],
 assertFiltering(filter, new File("LICENSE.txt"), false); ref {filter} [204-204],
 assertSame(DirectoryFileFilter.DIRECTORY, DirectoryFileFilter.INSTANCE); ref {DirectoryFileFilter.DIRECTORY, DirectoryFileFilter.INSTANCE, DirectoryFileFilter} [206-206]
[m[m31.08.2022 - 16:58:08.031 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFiles has 6 assertions: 
 assertFiltering(filter, new File("src/"), false); ref {filter} [214-214],
 assertFiltering(filter, new File("src/java/"), false); ref {filter} [215-215],
 assertFiltering(filter, new File("pom.xml"), true); ref {filter} [217-217],
 assertFiltering(filter, new File("imaginary"), false); ref {filter} [219-219],
 assertFiltering(filter, new File("imaginary/"), false); ref {filter} [220-220],
 assertFiltering(filter, new File("LICENSE.txt"), true); ref {filter} [222-222]
[m[m31.08.2022 - 16:58:08.031 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testPrefix has 15 assertions: 
 assertFiltering(filter, new File("foo.test"), true); ref {filter} [231-231],
 // case-sensitive
assertFiltering(filter, new File("FOO.test"), false); ref {filter} [232-232],
 assertFiltering(filter, new File("foo"), true); ref {filter} [233-233],
 assertFiltering(filter, new File("bar"), true); ref {filter} [234-234],
 assertFiltering(filter, new File("food/"), true); ref {filter} [235-235],
 assertFiltering(filter, new File("barred\\"), true); ref {filter} [238-238],
 assertFiltering(filter, new File("test"), false); ref {filter} [239-239],
 assertFiltering(filter, new File("fo_o.test"), false); ref {filter} [240-240],
 assertFiltering(filter, new File("abar.exe"), false); ref {filter} [241-241],
 assertFiltering(filter, new File("test"), true); ref {filter} [244-244],
 assertFiltering(filter, new File("fred"), false); ref {filter} [245-245],
 assertTrue(filter.accept(testFile.getParentFile(), testFile.getName())); ref {filter, testFile} [247-247],
 assertTrue(!filter.accept(fredFile.getParentFile(), fredFile.getName())); ref {filter, fredFile} [248-248],
 assertTrue(!listFilter.accept(testFile.getParentFile(), testFile.getName())); ref {testFile, listFilter} [253-253],
 assertTrue(listFilter.accept(fredFile.getParentFile(), fredFile.getName())); ref {listFilter, fredFile} [254-254]
[m[m31.08.2022 - 16:58:08.031 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testPrefixCaseInsensitive has 16 assertions: 
 assertFiltering(filter, new File("foo.test1"), true); ref {filter} [280-280],
 assertFiltering(filter, new File("bar.test1"), true); ref {filter} [281-281],
 // case-sensitive
assertFiltering(filter, new File("FOO.test1"), true); ref {filter} [282-282],
 // case-sensitive
assertFiltering(filter, new File("BAR.test1"), true); ref {filter} [283-283],
 assertFiltering(filter, new File("foo.test2"), false); ref {filter} [286-286],
 assertFiltering(filter, new File("bar.test2"), true); ref {filter} [287-287],
 // case-sensitive
assertFiltering(filter, new File("FOO.test2"), false); ref {filter} [288-288],
 // case-sensitive
assertFiltering(filter, new File("BAR.test2"), true); ref {filter} [289-289],
 assertFiltering(filter, new File("foo.test3"), true); ref {filter} [293-293],
 assertFiltering(filter, new File("bar.test3"), true); ref {filter} [294-294],
 // case-sensitive
assertFiltering(filter, new File("FOO.test3"), true); ref {filter} [295-295],
 // case-sensitive
assertFiltering(filter, new File("BAR.test3"), true); ref {filter} [296-296],
 assertFiltering(filter, new File("foo.test2"), false); ref {filter} [318-318],
 assertFiltering(filter, new File("bar.test2"), true); ref {filter} [319-319],
 // case-sensitive
assertFiltering(filter, new File("FOO.test2"), false); ref {filter} [320-320],
 // case-sensitive
assertFiltering(filter, new File("BAR.test2"), true); ref {filter} [321-321]
[m[m31.08.2022 - 16:58:08.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testNameFilter has 32 assertions: 
 assertFiltering(filter, new File("foo"), true); ref {filter} [333-333],
 assertFiltering(filter, new File("bar"), true); ref {filter} [334-334],
 assertFiltering(filter, new File("fred"), false); ref {filter} [335-335],
 assertFiltering(filter, new File("foo"), true); ref {filter} [338-338],
 assertFiltering(filter, new File("bar"), true); ref {filter} [339-339],
 assertFiltering(filter, new File("FOO"), false); ref {filter} [340-340],
 assertFiltering(filter, new File("BAR"), false); ref {filter} [341-341],
 assertFiltering(filter, new File("foo"), true); ref {filter} [344-344],
 assertFiltering(filter, new File("bar"), true); ref {filter} [345-345],
 assertFiltering(filter, new File("FOO"), true); ref {filter} [346-346],
 assertFiltering(filter, new File("BAR"), true); ref {filter} [347-347],
 assertFiltering(filter, new File("foo"), true); ref {filter} [350-350],
 assertFiltering(filter, new File("bar"), true); ref {filter} [351-351],
 assertFiltering(filter, new File("FOO"), WINDOWS); ref {filter, WINDOWS} [352-352],
 assertFiltering(filter, new File("BAR"), WINDOWS); ref {filter, WINDOWS} [353-353],
 assertFiltering(filter, new File("foo"), true); ref {filter} [356-356],
 assertFiltering(filter, new File("bar"), true); ref {filter} [357-357],
 assertFiltering(filter, new File("FOO"), false); ref {filter} [358-358],
 assertFiltering(filter, new File("BAR"), false); ref {filter} [359-359],
 assertFiltering(filter, new File("foo"), true); ref {filter} [366-366],
 assertFiltering(filter, new File("bar"), true); ref {filter} [367-367],
 assertFiltering(filter, new File("fred"), false); ref {filter} [368-368],
 assertFiltering(filter, new File("foo"), true); ref {filter} [371-371],
 // case-sensitive
assertFiltering(filter, new File("FOO"), false); ref {filter} [372-372],
 assertFiltering(filter, new File("barfoo"), false); ref {filter} [373-373],
 assertFiltering(filter, new File("foobar"), false); ref {filter} [374-374],
 assertFiltering(filter, new File("fred"), false); ref {filter} [375-375],
 assertFiltering(filter, new File("foo"), true); ref {filter} [379-379],
 // case-insensitive
assertFiltering(filter, new File("FOO"), true); ref {filter} [380-380],
 assertFiltering(filter, new File("barfoo"), false); ref {filter} [381-381],
 assertFiltering(filter, new File("foobar"), false); ref {filter} [382-382],
 assertFiltering(filter, new File("fred"), false); ref {filter} [383-383]
[m[m31.08.2022 - 16:58:08.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testNameFilterNullArgument has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testNameFilterNullArrayArgument has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testNameFilterNullListArgument has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testTrue has 4 assertions: 
 assertFiltering(filter, new File("foo.test"), true); ref {filter} [418-418],
 assertFiltering(filter, new File("foo"), true); ref {filter} [419-419],
 assertFiltering(filter, null, true); ref {filter} [420-420],
 assertSame(TrueFileFilter.TRUE, TrueFileFilter.INSTANCE); ref {TrueFileFilter, TrueFileFilter.TRUE, TrueFileFilter.INSTANCE} [421-421]
[m[m31.08.2022 - 16:58:08.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFalse has 4 assertions: 
 assertFiltering(filter, new File("foo.test"), false); ref {filter} [427-427],
 assertFiltering(filter, new File("foo"), false); ref {filter} [428-428],
 assertFiltering(filter, null, false); ref {filter} [429-429],
 assertSame(FalseFileFilter.FALSE, FalseFileFilter.INSTANCE); ref {FalseFileFilter.INSTANCE, FalseFileFilter.FALSE, FalseFileFilter} [430-430]
[m[m31.08.2022 - 16:58:08.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testNot has 3 assertions: 
 assertFiltering(filter, new File("foo.test"), false); ref {filter} [436-436],
 assertFiltering(filter, new File("foo"), false); ref {filter} [437-437],
 assertFiltering(filter, null, false); ref {filter} [438-438]
[m[m31.08.2022 - 16:58:08.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testAnd has 8 assertions: 
 assertFiltering(new AndFileFilter(trueFilter, trueFilter), new File("foo.test"), true); ref {trueFilter} [446-446],
 assertFiltering(new AndFileFilter(trueFilter, falseFilter), new File("foo.test"), false); ref {falseFilter, trueFilter} [447-447],
 assertFiltering(new AndFileFilter(falseFilter, trueFilter), new File("foo.test"), false); ref {falseFilter, trueFilter} [448-448],
 assertFiltering(new AndFileFilter(falseFilter, falseFilter), new File("foo.test"), false); ref {falseFilter} [449-449],
 assertFiltering(new AndFileFilter(filters), new File("test"), false); ref {filters} [452-452],
 assertFiltering(new AndFileFilter(), new File("test"), false); ref {} [453-453],
 assertTrue(f.getFileFilters().isEmpty()); ref {f} [468-468],
 // TODO better tests
assertNotNull(f.toString()); ref {f} [470-470]
[m[m31.08.2022 - 16:58:08.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testOr has 12 assertions: 
 assertFiltering(new OrFileFilter(trueFilter, trueFilter), testFile, true); ref {testFile, trueFilter} [478-478],
 assertFiltering(new OrFileFilter(trueFilter, falseFilter), testFile, true); ref {testFile, falseFilter, trueFilter} [479-479],
 assertFiltering(new OrFileFilter(falseFilter, trueFilter), testFile, true); ref {testFile, falseFilter, trueFilter} [480-480],
 assertFiltering(new OrFileFilter(falseFilter, falseFilter), testFile, false); ref {testFile, falseFilter} [481-481],
 assertFiltering(new OrFileFilter(), testFile, false); ref {testFile} [482-482],
 assertFiltering(orFilter, testFile, true); ref {testFile, orFilter} [490-490],
 assertEquals(orFilter.getFileFilters(), filters); ref {filters, orFilter} [491-491],
 assertFiltering(orFilter, testFile, false); ref {testFile, orFilter} [493-493],
 assertFiltering(orFilter, testFile, true); ref {testFile, orFilter} [495-495],
 assertTrue(orFilter.accept(testFile.getParentFile(), testFile.getName())); ref {testFile, orFilter} [497-497],
 assertTrue(!orFilter.accept(testFile.getParentFile(), testFile.getName())); ref {testFile, orFilter} [499-499],
 assertTrue(f.getFileFilters().isEmpty()); ref {f} [508-508]
[m[m31.08.2022 - 16:58:08.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFileFilterUtils_and has 4 assertions: 
 assertFiltering(FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true); ref {FileFilterUtils, trueFilter} [515-515],
 assertFiltering(FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false); ref {falseFilter, FileFilterUtils, trueFilter} [516-516],
 assertFiltering(FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false); ref {falseFilter, FileFilterUtils, trueFilter} [517-517],
 assertFiltering(FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false); ref {falseFilter, FileFilterUtils} [518-518]
[m[m31.08.2022 - 16:58:08.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFileFilterUtils_or has 4 assertions: 
 assertFiltering(FileFilterUtils.or(trueFilter, trueFilter), testFile, true); ref {testFile, FileFilterUtils, trueFilter} [526-526],
 assertFiltering(FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true); ref {testFile, falseFilter, FileFilterUtils, trueFilter} [527-527],
 assertFiltering(FileFilterUtils.or(falseFilter, trueFilter), testFile, true); ref {testFile, falseFilter, FileFilterUtils, trueFilter} [528-528],
 assertFiltering(FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false); ref {testFile, falseFilter, FileFilterUtils} [529-529]
[m[m31.08.2022 - 16:58:08.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testDeprecatedWildcard has 21 assertions: 
 assertFiltering(filter, new File("log.txt"), true); ref {filter} [542-542],
 // assertFiltering(filter, new File("log.txt.bak"), false);
filter = new WildcardFilter("log?.txt"); ref {filter} [545-545],
 assertFiltering(filter, new File("log1.txt"), true); ref {filter} [546-546],
 assertFiltering(filter, new File("log12.txt"), false); ref {filter} [547-547],
 assertFiltering(filter, new File("openAB.102504"), true); ref {filter} [550-550],
 assertFiltering(filter, new File("openA.102504"), false); ref {filter} [551-551],
 assertFiltering(filter, new File("openXY.123103"), false); ref {filter} [552-552],
 // assertFiltering(filter, new File("openAB.102504.old"), false);
filter = new WildcardFilter(new String[] { "*.java", "*.class" }); ref {filter} [555-555],
 assertFiltering(filter, new File("Test.java"), true); ref {filter} [556-556],
 assertFiltering(filter, new File("Test.class"), true); ref {filter} [557-557],
 assertFiltering(filter, new File("Test.jsp"), false); ref {filter} [558-558],
 assertFiltering(listFilter, new File("Test.txt"), true); ref {listFilter} [560-560],
 assertFiltering(listFilter, new File("Test.xml"), true); ref {listFilter} [561-561],
 assertFiltering(listFilter, new File("Test.gif"), true); ref {listFilter} [562-562],
 assertFiltering(listFilter, new File("Test.bmp"), false); ref {listFilter} [563-563],
 assertTrue(listFilter.accept(txtFile)); ref {txtFile, listFilter} [565-565],
 assertTrue(!listFilter.accept(bmpFile)); ref {listFilter, bmpFile} [566-566],
 assertTrue(!listFilter.accept(dir)); ref {listFilter, dir} [567-567],
 assertTrue(listFilter.accept(txtFile.getParentFile(), txtFile.getName())); ref {txtFile, listFilter} [569-569],
 assertTrue(!listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())); ref {listFilter, bmpFile} [570-570],
 assertTrue(!listFilter.accept(dir.getParentFile(), dir.getName())); ref {listFilter, dir} [571-571]
[m[m31.08.2022 - 16:58:08.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testWildcard has 31 assertions: 
 assertFiltering(filter, new File("log.txt"), true); ref {filter} [598-598],
 assertFiltering(filter, new File("log.TXT"), false); ref {filter} [599-599],
 assertFiltering(filter, new File("log.txt"), true); ref {filter} [602-602],
 assertFiltering(filter, new File("log.TXT"), false); ref {filter} [603-603],
 assertFiltering(filter, new File("log.txt"), true); ref {filter} [606-606],
 assertFiltering(filter, new File("log.TXT"), true); ref {filter} [607-607],
 assertFiltering(filter, new File("log.txt"), true); ref {filter} [610-610],
 assertFiltering(filter, new File("log.TXT"), WINDOWS); ref {filter, WINDOWS} [611-611],
 assertFiltering(filter, new File("log.txt"), true); ref {filter} [614-614],
 assertFiltering(filter, new File("log.TXT"), false); ref {filter} [615-615],
 assertFiltering(filter, new File("Test.java"), true); ref {filter} [618-618],
 assertFiltering(filter, new File("Test.class"), true); ref {filter} [619-619],
 assertFiltering(filter, new File("Test.jsp"), false); ref {filter} [620-620],
 assertFiltering(filter, new File("Test.java"), true); ref {filter} [623-623],
 assertFiltering(filter, new File("Test.JAVA"), false); ref {filter} [624-624],
 assertFiltering(filter, new File("Test.java"), true); ref {filter} [627-627],
 assertFiltering(filter, new File("Test.JAVA"), true); ref {filter} [628-628],
 assertFiltering(filter, new File("Test.java"), true); ref {filter} [631-631],
 assertFiltering(filter, new File("Test.JAVA"), WINDOWS); ref {filter, WINDOWS} [632-632],
 assertFiltering(filter, new File("Test.java"), true); ref {filter} [635-635],
 assertFiltering(filter, new File("Test.JAVA"), false); ref {filter} [636-636],
 assertFiltering(listFilter, new File("Test.txt"), true); ref {listFilter} [640-640],
 assertFiltering(listFilter, new File("Test.xml"), true); ref {listFilter} [641-641],
 assertFiltering(listFilter, new File("Test.gif"), true); ref {listFilter} [642-642],
 assertFiltering(listFilter, new File("Test.bmp"), false); ref {listFilter} [643-643],
 assertTrue(listFilter.accept(txtFile)); ref {txtFile, listFilter} [648-648],
 assertTrue(!listFilter.accept(bmpFile)); ref {listFilter, bmpFile} [649-649],
 assertTrue(!listFilter.accept(dir)); ref {listFilter, dir} [650-650],
 assertTrue(listFilter.accept(txtFile.getParentFile(), txtFile.getName())); ref {txtFile, listFilter} [652-652],
 assertTrue(!listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())); ref {listFilter, bmpFile} [653-653],
 assertTrue(!listFilter.accept(dir.getParentFile(), dir.getName())); ref {listFilter, dir} [654-654]
[m[m31.08.2022 - 16:58:08.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testDelegateFileFilter has 4 assertions: 
 assertFiltering(filter, testFile, false); ref {filter, testFile} [676-676],
 // TODO better test
assertNotNull(filter.toString()); ref {filter} [677-677],
 assertFiltering(filter, testFile, false); ref {filter, testFile} [680-680],
 // TODO better test
assertNotNull(filter.toString()); ref {filter} [681-681]
[m[m31.08.2022 - 16:58:08.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testMakeCVSAware has 8 assertions: 
 assertFiltering(filter1, file, false); ref {file, filter1} [705-705],
 assertFiltering(filter2, file, false); ref {file, filter2} [706-706],
 assertFiltering(filter1, file, true); ref {file, filter1} [718-718],
 assertFiltering(filter2, file, true); ref {file, filter2} [719-719],
 assertFiltering(filter1, file, true); ref {file, filter1} [730-730],
 assertFiltering(filter2, file, false); ref {file, filter2} [731-731],
 assertFiltering(filter1, file, true); ref {file, filter1} [742-742],
 assertFiltering(filter2, file, false); ref {file, filter2} [743-743]
[m[m31.08.2022 - 16:58:08.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testMakeSVNAware has 8 assertions: 
 assertFiltering(filter1, file, false); ref {file, filter1} [754-754],
 assertFiltering(filter2, file, false); ref {file, filter2} [755-755],
 assertFiltering(filter1, file, true); ref {file, filter1} [767-767],
 assertFiltering(filter2, file, true); ref {file, filter2} [768-768],
 assertFiltering(filter1, file, true); ref {file, filter1} [779-779],
 assertFiltering(filter2, file, false); ref {file, filter2} [780-780],
 assertFiltering(filter1, file, true); ref {file, filter1} [791-791],
 assertFiltering(filter2, file, false); ref {file, filter2} [792-792]
[m[m31.08.2022 - 16:58:08.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testAgeFilter has 18 assertions: 
 assertFiltering(filter1, oldFile, true); ref {oldFile, filter1} [855-855],
 assertFiltering(filter2, oldFile, true); ref {oldFile, filter2} [856-856],
 assertFiltering(filter3, oldFile, false); ref {oldFile, filter3} [857-857],
 assertFiltering(filter4, oldFile, true); ref {oldFile, filter4} [858-858],
 assertFiltering(filter5, oldFile, true); ref {oldFile, filter5} [859-859],
 assertFiltering(filter6, oldFile, false); ref {oldFile, filter6} [860-860],
 assertFiltering(filter7, oldFile, true); ref {oldFile, filter7} [861-861],
 assertFiltering(filter8, oldFile, true); ref {filter8, oldFile} [862-862],
 assertFiltering(filter9, oldFile, false); ref {filter9, oldFile} [863-863],
 assertFiltering(filter1, newFile, false); ref {filter1, newFile} [864-864],
 assertFiltering(filter2, newFile, false); ref {newFile, filter2} [865-865],
 assertFiltering(filter3, newFile, true); ref {newFile, filter3} [866-866],
 assertFiltering(filter4, newFile, false); ref {newFile, filter4} [867-867],
 assertFiltering(filter5, newFile, false); ref {newFile, filter5} [868-868],
 assertFiltering(filter6, newFile, true); ref {newFile, filter6} [869-869],
 assertFiltering(filter7, newFile, false); ref {newFile, filter7} [870-870],
 assertFiltering(filter8, newFile, false); ref {filter8, newFile} [871-871],
 assertFiltering(filter9, newFile, true); ref {filter9, newFile} [872-872]
[m[m31.08.2022 - 16:58:08.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testSizeFilter has 15 assertions: 
 assertFiltering(filter1, smallFile, false); ref {filter1, smallFile} [899-899],
 assertFiltering(filter2, smallFile, false); ref {filter2, smallFile} [900-900],
 assertFiltering(filter3, smallFile, true); ref {smallFile, filter3} [901-901],
 assertFiltering(filter1, largeFile, true); ref {filter1, largeFile} [902-902],
 assertFiltering(filter2, largeFile, true); ref {filter2, largeFile} [903-903],
 assertFiltering(filter3, largeFile, false); ref {filter3, largeFile} [904-904],
 assertFiltering(filter4, smallFile, false); ref {smallFile, filter4} [913-913],
 assertFiltering(filter4, largeFile, false); ref {filter4, largeFile} [914-914],
 assertFiltering(filter5, smallFile, true); ref {smallFile, filter5} [915-915],
 assertFiltering(filter5, largeFile, false); ref {largeFile, filter5} [916-916],
 assertFiltering(filter6, smallFile, false); ref {smallFile, filter6} [917-917],
 assertFiltering(filter6, largeFile, true); ref {largeFile, filter6} [918-918],
 assertFiltering(filter7, smallFile, true); ref {smallFile, filter7} [919-919],
 assertFiltering(filter7, largeFile, true); ref {largeFile, filter7} [920-920],
 assertFiltering(filter8, largeFile, true); ref {filter8, largeFile} [921-921]
[m[m31.08.2022 - 16:58:08.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testHidden has 4 assertions: 
 assertFiltering(HiddenFileFilter.HIDDEN, hiddenDir, hiddenDir.isHidden()); ref {HiddenFileFilter.HIDDEN, HiddenFileFilter, hiddenDir} [935-935],
 assertFiltering(HiddenFileFilter.VISIBLE, hiddenDir, !hiddenDir.isHidden()); ref {HiddenFileFilter, HiddenFileFilter.VISIBLE, hiddenDir} [936-936],
 assertFiltering(HiddenFileFilter.HIDDEN, getTestDirectory(), false); ref {HiddenFileFilter.HIDDEN, HiddenFileFilter} [938-938],
 assertFiltering(HiddenFileFilter.VISIBLE, getTestDirectory(), true); ref {HiddenFileFilter, HiddenFileFilter.VISIBLE} [939-939]
[m[m31.08.2022 - 16:58:08.035 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testCanRead has 3 assertions: 
 assertFiltering(CanReadFileFilter.CAN_READ, readOnlyFile, true); ref {CanReadFileFilter, readOnlyFile, CanReadFileFilter.CAN_READ} [954-954],
 assertFiltering(CanReadFileFilter.CANNOT_READ, readOnlyFile, false); ref {CanReadFileFilter, CanReadFileFilter.CANNOT_READ, readOnlyFile} [955-955],
 assertFiltering(CanReadFileFilter.READ_ONLY, readOnlyFile, true); ref {CanReadFileFilter, readOnlyFile, CanReadFileFilter.READ_ONLY} [956-956]
[m[m31.08.2022 - 16:58:08.035 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testCanWrite has 4 assertions: 
 assertFiltering(CanWriteFileFilter.CAN_WRITE, getTestDirectory(), true); ref {CanWriteFileFilter.CAN_WRITE, CanWriteFileFilter} [972-972],
 assertFiltering(CanWriteFileFilter.CANNOT_WRITE, getTestDirectory(), false); ref {CanWriteFileFilter.CANNOT_WRITE, CanWriteFileFilter} [973-973],
 assertFiltering(CanWriteFileFilter.CAN_WRITE, readOnlyFile, false); ref {CanWriteFileFilter.CAN_WRITE, readOnlyFile, CanWriteFileFilter} [974-974],
 assertFiltering(CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true); ref {CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, CanWriteFileFilter} [975-975]
[m[m31.08.2022 - 16:58:08.035 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testEmpty has 8 assertions: 
 assertFiltering(EmptyFileFilter.EMPTY, emptyDir, true); ref {EmptyFileFilter.EMPTY, EmptyFileFilter, emptyDir} [985-985],
 assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDir, false); ref {EmptyFileFilter, emptyDir, EmptyFileFilter.NOT_EMPTY} [986-986],
 assertFiltering(EmptyFileFilter.EMPTY, emptyFile, true); ref {EmptyFileFilter.EMPTY, EmptyFileFilter, emptyFile} [998-998],
 assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyFile, false); ref {EmptyFileFilter, EmptyFileFilter.NOT_EMPTY, emptyFile} [999-999],
 // Not Empty Dir
assertFiltering(EmptyFileFilter.EMPTY, emptyDir, false); ref {EmptyFileFilter.EMPTY, EmptyFileFilter, emptyDir} [1002-1002],
 assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDir, true); ref {EmptyFileFilter, emptyDir, EmptyFileFilter.NOT_EMPTY} [1003-1003],
 assertFiltering(EmptyFileFilter.EMPTY, notEmptyFile, false); ref {EmptyFileFilter.EMPTY, EmptyFileFilter, notEmptyFile} [1015-1015],
 assertFiltering(EmptyFileFilter.NOT_EMPTY, notEmptyFile, true); ref {EmptyFileFilter, notEmptyFile, EmptyFileFilter.NOT_EMPTY} [1016-1016]
[m[m31.08.2022 - 16:58:08.035 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testMakeDirectoryOnly has 5 assertions: 
 assertSame(DirectoryFileFilter.DIRECTORY, FileFilterUtils.makeDirectoryOnly(null)); ref {DirectoryFileFilter.DIRECTORY, FileFilterUtils, DirectoryFileFilter} [1023-1023],
 assertFiltering(filter, fileA, false); ref {filter, fileA} [1034-1034],
 assertFiltering(filter, fileB, true); ref {filter, fileB} [1035-1035],
 assertFiltering(filter, fileA, false); ref {filter, fileA} [1057-1057],
 assertFiltering(filter, fileB, false); ref {filter, fileB} [1058-1058]
[m[m31.08.2022 - 16:58:08.035 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testMakeFileOnly has 5 assertions: 
 assertSame(FileFileFilter.FILE, FileFilterUtils.makeFileOnly(null)); ref {FileFileFilter.FILE, FileFileFilter, FileFilterUtils} [1067-1067],
 assertFiltering(filter, fileA, false); ref {filter, fileA} [1078-1078],
 assertFiltering(filter, fileB, false); ref {filter, fileB} [1079-1079],
 assertFiltering(filter, fileA, false); ref {filter, fileA} [1101-1101],
 assertFiltering(filter, fileB, true); ref {filter, fileB} [1102-1102]
[m[m31.08.2022 - 16:58:08.035 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testMagicNumberFileFilterBytes has 8 assertions: 
 assertFiltering(filter, classFileA, true); ref {filter, classFileA} [1133-1133],
 assertFiltering(filter, xmlFileB, false); ref {filter, xmlFileB} [1134-1134],
 assertFiltering(filter, emptyFile, false); ref {filter, emptyFile} [1135-1135],
 assertFiltering(filter, dir, false); ref {filter, dir} [1136-1136],
 assertFiltering(filter, classFileA, true); ref {filter, classFileA} [1141-1141],
 assertFiltering(filter, xmlFileB, false); ref {filter, xmlFileB} [1142-1142],
 assertFiltering(filter, emptyFile, false); ref {filter, emptyFile} [1143-1143],
 assertFiltering(filter, dir, false); ref {filter, dir} [1144-1144]
[m[m31.08.2022 - 16:58:08.035 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testMagicNumberFileFilterBytesOffset has 6 assertions: 
 assertFiltering(filter, tarFileA, true); ref {filter, tarFileA} [1174-1174],
 assertFiltering(filter, randomFileB, false); ref {filter, randomFileB} [1175-1175],
 assertFiltering(filter, dir, false); ref {filter, dir} [1176-1176],
 assertFiltering(filter, tarFileA, true); ref {filter, tarFileA} [1181-1181],
 assertFiltering(filter, randomFileB, false); ref {filter, randomFileB} [1182-1182],
 assertFiltering(filter, dir, false); ref {filter, dir} [1183-1183]
[m[m31.08.2022 - 16:58:08.035 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testMagicNumberFileFilterString has 6 assertions: 
 assertFiltering(filter, classFileA, false); ref {filter, classFileA} [1208-1208],
 assertFiltering(filter, xmlFileB, true); ref {filter, xmlFileB} [1209-1209],
 assertFiltering(filter, dir, false); ref {filter, dir} [1210-1210],
 assertFiltering(filter, classFileA, false); ref {filter, classFileA} [1214-1214],
 assertFiltering(filter, xmlFileB, true); ref {filter, xmlFileB} [1215-1215],
 assertFiltering(filter, dir, false); ref {filter, dir} [1216-1216]
[m[m31.08.2022 - 16:58:08.036 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testMagicNumberFileFilterStringOffset has 6 assertions: 
 assertFiltering(filter, tarFileA, true); ref {filter, tarFileA} [1246-1246],
 assertFiltering(filter, randomFileB, false); ref {filter, randomFileB} [1247-1247],
 assertFiltering(filter, dir, false); ref {filter, dir} [1248-1248],
 assertFiltering(filter, tarFileA, true); ref {filter, tarFileA} [1253-1253],
 assertFiltering(filter, randomFileB, false); ref {filter, randomFileB} [1254-1254],
 assertFiltering(filter, dir, false); ref {filter, dir} [1255-1255]
[m[m31.08.2022 - 16:58:08.036 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testMagicNumberFileFilterValidation has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.036 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFilterArray has 2 assertions: 
 assertEquals(1, filtered.length); ref {filtered, filtered.length} [1311-1311],
 assertEquals(fileA, filtered[0]); ref {filtered, fileA} [1312-1312]
[m[m31.08.2022 - 16:58:08.036 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFilterArray_fromList has 2 assertions: 
 assertEquals(1, filtered.length); ref {filtered, filtered.length} [1329-1329],
 assertEquals(fileA, filtered[0]); ref {filtered, fileA} [1330-1330]
[m[m31.08.2022 - 16:58:08.036 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFilterArrayNullParameters has 1 assertions: 
 assertEquals(0, filtered.length); ref {filtered, filtered.length} [1358-1358]
[m[m31.08.2022 - 16:58:08.036 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFilterList has 2 assertions: 
 assertTrue(filteredList.contains(fileA)); ref {filteredList, fileA} [1375-1375],
 assertFalse(filteredList.contains(fileB)); ref {fileB, filteredList} [1376-1376]
[m[m31.08.2022 - 16:58:08.036 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFilterList_fromArray has 2 assertions: 
 assertTrue(filteredList.contains(fileA)); ref {filteredList, fileA} [1392-1392],
 assertFalse(filteredList.contains(fileB)); ref {fileB, filteredList} [1393-1393]
[m[m31.08.2022 - 16:58:08.036 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFilterListNullParameters has 1 assertions: 
 assertEquals(0, filteredList.size()); ref {filteredList} [1419-1419]
[m[m31.08.2022 - 16:58:08.036 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFilterSet has 2 assertions: 
 assertTrue(filteredSet.contains(fileA)); ref {filteredSet, fileA} [1436-1436],
 assertFalse(filteredSet.contains(fileB)); ref {fileB, filteredSet} [1437-1437]
[m[m31.08.2022 - 16:58:08.036 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFilterSet_fromArray has 2 assertions: 
 assertTrue(filteredSet.contains(fileA)); ref {filteredSet, fileA} [1453-1453],
 assertFalse(filteredSet.contains(fileB)); ref {fileB, filteredSet} [1454-1454]
[m[m31.08.2022 - 16:58:08.036 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testFilterSetNullParameters has 1 assertions: 
 assertEquals(0, filteredSet.size()); ref {filteredSet} [1480-1480]
[m[m31.08.2022 - 16:58:08.037 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testEnsureTestCoverage has 1 assertions: 
 // dummy for test coverage
assertNotNull(new FileFilterUtils()); ref {} [1485-1485]
[m[m31.08.2022 - 16:58:08.037 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testNullFilters has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.037 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.FileFilterTestCase::testDelegation has 2 assertions: 
 // TODO improve these tests
assertNotNull(FileFilterUtils.asFileFilter((FileFilter) FalseFileFilter.INSTANCE)); ref {FalseFileFilter.INSTANCE, FileFilterUtils, FalseFileFilter} [1506-1506],
 assertNotNull(FileFilterUtils.asFileFilter((FilenameFilter) FalseFileFilter.INSTANCE).toString()); ref {FalseFileFilter.INSTANCE, FileFilterUtils, FalseFileFilter} [1507-1507]
[m[m31.08.2022 - 16:58:08.039 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m31.08.2022 - 16:58:08.039 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceReaderTest::testClose has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.039 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceReaderTest::testMarkSupported has 1 assertions: 
 assertTrue(reader.markSupported()); ref {reader} [45-45]
[m[m31.08.2022 - 16:58:08.039 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceReaderTest::testMark has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.039 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceReaderTest::testSkip has 7 assertions: 
 assertEquals(3, reader.skip(3)); ref {reader} [66-66],
 assertEquals(-1, reader.skip(3)); ref {reader} [68-68],
 assertEquals(2, reader.skip(2)); ref {reader} [70-70],
 assertEquals(4, reader.skip(10)); ref {reader} [71-71],
 assertEquals(-1, reader.skip(1)); ref {reader} [72-72],
 assertEquals(6, reader.skip(20)); ref {reader} [74-74],
 assertEquals(-1, reader.read()); ref {reader} [75-75]
[m[m31.08.2022 - 16:58:08.039 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceReaderTest::testRead has 5 assertions: 
 assertEquals('F', reader.read()); ref {reader} [81-81],
 assertEquals('o', reader.read()); ref {reader} [82-82],
 assertEquals('o', reader.read()); ref {reader} [83-83],
 assertEquals(-1, reader.read()); ref {reader} [84-84],
 assertEquals(-1, reader.read()); ref {reader} [85-85]
[m[m31.08.2022 - 16:58:08.039 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceReaderTest::testReadCharArray has 4 assertions: 
 assertEquals(2, reader.read(chars)); ref {reader, chars} [93-93],
 assertEquals(3, reader.read(chars)); ref {reader, chars} [96-96],
 assertEquals(1, reader.read(chars)); ref {reader, chars} [99-99],
 assertEquals(-1, reader.read(chars)); ref {reader, chars} [101-101]
[m[m31.08.2022 - 16:58:08.039 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceReaderTest::testReadCharArrayPortion has 3 assertions: 
 assertEquals(3, reader.read(chars, 3, 3)); ref {reader, chars} [109-109],
 assertEquals(3, reader.read(chars, 0, 3)); ref {reader, chars} [111-111],
 assertEquals(-1, reader.read(chars)); ref {reader, chars} [113-113]
[m[m31.08.2022 - 16:58:08.042 [INFO ] ParsingStrategy.parseTestSuite() - Found 16 test cases
[m[m31.08.2022 - 16:58:08.042 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testConstructor has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.042 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testZeroLines has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.042 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testOneLines has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.042 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testTwoLines has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.042 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testThreeLines has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.042 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testMissingFile has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.042 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testValidEncoding has 2 assertions: 
 assertNotNull(iterator.next()); ref {iterator} [178-178],
 assertEquals(3, count); ref {count} [181-181]
[m[m31.08.2022 - 16:58:08.042 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testInvalidEncoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testNextLineOnlyDefaultEncoding has 1 assertions: 
 assertLines(lines, iterator); ref {iterator, lines} [211-211]
[m[m31.08.2022 - 16:58:08.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testNextLineOnlyNullEncoding has 1 assertions: 
 assertLines(lines, iterator); ref {iterator, lines} [222-222]
[m[m31.08.2022 - 16:58:08.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testNextLineOnlyUtf8Encoding has 1 assertions: 
 assertLines(lines, iterator); ref {iterator, lines} [233-233]
[m[m31.08.2022 - 16:58:08.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testNextOnly has 2 assertions: 
 assertEquals("next() line " + i, lines.get(i), line); ref {line, i, lines} [247-247],
 assertEquals("No more expected", false, iterator.hasNext()); ref {iterator} [249-249]
[m[m31.08.2022 - 16:58:08.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testNextWithException has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testCloseEarly has 3 assertions: 
 // get
assertNotNull("Line expected", iterator.next()); ref {iterator} [281-281],
 assertTrue("More expected", iterator.hasNext()); ref {iterator} [282-282],
 assertFalse("No more expected", iterator.hasNext()); ref {iterator} [286-286]
[m[m31.08.2022 - 16:58:08.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testFilteringFileReader has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.LineIteratorTestCase::testFilteringBufferedReader has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.044 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:08.044 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.SizeFileComparatorTest::testNonexistantFile has 2 assertions: 
 assertFalse(nonexistantFile.exists()); ref {nonexistantFile} [91-91],
 assertTrue("less", comparator.compare(nonexistantFile, moreFile) < 0); ref {comparator, nonexistantFile, moreFile} [92-92]
[m[m31.08.2022 - 16:58:08.044 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.SizeFileComparatorTest::testCompareDirectorySizes has 3 assertions: 
 assertEquals("sumDirectoryContents=false", 0, comparator.compare(smallerDir, largerDir)); ref {comparator, largerDir, smallerDir} [100-100],
 assertEquals("less", -1, SizeFileComparator.SIZE_SUMDIR_COMPARATOR.compare(smallerDir, largerDir)); ref {SizeFileComparator, largerDir, smallerDir, SizeFileComparator.SIZE_SUMDIR_COMPARATOR} [101-101],
 assertEquals("less", 1, SizeFileComparator.SIZE_SUMDIR_REVERSE.compare(smallerDir, largerDir)); ref {SizeFileComparator, SizeFileComparator.SIZE_SUMDIR_REVERSE, largerDir, smallerDir} [102-102]
[m[m31.08.2022 - 16:58:08.048 [INFO ] ParsingStrategy.parseTestSuite() - Found 23 test cases
[m[m31.08.2022 - 16:58:08.048 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_inputStreamToOutputStream has 4 assertions: 
 assertEquals("Not all bytes were read", 0, in.available()); ref {in} [72-72],
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [73-73],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [74-74],
 assertEquals(inData.length, count); ref {inData.length, inData, count} [75-75]
[m[m31.08.2022 - 16:58:08.048 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_inputStreamToOutputStreamWithBufferSize has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.049 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_inputStreamToOutputStream_nullIn has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.049 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_inputStreamToOutputStream_nullOut has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.049 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_inputStreamToOutputStream_IO84 has 2 assertions: 
 // Test copy() method
assertEquals(-1, IOUtils.copy(in, out)); ref {IOUtils, in, out} [135-135],
 // Test copyLarge() method
assertEquals("copyLarge()", size, IOUtils.copyLarge(in, out)); ref {IOUtils, size, in, out} [141-141]
[m[m31.08.2022 - 16:58:08.049 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_inputStreamToWriter has 3 assertions: 
 assertEquals("Not all bytes were read", 0, in.available()); ref {in} [159-159],
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [160-160],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [161-161]
[m[m31.08.2022 - 16:58:08.049 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_inputStreamToWriter_nullIn has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.049 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_inputStreamToWriter_nullOut has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.049 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_inputStreamToWriter_Encoding has 2 assertions: 
 assertEquals("Not all bytes were read", 0, in.available()); ref {in} [195-195],
 assertTrue("Content differs", Arrays.equals(inData, bytes)); ref {inData, bytes, Arrays} [198-198]
[m[m31.08.2022 - 16:58:08.049 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_inputStreamToWriter_Encoding_nullIn has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.049 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_inputStreamToWriter_Encoding_nullOut has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.049 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_inputStreamToWriter_Encoding_nullEncoding has 3 assertions: 
 assertEquals("Not all bytes were read", 0, in.available()); ref {in} [229-229],
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [230-230],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [231-231]
[m[m31.08.2022 - 16:58:08.050 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_readerToOutputStream has 2 assertions: 
 // Note: this method *does* flush. It is equivalent to:
// OutputStreamWriter _out = new OutputStreamWriter(fout);
// IOUtils.copy( fin, _out, 4096 ); // copy( Reader, Writer, int );
// _out.flush();
// out = fout;
// Note: rely on the method to flush
assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [253-253],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [254-254]
[m[m31.08.2022 - 16:58:08.050 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_readerToOutputStream_nullIn has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.050 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_readerToOutputStream_nullOut has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.050 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_readerToOutputStream_Encoding has 1 assertions: 
 assertTrue("Content differs", Arrays.equals(inData, bytes)); ref {inData, bytes, Arrays} [291-291]
[m[m31.08.2022 - 16:58:08.050 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_readerToOutputStream_Encoding_nullIn has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.050 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_readerToOutputStream_Encoding_nullOut has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.050 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_readerToOutputStream_Encoding_nullEncoding has 2 assertions: 
 // note: this method *does* flush.
// note: we don't flush here; this IOUtils method does it for us
assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [324-324],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [325-325]
[m[m31.08.2022 - 16:58:08.050 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_readerToWriter has 3 assertions: 
 assertEquals("The number of characters returned by copy is wrong", inData.length, count); ref {inData.length, inData, count} [343-343],
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [344-344],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [345-345]
[m[m31.08.2022 - 16:58:08.050 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_readerToWriter_nullIn has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.050 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_readerToWriter_nullOut has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.050 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsCopyTestCase::testCopy_readerToWriter_IO84 has 2 assertions: 
 // Test copy() method
assertEquals(-1, IOUtils.copy(reader, writer)); ref {IOUtils, reader, writer} [375-375],
 // Test copyLarge() method
assertEquals("copyLarge()", size, IOUtils.copyLarge(reader, writer)); ref {IOUtils, size, reader, writer} [381-381]
[m[m31.08.2022 - 16:58:08.057 [INFO ] ParsingStrategy.parseTestSuite() - Found 17 test cases
[m[m31.08.2022 - 16:58:08.057 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_forName has 3 assertions: 
 assertEquals(IOCase.SENSITIVE, IOCase.forName("Sensitive")); ref {IOCase.SENSITIVE, IOCase} [44-44],
 assertEquals(IOCase.INSENSITIVE, IOCase.forName("Insensitive")); ref {IOCase.INSENSITIVE, IOCase} [45-45],
 assertEquals(IOCase.SYSTEM, IOCase.forName("System")); ref {IOCase.SYSTEM, IOCase} [46-46]
[m[m31.08.2022 - 16:58:08.057 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_serialization has 3 assertions: 
 assertSame(IOCase.SENSITIVE, serialize(IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase} [59-59],
 assertSame(IOCase.INSENSITIVE, serialize(IOCase.INSENSITIVE)); ref {IOCase.INSENSITIVE, IOCase} [60-60],
 assertSame(IOCase.SYSTEM, serialize(IOCase.SYSTEM)); ref {IOCase.SYSTEM, IOCase} [61-61]
[m[m31.08.2022 - 16:58:08.057 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_getName has 3 assertions: 
 assertEquals("Sensitive", IOCase.SENSITIVE.getName()); ref {IOCase.SENSITIVE, IOCase} [66-66],
 assertEquals("Insensitive", IOCase.INSENSITIVE.getName()); ref {IOCase.INSENSITIVE, IOCase} [67-67],
 assertEquals("System", IOCase.SYSTEM.getName()); ref {IOCase.SYSTEM, IOCase} [68-68]
[m[m31.08.2022 - 16:58:08.057 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_toString has 3 assertions: 
 assertEquals("Sensitive", IOCase.SENSITIVE.toString()); ref {IOCase.SENSITIVE, IOCase} [73-73],
 assertEquals("Insensitive", IOCase.INSENSITIVE.toString()); ref {IOCase.INSENSITIVE, IOCase} [74-74],
 assertEquals("System", IOCase.SYSTEM.toString()); ref {IOCase.SYSTEM, IOCase} [75-75]
[m[m31.08.2022 - 16:58:08.058 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_isCaseSensitive has 3 assertions: 
 assertTrue(IOCase.SENSITIVE.isCaseSensitive()); ref {IOCase.SENSITIVE, IOCase} [80-80],
 assertFalse(IOCase.INSENSITIVE.isCaseSensitive()); ref {IOCase.INSENSITIVE, IOCase} [81-81],
 assertEquals(!WINDOWS, IOCase.SYSTEM.isCaseSensitive()); ref {IOCase.SYSTEM, WINDOWS, IOCase} [82-82]
[m[m31.08.2022 - 16:58:08.058 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_checkCompare_functionality has 6 assertions: 
 assertTrue(IOCase.SENSITIVE.checkCompareTo("ABC", "") > 0); ref {IOCase.SENSITIVE, IOCase} [87-87],
 assertTrue(IOCase.SENSITIVE.checkCompareTo("", "ABC") < 0); ref {IOCase.SENSITIVE, IOCase} [88-88],
 assertTrue(IOCase.SENSITIVE.checkCompareTo("ABC", "DEF") < 0); ref {IOCase.SENSITIVE, IOCase} [89-89],
 assertTrue(IOCase.SENSITIVE.checkCompareTo("DEF", "ABC") > 0); ref {IOCase.SENSITIVE, IOCase} [90-90],
 assertEquals(0, IOCase.SENSITIVE.checkCompareTo("ABC", "ABC")); ref {IOCase.SENSITIVE, IOCase} [91-91],
 assertEquals(0, IOCase.SENSITIVE.checkCompareTo("", "")); ref {IOCase.SENSITIVE, IOCase} [92-92]
[m[m31.08.2022 - 16:58:08.058 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_checkCompare_case has 9 assertions: 
 assertEquals(0, IOCase.SENSITIVE.checkCompareTo("ABC", "ABC")); ref {IOCase.SENSITIVE, IOCase} [110-110],
 assertTrue(IOCase.SENSITIVE.checkCompareTo("ABC", "abc") < 0); ref {IOCase.SENSITIVE, IOCase} [111-111],
 assertTrue(IOCase.SENSITIVE.checkCompareTo("abc", "ABC") > 0); ref {IOCase.SENSITIVE, IOCase} [112-112],
 assertEquals(0, IOCase.INSENSITIVE.checkCompareTo("ABC", "ABC")); ref {IOCase.INSENSITIVE, IOCase} [114-114],
 assertEquals(0, IOCase.INSENSITIVE.checkCompareTo("ABC", "abc")); ref {IOCase.INSENSITIVE, IOCase} [115-115],
 assertEquals(0, IOCase.INSENSITIVE.checkCompareTo("abc", "ABC")); ref {IOCase.INSENSITIVE, IOCase} [116-116],
 assertEquals(0, IOCase.SYSTEM.checkCompareTo("ABC", "ABC")); ref {IOCase.SYSTEM, IOCase} [118-118],
 assertEquals(WINDOWS, IOCase.SYSTEM.checkCompareTo("ABC", "abc") == 0); ref {IOCase.SYSTEM, WINDOWS, IOCase} [119-119],
 assertEquals(WINDOWS, IOCase.SYSTEM.checkCompareTo("abc", "ABC") == 0); ref {IOCase.SYSTEM, WINDOWS, IOCase} [120-120]
[m[m31.08.2022 - 16:58:08.058 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_checkEquals_functionality has 9 assertions: 
 assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "")); ref {IOCase.SENSITIVE, IOCase} [127-127],
 assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "A")); ref {IOCase.SENSITIVE, IOCase} [128-128],
 assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "AB")); ref {IOCase.SENSITIVE, IOCase} [129-129],
 assertTrue(IOCase.SENSITIVE.checkEquals("ABC", "ABC")); ref {IOCase.SENSITIVE, IOCase} [130-130],
 assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "BC")); ref {IOCase.SENSITIVE, IOCase} [131-131],
 assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "C")); ref {IOCase.SENSITIVE, IOCase} [132-132],
 assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "ABCD")); ref {IOCase.SENSITIVE, IOCase} [133-133],
 assertFalse(IOCase.SENSITIVE.checkEquals("", "ABC")); ref {IOCase.SENSITIVE, IOCase} [134-134],
 assertTrue(IOCase.SENSITIVE.checkEquals("", "")); ref {IOCase.SENSITIVE, IOCase} [135-135]
[m[m31.08.2022 - 16:58:08.058 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_checkEquals_case has 6 assertions: 
 assertTrue(IOCase.SENSITIVE.checkEquals("ABC", "ABC")); ref {IOCase.SENSITIVE, IOCase} [153-153],
 assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "Abc")); ref {IOCase.SENSITIVE, IOCase} [154-154],
 assertTrue(IOCase.INSENSITIVE.checkEquals("ABC", "ABC")); ref {IOCase.INSENSITIVE, IOCase} [156-156],
 assertTrue(IOCase.INSENSITIVE.checkEquals("ABC", "Abc")); ref {IOCase.INSENSITIVE, IOCase} [157-157],
 assertTrue(IOCase.SYSTEM.checkEquals("ABC", "ABC")); ref {IOCase.SYSTEM, IOCase} [159-159],
 assertEquals(WINDOWS, IOCase.SYSTEM.checkEquals("ABC", "Abc")); ref {IOCase.SYSTEM, WINDOWS, IOCase} [160-160]
[m[m31.08.2022 - 16:58:08.058 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_checkStartsWith_functionality has 9 assertions: 
 assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "")); ref {IOCase.SENSITIVE, IOCase} [166-166],
 assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "A")); ref {IOCase.SENSITIVE, IOCase} [167-167],
 assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "AB")); ref {IOCase.SENSITIVE, IOCase} [168-168],
 assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "ABC")); ref {IOCase.SENSITIVE, IOCase} [169-169],
 assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", "BC")); ref {IOCase.SENSITIVE, IOCase} [170-170],
 assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", "C")); ref {IOCase.SENSITIVE, IOCase} [171-171],
 assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", "ABCD")); ref {IOCase.SENSITIVE, IOCase} [172-172],
 assertFalse(IOCase.SENSITIVE.checkStartsWith("", "ABC")); ref {IOCase.SENSITIVE, IOCase} [173-173],
 assertTrue(IOCase.SENSITIVE.checkStartsWith("", "")); ref {IOCase.SENSITIVE, IOCase} [174-174]
[m[m31.08.2022 - 16:58:08.058 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_checkStartsWith_case has 6 assertions: 
 assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "AB")); ref {IOCase.SENSITIVE, IOCase} [192-192],
 assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", "Ab")); ref {IOCase.SENSITIVE, IOCase} [193-193],
 assertTrue(IOCase.INSENSITIVE.checkStartsWith("ABC", "AB")); ref {IOCase.INSENSITIVE, IOCase} [195-195],
 assertTrue(IOCase.INSENSITIVE.checkStartsWith("ABC", "Ab")); ref {IOCase.INSENSITIVE, IOCase} [196-196],
 assertTrue(IOCase.SYSTEM.checkStartsWith("ABC", "AB")); ref {IOCase.SYSTEM, IOCase} [198-198],
 assertEquals(WINDOWS, IOCase.SYSTEM.checkStartsWith("ABC", "Ab")); ref {IOCase.SYSTEM, WINDOWS, IOCase} [199-199]
[m[m31.08.2022 - 16:58:08.058 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_checkEndsWith_functionality has 9 assertions: 
 assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "")); ref {IOCase.SENSITIVE, IOCase} [205-205],
 assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", "A")); ref {IOCase.SENSITIVE, IOCase} [206-206],
 assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", "AB")); ref {IOCase.SENSITIVE, IOCase} [207-207],
 assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "ABC")); ref {IOCase.SENSITIVE, IOCase} [208-208],
 assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "BC")); ref {IOCase.SENSITIVE, IOCase} [209-209],
 assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "C")); ref {IOCase.SENSITIVE, IOCase} [210-210],
 assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", "ABCD")); ref {IOCase.SENSITIVE, IOCase} [211-211],
 assertFalse(IOCase.SENSITIVE.checkEndsWith("", "ABC")); ref {IOCase.SENSITIVE, IOCase} [212-212],
 assertTrue(IOCase.SENSITIVE.checkEndsWith("", "")); ref {IOCase.SENSITIVE, IOCase} [213-213]
[m[m31.08.2022 - 16:58:08.059 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_checkEndsWith_case has 6 assertions: 
 assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "BC")); ref {IOCase.SENSITIVE, IOCase} [231-231],
 assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", "Bc")); ref {IOCase.SENSITIVE, IOCase} [232-232],
 assertTrue(IOCase.INSENSITIVE.checkEndsWith("ABC", "BC")); ref {IOCase.INSENSITIVE, IOCase} [234-234],
 assertTrue(IOCase.INSENSITIVE.checkEndsWith("ABC", "Bc")); ref {IOCase.INSENSITIVE, IOCase} [235-235],
 assertTrue(IOCase.SYSTEM.checkEndsWith("ABC", "BC")); ref {IOCase.SYSTEM, IOCase} [237-237],
 assertEquals(WINDOWS, IOCase.SYSTEM.checkEndsWith("ABC", "Bc")); ref {IOCase.SYSTEM, WINDOWS, IOCase} [238-238]
[m[m31.08.2022 - 16:58:08.059 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_checkIndexOf_functionality has 26 assertions: 
 // start
assertEquals(0, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "A")); ref {IOCase.SENSITIVE, IOCase} [246-246],
 assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "A")); ref {IOCase.SENSITIVE, IOCase} [247-247],
 assertEquals(0, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "AB")); ref {IOCase.SENSITIVE, IOCase} [248-248],
 assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "AB")); ref {IOCase.SENSITIVE, IOCase} [249-249],
 assertEquals(0, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "ABC")); ref {IOCase.SENSITIVE, IOCase} [250-250],
 assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "ABC")); ref {IOCase.SENSITIVE, IOCase} [251-251],
 // middle
assertEquals(3, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "D")); ref {IOCase.SENSITIVE, IOCase} [254-254],
 assertEquals(3, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "D")); ref {IOCase.SENSITIVE, IOCase} [255-255],
 assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "D")); ref {IOCase.SENSITIVE, IOCase} [256-256],
 assertEquals(3, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DE")); ref {IOCase.SENSITIVE, IOCase} [257-257],
 assertEquals(3, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "DE")); ref {IOCase.SENSITIVE, IOCase} [258-258],
 assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "DE")); ref {IOCase.SENSITIVE, IOCase} [259-259],
 assertEquals(3, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DEF")); ref {IOCase.SENSITIVE, IOCase} [260-260],
 assertEquals(3, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "DEF")); ref {IOCase.SENSITIVE, IOCase} [261-261],
 assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "DEF")); ref {IOCase.SENSITIVE, IOCase} [262-262],
 // end
assertEquals(9, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "J")); ref {IOCase.SENSITIVE, IOCase} [265-265],
 assertEquals(9, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "J")); ref {IOCase.SENSITIVE, IOCase} [266-266],
 assertEquals(9, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 9, "J")); ref {IOCase.SENSITIVE, IOCase} [267-267],
 assertEquals(8, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "IJ")); ref {IOCase.SENSITIVE, IOCase} [268-268],
 assertEquals(8, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "IJ")); ref {IOCase.SENSITIVE, IOCase} [269-269],
 assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 9, "IJ")); ref {IOCase.SENSITIVE, IOCase} [270-270],
 assertEquals(7, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 6, "HIJ")); ref {IOCase.SENSITIVE, IOCase} [271-271],
 assertEquals(7, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 7, "HIJ")); ref {IOCase.SENSITIVE, IOCase} [272-272],
 assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "HIJ")); ref {IOCase.SENSITIVE, IOCase} [273-273],
 // not found
assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DED")); ref {IOCase.SENSITIVE, IOCase} [276-276],
 // too long
assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("DEF", 0, "ABCDEFGHIJ")); ref {IOCase.SENSITIVE, IOCase} [279-279]
[m[m31.08.2022 - 16:58:08.059 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_checkIndexOf_case has 6 assertions: 
 assertEquals(1, IOCase.SENSITIVE.checkIndexOf("ABC", 0, "BC")); ref {IOCase.SENSITIVE, IOCase} [297-297],
 assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABC", 0, "Bc")); ref {IOCase.SENSITIVE, IOCase} [298-298],
 assertEquals(1, IOCase.INSENSITIVE.checkIndexOf("ABC", 0, "BC")); ref {IOCase.INSENSITIVE, IOCase} [300-300],
 assertEquals(1, IOCase.INSENSITIVE.checkIndexOf("ABC", 0, "Bc")); ref {IOCase.INSENSITIVE, IOCase} [301-301],
 assertEquals(1, IOCase.SYSTEM.checkIndexOf("ABC", 0, "BC")); ref {IOCase.SYSTEM, IOCase} [303-303],
 assertEquals(WINDOWS ? 1 : -1, IOCase.SYSTEM.checkIndexOf("ABC", 0, "Bc")); ref {IOCase.SYSTEM, WINDOWS, IOCase} [304-304]
[m[m31.08.2022 - 16:58:08.059 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_checkRegionMatches_functionality has 18 assertions: 
 assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "")); ref {IOCase.SENSITIVE, IOCase} [310-310],
 assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "A")); ref {IOCase.SENSITIVE, IOCase} [311-311],
 assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "AB")); ref {IOCase.SENSITIVE, IOCase} [312-312],
 assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "ABC")); ref {IOCase.SENSITIVE, IOCase} [313-313],
 assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "BC")); ref {IOCase.SENSITIVE, IOCase} [314-314],
 assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "C")); ref {IOCase.SENSITIVE, IOCase} [315-315],
 assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "ABCD")); ref {IOCase.SENSITIVE, IOCase} [316-316],
 assertFalse(IOCase.SENSITIVE.checkRegionMatches("", 0, "ABC")); ref {IOCase.SENSITIVE, IOCase} [317-317],
 assertTrue(IOCase.SENSITIVE.checkRegionMatches("", 0, "")); ref {IOCase.SENSITIVE, IOCase} [318-318],
 assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "")); ref {IOCase.SENSITIVE, IOCase} [320-320],
 assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "A")); ref {IOCase.SENSITIVE, IOCase} [321-321],
 assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "AB")); ref {IOCase.SENSITIVE, IOCase} [322-322],
 assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "ABC")); ref {IOCase.SENSITIVE, IOCase} [323-323],
 assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "BC")); ref {IOCase.SENSITIVE, IOCase} [324-324],
 assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "C")); ref {IOCase.SENSITIVE, IOCase} [325-325],
 assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "ABCD")); ref {IOCase.SENSITIVE, IOCase} [326-326],
 assertFalse(IOCase.SENSITIVE.checkRegionMatches("", 1, "ABC")); ref {IOCase.SENSITIVE, IOCase} [327-327],
 assertFalse(IOCase.SENSITIVE.checkRegionMatches("", 1, "")); ref {IOCase.SENSITIVE, IOCase} [328-328]
[m[m31.08.2022 - 16:58:08.059 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOCaseTestCase::test_checkRegionMatches_case has 6 assertions: 
 assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "AB")); ref {IOCase.SENSITIVE, IOCase} [358-358],
 assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "Ab")); ref {IOCase.SENSITIVE, IOCase} [359-359],
 assertTrue(IOCase.INSENSITIVE.checkRegionMatches("ABC", 0, "AB")); ref {IOCase.INSENSITIVE, IOCase} [361-361],
 assertTrue(IOCase.INSENSITIVE.checkRegionMatches("ABC", 0, "Ab")); ref {IOCase.INSENSITIVE, IOCase} [362-362],
 assertTrue(IOCase.SYSTEM.checkRegionMatches("ABC", 0, "AB")); ref {IOCase.SYSTEM, IOCase} [364-364],
 assertEquals(WINDOWS, IOCase.SYSTEM.checkRegionMatches("ABC", 0, "Ab")); ref {IOCase.SYSTEM, WINDOWS, IOCase} [365-365]
[m[m31.08.2022 - 16:58:08.060 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.060 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:08.060 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.FullClassNameMatcherTest::noNames has 1 assertions: 
 assertFalse(m.matches(Integer.class.getName())); ref {m} [33-33]
[m[m31.08.2022 - 16:58:08.060 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.FullClassNameMatcherTest::withNames has 2 assertions: 
 assertTrue(m.matches(Integer.class.getName())); ref {m} [39-39],
 assertFalse(m.matches(String.class.getName())); ref {m} [40-40]
[m[m31.08.2022 - 16:58:08.060 [INFO ] ParsingStrategy.parseTestSuite() - Found 5 test cases
[m[m31.08.2022 - 16:58:08.061 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsFileNewerTestCase::testIsFileNewer has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.061 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsFileNewerTestCase::testIsFileNewerImaginaryFile has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.061 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsFileNewerTestCase::testIsFileNewerNoFile has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.061 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsFileNewerTestCase::testIsFileNewerNoDate has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.061 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsFileNewerTestCase::testIsFileNewerNoFileReference has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.061 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.061 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.CloseShieldOutputStreamTest::testClose has 3 assertions: 
 assertFalse("closed", closed); ref {closed} [55-55],
 assertEquals(1, original.size()); ref {original} [63-63],
 assertEquals('y', original.toByteArray()[0]); ref {original} [64-64]
[m[m31.08.2022 - 16:58:08.062 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.062 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.filefilter.RegexFileFilterTestCase::testRegex has 15 assertions: 
 assertFiltering(filter, new File("Test.java"), true); ref {filter} [59-59],
 assertFiltering(filter, new File("test-10.java"), true); ref {filter} [60-60],
 assertFiltering(filter, new File("test-.java"), false); ref {filter} [61-61],
 assertFiltering(filter, new File("Test.java"), true); ref {filter} [64-64],
 assertFiltering(filter, new File("test.java"), true); ref {filter} [65-65],
 assertFiltering(filter, new File("tEST.java"), false); ref {filter} [66-66],
 assertFiltering(filter, new File("Test.java"), true); ref {filter} [69-69],
 assertFiltering(filter, new File("test.java"), true); ref {filter} [70-70],
 assertFiltering(filter, new File("tEST.java"), true); ref {filter} [71-71],
 assertFiltering(filter, new File("Test.java"), true); ref {filter} [74-74],
 assertFiltering(filter, new File("test.java"), true); ref {filter} [75-75],
 assertFiltering(filter, new File("tEST.java"), true); ref {filter} [76-76],
 assertFiltering(filter, new File("Test.java"), true); ref {filter} [79-79],
 assertFiltering(filter, new File("test.java"), true); ref {filter} [80-80],
 assertFiltering(filter, new File("tEST.java"), true); ref {filter} [81-81]
[m[m31.08.2022 - 16:58:08.064 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 16:58:08.064 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsListFilesTestCase::testIterateFilesByExtension has 11 assertions: 
 assertEquals(1, filenames.size()); ref {filenames} [105-105],
 assertTrue(filenames.contains("dummy-build.xml")); ref {filenames} [106-106],
 assertFalse(filenames.contains("README")); ref {filenames} [107-107],
 assertFalse(filenames.contains("dummy-file.txt")); ref {filenames} [108-108],
 assertEquals(4, filenames.size()); ref {filenames} [112-112],
 assertTrue(filenames.contains("dummy-file.txt")); ref {filenames} [113-113],
 assertFalse(filenames.contains("dummy-index.html")); ref {filenames} [114-114],
 assertEquals(2, filenames.size()); ref {filenames} [118-118],
 assertTrue(filenames.contains("dummy-build.xml")); ref {filenames} [119-119],
 assertTrue(filenames.contains("README")); ref {filenames} [120-120],
 assertFalse(filenames.contains("dummy-file.txt")); ref {filenames} [121-121]
[m[m31.08.2022 - 16:58:08.065 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsListFilesTestCase::testListFilesByExtension has 11 assertions: 
 assertEquals(1, files.size()); ref {files} [129-129],
 assertTrue(filenames.contains("dummy-build.xml")); ref {filenames} [131-131],
 assertFalse(filenames.contains("README")); ref {filenames} [132-132],
 assertFalse(filenames.contains("dummy-file.txt")); ref {filenames} [133-133],
 assertEquals(4, filenames.size()); ref {filenames} [137-137],
 assertTrue(filenames.contains("dummy-file.txt")); ref {filenames} [138-138],
 assertFalse(filenames.contains("dummy-index.html")); ref {filenames} [139-139],
 assertEquals(2, files.size()); ref {files} [142-142],
 assertTrue(filenames.contains("dummy-build.xml")); ref {filenames} [144-144],
 assertTrue(filenames.contains("README")); ref {filenames} [145-145],
 assertFalse(filenames.contains("dummy-file.txt")); ref {filenames} [146-146]
[m[m31.08.2022 - 16:58:08.065 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsListFilesTestCase::testListFiles has 12 assertions: 
 assertTrue("'dummy-build.xml' is missing", filenames.contains("dummy-build.xml")); ref {filenames} [160-160],
 assertFalse("'dummy-index.html' shouldn't be found", filenames.contains("dummy-index.html")); ref {filenames} [161-161],
 assertFalse("'Entries' shouldn't be found", filenames.contains("Entries")); ref {filenames} [162-162],
 assertTrue("'dummy-build.xml' is missing", filenames.contains("dummy-build.xml")); ref {filenames} [169-169],
 assertTrue("'dummy-index.html' is missing", filenames.contains("dummy-index.html")); ref {filenames} [170-170],
 assertFalse("'Entries' shouldn't be found", filenames.contains("Entries")); ref {filenames} [171-171],
 assertTrue("'dummy-build.xml' is missing", filenames.contains("dummy-build.xml")); ref {filenames} [178-178],
 assertTrue("'dummy-index.html' is missing", filenames.contains("dummy-index.html")); ref {filenames} [179-179],
 assertFalse("'Entries' shouldn't be found", filenames.contains("Entries")); ref {filenames} [180-180],
 assertTrue("'dummy-build.xml' is missing", filenames.contains("dummy-build.xml")); ref {filenames} [188-188],
 assertTrue("'dummy-index.html' is missing", filenames.contains("dummy-index.html")); ref {filenames} [189-189],
 assertFalse("'Entries' shouldn't be found", filenames.contains("Entries")); ref {filenames} [190-190]
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.parseTestSuite() - Found 30 test cases
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testBufferedRead_AvailableCharset has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testBufferedRead_RequiredCharset has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testBufferedRead_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testCharsetMismatchInfiniteLoop_RequiredCharsets has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testIO_356_B10_D10_S0_UTF16 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testIO_356_B10_D10_S0_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testIO_356_B10_D10_S1_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testIO_356_B10_D10_S2_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testIO_356_B10_D13_S0_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testIO_356_B10_D13_S1_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testIO_356_B10_D20_S0_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.066 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testIO_356_Loop_UTF16 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testIO_356_Loop_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testLargeBufferedRead_RequiredCharsets has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testLargeBufferedRead_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testLargeSingleByteRead_RequiredCharsets has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testLargeSingleByteRead_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testMarkReset_RequiredCharsets has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testMarkReset_USASCII has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testMarkReset_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testMarkSupported has 1 assertions: 
 assertTrue(r.markSupported()); ref {r} [273-273]
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testReadZero_EmptyString has 1 assertions: 
 assertEquals(0, r.read(bytes, 0, 0)); ref {r, bytes} [288-288]
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testReadZero_RequiredCharsets has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testSingleByteRead_RequiredCharsets has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testSingleByteRead_UTF16 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.067 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testSingleByteRead_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.068 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testSkip_RequiredCharsets has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.068 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testSkip_USASCII has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.068 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testSkip_UTF8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.068 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CharSequenceInputStreamTest::testAvailable has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.068 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:08.068 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ClosedOutputStreamTest::testRead has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.068 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ClosedOutputStreamTest::testFlush has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.069 [INFO ] ParsingStrategy.parseTestSuite() - Found 12 test cases
[m[m31.08.2022 - 16:58:08.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.WriterOutputStreamTest::testUTF8WithSingleByteWrite has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.WriterOutputStreamTest::testLargeUTF8WithSingleByteWrite has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.WriterOutputStreamTest::testUTF8WithBufferedWrite has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.WriterOutputStreamTest::testLargeUTF8WithBufferedWrite has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.WriterOutputStreamTest::testUTF16WithSingleByteWrite has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.WriterOutputStreamTest::testUTF16WithBufferedWrite has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.WriterOutputStreamTest::testUTF16BEWithSingleByteWrite has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.WriterOutputStreamTest::testUTF16BEWithBufferedWrite has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.WriterOutputStreamTest::testUTF16LEWithSingleByteWrite has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.WriterOutputStreamTest::testUTF16LEWithBufferedWrite has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.WriterOutputStreamTest::testFlush has 2 assertions: 
 assertEquals(0, writer.getBuffer().length()); ref {writer} [135-135],
 assertEquals("abc", writer.toString()); ref {writer} [137-137]
[m[m31.08.2022 - 16:58:08.070 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.WriterOutputStreamTest::testWriteImmediately has 1 assertions: 
 assertEquals("abc", writer.toString()); ref {writer} [146-146]
[m[m31.08.2022 - 16:58:08.071 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m31.08.2022 - 16:58:08.071 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TeeInputStreamTest::testReadNothing has 1 assertions: 
 assertEquals("", new String(output.toString(ASCII))); ref {output, ASCII} [48-48]
[m[m31.08.2022 - 16:58:08.071 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TeeInputStreamTest::testReadOneByte has 2 assertions: 
 assertEquals('a', tee.read()); ref {tee} [53-53],
 assertEquals("a", new String(output.toString(ASCII))); ref {output, ASCII} [54-54]
[m[m31.08.2022 - 16:58:08.071 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TeeInputStreamTest::testReadEverything has 5 assertions: 
 assertEquals('a', tee.read()); ref {tee} [59-59],
 assertEquals('b', tee.read()); ref {tee} [60-60],
 assertEquals('c', tee.read()); ref {tee} [61-61],
 assertEquals(-1, tee.read()); ref {tee} [62-62],
 assertEquals("abc", new String(output.toString(ASCII))); ref {output, ASCII} [63-63]
[m[m31.08.2022 - 16:58:08.072 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TeeInputStreamTest::testReadToArray has 6 assertions: 
 assertEquals(3, tee.read(buffer)); ref {tee, buffer} [69-69],
 assertEquals('a', buffer[0]); ref {buffer} [70-70],
 assertEquals('b', buffer[1]); ref {buffer} [71-71],
 assertEquals('c', buffer[2]); ref {buffer} [72-72],
 assertEquals(-1, tee.read(buffer)); ref {tee, buffer} [73-73],
 assertEquals("abc", new String(output.toString(ASCII))); ref {output, ASCII} [74-74]
[m[m31.08.2022 - 16:58:08.072 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TeeInputStreamTest::testReadToArrayWithOffset has 6 assertions: 
 assertEquals(3, tee.read(buffer, 4, 4)); ref {tee, buffer} [80-80],
 assertEquals('a', buffer[4]); ref {buffer} [81-81],
 assertEquals('b', buffer[5]); ref {buffer} [82-82],
 assertEquals('c', buffer[6]); ref {buffer} [83-83],
 assertEquals(-1, tee.read(buffer, 4, 4)); ref {tee, buffer} [84-84],
 assertEquals("abc", new String(output.toString(ASCII))); ref {output, ASCII} [85-85]
[m[m31.08.2022 - 16:58:08.072 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TeeInputStreamTest::testSkip has 5 assertions: 
 assertEquals('a', tee.read()); ref {tee} [90-90],
 assertEquals(1, tee.skip(1)); ref {tee} [91-91],
 assertEquals('c', tee.read()); ref {tee} [92-92],
 assertEquals(-1, tee.read()); ref {tee} [93-93],
 assertEquals("ac", new String(output.toString(ASCII))); ref {output, ASCII} [94-94]
[m[m31.08.2022 - 16:58:08.072 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TeeInputStreamTest::testMarkReset has 6 assertions: 
 assertEquals('a', tee.read()); ref {tee} [99-99],
 assertEquals('b', tee.read()); ref {tee} [101-101],
 assertEquals('b', tee.read()); ref {tee} [103-103],
 assertEquals('c', tee.read()); ref {tee} [104-104],
 assertEquals(-1, tee.read()); ref {tee} [105-105],
 assertEquals("abbc", new String(output.toString(ASCII))); ref {output, ASCII} [106-106]
[m[m31.08.2022 - 16:58:08.073 [INFO ] ParsingStrategy.parseTestSuite() - Found 4 test cases
[m[m31.08.2022 - 16:58:08.074 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.monitor.FileAlterationMonitorTestCase::testDefaultConstructor has 1 assertions: 
 assertEquals("Interval", 10000, monitor.getInterval()); ref {monitor} [51-51]
[m[m31.08.2022 - 16:58:08.074 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.monitor.FileAlterationMonitorTestCase::testAddRemoveObservers has 8 assertions: 
 assertEquals("Interval", 123, monitor.getInterval()); ref {monitor} [64-64],
 assertFalse("Observers[1]", monitor.getObservers().iterator().hasNext()); ref {monitor} [65-65],
 assertFalse("Observers[2]", monitor.getObservers().iterator().hasNext()); ref {monitor} [70-70],
 assertFalse("Observers[3]", monitor.getObservers().iterator().hasNext()); ref {monitor} [74-74],
 assertTrue("Observers[4]", it.hasNext()); ref {it} [81-81],
 assertEquals("Added", observer, it.next()); ref {observer, it} [82-82],
 assertFalse("Observers[5]", it.hasNext()); ref {it} [83-83],
 assertFalse("Observers[6]", monitor.getObservers().iterator().hasNext()); ref {monitor} [87-87]
[m[m31.08.2022 - 16:58:08.074 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.monitor.FileAlterationMonitorTestCase::testMonitor has 1 assertions: 
 assertEquals("Interval", interval, monitor.getInterval()); ref {interval, monitor} [99-99]
[m[m31.08.2022 - 16:58:08.074 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.monitor.FileAlterationMonitorTestCase::testThreadFactory has 1 assertions: 
 assertEquals("Interval", interval, monitor.getInterval()); ref {interval, monitor} [148-148]
[m[m31.08.2022 - 16:58:08.074 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.075 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 16:58:08.075 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.MoreComplexObjectTest::trustJavaLang has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(inputStream).accept(MoreComplexObject.class, ArrayList.class, Random.class).accept("java.lang.*", "[Ljava.lang.*"))); ref {inputStream} [65-69]
[m[m31.08.2022 - 16:58:08.075 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.MoreComplexObjectTest::trustJavaIncludingArrays has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(inputStream).accept(MoreComplexObject.class).accept("java.*", "[Ljava.*"))); ref {inputStream} [77-81]
[m[m31.08.2022 - 16:58:08.075 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.MoreComplexObjectTest::useBlacklist has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(inputStream).accept("*").reject(blacklist))); ref {inputStream, blacklist} [98-102]
[m[m31.08.2022 - 16:58:08.075 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.075 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.TaggedIOExceptionTest::testTaggedIOException has 4 assertions: 
 assertTrue(TaggedIOException.isTaggedWith(tagged, tag)); ref {TaggedIOException, tagged, tag} [39-39],
 assertFalse(TaggedIOException.isTaggedWith(tagged, UUID.randomUUID())); ref {TaggedIOException, tagged, UUID} [40-40],
 assertEquals(exception, tagged.getCause()); ref {exception, tagged} [41-41],
 assertEquals(exception.getMessage(), tagged.getMessage()); ref {exception, tagged} [42-42]
[m[m31.08.2022 - 16:58:08.076 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 16:58:08.076 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.WildcardClassNameMatcherTest::noPattern has 3 assertions: 
 assertTrue(ca.matches("org.foo")); ref {ca} [31-31],
 assertFalse(ca.matches("org.foo.and.more")); ref {ca} [32-32],
 assertFalse(ca.matches("org_foo")); ref {ca} [33-33]
[m[m31.08.2022 - 16:58:08.076 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.WildcardClassNameMatcherTest::star has 2 assertions: 
 assertTrue(ca.matches("org.foo.should.match")); ref {ca} [39-39],
 assertFalse(ca.matches("bar.should.not.match")); ref {ca} [40-40]
[m[m31.08.2022 - 16:58:08.076 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.WildcardClassNameMatcherTest::starAndQuestionMark has 2 assertions: 
 assertTrue(ca.matches("org.apache_something.more")); ref {ca} [46-46],
 assertFalse(ca.matches("org..apache_something.more")); ref {ca} [47-47]
[m[m31.08.2022 - 16:58:08.076 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:08.076 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.AppendableOutputStreamTest::testWriteStringBuilder has 1 assertions: 
 assertEquals(testData, out.getAppendable().toString()); ref {testData, out} [43-43]
[m[m31.08.2022 - 16:58:08.076 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.AppendableOutputStreamTest::testWriteInt has 1 assertions: 
 assertEquals("F", out.getAppendable().toString()); ref {out} [50-50]
[m[m31.08.2022 - 16:58:08.090 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m31.08.2022 - 16:58:08.090 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsWildcardTestCase::testMatch has 22 assertions: 
 assertFalse(FilenameUtils.wildcardMatch(null, "Foo")); ref {FilenameUtils} [39-39],
 assertFalse(FilenameUtils.wildcardMatch("Foo", null)); ref {FilenameUtils} [40-40],
 assertTrue(FilenameUtils.wildcardMatch(null, null)); ref {FilenameUtils} [41-41],
 assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo")); ref {FilenameUtils} [42-42],
 assertTrue(FilenameUtils.wildcardMatch("", "")); ref {FilenameUtils} [43-43],
 assertTrue(FilenameUtils.wildcardMatch("", "*")); ref {FilenameUtils} [44-44],
 assertFalse(FilenameUtils.wildcardMatch("", "?")); ref {FilenameUtils} [45-45],
 assertTrue(FilenameUtils.wildcardMatch("Foo", "Fo*")); ref {FilenameUtils} [46-46],
 assertTrue(FilenameUtils.wildcardMatch("Foo", "Fo?")); ref {FilenameUtils} [47-47],
 assertTrue(FilenameUtils.wildcardMatch("Foo Bar and Catflap", "Fo*")); ref {FilenameUtils} [48-48],
 assertTrue(FilenameUtils.wildcardMatch("New Bookmarks", "N?w ?o?k??r?s")); ref {FilenameUtils} [49-49],
 assertFalse(FilenameUtils.wildcardMatch("Foo", "Bar")); ref {FilenameUtils} [50-50],
 assertTrue(FilenameUtils.wildcardMatch("Foo Bar Foo", "F*o Bar*")); ref {FilenameUtils} [51-51],
 assertTrue(FilenameUtils.wildcardMatch("Adobe Acrobat Installer", "Ad*er")); ref {FilenameUtils} [52-52],
 assertTrue(FilenameUtils.wildcardMatch("Foo", "*Foo")); ref {FilenameUtils} [53-53],
 assertTrue(FilenameUtils.wildcardMatch("BarFoo", "*Foo")); ref {FilenameUtils} [54-54],
 assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo*")); ref {FilenameUtils} [55-55],
 assertTrue(FilenameUtils.wildcardMatch("FooBar", "Foo*")); ref {FilenameUtils} [56-56],
 assertFalse(FilenameUtils.wildcardMatch("FOO", "*Foo")); ref {FilenameUtils} [57-57],
 assertFalse(FilenameUtils.wildcardMatch("BARFOO", "*Foo")); ref {FilenameUtils} [58-58],
 assertFalse(FilenameUtils.wildcardMatch("FOO", "Foo*")); ref {FilenameUtils} [59-59],
 assertFalse(FilenameUtils.wildcardMatch("FOOBAR", "Foo*")); ref {FilenameUtils} [60-60]
[m[m31.08.2022 - 16:58:08.091 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsWildcardTestCase::testMatchOnSystem has 20 assertions: 
 assertFalse(FilenameUtils.wildcardMatchOnSystem(null, "Foo")); ref {FilenameUtils} [65-65],
 assertFalse(FilenameUtils.wildcardMatchOnSystem("Foo", null)); ref {FilenameUtils} [66-66],
 assertTrue(FilenameUtils.wildcardMatchOnSystem(null, null)); ref {FilenameUtils} [67-67],
 assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "Foo")); ref {FilenameUtils} [68-68],
 assertTrue(FilenameUtils.wildcardMatchOnSystem("", "")); ref {FilenameUtils} [69-69],
 assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "Fo*")); ref {FilenameUtils} [70-70],
 assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "Fo?")); ref {FilenameUtils} [71-71],
 assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo Bar and Catflap", "Fo*")); ref {FilenameUtils} [72-72],
 assertTrue(FilenameUtils.wildcardMatchOnSystem("New Bookmarks", "N?w ?o?k??r?s")); ref {FilenameUtils} [73-73],
 assertFalse(FilenameUtils.wildcardMatchOnSystem("Foo", "Bar")); ref {FilenameUtils} [74-74],
 assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo Bar Foo", "F*o Bar*")); ref {FilenameUtils} [75-75],
 assertTrue(FilenameUtils.wildcardMatchOnSystem("Adobe Acrobat Installer", "Ad*er")); ref {FilenameUtils} [76-76],
 assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "*Foo")); ref {FilenameUtils} [77-77],
 assertTrue(FilenameUtils.wildcardMatchOnSystem("BarFoo", "*Foo")); ref {FilenameUtils} [78-78],
 assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "Foo*")); ref {FilenameUtils} [79-79],
 assertTrue(FilenameUtils.wildcardMatchOnSystem("FooBar", "Foo*")); ref {FilenameUtils} [80-80],
 assertEquals(WINDOWS, FilenameUtils.wildcardMatchOnSystem("FOO", "*Foo")); ref {WINDOWS, FilenameUtils} [81-81],
 assertEquals(WINDOWS, FilenameUtils.wildcardMatchOnSystem("BARFOO", "*Foo")); ref {WINDOWS, FilenameUtils} [82-82],
 assertEquals(WINDOWS, FilenameUtils.wildcardMatchOnSystem("FOO", "Foo*")); ref {WINDOWS, FilenameUtils} [83-83],
 assertEquals(WINDOWS, FilenameUtils.wildcardMatchOnSystem("FOOBAR", "Foo*")); ref {WINDOWS, FilenameUtils} [84-84]
[m[m31.08.2022 - 16:58:08.091 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsWildcardTestCase::testMatchCaseSpecified has 30 assertions: 
 assertFalse(FilenameUtils.wildcardMatch(null, "Foo", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [89-89],
 assertFalse(FilenameUtils.wildcardMatch("Foo", null, IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [90-90],
 assertTrue(FilenameUtils.wildcardMatch(null, null, IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [91-91],
 assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [92-92],
 assertTrue(FilenameUtils.wildcardMatch("", "", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [93-93],
 assertTrue(FilenameUtils.wildcardMatch("Foo", "Fo*", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [94-94],
 assertTrue(FilenameUtils.wildcardMatch("Foo", "Fo?", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [95-95],
 assertTrue(FilenameUtils.wildcardMatch("Foo Bar and Catflap", "Fo*", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [96-96],
 assertTrue(FilenameUtils.wildcardMatch("New Bookmarks", "N?w ?o?k??r?s", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [97-97],
 assertFalse(FilenameUtils.wildcardMatch("Foo", "Bar", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [98-98],
 assertTrue(FilenameUtils.wildcardMatch("Foo Bar Foo", "F*o Bar*", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [99-99],
 assertTrue(FilenameUtils.wildcardMatch("Adobe Acrobat Installer", "Ad*er", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [100-100],
 assertTrue(FilenameUtils.wildcardMatch("Foo", "*Foo", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [101-101],
 assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo*", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [102-102],
 assertTrue(FilenameUtils.wildcardMatch("Foo", "*Foo", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [103-103],
 assertTrue(FilenameUtils.wildcardMatch("BarFoo", "*Foo", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [104-104],
 assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo*", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [105-105],
 assertTrue(FilenameUtils.wildcardMatch("FooBar", "Foo*", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [106-106],
 assertFalse(FilenameUtils.wildcardMatch("FOO", "*Foo", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [108-108],
 assertFalse(FilenameUtils.wildcardMatch("BARFOO", "*Foo", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [109-109],
 assertFalse(FilenameUtils.wildcardMatch("FOO", "Foo*", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [110-110],
 assertFalse(FilenameUtils.wildcardMatch("FOOBAR", "Foo*", IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [111-111],
 assertTrue(FilenameUtils.wildcardMatch("FOO", "*Foo", IOCase.INSENSITIVE)); ref {IOCase.INSENSITIVE, IOCase, FilenameUtils} [112-112],
 assertTrue(FilenameUtils.wildcardMatch("BARFOO", "*Foo", IOCase.INSENSITIVE)); ref {IOCase.INSENSITIVE, IOCase, FilenameUtils} [113-113],
 assertTrue(FilenameUtils.wildcardMatch("FOO", "Foo*", IOCase.INSENSITIVE)); ref {IOCase.INSENSITIVE, IOCase, FilenameUtils} [114-114],
 assertTrue(FilenameUtils.wildcardMatch("FOOBAR", "Foo*", IOCase.INSENSITIVE)); ref {IOCase.INSENSITIVE, IOCase, FilenameUtils} [115-115],
 assertEquals(WINDOWS, FilenameUtils.wildcardMatch("FOO", "*Foo", IOCase.SYSTEM)); ref {IOCase.SYSTEM, WINDOWS, IOCase, FilenameUtils} [116-116],
 assertEquals(WINDOWS, FilenameUtils.wildcardMatch("BARFOO", "*Foo", IOCase.SYSTEM)); ref {IOCase.SYSTEM, WINDOWS, IOCase, FilenameUtils} [117-117],
 assertEquals(WINDOWS, FilenameUtils.wildcardMatch("FOO", "Foo*", IOCase.SYSTEM)); ref {IOCase.SYSTEM, WINDOWS, IOCase, FilenameUtils} [118-118],
 assertEquals(WINDOWS, FilenameUtils.wildcardMatch("FOOBAR", "Foo*", IOCase.SYSTEM)); ref {IOCase.SYSTEM, WINDOWS, IOCase, FilenameUtils} [119-119]
[m[m31.08.2022 - 16:58:08.091 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsWildcardTestCase::testSplitOnTokens has 10 assertions: 
 assertArrayEquals(new String[] { "Ad", "*", "er" }, FilenameUtils.splitOnTokens("Ad*er")); ref {FilenameUtils} [124-124],
 assertArrayEquals(new String[] { "Ad", "?", "er" }, FilenameUtils.splitOnTokens("Ad?er")); ref {FilenameUtils} [125-125],
 assertArrayEquals(new String[] { "Test", "*", "?", "One" }, FilenameUtils.splitOnTokens("Test*?One")); ref {FilenameUtils} [126-126],
 assertArrayEquals(new String[] { "Test", "?", "*", "One" }, FilenameUtils.splitOnTokens("Test?*One")); ref {FilenameUtils} [127-127],
 assertArrayEquals(new String[] { "*" }, FilenameUtils.splitOnTokens("****")); ref {FilenameUtils} [128-128],
 assertArrayEquals(new String[] { "*", "?", "?", "*" }, FilenameUtils.splitOnTokens("*??*")); ref {FilenameUtils} [129-129],
 assertArrayEquals(new String[] { "*", "?", "*", "?", "*" }, FilenameUtils.splitOnTokens("*?**?*")); ref {FilenameUtils} [130-130],
 assertArrayEquals(new String[] { "*", "?", "*", "?", "*" }, FilenameUtils.splitOnTokens("*?***?*")); ref {FilenameUtils} [131-131],
 assertArrayEquals(new String[] { "h", "?", "?", "*" }, FilenameUtils.splitOnTokens("h??*")); ref {FilenameUtils} [132-132],
 assertArrayEquals(new String[] { "" }, FilenameUtils.splitOnTokens("")); ref {FilenameUtils} [133-133]
[m[m31.08.2022 - 16:58:08.092 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsWildcardTestCase::testMatch2 has 32 assertions: 
 assertMatch("log.txt", "log.txt", true); ref {} [143-143],
 assertMatch("log.txt1", "log.txt", false); ref {} [144-144],
 assertMatch("log.txt", "log.txt*", true); ref {} [146-146],
 assertMatch("log.txt", "log.txt*1", false); ref {} [147-147],
 assertMatch("log.txt", "*log.txt*", true); ref {} [148-148],
 assertMatch("log.txt", "*.txt", true); ref {} [150-150],
 assertMatch("txt.log", "*.txt", false); ref {} [151-151],
 assertMatch("config.ini", "*.ini", true); ref {} [152-152],
 assertMatch("config.txt.bak", "con*.txt", false); ref {} [154-154],
 assertMatch("log.txt9", "*.txt?", true); ref {} [156-156],
 assertMatch("log.txt", "*.txt?", false); ref {} [157-157],
 assertMatch("progtestcase.java~5~", "*test*.java~*~", true); ref {} [159-159],
 assertMatch("progtestcase.java;5~", "*test*.java~*~", false); ref {} [160-160],
 assertMatch("progtestcase.java~5", "*test*.java~*~", false); ref {} [161-161],
 assertMatch("log.txt", "log.*", true); ref {} [163-163],
 assertMatch("log.txt", "log?*", true); ref {} [165-165],
 assertMatch("log.txt12", "log.txt??", true); ref {} [167-167],
 assertMatch("log.log", "log**log", true); ref {} [169-169],
 assertMatch("log.log", "log**", true); ref {} [170-170],
 assertMatch("log.log", "log.**", true); ref {} [171-171],
 assertMatch("log.log", "**.log", true); ref {} [172-172],
 assertMatch("log.log", "**log", true); ref {} [173-173],
 assertMatch("log.log", "log*log", true); ref {} [175-175],
 assertMatch("log.log", "log*", true); ref {} [176-176],
 assertMatch("log.log", "log.*", true); ref {} [177-177],
 assertMatch("log.log", "*.log", true); ref {} [178-178],
 assertMatch("log.log", "*log", true); ref {} [179-179],
 assertMatch("log.log", "*log?", false); ref {} [181-181],
 assertMatch("log.log", "*log?*", true); ref {} [182-182],
 assertMatch("log.log.abc", "*log?abc", true); ref {} [183-183],
 assertMatch("log.log.abc.log.abc", "*log?abc", true); ref {} [184-184],
 assertMatch("log.log.abc.log.abc.d", "*log?abc?d", true); ref {} [185-185]
[m[m31.08.2022 - 16:58:08.092 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsWildcardTestCase::test_IO_246 has 12 assertions: 
 // Tests for "*?"
assertMatch("aaa", "aa*?", true); ref {} [195-195],
 // these ought to work as well, but "*?" does not work properly at present
// assertMatch("aaa", "a*?", true);
// assertMatch("aaa", "*?", true);
// Tests for "?*"
assertMatch("", "?*", false); ref {} [201-201],
 assertMatch("a", "a?*", false); ref {} [202-202],
 assertMatch("aa", "aa?*", false); ref {} [203-203],
 assertMatch("a", "?*", true); ref {} [204-204],
 assertMatch("aa", "?*", true); ref {} [205-205],
 assertMatch("aaa", "?*", true); ref {} [206-206],
 // Test ending on "?"
assertMatch("", "?", false); ref {} [209-209],
 assertMatch("a", "a?", false); ref {} [210-210],
 assertMatch("aa", "aa?", false); ref {} [211-211],
 assertMatch("aab", "aa?", true); ref {} [212-212],
 assertMatch("aaa", "*a", true); ref {} [213-213]
[m[m31.08.2022 - 16:58:08.092 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsWildcardTestCase::testLocaleIndependence has 2 assertions: 
 assertTrue("Test data corrupt: " + i, data[i][0].equalsIgnoreCase(data[i][1])); ref {data, i} [236-236],
 assertTrue(Locale.getDefault().toString() + ": " + i, match); ref {Locale, match, i} [238-238]
[m[m31.08.2022 - 16:58:08.094 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 16:58:08.094 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.CompositeFileComparatorTest::constructorIterable_order has 3 assertions: 
 assertEquals("equal", 0, c.compare(equalFile1, equalFile2)); ref {c, equalFile2, equalFile1} [96-96],
 assertTrue("less", c.compare(lessFile, moreFile) < 0); ref {lessFile, c, moreFile} [97-97],
 assertTrue("more", c.compare(moreFile, lessFile) > 0); ref {lessFile, c, moreFile} [98-98]
[m[m31.08.2022 - 16:58:08.094 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.CompositeFileComparatorTest::constructorIterable_Null has 3 assertions: 
 assertEquals("less,more", 0, c.compare(lessFile, moreFile)); ref {lessFile, c, moreFile} [107-107],
 assertEquals("more,less", 0, c.compare(moreFile, lessFile)); ref {lessFile, c, moreFile} [108-108],
 assertEquals("toString", "CompositeFileComparator{}", c.toString()); ref {c} [109-109]
[m[m31.08.2022 - 16:58:08.094 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.CompositeFileComparatorTest::constructorArray_Null has 3 assertions: 
 assertEquals("less,more", 0, c.compare(lessFile, moreFile)); ref {lessFile, c, moreFile} [118-118],
 assertEquals("more,less", 0, c.compare(moreFile, lessFile)); ref {lessFile, c, moreFile} [119-119],
 assertEquals("toString", "CompositeFileComparator{}", c.toString()); ref {c} [120-120]
[m[m31.08.2022 - 16:58:08.094 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.099 [INFO ] ParsingStrategy.parseTestSuite() - Found 14 test cases
[m[m31.08.2022 - 16:58:08.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testFilter has 2 assertions: 
 assertEquals("Result Size", 1 + dirs.length + ioFiles.length + outputFiles.length, results.size()); ref {outputFiles, ioFiles.length, ioFiles, outputFiles.length, dirs, dirs.length, results} [81-81],
 assertTrue("Start Dir", results.contains(javaDir)); ref {results, javaDir} [82-82]
[m[m31.08.2022 - 16:58:08.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testFilterAndLimitA has 2 assertions: 
 assertEquals("[A] Result Size", 1, results.size()); ref {results} [94-94],
 assertTrue("[A] Start Dir", results.contains(javaDir)); ref {results, javaDir} [95-95]
[m[m31.08.2022 - 16:58:08.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testFilterAndLimitB has 3 assertions: 
 assertEquals("[B] Result Size", 2, results.size()); ref {results} [104-104],
 assertTrue("[B] Start Dir", results.contains(javaDir)); ref {results, javaDir} [105-105],
 assertTrue("[B] Org Dir", results.contains(orgDir)); ref {orgDir, results} [106-106]
[m[m31.08.2022 - 16:58:08.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testFilterAndLimitC has 5 assertions: 
 assertEquals("[C] Result Size", 4, results.size()); ref {results} [115-115],
 assertTrue("[C] Start Dir", results.contains(javaDir)); ref {results, javaDir} [116-116],
 assertTrue("[C] Org Dir", results.contains(orgDir)); ref {orgDir, results} [117-117],
 assertTrue("[C] Apache Dir", results.contains(apacheDir)); ref {apacheDir, results} [118-118],
 assertTrue("[C] Commons Dir", results.contains(commonsDir)); ref {commonsDir, results} [119-119]
[m[m31.08.2022 - 16:58:08.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testFilterAndLimitD has 2 assertions: 
 assertEquals("[D] Result Size", 1 + dirs.length + ioFiles.length, results.size()); ref {ioFiles.length, ioFiles, dirs, dirs.length, results} [128-128],
 assertTrue("[D] Start Dir", results.contains(javaDir)); ref {results, javaDir} [129-129]
[m[m31.08.2022 - 16:58:08.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testFilterDirAndFile1 has 2 assertions: 
 assertEquals("[DirAndFile1] Result Size", 1 + dirs.length + ioFiles.length, results.size()); ref {ioFiles.length, ioFiles, dirs, dirs.length, results} [140-140],
 assertTrue("[DirAndFile1] Start Dir", results.contains(javaDir)); ref {results, javaDir} [141-141]
[m[m31.08.2022 - 16:58:08.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testFilterDirAndFile2 has 2 assertions: 
 assertTrue("[DirAndFile2] Result Size", results.size() > 1 + dirs.length + ioFiles.length); ref {ioFiles.length, ioFiles, dirs, dirs.length, results} [152-152],
 assertTrue("[DirAndFile2] Start Dir", results.contains(javaDir)); ref {results, javaDir} [153-153]
[m[m31.08.2022 - 16:58:08.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testFilterDirAndFile3 has 2 assertions: 
 assertEquals("[DirAndFile3] Result Size", 1 + dirs.length, resultDirs.size()); ref {resultDirs, dirs, dirs.length} [165-165],
 assertTrue("[DirAndFile3] Start Dir", results.contains(javaDir)); ref {results, javaDir} [166-166]
[m[m31.08.2022 - 16:58:08.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testFilterDirAndFile4 has 2 assertions: 
 assertEquals("[DirAndFile4] Result Size", ioFiles.length, resultFiles.size()); ref {ioFiles.length, ioFiles, resultFiles} [177-177],
 assertTrue("[DirAndFile4] Start Dir", results.contains(javaDir)); ref {results, javaDir} [178-178]
[m[m31.08.2022 - 16:58:08.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testLimitToCurrent has 2 assertions: 
 assertEquals("Result Size", 1, results.size()); ref {results} [188-188],
 assertTrue("Current Dir", results.contains(new File("."))); ref {results} [189-189]
[m[m31.08.2022 - 16:58:08.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testMissingStartDirectory has 2 assertions: 
 assertEquals("Result Size", 1, results.size()); ref {results} [201-201],
 assertTrue("Current Dir", results.contains(invalidDir)); ref {invalidDir, results} [202-202]
[m[m31.08.2022 - 16:58:08.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testHandleStartDirectoryFalse has 1 assertions: 
 assertEquals("Result Size", 0, results.size()); ref {results} [219-219]
[m[m31.08.2022 - 16:58:08.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testCancel has 5 assertions: 
 assertEquals("File:  " + cancelName, cancelName, cancel.getFile().getName()); ref {cancel, cancelName} [286-286],
 assertEquals("Depth: " + cancelName, 5, cancel.getDepth()); ref {cancel, cancelName} [287-287],
 assertEquals("File:  " + cancelName, cancelName, cancel.getFile().getName()); ref {cancel, cancelName} [296-296],
 assertEquals("Depth: " + cancelName, 3, cancel.getDepth()); ref {cancel, cancelName} [297-297],
 assertEquals("Suppress:  " + cancelName, cancelName, lastFile.getName()); ref {cancelName, lastFile} [303-303]
[m[m31.08.2022 - 16:58:08.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.DirectoryWalkerTestCaseJava4::testMultiThreadCancel has 5 assertions: 
 assertEquals(cancelName, last.getName()); ref {last, cancelName} [320-320],
 assertEquals("Depth: " + cancelName, 5, cancel.getDepth()); ref {cancel, cancelName} [321-321],
 assertEquals("File:  " + cancelName, cancelName, cancel.getFile().getName()); ref {cancel, cancelName} [331-331],
 assertEquals("Depth: " + cancelName, 3, cancel.getDepth()); ref {cancel, cancelName} [332-332],
 assertEquals("Suppress:  " + cancelName, cancelName, lastFile.getName()); ref {cancelName, lastFile} [339-339]
[m[m31.08.2022 - 16:58:08.101 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:08.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyOutputStreamTest::testWrite has 2 assertions: 
 assertEquals(1, original.size()); ref {original} [52-52],
 assertEquals('y', original.toByteArray()[0]); ref {original} [53-53]
[m[m31.08.2022 - 16:58:08.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyOutputStreamTest::testWriteNullBaSucceeds has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.101 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.102 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.110 [INFO ] ParsingStrategy.parseTestSuite() - Found 10 test cases
[m[m31.08.2022 - 16:58:08.110 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TailerTest::testLongFile has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.110 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TailerTest::testBufferBreak has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.110 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TailerTest::testMultiByteBreak has 1 assertions: 
 assertEquals("line count", lines.size(), tailerlines.size()); ref {tailerlines, lines} [158-158]
[m[m31.08.2022 - 16:58:08.110 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TailerTest::testTailerEof has 3 assertions: 
 assertEquals("1 line count", 0, lines.size()); ref {lines} [187-187],
 assertEquals("1 line count", 1, lines.size()); ref {lines} [193-193],
 assertEquals("1 line 1", "Line one", lines.get(0)); ref {lines} [194-194]
[m[m31.08.2022 - 16:58:08.111 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TailerTest::testTailer has 18 assertions: 
 assertEquals("1 line count", 2, lines.size()); ref {lines} [218-218],
 assertEquals("1 line 1", "Line one", lines.get(0)); ref {lines} [219-219],
 assertEquals("1 line 2", "Line two", lines.get(1)); ref {lines} [220-220],
 assertEquals("2 line count", 1, lines.size()); ref {lines} [227-227],
 assertEquals("2 line 3", "Line three", lines.get(0)); ref {lines} [228-228],
 assertEquals("3 line count", 3, lines.size()); ref {lines} [233-233],
 assertEquals("3 line 1", "Line one", lines.get(0)); ref {lines} [234-234],
 assertEquals("3 line 2", "Line two", lines.get(1)); ref {lines} [235-235],
 assertEquals("3 line 3", "Line three", lines.get(2)); ref {lines} [236-236],
 assertFalse("File should not exist", exists); ref {exists} [241-241],
 assertEquals("4 line count", 1, lines.size()); ref {lines} [249-249],
 assertEquals("4 line 3", "Line four", lines.get(0)); ref {lines} [250-250],
 assertEquals("4 line count", 0, listener.getLines().size()); ref {listener} [257-257],
 assertNotNull("Missing InterruptedException", listener.exception); ref {listener.exception, listener} [258-258],
 assertTrue("Unexpected Exception: " + listener.exception, listener.exception instanceof InterruptedException); ref {listener.exception, listener} [259-259],
 assertEquals("Expected init to be called", 1, listener.initialised); ref {listener.initialised, listener} [260-260],
 assertEquals("fileNotFound should not be called", 0, listener.notFound); ref {listener, listener.notFound} [261-261],
 assertEquals("fileRotated should be be called", 1, listener.rotated); ref {listener.rotated, listener} [262-262]
[m[m31.08.2022 - 16:58:08.111 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TailerTest::testTailerEndOfFileReached has 1 assertions: 
 // May be > 3 times due to underlying OS behaviour wrt streams
assertTrue("end of file reached at least 3 times", listener.reachedEndOfFile >= 3); ref {listener, listener.reachedEndOfFile} [292-292]
[m[m31.08.2022 - 16:58:08.111 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TailerTest::testStopWithNoFile has 6 assertions: 
 assertFalse("nosuchfile should not exist", file.exists()); ref {file} [347-347],
 assertNull("Should not generate Exception", listener.exception); ref {listener.exception, listener} [355-355],
 assertEquals("Expected init to be called", 1, listener.initialised); ref {listener.initialised, listener} [356-356],
 assertTrue("fileNotFound should be called", listener.notFound > 0); ref {listener, listener.notFound} [357-357],
 assertEquals("fileRotated should be not be called", 0, listener.rotated); ref {listener.rotated, listener} [358-358],
 assertEquals("end of file never reached", 0, listener.reachedEndOfFile); ref {listener, listener.reachedEndOfFile} [359-359]
[m[m31.08.2022 - 16:58:08.111 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TailerTest::testInterrupt has 7 assertions: 
 assertFalse("nosuchfile should not exist", file.exists()); ref {file} [368-368],
 assertNotNull("Missing InterruptedException", listener.exception); ref {listener.exception, listener} [380-380],
 assertTrue("Unexpected Exception: " + listener.exception, listener.exception instanceof InterruptedException); ref {listener.exception, listener} [381-381],
 assertEquals("Expected init to be called", 1, listener.initialised); ref {listener.initialised, listener} [382-382],
 assertTrue("fileNotFound should be called", listener.notFound > 0); ref {listener, listener.notFound} [383-383],
 assertEquals("fileRotated should be not be called", 0, listener.rotated); ref {listener.rotated, listener} [384-384],
 assertEquals("end of file never reached", 0, listener.reachedEndOfFile); ref {listener, listener.reachedEndOfFile} [385-385]
[m[m31.08.2022 - 16:58:08.111 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TailerTest::testStopWithNoFileUsingExecutor has 6 assertions: 
 assertFalse("nosuchfile should not exist", file.exists()); ref {file} [391-391],
 assertNull("Should not generate Exception", listener.exception); ref {listener.exception, listener} [401-401],
 assertEquals("Expected init to be called", 1, listener.initialised); ref {listener.initialised, listener} [402-402],
 assertTrue("fileNotFound should be called", listener.notFound > 0); ref {listener, listener.notFound} [403-403],
 assertEquals("fileRotated should be not be called", 0, listener.rotated); ref {listener.rotated, listener} [404-404],
 assertEquals("end of file never reached", 0, listener.reachedEndOfFile); ref {listener, listener.reachedEndOfFile} [405-405]
[m[m31.08.2022 - 16:58:08.111 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.TailerTest::testIO335 has 5 assertions: 
 assertEquals("line count", 4, lines.size()); ref {lines} [424-424],
 assertEquals("line 1", "CRLF", lines.get(0)); ref {lines} [425-425],
 assertEquals("line 2", "LF", lines.get(1)); ref {lines} [426-426],
 assertEquals("line 3", "CR", lines.get(2)); ref {lines} [427-427],
 assertEquals("line 4", "CRCR\r", lines.get(3)); ref {lines} [428-428]
[m[m31.08.2022 - 16:58:08.117 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m31.08.2022 - 16:58:08.117 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.monitor.FileAlterationObserverTestCase::testAddRemoveListeners has 6 assertions: 
 assertFalse("Listeners[1]", observer.getListeners().iterator().hasNext()); ref {observer} [53-53],
 assertFalse("Listeners[2]", observer.getListeners().iterator().hasNext()); ref {observer} [55-55],
 assertTrue("Listeners[3]", it.hasNext()); ref {it} [61-61],
 assertEquals("Added", listener, it.next()); ref {listener, it} [62-62],
 assertFalse("Listeners[4]", it.hasNext()); ref {it} [63-63],
 assertFalse("Listeners[5]", observer.getListeners().iterator().hasNext()); ref {observer} [67-67]
[m[m31.08.2022 - 16:58:08.118 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.monitor.FileAlterationObserverTestCase::testToString has 3 assertions: 
 assertEquals("FileAlterationObserver[file='" + file.getPath() + "', listeners=0]", observer.toString()); ref {observer, file} [79-80],
 assertEquals("FileAlterationObserver[file='" + file.getPath() + "', CanReadFileFilter, listeners=0]", observer.toString()); ref {observer, file} [83-84],
 assertEquals(file, observer.getDirectory()); ref {observer, file} [86-86]
[m[m31.08.2022 - 16:58:08.118 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.monitor.FileAlterationObserverTestCase::testDirectory has 16 assertions: 
 assertTrue("B testDirA", listener.getCreatedDirectories().contains(testDirA)); ref {listener, testDirA} [111-111],
 assertTrue("B testDirB", listener.getCreatedDirectories().contains(testDirB)); ref {listener, testDirB} [112-112],
 assertTrue("B testDirC", listener.getCreatedDirectories().contains(testDirC)); ref {testDirC, listener} [113-113],
 assertTrue("B testDirAFile1", listener.getCreatedFiles().contains(testDirAFile1)); ref {testDirAFile1, listener} [114-114],
 assertFalse("B testDirAFile2", listener.getCreatedFiles().contains(testDirAFile2)); ref {listener, testDirAFile2} [115-115],
 assertTrue("B testDirAFile3", listener.getCreatedFiles().contains(testDirAFile3)); ref {listener, testDirAFile3} [116-116],
 assertTrue("B testDirAFile4", listener.getCreatedFiles().contains(testDirAFile4)); ref {listener, testDirAFile4} [117-117],
 assertTrue("B testDirBFile1", listener.getCreatedFiles().contains(testDirBFile1)); ref {listener, testDirBFile1} [118-118],
 assertTrue("D testDirB", listener.getDeletedDirectories().contains(testDirB)); ref {listener, testDirB} [127-127],
 assertTrue("D testDirAFile4", listener.getChangedFiles().contains(testDirAFile4)); ref {listener, testDirAFile4} [128-128],
 assertTrue("D testDirBFile1", listener.getDeletedFiles().contains(testDirBFile1)); ref {listener, testDirBFile1} [129-129],
 assertTrue("E testDirA", listener.getDeletedDirectories().contains(testDirA)); ref {listener, testDirA} [134-134],
 assertTrue("E testDirAFile1", listener.getDeletedFiles().contains(testDirAFile1)); ref {testDirAFile1, listener} [135-135],
 assertFalse("E testDirAFile2", listener.getDeletedFiles().contains(testDirAFile2)); ref {listener, testDirAFile2} [136-136],
 assertTrue("E testDirAFile3", listener.getDeletedFiles().contains(testDirAFile3)); ref {listener, testDirAFile3} [137-137],
 assertTrue("E testDirAFile4", listener.getDeletedFiles().contains(testDirAFile4)); ref {listener, testDirAFile4} [138-138]
[m[m31.08.2022 - 16:58:08.118 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.monitor.FileAlterationObserverTestCase::testFileCreate has 16 assertions: 
 assertFalse("B testDirAFile1", listener.getCreatedFiles().contains(testDirAFile1)); ref {testDirAFile1, listener} [168-168],
 assertTrue("B testDirAFile2", listener.getCreatedFiles().contains(testDirAFile2)); ref {listener, testDirAFile2} [169-169],
 assertFalse("B testDirAFile3", listener.getCreatedFiles().contains(testDirAFile3)); ref {listener, testDirAFile3} [170-170],
 assertTrue("B testDirAFile4", listener.getCreatedFiles().contains(testDirAFile4)); ref {listener, testDirAFile4} [171-171],
 assertFalse("B testDirAFile5", listener.getCreatedFiles().contains(testDirAFile5)); ref {listener, testDirAFile5} [172-172],
 assertFalse("B testDirAFile1 exists", testDirAFile1.exists()); ref {testDirAFile1} [174-174],
 assertTrue("B testDirAFile2 exists", testDirAFile2.exists()); ref {testDirAFile2} [175-175],
 assertFalse("B testDirAFile3 exists", testDirAFile3.exists()); ref {testDirAFile3} [176-176],
 assertTrue("B testDirAFile4 exists", testDirAFile4.exists()); ref {testDirAFile4} [177-177],
 assertFalse("B testDirAFile5 exists", testDirAFile5.exists()); ref {testDirAFile5} [178-178],
 assertTrue("D testDirAFile1 exists", testDirAFile1.exists()); ref {testDirAFile1} [188-188],
 assertTrue("D testDirAFile1", listener.getCreatedFiles().contains(testDirAFile1)); ref {testDirAFile1, listener} [189-189],
 assertTrue("E testDirAFile3 exists", testDirAFile3.exists()); ref {testDirAFile3} [196-196],
 assertTrue("E testDirAFile3", listener.getCreatedFiles().contains(testDirAFile3)); ref {listener, testDirAFile3} [197-197],
 assertTrue("F testDirAFile5 exists", testDirAFile5.exists()); ref {testDirAFile5} [204-204],
 assertTrue("F testDirAFile5", listener.getCreatedFiles().contains(testDirAFile5)); ref {listener, testDirAFile5} [205-205]
[m[m31.08.2022 - 16:58:08.118 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.monitor.FileAlterationObserverTestCase::testFileUpdate has 13 assertions: 
 assertTrue("B testDirAFile1", listener.getCreatedFiles().contains(testDirAFile1)); ref {testDirAFile1, listener} [228-228],
 assertTrue("B testDirAFile2", listener.getCreatedFiles().contains(testDirAFile2)); ref {listener, testDirAFile2} [229-229],
 assertTrue("B testDirAFile3", listener.getCreatedFiles().contains(testDirAFile3)); ref {listener, testDirAFile3} [230-230],
 assertTrue("B testDirAFile4", listener.getCreatedFiles().contains(testDirAFile4)); ref {listener, testDirAFile4} [231-231],
 assertTrue("B testDirAFile5", listener.getCreatedFiles().contains(testDirAFile5)); ref {listener, testDirAFile5} [232-232],
 assertTrue("B testDirAFile1 exists", testDirAFile1.exists()); ref {testDirAFile1} [234-234],
 assertTrue("B testDirAFile2 exists", testDirAFile2.exists()); ref {testDirAFile2} [235-235],
 assertTrue("B testDirAFile3 exists", testDirAFile3.exists()); ref {testDirAFile3} [236-236],
 assertTrue("B testDirAFile4 exists", testDirAFile4.exists()); ref {testDirAFile4} [237-237],
 assertTrue("B testDirAFile5 exists", testDirAFile5.exists()); ref {testDirAFile5} [238-238],
 assertTrue("D testDirAFile1", listener.getChangedFiles().contains(testDirAFile1)); ref {testDirAFile1, listener} [248-248],
 assertTrue("E testDirAFile3", listener.getChangedFiles().contains(testDirAFile3)); ref {listener, testDirAFile3} [255-255],
 assertTrue("F testDirAFile5", listener.getChangedFiles().contains(testDirAFile5)); ref {listener, testDirAFile5} [262-262]
[m[m31.08.2022 - 16:58:08.118 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.monitor.FileAlterationObserverTestCase::testFileDelete has 16 assertions: 
 assertTrue("B testDirAFile1 exists", testDirAFile1.exists()); ref {testDirAFile1} [283-283],
 assertTrue("B testDirAFile2 exists", testDirAFile2.exists()); ref {testDirAFile2} [284-284],
 assertTrue("B testDirAFile3 exists", testDirAFile3.exists()); ref {testDirAFile3} [285-285],
 assertTrue("B testDirAFile4 exists", testDirAFile4.exists()); ref {testDirAFile4} [286-286],
 assertTrue("B testDirAFile5 exists", testDirAFile5.exists()); ref {testDirAFile5} [287-287],
 assertTrue("B testDirAFile1", listener.getCreatedFiles().contains(testDirAFile1)); ref {testDirAFile1, listener} [291-291],
 assertTrue("B testDirAFile2", listener.getCreatedFiles().contains(testDirAFile2)); ref {listener, testDirAFile2} [292-292],
 assertTrue("B testDirAFile3", listener.getCreatedFiles().contains(testDirAFile3)); ref {listener, testDirAFile3} [293-293],
 assertTrue("B testDirAFile4", listener.getCreatedFiles().contains(testDirAFile4)); ref {listener, testDirAFile4} [294-294],
 assertTrue("B testDirAFile5", listener.getCreatedFiles().contains(testDirAFile5)); ref {listener, testDirAFile5} [295-295],
 assertFalse("D testDirAFile1 exists", testDirAFile1.exists()); ref {testDirAFile1} [305-305],
 assertTrue("D testDirAFile1", listener.getDeletedFiles().contains(testDirAFile1)); ref {testDirAFile1, listener} [306-306],
 assertFalse("E testDirAFile3 exists", testDirAFile3.exists()); ref {testDirAFile3} [313-313],
 assertTrue("E testDirAFile3", listener.getDeletedFiles().contains(testDirAFile3)); ref {listener, testDirAFile3} [314-314],
 assertFalse("F testDirAFile5 exists", testDirAFile5.exists()); ref {testDirAFile5} [321-321],
 assertTrue("F testDirAFile5", listener.getDeletedFiles().contains(testDirAFile5)); ref {listener, testDirAFile5} [322-322]
[m[m31.08.2022 - 16:58:08.118 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.monitor.FileAlterationObserverTestCase::testObserveSingleFile has 16 assertions: 
 assertFalse("A testDirAFile1 exists", testDirAFile1.exists()); ref {testDirAFile1} [339-339],
 /* filter should ignore */
assertTrue("B testDirAFile1 exists", testDirAFile1.exists()); ref {testDirAFile1} [345-345],
 assertTrue("B testDirAFile2 exists", testDirAFile2.exists()); ref {testDirAFile2} [346-346],
 assertTrue("B testDirAFile3 exists", testDirAFile3.exists()); ref {testDirAFile3} [347-347],
 assertTrue("C created", listener.getCreatedFiles().contains(testDirAFile1)); ref {testDirAFile1, listener} [350-350],
 assertFalse("C created", listener.getCreatedFiles().contains(testDirAFile2)); ref {listener, testDirAFile2} [351-351],
 assertFalse("C created", listener.getCreatedFiles().contains(testDirAFile3)); ref {listener, testDirAFile3} [352-352],
 assertTrue("D changed", listener.getChangedFiles().contains(testDirAFile1)); ref {testDirAFile1, listener} [360-360],
 assertFalse("D changed", listener.getChangedFiles().contains(testDirAFile2)); ref {listener, testDirAFile2} [361-361],
 assertFalse("D changed", listener.getChangedFiles().contains(testDirAFile3)); ref {listener, testDirAFile3} [362-362],
 assertFalse("E testDirAFile1 exists", testDirAFile1.exists()); ref {testDirAFile1} [368-368],
 assertFalse("E testDirAFile2 exists", testDirAFile2.exists()); ref {testDirAFile2} [369-369],
 assertFalse("E testDirAFile3 exists", testDirAFile3.exists()); ref {testDirAFile3} [370-370],
 assertTrue("E deleted", listener.getDeletedFiles().contains(testDirAFile1)); ref {testDirAFile1, listener} [373-373],
 assertFalse("E deleted", listener.getDeletedFiles().contains(testDirAFile2)); ref {listener, testDirAFile2} [374-374],
 assertFalse("E deleted", listener.getDeletedFiles().contains(testDirAFile3)); ref {listener, testDirAFile3} [375-375]
[m[m31.08.2022 - 16:58:08.119 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.119 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ThresholdingOutputStreamTest::testSetByteCount has 2 assertions: 
 assertFalse(reached.get()); ref {reached} [48-48],
 assertTrue(reached.get()); ref {reached} [50-50]
[m[m31.08.2022 - 16:58:08.120 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:08.120 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ObservableInputStreamTest::testDataByteCalled has 13 assertions: 
 assertEquals(-1, lko.lastByteSeen); ref {lko.lastByteSeen, lko} [74-74],
 assertEquals(-1, lko.lastByteSeen); ref {lko.lastByteSeen, lko} [76-76],
 assertFalse(lko.finished); ref {lko, lko.finished} [77-77],
 assertFalse(lko.closed); ref {lko, lko.closed} [78-78],
 assertEquals((byte) result, buffer[i]); ref {result, i, buffer} [82-82],
 assertEquals(result, lko.lastByteSeen); ref {result, lko.lastByteSeen, lko} [83-83],
 assertFalse(lko.finished); ref {lko, lko.finished} [84-84],
 assertFalse(lko.closed); ref {lko, lko.closed} [85-85],
 assertEquals(-1, result); ref {result} [88-88],
 assertTrue(lko.finished); ref {lko, lko.finished} [89-89],
 assertFalse(lko.closed); ref {lko, lko.closed} [90-90],
 assertTrue(lko.finished); ref {lko, lko.finished} [92-92],
 assertTrue(lko.closed); ref {lko, lko.closed} [93-93]
[m[m31.08.2022 - 16:58:08.120 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ObservableInputStreamTest::testDataBytesCalled has 8 assertions: 
 assertEquals(null, lko.buffer); ref {lko, lko.buffer} [105-105],
 assertEquals(null, lko.buffer); ref {lko, lko.buffer} [107-107],
 assertEquals(readBuffer, lko.buffer); ref {lko, readBuffer, lko.buffer} [116-116],
 assertEquals(0, lko.offset); ref {lko, lko.offset} [117-117],
 assertEquals(readBuffer.length, lko.length); ref {lko.length, lko, readBuffer, readBuffer.length} [118-118],
 assertEquals(readBuffer, lko.buffer); ref {lko, readBuffer, lko.buffer} [127-127],
 assertEquals(1, lko.offset); ref {lko, lko.offset} [128-128],
 assertEquals(res, lko.length); ref {res, lko.length, lko} [129-129]
[m[m31.08.2022 - 16:58:08.121 [INFO ] ParsingStrategy.parseTestSuite() - Found 12 test cases
[m[m31.08.2022 - 16:58:08.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.FileWriterWithEncodingTest::sameEncoding_string_constructor has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.FileWriterWithEncodingTest::sameEncoding_string_string_constructor has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.FileWriterWithEncodingTest::sameEncoding_Charset_constructor has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.FileWriterWithEncodingTest::sameEncoding_string_Charset_constructor has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.FileWriterWithEncodingTest::sameEncoding_CharsetEncoder_constructor has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.FileWriterWithEncodingTest::sameEncoding_string_CharsetEncoder_constructor has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.FileWriterWithEncodingTest::testDifferentEncoding has 4 assertions: 
 assertTrue(file1.exists()); ref {file1} [144-144],
 assertTrue(file2.exists()); ref {file2} [145-145],
 assertTrue(file1.exists()); ref {file1} [165-165],
 assertTrue(file2.exists()); ref {file2} [166-166]
[m[m31.08.2022 - 16:58:08.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.FileWriterWithEncodingTest::constructor_File_encoding_badEncoding has 2 assertions: 
 // expected
assertFalse(file1.exists()); ref {file1} [198-198],
 assertFalse(file1.exists()); ref {file1} [202-202]
[m[m31.08.2022 - 16:58:08.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.FileWriterWithEncodingTest::constructor_File_directory has 2 assertions: 
 // expected
assertFalse(file1.exists()); ref {file1} [214-214],
 assertFalse(file1.exists()); ref {file1} [218-218]
[m[m31.08.2022 - 16:58:08.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.FileWriterWithEncodingTest::constructor_File_nullFile has 2 assertions: 
 // expected
assertFalse(file1.exists()); ref {file1} [230-230],
 assertFalse(file1.exists()); ref {file1} [234-234]
[m[m31.08.2022 - 16:58:08.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.FileWriterWithEncodingTest::constructor_fileName_nullFile has 2 assertions: 
 // expected
assertFalse(file1.exists()); ref {file1} [246-246],
 assertFalse(file1.exists()); ref {file1} [250-250]
[m[m31.08.2022 - 16:58:08.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.FileWriterWithEncodingTest::sameEncoding_null_Charset_constructor has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.123 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.123 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.PathFileComparatorTest::testCaseSensitivity has 7 assertions: 
 /* test null as well */
assertTrue("sensitive file1 & file2 = 0", sensitive.compare(equalFile1, equalFile2) == 0); ref {equalFile2, equalFile1, sensitive} [48-48],
 assertTrue("sensitive file1 & file3 > 0", sensitive.compare(equalFile1, file3) > 0); ref {file3, equalFile1, sensitive} [49-49],
 assertTrue("sensitive file1 & less  > 0", sensitive.compare(equalFile1, lessFile) > 0); ref {lessFile, equalFile1, sensitive} [50-50],
 assertTrue("insensitive file1 & file2 = 0", insensitive.compare(equalFile1, equalFile2) == 0); ref {insensitive, equalFile2, equalFile1} [53-53],
 assertTrue("insensitive file1 & file3 = 0", insensitive.compare(equalFile1, file3) == 0); ref {insensitive, file3, equalFile1} [54-54],
 assertTrue("insensitive file1 & file4 > 0", insensitive.compare(equalFile1, lessFile) > 0); ref {lessFile, insensitive, equalFile1} [55-55],
 assertTrue("insensitive file3 & less  > 0", insensitive.compare(file3, lessFile) > 0); ref {lessFile, insensitive, file3} [56-56]
[m[m31.08.2022 - 16:58:08.123 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.126 [INFO ] ParsingStrategy.parseTestSuite() - Found 28 test cases
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpace_String has 4 assertions: 
 Assert.assertNotNull("Unexpected null line", line); ref {Assert, line} [63-63],
 assertEquals(free, kb, acceptableDelta); ref {kb, free, acceptableDelta} [78-78],
 assertEquals(free / 2d, kb, acceptableDelta); ref {kb, free, acceptableDelta} [80-80],
 assertEquals((double) bytes / 1024, kb, acceptableDelta); ref {bytes, kb, acceptableDelta} [87-87]
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceOS_String_NullPath has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceOS_String_InitError has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceOS_String_Other has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceOS_String_Windows has 2 assertions: 
 assertEquals(12345L, fsu.freeSpaceOS("", 1, false, -1)); ref {fsu} [145-145],
 assertEquals(12345L / 1024, fsu.freeSpaceOS("", 1, true, -1)); ref {fsu} [146-146]
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceOS_String_Unix has 2 assertions: 
 assertEquals(54321L, fsu.freeSpaceOS("", 2, false, -1)); ref {fsu} [157-157],
 assertEquals(12345L, fsu.freeSpaceOS("", 2, true, -1)); ref {fsu} [158-158]
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceWindows_String_ParseCommaFormatBytes has 1 assertions: 
 assertEquals(41411551232L, fsu.freeSpaceWindows("", -1)); ref {fsu} [179-179]
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceWindows_String_EmptyPath has 1 assertions: 
 assertEquals(41411551232L, fsu.freeSpaceWindows("", -1)); ref {fsu} [198-198]
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceWindows_String_NormalResponse has 1 assertions: 
 assertEquals(41411551232L, fsu.freeSpaceWindows("C:", -1)); ref {fsu} [216-216]
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceWindows_String_StripDrive has 1 assertions: 
 assertEquals(41411551232L, fsu.freeSpaceWindows("C:\\somedir", -1)); ref {fsu} [234-234]
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceWindows_String_quoted has 1 assertions: 
 assertEquals(41411551232L, fsu.freeSpaceWindows("\"C:\\somedir\"", -1)); ref {fsu} [252-252]
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceWindows_String_EmptyResponse has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceWindows_String_EmptyMultiLineResponse has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceWindows_String_InvalidTextResponse has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceWindows_String_NoSuchDirectoryResponse has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_EmptyPath has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_NormalResponseLinux has 1 assertions: 
 assertEquals(189416L, fsu.freeSpaceUnix("/", false, false, -1)); ref {fsu} [329-329]
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_NormalResponseFreeBSD has 1 assertions: 
 assertEquals(15770L, fsu.freeSpaceUnix("/", false, false, -1)); ref {fsu} [339-339]
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_NormalResponseKbLinux has 1 assertions: 
 assertEquals(189416L, fsu.freeSpaceUnix("/", true, false, -1)); ref {fsu} [351-351]
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD has 1 assertions: 
 assertEquals(15770L, fsu.freeSpaceUnix("/", true, false, -1)); ref {fsu} [362-362]
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_NormalResponseKbSolaris has 1 assertions: 
 assertEquals(481163L, fsu.freeSpaceUnix("/dev/dsk/x0x0x0x0", true, false, -1)); ref {fsu} [373-373]
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_LongResponse has 1 assertions: 
 assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", false, false, -1)); ref {fsu} [383-383]
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_LongResponseKb has 1 assertions: 
 assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", true, false, -1)); ref {fsu} [393-393]
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_EmptyResponse has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_InvalidResponse1 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_InvalidResponse2 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_InvalidResponse3 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileSystemUtilsTestCase::testGetFreeSpaceUnix_String_InvalidResponse4 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.129 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.129 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.NullWriterTest::testNull has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.129 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.130 [INFO ] ParsingStrategy.parseTestSuite() - Found 5 test cases
[m[m31.08.2022 - 16:58:08.130 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileDeleteStrategyTestCase::testDeleteNormal has 9 assertions: 
 assertTrue(subDir.mkdir()); ref {subDir} [53-53],
 assertTrue(subDir.exists()); ref {subDir} [64-64],
 assertTrue(subFile.exists()); ref {subFile} [65-65],
 assertTrue(subDir.exists()); ref {subDir} [73-73],
 assertTrue(subFile.exists()); ref {subFile} [74-74],
 assertTrue(subDir.exists()); ref {subDir} [77-77],
 assertFalse(subFile.exists()); ref {subFile} [78-78],
 assertFalse(subDir.exists()); ref {subDir} [81-81],
 assertFalse(subDir.exists()); ref {subDir} [84-84]
[m[m31.08.2022 - 16:58:08.131 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileDeleteStrategyTestCase::testDeleteQuietlyNormal has 13 assertions: 
 assertTrue(subDir.mkdir()); ref {subDir} [91-91],
 assertTrue(subDir.exists()); ref {subDir} [102-102],
 assertTrue(subFile.exists()); ref {subFile} [103-103],
 // delete dir
assertFalse(FileDeleteStrategy.NORMAL.deleteQuietly(subDir)); ref {subDir, FileDeleteStrategy.NORMAL, FileDeleteStrategy} [105-105],
 assertTrue(subDir.exists()); ref {subDir} [106-106],
 assertTrue(subFile.exists()); ref {subFile} [107-107],
 // delete file
assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(subFile)); ref {subFile, FileDeleteStrategy.NORMAL, FileDeleteStrategy} [109-109],
 assertTrue(subDir.exists()); ref {subDir} [110-110],
 assertFalse(subFile.exists()); ref {subFile} [111-111],
 // delete dir
assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(subDir)); ref {subDir, FileDeleteStrategy.NORMAL, FileDeleteStrategy} [113-113],
 assertFalse(subDir.exists()); ref {subDir} [114-114],
 // delete dir
// no error
assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(subDir)); ref {subDir, FileDeleteStrategy.NORMAL, FileDeleteStrategy} [116-116],
 assertFalse(subDir.exists()); ref {subDir} [117-117]
[m[m31.08.2022 - 16:58:08.131 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileDeleteStrategyTestCase::testDeleteForce has 6 assertions: 
 assertTrue(subDir.mkdir()); ref {subDir} [124-124],
 assertTrue(subDir.exists()); ref {subDir} [135-135],
 assertTrue(subFile.exists()); ref {subFile} [136-136],
 assertFalse(subDir.exists()); ref {subDir} [139-139],
 assertFalse(subFile.exists()); ref {subFile} [140-140],
 assertFalse(subDir.exists()); ref {subDir} [143-143]
[m[m31.08.2022 - 16:58:08.131 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileDeleteStrategyTestCase::testDeleteNull has 1 assertions: 
 assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(null)); ref {FileDeleteStrategy.NORMAL, FileDeleteStrategy} [154-154]
[m[m31.08.2022 - 16:58:08.131 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileDeleteStrategyTestCase::testToString has 2 assertions: 
 assertEquals("FileDeleteStrategy[Normal]", FileDeleteStrategy.NORMAL.toString()); ref {FileDeleteStrategy.NORMAL, FileDeleteStrategy} [159-159],
 assertEquals("FileDeleteStrategy[Force]", FileDeleteStrategy.FORCE.toString()); ref {FileDeleteStrategy.FORCE, FileDeleteStrategy} [160-160]
[m[m31.08.2022 - 16:58:08.143 [INFO ] ParsingStrategy.parseTestSuite() - Found 107 test cases
[m[m31.08.2022 - 16:58:08.143 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCloseQuietly_AllCloseableIOException has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.143 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCloseQuietly_CloseableIOException has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.143 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCloseQuietly_Selector has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.143 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCloseQuietly_SelectorIOException has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.143 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCloseQuietly_SelectorNull has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCloseQuietly_SelectorTwice has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCloseQuietly_ServerSocket has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCloseQuietly_ServerSocketIOException has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCloseQuietly_Socket has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCloseQuietly_SocketIOException has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testConstants has 8 assertions: 
 assertEquals('/', IOUtils.DIR_SEPARATOR_UNIX); ref {IOUtils, IOUtils.DIR_SEPARATOR_UNIX} [226-226],
 assertEquals('\\', IOUtils.DIR_SEPARATOR_WINDOWS); ref {IOUtils.DIR_SEPARATOR_WINDOWS, IOUtils} [227-227],
 assertEquals("\n", IOUtils.LINE_SEPARATOR_UNIX); ref {IOUtils.LINE_SEPARATOR_UNIX, IOUtils} [228-228],
 assertEquals("\r\n", IOUtils.LINE_SEPARATOR_WINDOWS); ref {IOUtils, IOUtils.LINE_SEPARATOR_WINDOWS} [229-229],
 assertEquals('\\', IOUtils.DIR_SEPARATOR); ref {IOUtils, IOUtils.DIR_SEPARATOR} [231-231],
 assertEquals("\r\n", IOUtils.LINE_SEPARATOR); ref {IOUtils, IOUtils.LINE_SEPARATOR} [232-232],
 assertEquals('/', IOUtils.DIR_SEPARATOR); ref {IOUtils, IOUtils.DIR_SEPARATOR} [234-234],
 assertEquals("\n", IOUtils.LINE_SEPARATOR); ref {IOUtils, IOUtils.LINE_SEPARATOR} [235-235]
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testContentEquals_InputStream_InputStream has 7 assertions: 
 assertTrue(IOUtils.contentEquals(input1, input1)); ref {IOUtils, input1} [242-242],
 assertTrue(IOUtils.contentEquals(input1, input1)); ref {IOUtils, input1} [246-246],
 assertTrue(IOUtils.contentEquals(new ByteArrayInputStream("".getBytes(StandardCharsets.UTF_8)), new ByteArrayInputStream("".getBytes(StandardCharsets.UTF_8)))); ref {IOUtils, StandardCharsets, StandardCharsets.UTF_8} [248-249],
 assertTrue(IOUtils.contentEquals(new BufferedInputStream(new ByteArrayInputStream("".getBytes(StandardCharsets.UTF_8))), new BufferedInputStream(new ByteArrayInputStream("".getBytes(StandardCharsets.UTF_8))))); ref {IOUtils, StandardCharsets, StandardCharsets.UTF_8} [250-251],
 assertTrue(IOUtils.contentEquals(new ByteArrayInputStream("ABC".getBytes(StandardCharsets.UTF_8)), new ByteArrayInputStream("ABC".getBytes(StandardCharsets.UTF_8)))); ref {IOUtils, StandardCharsets, StandardCharsets.UTF_8} [252-253],
 assertFalse(IOUtils.contentEquals(new ByteArrayInputStream("ABCD".getBytes(StandardCharsets.UTF_8)), new ByteArrayInputStream("ABC".getBytes(StandardCharsets.UTF_8)))); ref {IOUtils, StandardCharsets, StandardCharsets.UTF_8} [254-255],
 assertFalse(IOUtils.contentEquals(new ByteArrayInputStream("ABC".getBytes(StandardCharsets.UTF_8)), new ByteArrayInputStream("ABCD".getBytes(StandardCharsets.UTF_8)))); ref {IOUtils, StandardCharsets, StandardCharsets.UTF_8} [256-257]
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testContentEquals_Reader_Reader has 7 assertions: 
 assertTrue(IOUtils.contentEquals(input1, input1)); ref {IOUtils, input1} [263-263],
 assertTrue(IOUtils.contentEquals(input1, input1)); ref {IOUtils, input1} [267-267],
 assertTrue(IOUtils.contentEquals(new StringReader(""), new StringReader(""))); ref {IOUtils} [269-269],
 assertTrue(IOUtils.contentEquals(new BufferedReader(new StringReader("")), new BufferedReader(new StringReader("")))); ref {IOUtils} [270-270],
 assertTrue(IOUtils.contentEquals(new StringReader("ABC"), new StringReader("ABC"))); ref {IOUtils} [271-271],
 assertFalse(IOUtils.contentEquals(new StringReader("ABCD"), new StringReader("ABC"))); ref {IOUtils} [272-272],
 assertFalse(IOUtils.contentEquals(new StringReader("ABC"), new StringReader("ABCD"))); ref {IOUtils} [273-273]
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testContentEqualsIgnoreEOL has 7 assertions: 
 assertTrue(IOUtils.contentEqualsIgnoreEOL(input1, input1)); ref {IOUtils, input1} [279-279],
 assertTrue(IOUtils.contentEqualsIgnoreEOL(input1, input1)); ref {IOUtils, input1} [283-283],
 assertTrue(IOUtils.contentEqualsIgnoreEOL(r1, r2)); ref {r2, IOUtils, r1} [291-291],
 assertTrue(IOUtils.contentEqualsIgnoreEOL(r1, r2)); ref {r2, IOUtils, r1} [295-295],
 assertFalse(IOUtils.contentEqualsIgnoreEOL(r1, r2)); ref {r2, IOUtils, r1} [299-299],
 assertTrue(IOUtils.contentEqualsIgnoreEOL(r1, r2)); ref {r2, IOUtils, r1} [303-303],
 assertTrue(IOUtils.contentEqualsIgnoreEOL(r1, r2)); ref {r2, IOUtils, r1} [307-307]
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopy_ByteArray_OutputStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopy_ByteArray_Writer has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopy_String_Writer has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopyLarge_CharExtraLength has 5 assertions: 
 // Test our copy method
// for extra length, it reads till EOF
assertEquals(200, IOUtils.copyLarge(is, os, 0, 2000)); ref {IOUtils, os, is} [374-374],
 // check that output length is correct
assertEquals(200, oarr.length); ref {oarr, oarr.length} [378-378],
 // check that output data corresponds to input data
assertEquals(1, oarr[1]); ref {oarr} [380-380],
 assertEquals(79, oarr[79]); ref {oarr} [381-381],
 assertEquals((char) -1, oarr[80]); ref {oarr} [382-382]
[m[m31.08.2022 - 16:58:08.144 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopyLarge_CharFullLength has 5 assertions: 
 // Test our copy method
assertEquals(200, IOUtils.copyLarge(is, os, 0, -1)); ref {IOUtils, os, is} [399-399],
 // check that output length is correct
assertEquals(200, oarr.length); ref {oarr, oarr.length} [403-403],
 // check that output data corresponds to input data
assertEquals(1, oarr[1]); ref {oarr} [405-405],
 assertEquals(79, oarr[79]); ref {oarr} [406-406],
 assertEquals((char) -1, oarr[80]); ref {oarr} [407-407]
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopyLarge_CharNoSkip has 5 assertions: 
 // Test our copy method
assertEquals(100, IOUtils.copyLarge(is, os, 0, 100)); ref {IOUtils, os, is} [424-424],
 // check that output length is correct
assertEquals(100, oarr.length); ref {oarr, oarr.length} [428-428],
 // check that output data corresponds to input data
assertEquals(1, oarr[1]); ref {oarr} [430-430],
 assertEquals(79, oarr[79]); ref {oarr} [431-431],
 assertEquals((char) -1, oarr[80]); ref {oarr} [432-432]
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopyLarge_CharSkip has 5 assertions: 
 // Test our copy method
assertEquals(100, IOUtils.copyLarge(is, os, 10, 100)); ref {IOUtils, os, is} [449-449],
 // check that output length is correct
assertEquals(100, oarr.length); ref {oarr, oarr.length} [453-453],
 // check that output data corresponds to input data
assertEquals(11, oarr[1]); ref {oarr} [455-455],
 assertEquals(79, oarr[69]); ref {oarr} [456-456],
 assertEquals((char) -1, oarr[70]); ref {oarr} [457-457]
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopyLarge_CharSkipInvalid has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopyLarge_ExtraLength has 5 assertions: 
 // Test our copy method
// for extra length, it reads till EOF
assertEquals(200, IOUtils.copyLarge(is, os, 0, 2000)); ref {IOUtils, os, is} [493-493],
 // check that output length is correct
assertEquals(200, oarr.length); ref {oarr, oarr.length} [497-497],
 // check that output data corresponds to input data
assertEquals(1, oarr[1]); ref {oarr} [499-499],
 assertEquals(79, oarr[79]); ref {oarr} [500-500],
 assertEquals(-1, oarr[80]); ref {oarr} [501-501]
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopyLarge_FullLength has 5 assertions: 
 // Test our copy method
assertEquals(200, IOUtils.copyLarge(is, os, 0, -1)); ref {IOUtils, os, is} [518-518],
 // check that output length is correct
assertEquals(200, oarr.length); ref {oarr, oarr.length} [522-522],
 // check that output data corresponds to input data
assertEquals(1, oarr[1]); ref {oarr} [524-524],
 assertEquals(79, oarr[79]); ref {oarr} [525-525],
 assertEquals(-1, oarr[80]); ref {oarr} [526-526]
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopyLarge_NoSkip has 5 assertions: 
 // Test our copy method
assertEquals(100, IOUtils.copyLarge(is, os, 0, 100)); ref {IOUtils, os, is} [543-543],
 // check that output length is correct
assertEquals(100, oarr.length); ref {oarr, oarr.length} [547-547],
 // check that output data corresponds to input data
assertEquals(1, oarr[1]); ref {oarr} [549-549],
 assertEquals(79, oarr[79]); ref {oarr} [550-550],
 assertEquals(-1, oarr[80]); ref {oarr} [551-551]
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopyLarge_Skip has 5 assertions: 
 // Test our copy method
assertEquals(100, IOUtils.copyLarge(is, os, 10, 100)); ref {IOUtils, os, is} [568-568],
 // check that output length is correct
assertEquals(100, oarr.length); ref {oarr, oarr.length} [572-572],
 // check that output data corresponds to input data
assertEquals(11, oarr[1]); ref {oarr} [574-574],
 assertEquals(79, oarr[69]); ref {oarr} [575-575],
 assertEquals(-1, oarr[70]); ref {oarr} [576-576]
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopyLarge_SkipInvalid has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testRead_ReadableByteChannel has 4 assertions: 
 assertEquals(FILE_SIZE, IOUtils.read(input, buffer)); ref {FILE_SIZE, input, IOUtils, buffer} [607-607],
 assertEquals(0, IOUtils.read(input, buffer)); ref {input, IOUtils, buffer} [608-608],
 assertEquals(0, buffer.remaining()); ref {buffer} [609-609],
 assertEquals(0, input.read(buffer)); ref {input, buffer} [610-610]
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testReadFully_InputStream_ByteArray has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testReadFully_InputStream__ReturnByteArray has 1 assertions: 
 assertEqualContent(result, bytes); ref {result, bytes} [654-654]
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testReadFully_InputStream_Offset has 1 assertions: 
 assertEquals("wxabcd1234", new String(buffer, 0, buffer.length, "UTF-8")); ref {buffer.length, buffer} [662-662]
[m[m31.08.2022 - 16:58:08.145 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testReadFully_ReadableByteChannel has 6 assertions: 
 assertEquals(FILE_SIZE, buffer.position()); ref {FILE_SIZE, buffer} [672-672],
 assertEquals(0, buffer.remaining()); ref {buffer} [673-673],
 assertEquals(0, input.read(buffer)); ref {input, buffer} [674-674],
 assertEquals(FILE_SIZE, buffer.position()); ref {FILE_SIZE, buffer} [676-676],
 assertEquals(0, buffer.remaining()); ref {buffer} [677-677],
 assertEquals(0, input.read(buffer)); ref {input, buffer} [678-678]
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testReadFully_Reader has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testReadFully_Reader_Offset has 1 assertions: 
 assertEquals("wxabcd1234", new String(buffer)); ref {buffer} [719-719]
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testReadLines_InputStream has 2 assertions: 
 assertEquals(Arrays.asList(data), lines); ref {data, Arrays, lines} [732-732],
 assertEquals(-1, in.read()); ref {in} [733-733]
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testReadLines_InputStream_String has 2 assertions: 
 assertEquals(Arrays.asList(data), lines); ref {data, Arrays, lines} [749-749],
 assertEquals(-1, in.read()); ref {in} [750-750]
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testReadLines_Reader has 2 assertions: 
 assertEquals(Arrays.asList(data), lines); ref {data, Arrays, lines} [766-766],
 assertEquals(-1, in.read()); ref {in} [767-767]
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testSkip_FileReader has 3 assertions: 
 assertEquals(FILE_SIZE - 10, IOUtils.skip(in, FILE_SIZE - 10)); ref {FILE_SIZE, IOUtils, in} [776-776],
 assertEquals(10, IOUtils.skip(in, 20)); ref {IOUtils, in} [777-777],
 assertEquals(0, IOUtils.skip(in, 10)); ref {IOUtils, in} [778-778]
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testSkip_InputStream has 3 assertions: 
 assertEquals(FILE_SIZE - 10, IOUtils.skip(in, FILE_SIZE - 10)); ref {FILE_SIZE, IOUtils, in} [784-784],
 assertEquals(10, IOUtils.skip(in, 20)); ref {IOUtils, in} [785-785],
 assertEquals(0, IOUtils.skip(in, 10)); ref {IOUtils, in} [786-786]
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testSkip_ReadableByteChannel has 3 assertions: 
 assertEquals(FILE_SIZE - 10, IOUtils.skip(fileChannel, FILE_SIZE - 10)); ref {FILE_SIZE, IOUtils, fileChannel} [794-794],
 assertEquals(10, IOUtils.skip(fileChannel, 20)); ref {IOUtils, fileChannel} [795-795],
 assertEquals(0, IOUtils.skip(fileChannel, 10)); ref {IOUtils, fileChannel} [796-796]
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testSkipFully_InputStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testSkipFully_ReadableByteChannel has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testSkipFully_Reader has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testStringToOutputStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToBufferedInputStream_InputStream has 4 assertions: 
 assertNotNull(out); ref {out} [895-895],
 assertEquals("Not all bytes were read", 0, fin.available()); ref {fin} [896-896],
 assertEquals("Wrong output size", FILE_SIZE, out.length); ref {FILE_SIZE, out.length, out} [897-897],
 TestUtils.assertEqualContent(out, m_testFile); ref {TestUtils, m_testFile, out} [898-898]
[m[m31.08.2022 - 16:58:08.146 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToBufferedInputStreamWithBufferSize_InputStream has 4 assertions: 
 assertNotNull(out); ref {out} [906-906],
 assertEquals("Not all bytes were read", 0, fin.available()); ref {fin} [907-907],
 assertEquals("Wrong output size", FILE_SIZE, out.length); ref {FILE_SIZE, out.length, out} [908-908],
 TestUtils.assertEqualContent(out, m_testFile); ref {TestUtils, m_testFile, out} [909-909]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToByteArray_InputStream has 4 assertions: 
 assertNotNull(out); ref {out} [916-916],
 assertEquals("Not all bytes were read", 0, fin.available()); ref {fin} [917-917],
 assertEquals("Wrong output size", FILE_SIZE, out.length); ref {FILE_SIZE, out.length, out} [918-918],
 TestUtils.assertEqualContent(out, m_testFile); ref {TestUtils, m_testFile, out} [919-919]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToByteArray_InputStream_NegativeSize has 1 assertions: 
 assertTrue("Exception message does not start with \"Size must be equal or greater than zero\"", exc.getMessage().startsWith("Size must be equal or greater than zero")); ref {exc} [929-930]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToByteArray_InputStream_Size has 4 assertions: 
 assertNotNull(out); ref {out} [938-938],
 assertEquals("Not all bytes were read", 0, fin.available()); ref {fin} [939-939],
 assertEquals("Wrong output size: out.length=" + out.length + "!=" + FILE_SIZE, FILE_SIZE, out.length); ref {FILE_SIZE, out.length, out} [940-940],
 TestUtils.assertEqualContent(out, m_testFile); ref {TestUtils, m_testFile, out} [941-941]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToByteArray_InputStream_SizeIllegal has 1 assertions: 
 assertTrue("Exception message does not start with \"Unexpected read size\"", exc.getMessage().startsWith("Unexpected read size")); ref {exc} [951-952]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToByteArray_InputStream_SizeLong has 1 assertions: 
 assertTrue("Exception message does not start with \"Size cannot be greater than Integer max value\"", exc.getMessage().startsWith("Size cannot be greater than Integer max value")); ref {exc} [963-964]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToByteArray_InputStream_SizeZero has 2 assertions: 
 assertNotNull("Out cannot be null", out); ref {out} [973-973],
 assertEquals("Out length must be 0", 0, out.length); ref {out.length, out} [974-974]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToByteArray_Reader has 2 assertions: 
 Assert.assertArrayEquals(expecteds, actuals); ref {actuals, expecteds, Assert} [982-982],
 Assert.assertArrayEquals(expecteds, actuals); ref {actuals, expecteds, Assert} [984-984]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToByteArray_String has 1 assertions: 
 assertEqualContent(str.getBytes(), out); ref {str, out} [993-993]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToByteArray_URI has 1 assertions: 
 assertEquals(FILE_SIZE, actual.length); ref {FILE_SIZE, actual, actual.length} [1000-1000]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToByteArray_URL has 1 assertions: 
 assertEquals(FILE_SIZE, actual.length); ref {FILE_SIZE, actual, actual.length} [1006-1006]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToByteArray_URLConnection has 1 assertions: 
 assertEquals(FILE_SIZE, actual.length); ref {FILE_SIZE, actual, actual.length} [1017-1017]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToCharArray_InputStream has 4 assertions: 
 assertNotNull(out); ref {out} [1023-1023],
 assertEquals("Not all chars were read", 0, fin.available()); ref {fin} [1024-1024],
 assertEquals("Wrong output size", FILE_SIZE, out.length); ref {FILE_SIZE, out.length, out} [1025-1025],
 TestUtils.assertEqualContent(out, m_testFile); ref {TestUtils, m_testFile, out} [1026-1026]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToCharArray_InputStream_CharsetName has 4 assertions: 
 assertNotNull(out); ref {out} [1033-1033],
 assertEquals("Not all chars were read", 0, fin.available()); ref {fin} [1034-1034],
 assertEquals("Wrong output size", FILE_SIZE, out.length); ref {FILE_SIZE, out.length, out} [1035-1035],
 TestUtils.assertEqualContent(out, m_testFile); ref {TestUtils, m_testFile, out} [1036-1036]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToCharArray_Reader has 3 assertions: 
 assertNotNull(out); ref {out} [1043-1043],
 assertEquals("Wrong output size", FILE_SIZE, out.length); ref {FILE_SIZE, out.length, out} [1044-1044],
 TestUtils.assertEqualContent(out, m_testFile); ref {TestUtils, m_testFile, out} [1045-1045]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToInputStream_CharSequence has 3 assertions: 
 assertEqualContent(csq.toString().getBytes(), bytes); ref {csq, bytes} [1061-1061],
 assertEqualContent(csq.toString().getBytes(), bytes); ref {csq, bytes} [1064-1064],
 assertEqualContent(csq.toString().getBytes("UTF-8"), bytes); ref {csq, bytes} [1067-1067]
[m[m31.08.2022 - 16:58:08.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToInputStream_String has 3 assertions: 
 assertEqualContent(str.getBytes(), bytes); ref {str, bytes} [1084-1084],
 assertEqualContent(str.getBytes(), bytes); ref {str, bytes} [1087-1087],
 assertEqualContent(str.getBytes("UTF-8"), bytes); ref {str, bytes} [1090-1090]
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToString_ByteArray has 1 assertions: 
 assertEqualContent(in, str.getBytes()); ref {str, in} [1098-1098]
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToString_InputStream has 3 assertions: 
 assertNotNull(out); ref {out} [1105-1105],
 assertEquals("Not all bytes were read", 0, fin.available()); ref {fin} [1106-1106],
 assertEquals("Wrong output size", FILE_SIZE, out.length()); ref {FILE_SIZE, out} [1107-1107]
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToString_Reader has 2 assertions: 
 assertNotNull(out); ref {out} [1114-1114],
 assertEquals("Wrong output size", FILE_SIZE, out.length()); ref {FILE_SIZE, out} [1115-1115]
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToString_URI has 2 assertions: 
 assertNotNull(out); ref {out} [1122-1122],
 assertEquals("Wrong output size", FILE_SIZE, out.length()); ref {FILE_SIZE, out} [1123-1123]
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToString_URI_CharsetName has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToString_URI_CharsetNameNull has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToString_URL has 2 assertions: 
 assertNotNull(out); ref {out} [1144-1144],
 assertEquals("Wrong output size", FILE_SIZE, out.length()); ref {FILE_SIZE, out} [1145-1145]
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToString_URL_CharsetName has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testToString_URL_CharsetNameNull has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToString_ExistingResourceAtRootPackage has 2 assertions: 
 assertNotNull(content); ref {content} [1167-1167],
 assertEquals(fileSize, content.getBytes().length); ref {fileSize, content.getBytes().length, content} [1168-1168]
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToString_ExistingResourceAtRootPackage_WithClassLoader has 2 assertions: 
 assertNotNull(content); ref {content} [1179-1179],
 assertEquals(fileSize, content.getBytes().length); ref {fileSize, content.getBytes().length, content} [1180-1180]
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToString_ExistingResourceAtSubPackage has 2 assertions: 
 assertNotNull(content); ref {content} [1187-1187],
 assertEquals(fileSize, content.getBytes().length); ref {fileSize, content.getBytes().length, content} [1188-1188]
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToString_ExistingResourceAtSubPackage_WithClassLoader has 2 assertions: 
 assertNotNull(content); ref {content} [1199-1199],
 assertEquals(fileSize, content.getBytes().length); ref {fileSize, content.getBytes().length, content} [1200-1200]
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToString_NonExistingResource has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToString_NonExistingResource_WithClassLoader has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToString_NullResource has 2 assertions: 
 assertNotNull(npe); ref {npe} [1219-1219],
 assertTrue(exceptionOccurred); ref {exceptionOccurred} [1222-1222]
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToString_NullResource_WithClassLoader has 2 assertions: 
 assertNotNull(npe); ref {npe} [1233-1233],
 assertTrue(exceptionOccurred); ref {exceptionOccurred} [1236-1236]
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToString_NullCharset has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToString_NullCharset_WithClassLoader has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToByteArray_ExistingResourceAtRootPackage has 2 assertions: 
 assertNotNull(bytes); ref {bytes} [1250-1250],
 assertEquals(fileSize, bytes.length); ref {fileSize, bytes, bytes.length} [1251-1251]
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToByteArray_ExistingResourceAtRootPackage_WithClassLoader has 2 assertions: 
 assertNotNull(bytes); ref {bytes} [1257-1257],
 assertEquals(fileSize, bytes.length); ref {fileSize, bytes, bytes.length} [1258-1258]
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToByteArray_ExistingResourceAtSubPackage has 2 assertions: 
 assertNotNull(bytes); ref {bytes} [1264-1264],
 assertEquals(fileSize, bytes.length); ref {fileSize, bytes, bytes.length} [1265-1265]
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToByteArray_ExistingResourceAtSubPackage_WithClassLoader has 2 assertions: 
 assertNotNull(bytes); ref {bytes} [1271-1271],
 assertEquals(fileSize, bytes.length); ref {fileSize, bytes, bytes.length} [1272-1272]
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToByteArray_NonExistingResource has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToByteArray_NonExistingResource_WithClassLoader has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToByteArray_Null has 2 assertions: 
 assertNotNull(npe); ref {npe} [1291-1291],
 assertTrue(exceptionOccurred); ref {exceptionOccurred} [1294-1294]
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToByteArray_Null_WithClassLoader has 2 assertions: 
 assertNotNull(npe); ref {npe} [1305-1305],
 assertTrue(exceptionOccurred); ref {exceptionOccurred} [1308-1308]
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToURL_ExistingResourceAtRootPackage has 2 assertions: 
 assertNotNull(url); ref {url} [1313-1313],
 assertTrue(url.getFile().endsWith("/test-file-utf8.bin")); ref {url} [1314-1314]
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToURL_ExistingResourceAtRootPackage_WithClassLoader has 2 assertions: 
 assertNotNull(url); ref {url} [1319-1319],
 assertTrue(url.getFile().endsWith("/test-file-utf8.bin")); ref {url} [1320-1320]
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToURL_ExistingResourceAtSubPackage has 2 assertions: 
 assertNotNull(url); ref {url} [1325-1325],
 assertTrue(url.getFile().endsWith("/org/apache/commons/io/FileUtilsTestDataCR.dat")); ref {url} [1326-1326]
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToURL_ExistingResourceAtSubPackage_WithClassLoader has 2 assertions: 
 assertNotNull(url); ref {url} [1335-1335],
 assertTrue(url.getFile().endsWith("/org/apache/commons/io/FileUtilsTestDataCR.dat")); ref {url} [1336-1336]
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToURL_NonExistingResource has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToURL_NonExistingResource_WithClassLoader has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.150 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToURL_Null has 2 assertions: 
 assertNotNull(npe); ref {npe} [1355-1355],
 assertTrue(exceptionOccurred); ref {exceptionOccurred} [1358-1358]
[m[m31.08.2022 - 16:58:08.150 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testResourceToURL_Null_WithClassLoader has 2 assertions: 
 assertNotNull(npe); ref {npe} [1369-1369],
 assertTrue(exceptionOccurred); ref {exceptionOccurred} [1372-1372]
[m[m31.08.2022 - 16:58:08.150 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testAsBufferedNull has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.150 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testAsBufferedInputStream has 2 assertions: 
 assertNotSame(is, bis); ref {is, bis} [1410-1410],
 assertSame(bis, IOUtils.buffer(bis)); ref {IOUtils, bis} [1411-1411]
[m[m31.08.2022 - 16:58:08.150 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testAsBufferedInputStreamWithBufferSize has 3 assertions: 
 assertNotSame(is, bis); ref {is, bis} [1422-1422],
 assertSame(bis, IOUtils.buffer(bis)); ref {IOUtils, bis} [1423-1423],
 assertSame(bis, IOUtils.buffer(bis, 1024)); ref {IOUtils, bis} [1424-1424]
[m[m31.08.2022 - 16:58:08.150 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testAsBufferedOutputStream has 2 assertions: 
 assertNotSame(is, bis); ref {is, bis} [1433-1433],
 assertSame(bis, IOUtils.buffer(bis)); ref {IOUtils, bis} [1434-1434]
[m[m31.08.2022 - 16:58:08.150 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testAsBufferedOutputStreamWithBufferSize has 3 assertions: 
 assertNotSame(os, bos); ref {os, bos} [1443-1443],
 assertSame(bos, IOUtils.buffer(bos)); ref {IOUtils, bos} [1444-1444],
 assertSame(bos, IOUtils.buffer(bos, 1024)); ref {IOUtils, bos} [1445-1445]
[m[m31.08.2022 - 16:58:08.150 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testAsBufferedReader has 2 assertions: 
 assertNotSame(is, bis); ref {is, bis} [1458-1458],
 assertSame(bis, IOUtils.buffer(bis)); ref {IOUtils, bis} [1459-1459]
[m[m31.08.2022 - 16:58:08.150 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testAsBufferedReaderWithBufferSize has 3 assertions: 
 assertNotSame(r, br); ref {br, r} [1472-1472],
 assertSame(br, IOUtils.buffer(br)); ref {br, IOUtils} [1473-1473],
 assertSame(br, IOUtils.buffer(br, 1024)); ref {br, IOUtils} [1474-1474]
[m[m31.08.2022 - 16:58:08.150 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testAsBufferedWriter has 2 assertions: 
 assertNotSame(is, bis); ref {is, bis} [1492-1492],
 assertSame(bis, IOUtils.buffer(bis)); ref {IOUtils, bis} [1493-1493]
[m[m31.08.2022 - 16:58:08.150 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testAsBufferedWriterWithBufferSize has 3 assertions: 
 assertNotSame(w, bw); ref {bw, w} [1512-1512],
 assertSame(bw, IOUtils.buffer(bw)); ref {IOUtils, bw} [1513-1513],
 assertSame(bw, IOUtils.buffer(bw, 1024)); ref {IOUtils, bw} [1514-1514]
[m[m31.08.2022 - 16:58:08.150 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsTestCase::testCopyLarge_SkipWithInvalidOffset has 5 assertions: 
 // Test our copy method
assertEquals(100, IOUtils.copyLarge(is, os, -10, 100)); ref {IOUtils, os, is} [1528-1528],
 // check that output length is correct
assertEquals(100, oarr.length); ref {oarr, oarr.length} [1532-1532],
 // check that output data corresponds to input data
assertEquals(1, oarr[1]); ref {oarr} [1534-1534],
 assertEquals(79, oarr[79]); ref {oarr} [1535-1535],
 assertEquals(-1, oarr[80]); ref {oarr} [1536-1536]
[m[m31.08.2022 - 16:58:08.151 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:08.152 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedInputStreamTest::testReadSingle has 6 assertions: 
 assertEquals("limit = length byte[" + i + "]", helloWorld[i], bounded.read()); ref {i, helloWorld, bounded} [41-41],
 assertEquals("limit = length end", -1, bounded.read()); ref {bounded} [43-43],
 assertEquals("limit > length byte[" + i + "]", helloWorld[i], bounded.read()); ref {i, helloWorld, bounded} [48-48],
 assertEquals("limit > length end", -1, bounded.read()); ref {bounded} [50-50],
 assertEquals("limit < length byte[" + i + "]", hello[i], bounded.read()); ref {i, hello, bounded} [55-55],
 assertEquals("limit < length end", -1, bounded.read()); ref {bounded} [57-57]
[m[m31.08.2022 - 16:58:08.152 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedInputStreamTest::testReadArray has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.152 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.152 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.ExtensionFileComparatorTest::testCaseSensitivity has 7 assertions: 
 /* test null as well */
assertTrue("sensitive file1 & file2 = 0", sensitive.compare(equalFile1, equalFile2) == 0); ref {equalFile2, equalFile1, sensitive} [48-48],
 assertTrue("sensitive file1 & file3 > 0", sensitive.compare(equalFile1, file3) > 0); ref {file3, equalFile1, sensitive} [49-49],
 assertTrue("sensitive file1 & less  > 0", sensitive.compare(equalFile1, lessFile) > 0); ref {lessFile, equalFile1, sensitive} [50-50],
 assertTrue("insensitive file1 & file2 = 0", insensitive.compare(equalFile1, equalFile2) == 0); ref {insensitive, equalFile2, equalFile1} [53-53],
 assertTrue("insensitive file1 & file3 = 0", insensitive.compare(equalFile1, file3) == 0); ref {insensitive, file3, equalFile1} [54-54],
 assertTrue("insensitive file1 & file4 > 0", insensitive.compare(equalFile1, lessFile) > 0); ref {lessFile, insensitive, equalFile1} [55-55],
 assertTrue("insensitive file3 & less  > 0", insensitive.compare(file3, lessFile) > 0); ref {lessFile, insensitive, file3} [56-56]
[m[m31.08.2022 - 16:58:08.154 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 16:58:08.154 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanSymlinksTestCase::testCleanDirWithSymlinkFile has 8 assertions: 
 assertTrue(realOuter.mkdirs()); ref {realOuter} [56-56],
 assertTrue(realInner.mkdirs()); ref {realInner} [59-59],
 assertEquals(1, realInner.list().length); ref {realInner.list().length, realInner} [63-63],
 assertEquals(2, realInner.list().length); ref {realInner.list().length, realInner} [71-71],
 // assert contents of the real directory were removed including the symlink
FileUtils.cleanDirectory(realOuter); ref {FileUtils, realOuter} [74-74],
 assertEquals(0, realOuter.list().length); ref {realOuter, realOuter.list().length} [75-75],
 // ensure that the contents of the symlink were NOT removed.
assertTrue(randomFile.exists()); ref {randomFile} [78-78],
 assertFalse(symlinkFile.exists()); ref {symlinkFile} [79-79]
[m[m31.08.2022 - 16:58:08.155 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanSymlinksTestCase::testCleanDirWithASymlinkDir has 9 assertions: 
 assertTrue(realOuter.mkdirs()); ref {realOuter} [91-91],
 assertTrue(realInner.mkdirs()); ref {realInner} [94-94],
 assertEquals(1, realInner.list().length); ref {realInner.list().length, realInner} [97-97],
 assertTrue(randomDirectory.mkdirs()); ref {randomDirectory} [100-100],
 assertEquals(1, randomDirectory.list().length); ref {randomDirectory.list().length, randomDirectory} [103-103],
 assertEquals(1, symlinkDirectory.list().length); ref {symlinkDirectory, symlinkDirectory.list().length} [108-108],
 // assert contents of the real directory were removed including the symlink
FileUtils.cleanDirectory(realOuter); ref {FileUtils, realOuter} [111-111],
 assertEquals(0, realOuter.list().length); ref {realOuter, realOuter.list().length} [112-112],
 // ensure that the contents of the symlink were NOT removed.
assertEquals("Contents of sym link should not have been removed", 1, randomDirectory.list().length); ref {randomDirectory.list().length, randomDirectory} [115-115]
[m[m31.08.2022 - 16:58:08.155 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanSymlinksTestCase::testCleanDirWithParentSymlinks has 10 assertions: 
 assertTrue(realParent.mkdirs()); ref {realParent} [126-126],
 assertTrue(realInner.mkdirs()); ref {realInner} [129-129],
 assertEquals(1, realInner.list().length); ref {realInner.list().length, realInner} [132-132],
 assertTrue(randomDirectory.mkdirs()); ref {randomDirectory} [135-135],
 assertEquals(1, randomDirectory.list().length); ref {randomDirectory.list().length, randomDirectory} [138-138],
 assertEquals(1, symlinkDirectory.list().length); ref {symlinkDirectory, symlinkDirectory.list().length} [143-143],
 // assert contents of the real directory were removed including the symlink
// should clean the contents of this but not recurse into other links
FileUtils.cleanDirectory(symlinkParentDirectory); ref {FileUtils, symlinkParentDirectory} [149-149],
 assertEquals(0, symlinkParentDirectory.list().length); ref {symlinkParentDirectory, symlinkParentDirectory.list().length} [150-150],
 assertEquals(0, realParent.list().length); ref {realParent.list().length, realParent} [151-151],
 // ensure that the contents of the symlink were NOT removed.
assertEquals("Contents of sym link should not have been removed", 1, randomDirectory.list().length); ref {randomDirectory.list().length, randomDirectory} [154-154]
[m[m31.08.2022 - 16:58:08.155 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanSymlinksTestCase::testStillClearsIfGivenDirectoryIsASymlink has 4 assertions: 
 assertTrue(randomDirectory.mkdirs()); ref {randomDirectory} [165-165],
 assertEquals(1, randomDirectory.list().length); ref {randomDirectory.list().length, randomDirectory} [168-168],
 assertEquals(0, symlinkDirectory.list().length); ref {symlinkDirectory, symlinkDirectory.list().length} [174-174],
 assertEquals(0, randomDirectory.list().length); ref {randomDirectory.list().length, randomDirectory} [175-175]
[m[m31.08.2022 - 16:58:08.155 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanSymlinksTestCase::testIdentifiesSymlinkDir has 3 assertions: 
 assertTrue(randomDirectory.mkdirs()); ref {randomDirectory} [187-187],
 assertTrue(FileUtils.isSymlink(symlinkDirectory)); ref {FileUtils, symlinkDirectory} [192-192],
 assertFalse(FileUtils.isSymlink(randomDirectory)); ref {FileUtils, randomDirectory} [193-193]
[m[m31.08.2022 - 16:58:08.155 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanSymlinksTestCase::testIdentifiesSymlinkFile has 2 assertions: 
 assertTrue(FileUtils.isSymlink(symlinkFile)); ref {symlinkFile, FileUtils} [209-209],
 assertFalse(FileUtils.isSymlink(randomFile)); ref {randomFile, FileUtils} [210-210]
[m[m31.08.2022 - 16:58:08.155 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanSymlinksTestCase::testIdentifiesBrokenSymlinkFile has 4 assertions: 
 assertTrue(FileUtils.isSymlink(symlinkFile)); ref {symlinkFile, FileUtils} [227-227],
 assertFalse(FileUtils.isSymlink(noexistFile)); ref {FileUtils, noexistFile} [228-228],
 assertFalse(FileUtils.isSymlink(noexistParentFile)); ref {FileUtils, noexistParentFile} [229-229],
 assertFalse(FileUtils.isSymlink(badSymlinkInPathFile)); ref {FileUtils, badSymlinkInPathFile} [230-230]
[m[m31.08.2022 - 16:58:08.155 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanSymlinksTestCase::testCorrectlyIdentifySymlinkWithParentSymLink has 4 assertions: 
 assertTrue(realParent.mkdirs()); ref {realParent} [241-241],
 assertTrue(realChild.mkdirs()); ref {realChild} [247-247],
 assertTrue(FileUtils.isSymlink(symlinkChild)); ref {symlinkChild, FileUtils} [252-252],
 assertFalse(FileUtils.isSymlink(realChild)); ref {FileUtils, realChild} [253-253]
[m[m31.08.2022 - 16:58:08.155 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.156 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 16:58:08.156 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ChunkedOutputStreamTest::write_four_chunks has 1 assertions: 
 assertEquals(4, numWrites.get()); ref {numWrites} [37-37]
[m[m31.08.2022 - 16:58:08.156 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ChunkedOutputStreamTest::negative_chunksize_not_permitted has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.156 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ChunkedOutputStreamTest::defaultConstructor has 1 assertions: 
 assertEquals(2, numWrites.get()); ref {numWrites} [53-53]
[m[m31.08.2022 - 16:58:08.156 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:08.156 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ReversedLinesFileReaderTestSimple::testUnsupportedEncodingUTF16 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.156 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ReversedLinesFileReaderTestSimple::testUnsupportedEncodingBig5 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.158 [INFO ] ParsingStrategy.parseTestSuite() - Found 9 test cases
[m[m31.08.2022 - 16:58:08.159 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileCleaningTrackerTestCase::testFileCleanerFile has 6 assertions: 
 assertFalse(testFile.exists()); ref {testFile} [95-95],
 assertTrue(testFile.exists()); ref {testFile} [97-97],
 assertEquals(0, theInstance.getTrackCount()); ref {theInstance} [99-99],
 assertEquals(1, theInstance.getTrackCount()); ref {theInstance} [101-101],
 assertEquals(0, theInstance.getTrackCount()); ref {theInstance} [110-110],
 assertEquals(showFailures(), false, new File(path).exists()); ref {path} [111-111]
[m[m31.08.2022 - 16:58:08.159 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileCleaningTrackerTestCase::testFileCleanerDirectory has 7 assertions: 
 assertTrue(testFile.exists()); ref {testFile} [117-117],
 assertTrue(getTestDirectory().exists()); ref {} [118-118],
 assertEquals(0, theInstance.getTrackCount()); ref {theInstance} [121-121],
 assertEquals(1, theInstance.getTrackCount()); ref {theInstance} [123-123],
 assertEquals(0, theInstance.getTrackCount()); ref {theInstance} [129-129],
 // not deleted, as dir not empty
assertTrue(testFile.exists()); ref {testFile} [130-130],
 // not deleted, as dir not empty
assertTrue(testFile.getParentFile().exists()); ref {testFile} [131-131]
[m[m31.08.2022 - 16:58:08.159 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileCleaningTrackerTestCase::testFileCleanerDirectory_NullStrategy has 7 assertions: 
 assertTrue(testFile.exists()); ref {testFile} [137-137],
 assertTrue(getTestDirectory().exists()); ref {} [138-138],
 assertEquals(0, theInstance.getTrackCount()); ref {theInstance} [141-141],
 assertEquals(1, theInstance.getTrackCount()); ref {theInstance} [143-143],
 assertEquals(0, theInstance.getTrackCount()); ref {theInstance} [149-149],
 // not deleted, as dir not empty
assertTrue(testFile.exists()); ref {testFile} [150-150],
 // not deleted, as dir not empty
assertTrue(testFile.getParentFile().exists()); ref {testFile} [151-151]
[m[m31.08.2022 - 16:58:08.159 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileCleaningTrackerTestCase::testFileCleanerDirectory_ForceStrategy has 7 assertions: 
 assertTrue(testFile.exists()); ref {testFile} [164-164],
 assertTrue(getTestDirectory().exists()); ref {} [165-165],
 assertEquals(0, theInstance.getTrackCount()); ref {theInstance} [168-168],
 assertEquals(1, theInstance.getTrackCount()); ref {theInstance} [170-170],
 assertEquals(0, theInstance.getTrackCount()); ref {theInstance} [177-177],
 assertEquals(showFailures(), false, new File(testFile.getPath()).exists()); ref {testFile} [178-178],
 assertEquals(showFailures(), false, testFile.getParentFile().exists()); ref {testFile} [179-179]
[m[m31.08.2022 - 16:58:08.159 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileCleaningTrackerTestCase::testFileCleanerNull has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.159 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileCleaningTrackerTestCase::testFileCleanerExitWhenFinishedFirst has 6 assertions: 
 assertFalse(theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [212-212],
 assertTrue(theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [214-214],
 assertEquals(null, theInstance.reaper); ref {theInstance, theInstance.reaper} [215-215],
 assertEquals(0, theInstance.getTrackCount()); ref {theInstance} [219-219],
 assertTrue(theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [220-220],
 assertEquals(null, theInstance.reaper); ref {theInstance, theInstance.reaper} [221-221]
[m[m31.08.2022 - 16:58:08.159 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileCleaningTrackerTestCase::testFileCleanerExitWhenFinished_NoTrackAfter has 5 assertions: 
 assertFalse(theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [226-226],
 assertTrue(theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [228-228],
 assertEquals(null, theInstance.reaper); ref {theInstance, theInstance.reaper} [229-229],
 assertTrue(theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [239-239],
 assertEquals(null, theInstance.reaper); ref {theInstance, theInstance.reaper} [240-240]
[m[m31.08.2022 - 16:58:08.159 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileCleaningTrackerTestCase::testFileCleanerExitWhenFinished1 has 13 assertions: 
 assertEquals("1-testFile exists: " + testFile, false, testFile.exists()); ref {testFile} [247-247],
 assertEquals("2-testFile exists", true, testFile.exists()); ref {testFile} [249-249],
 assertEquals("3-Track Count", 0, theInstance.getTrackCount()); ref {theInstance} [251-251],
 assertEquals("4-Track Count", 1, theInstance.getTrackCount()); ref {theInstance} [253-253],
 assertEquals("5-exitWhenFinished", false, theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [254-254],
 assertEquals("6-reaper.isAlive", true, theInstance.reaper.isAlive()); ref {theInstance, theInstance.reaper} [255-255],
 assertEquals("7-exitWhenFinished", false, theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [257-257],
 assertEquals("8-exitWhenFinished", true, theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [259-259],
 assertEquals("9-reaper.isAlive", true, theInstance.reaper.isAlive()); ref {theInstance, theInstance.reaper} [260-260],
 assertEquals("10-Track Count", 0, theInstance.getTrackCount()); ref {theInstance} [269-269],
 assertEquals("11-testFile exists " + showFailures(), false, new File(path).exists()); ref {path} [270-270],
 assertEquals("12-exitWhenFinished", true, theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [271-271],
 assertEquals("13-reaper.isAlive", false, theInstance.reaper.isAlive()); ref {theInstance, theInstance.reaper} [272-272]
[m[m31.08.2022 - 16:58:08.159 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileCleaningTrackerTestCase::testFileCleanerExitWhenFinished2 has 13 assertions: 
 assertFalse(testFile.exists()); ref {testFile} [279-279],
 assertTrue(testFile.exists()); ref {testFile} [281-281],
 assertEquals(0, theInstance.getTrackCount()); ref {theInstance} [283-283],
 assertEquals(1, theInstance.getTrackCount()); ref {theInstance} [285-285],
 assertFalse(theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [286-286],
 assertTrue(theInstance.reaper.isAlive()); ref {theInstance, theInstance.reaper} [287-287],
 assertEquals(0, theInstance.getTrackCount()); ref {theInstance} [296-296],
 assertEquals(showFailures(), false, new File(path).exists()); ref {path} [297-297],
 assertFalse(theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [298-298],
 assertTrue(theInstance.reaper.isAlive()); ref {theInstance, theInstance.reaper} [299-299],
 assertFalse(theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [301-301],
 assertTrue(theInstance.exitWhenFinished); ref {theInstance, theInstance.exitWhenFinished} [306-306],
 assertFalse(theInstance.reaper.isAlive()); ref {theInstance, theInstance.reaper} [307-307]
[m[m31.08.2022 - 16:58:08.161 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.161 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.HexDumpTest::testDump has 8 assertions: 
 assertEquals("array size mismatch", outputArray.length, actualOutput.length); ref {actualOutput, outputArray.length, actualOutput.length, outputArray} [81-82],
 assertEquals("array[ " + j + "] mismatch", outputArray[j], actualOutput[j]); ref {actualOutput, j, outputArray} [84-85],
 assertEquals("array size mismatch", outputArray.length, actualOutput.length); ref {actualOutput, outputArray.length, actualOutput.length, outputArray} [116-117],
 assertEquals("array[ " + j + "] mismatch", outputArray[j], actualOutput[j]); ref {actualOutput, j, outputArray} [119-120],
 assertEquals("array size mismatch", outputArray.length, actualOutput.length); ref {actualOutput, outputArray.length, actualOutput.length, outputArray} [151-152],
 assertEquals("array[ " + j + "] mismatch", outputArray[j], actualOutput[j]); ref {actualOutput, j, outputArray} [154-155],
 assertEquals("array size mismatch", outputArray.length, actualOutput.length); ref {actualOutput, outputArray.length, actualOutput.length, outputArray} [197-198],
 assertEquals("array[ " + j + "] mismatch", outputArray[j], actualOutput[j]); ref {actualOutput, j, outputArray} [200-201]
[m[m31.08.2022 - 16:58:08.162 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 16:58:08.162 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.BrokenOutputStreamTest::testWrite has 3 assertions: 
 assertEquals(exception, e); ref {exception, e} [49-49],
 assertEquals(exception, e); ref {exception, e} [56-56],
 assertEquals(exception, e); ref {exception, e} [63-63]
[m[m31.08.2022 - 16:58:08.162 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.BrokenOutputStreamTest::testFlush has 1 assertions: 
 assertEquals(exception, e); ref {exception, e} [73-73]
[m[m31.08.2022 - 16:58:08.162 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.BrokenOutputStreamTest::testClose has 1 assertions: 
 assertEquals(exception, e); ref {exception, e} [83-83]
[m[m31.08.2022 - 16:58:08.164 [INFO ] ParsingStrategy.parseTestSuite() - Found 6 test cases
[m[m31.08.2022 - 16:58:08.164 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.NullInputStreamTest::testRead has 7 assertions: 
 assertEquals("Check Size [" + i + "]", size - i, input.available()); ref {input, size, i} [41-41],
 assertEquals("Check Value [" + i + "]", i, input.read()); ref {input, i} [42-42],
 assertEquals("Available after contents all read", 0, input.available()); ref {input} [44-44],
 // Check availbale is zero after End of file
assertEquals("End of File", -1, input.read()); ref {input} [47-47],
 assertEquals("Available after End of File", 0, input.available()); ref {input} [48-48],
 assertEquals("Read after end of file", e.getMessage()); ref {e} [55-55],
 assertEquals("Available after close", size, input.available()); ref {input, size} [60-60]
[m[m31.08.2022 - 16:58:08.164 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.NullInputStreamTest::testReadByteArray has 8 assertions: 
 assertEquals("Read 1", bytes.length, count1); ref {count1, bytes, bytes.length} [70-70],
 assertEquals("Check Bytes 1", i, bytes[i]); ref {bytes, i} [72-72],
 assertEquals("Read 2", 5, count2); ref {count2} [77-77],
 assertEquals("Check Bytes 2", count1 + i, bytes[i]); ref {count1, bytes, i} [79-79],
 assertEquals("Read 3 (EOF)", -1, count3); ref {count3} [84-84],
 assertEquals("Read after end of file", e.getMessage()); ref {e} [91-91],
 assertEquals("Read 5", lth, count5); ref {lth, count5} [101-101],
 assertEquals("Check Bytes 2", i, bytes[i]); ref {bytes, i} [103-103]
[m[m31.08.2022 - 16:58:08.164 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.NullInputStreamTest::testEOFException has 2 assertions: 
 assertEquals("Read 1", 0, input.read()); ref {input} [110-110],
 assertEquals("Read 2", 1, input.read()); ref {input} [111-111]
[m[m31.08.2022 - 16:58:08.164 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.NullInputStreamTest::testMarkAndReset has 6 assertions: 
 assertTrue("Mark Should be Supported", input.markSupported()); ref {input} [127-127],
 assertEquals("No Mark IOException message", "No position has been marked", e.getMessage()); ref {e} [134-136],
 assertEquals("Read Before Mark [" + position + "]", position, input.read()); ref {input, position} [140-140],
 assertEquals("Read After Mark [" + i + "]", position + i, input.read()); ref {input, i, position} [148-148],
 assertEquals("Read After Reset [" + i + "]", position + i, input.read()); ref {input, i, position} [156-156],
 assertEquals("Read limit IOException message", "Marked position [" + position + "] is no longer valid - passed the read limit [" + readlimit + "]", e.getMessage()); ref {readlimit, e, position} [164-168]
[m[m31.08.2022 - 16:58:08.164 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.NullInputStreamTest::testMarkNotSupported has 3 assertions: 
 assertFalse("Mark Should NOT be Supported", input.markSupported()); ref {input} [176-176],
 assertEquals("mark() error message", "Mark not supported", e.getMessage()); ref {e} [182-182],
 assertEquals("reset() error message", "Mark not supported", e.getMessage()); ref {e} [189-189]
[m[m31.08.2022 - 16:58:08.164 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.NullInputStreamTest::testSkip has 7 assertions: 
 assertEquals("Read 1", 0, input.read()); ref {input} [197-197],
 assertEquals("Read 2", 1, input.read()); ref {input} [198-198],
 assertEquals("Skip 1", 5, input.skip(5)); ref {input} [199-199],
 assertEquals("Read 3", 7, input.read()); ref {input} [200-200],
 // only 2 left to skip
assertEquals("Skip 2", 2, input.skip(5)); ref {input} [201-201],
 // End of file
assertEquals("Skip 3 (EOF)", -1, input.skip(5)); ref {input} [202-202],
 assertEquals("Skip after EOF IOException message", "Skip after end of file", e.getMessage()); ref {e} [207-209]
[m[m31.08.2022 - 16:58:08.165 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m31.08.2022 - 16:58:08.165 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.LockableFileWriterTest::testFileLocked has 10 assertions: 
 assertTrue(file.exists()); ref {file} [68-68],
 assertTrue(lockFile.exists()); ref {lockFile} [69-69],
 assertTrue("Exception message does not start correctly. ", msg.startsWith("Can't write file, lock ")); ref {msg} [76-77],
 assertTrue(file.exists()); ref {file} [78-78],
 assertTrue(lockFile.exists()); ref {lockFile} [79-79],
 assertTrue("Exception message does not start correctly. ", msg.startsWith("Can't write file, lock ")); ref {msg} [87-88],
 assertTrue(file.exists()); ref {file} [89-89],
 assertTrue(lockFile.exists()); ref {lockFile} [90-90],
 assertTrue(file.exists()); ref {file} [93-93],
 assertFalse(lockFile.exists()); ref {lockFile} [94-94]
[m[m31.08.2022 - 16:58:08.166 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.LockableFileWriterTest::testAlternateLockDir has 7 assertions: 
 assertTrue(file.exists()); ref {file} [101-101],
 assertTrue(altLockFile.exists()); ref {altLockFile} [102-102],
 assertTrue("Exception message does not start correctly. ", msg.startsWith("Can't write file, lock ")); ref {msg} [109-110],
 assertTrue(file.exists()); ref {file} [111-111],
 assertTrue(altLockFile.exists()); ref {altLockFile} [112-112],
 assertTrue(file.exists()); ref {file} [115-115],
 assertFalse(altLockFile.exists()); ref {altLockFile} [116-116]
[m[m31.08.2022 - 16:58:08.166 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.LockableFileWriterTest::testFileNotLocked has 8 assertions: 
 assertTrue(file.exists()); ref {file} [123-123],
 assertTrue(lockFile.exists()); ref {lockFile} [124-124],
 assertTrue(file.exists()); ref {file} [126-126],
 assertFalse(lockFile.exists()); ref {lockFile} [127-127],
 assertTrue(file.exists()); ref {file} [131-131],
 assertTrue(lockFile.exists()); ref {lockFile} [132-132],
 assertTrue(file.exists()); ref {file} [134-134],
 assertFalse(lockFile.exists()); ref {lockFile} [135-135]
[m[m31.08.2022 - 16:58:08.166 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.LockableFileWriterTest::testConstructor_File_encoding_badEncoding has 4 assertions: 
 // expected
assertFalse(file.exists()); ref {file} [144-144],
 assertFalse(lockFile.exists()); ref {lockFile} [145-145],
 assertFalse(file.exists()); ref {file} [147-147],
 assertFalse(lockFile.exists()); ref {lockFile} [148-148]
[m[m31.08.2022 - 16:58:08.166 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.LockableFileWriterTest::testConstructor_File_directory has 4 assertions: 
 // expected
assertFalse(file.exists()); ref {file} [157-157],
 assertFalse(lockFile.exists()); ref {lockFile} [158-158],
 assertFalse(file.exists()); ref {file} [160-160],
 assertFalse(lockFile.exists()); ref {lockFile} [161-161]
[m[m31.08.2022 - 16:58:08.166 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.LockableFileWriterTest::testConstructor_File_nullFile has 4 assertions: 
 // expected
assertFalse(file.exists()); ref {file} [170-170],
 assertFalse(lockFile.exists()); ref {lockFile} [171-171],
 assertFalse(file.exists()); ref {file} [173-173],
 assertFalse(lockFile.exists()); ref {lockFile} [174-174]
[m[m31.08.2022 - 16:58:08.166 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.LockableFileWriterTest::testConstructor_fileName_nullFile has 4 assertions: 
 // expected
assertFalse(file.exists()); ref {file} [183-183],
 assertFalse(lockFile.exists()); ref {lockFile} [184-184],
 assertFalse(file.exists()); ref {file} [186-186],
 assertFalse(lockFile.exists()); ref {lockFile} [187-187]
[m[m31.08.2022 - 16:58:08.166 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.166 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile::testDataIntegrityWithBufferedReader has 1 assertions: 
 assertEquals(lineFromBufferedReader, line); ref {line, lineFromBufferedReader} [98-98]
[m[m31.08.2022 - 16:58:08.167 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.167 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.NullOutputStreamTest::testNull has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.167 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.169 [INFO ] ParsingStrategy.parseTestSuite() - Found 10 test cases
[m[m31.08.2022 - 16:58:08.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CountingInputStreamTest::testCounting has 5 assertions: 
 assertEquals(found, cis.getCount()); ref {found, cis} [51-51],
 assertEquals(found, cis.getCount()); ref {found, cis} [56-56],
 assertEquals(found, cis.getCount()); ref {found, cis} [59-59],
 assertEquals(found, cis.getCount()); ref {found, cis} [62-62],
 assertEquals(textResult, text); ref {textResult, text} [66-66]
[m[m31.08.2022 - 16:58:08.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CountingInputStreamTest::testLargeFiles_IO84 has 2 assertions: 
 assertEquals("getByteCount()", size, cis.getByteCount()); ref {size, cis} [100-100],
 assertEquals("resetByteCount()", size, cis.resetByteCount()); ref {size, cis} [101-101]
[m[m31.08.2022 - 16:58:08.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CountingInputStreamTest::testResetting has 2 assertions: 
 assertEquals(found, cis.getCount()); ref {found, cis} [114-114],
 assertEquals(found, count); ref {found, count} [118-118]
[m[m31.08.2022 - 16:58:08.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CountingInputStreamTest::testZeroLength1 has 2 assertions: 
 assertEquals(-1, found); ref {found} [128-128],
 assertEquals(0, cis.getCount()); ref {cis} [129-129]
[m[m31.08.2022 - 16:58:08.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CountingInputStreamTest::testZeroLength2 has 2 assertions: 
 assertEquals(-1, found); ref {found} [141-141],
 assertEquals(0, cis.getCount()); ref {cis} [142-142]
[m[m31.08.2022 - 16:58:08.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CountingInputStreamTest::testZeroLength3 has 2 assertions: 
 assertEquals(-1, found); ref {found} [154-154],
 assertEquals(0, cis.getCount()); ref {cis} [155-155]
[m[m31.08.2022 - 16:58:08.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CountingInputStreamTest::testEOF1 has 6 assertions: 
 assertEquals(0, found); ref {found} [165-165],
 assertEquals(1, cis.getCount()); ref {cis} [166-166],
 assertEquals(0, found); ref {found} [168-168],
 assertEquals(2, cis.getCount()); ref {cis} [169-169],
 assertEquals(-1, found); ref {found} [171-171],
 assertEquals(2, cis.getCount()); ref {cis} [172-172]
[m[m31.08.2022 - 16:58:08.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CountingInputStreamTest::testEOF2 has 2 assertions: 
 assertEquals(2, found); ref {found} [184-184],
 assertEquals(2, cis.getCount()); ref {cis} [185-185]
[m[m31.08.2022 - 16:58:08.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CountingInputStreamTest::testEOF3 has 2 assertions: 
 assertEquals(2, found); ref {found} [197-197],
 assertEquals(2, cis.getCount()); ref {cis} [198-198]
[m[m31.08.2022 - 16:58:08.169 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.CountingInputStreamTest::testSkipping has 4 assertions: 
 assertEquals(6, cis.skip(6)); ref {cis} [209-209],
 assertEquals(6, cis.getCount()); ref {cis} [210-210],
 assertEquals("World!", new String(result)); ref {result} [214-214],
 assertEquals(12, cis.getCount()); ref {cis} [215-215]
[m[m31.08.2022 - 16:58:08.170 [INFO ] ParsingStrategy.parseTestSuite() - Found 12 test cases
[m[m31.08.2022 - 16:58:08.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.XmlStreamWriterTest::testNoXmlHeader has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.XmlStreamWriterTest::testEmpty has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.XmlStreamWriterTest::testDefaultEncoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.XmlStreamWriterTest::testUTF8Encoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.XmlStreamWriterTest::testUTF16Encoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.XmlStreamWriterTest::testUTF16BEEncoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.XmlStreamWriterTest::testUTF16LEEncoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.XmlStreamWriterTest::testLatin1Encoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.XmlStreamWriterTest::testLatin7Encoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.XmlStreamWriterTest::testLatin15Encoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.XmlStreamWriterTest::testEUC_JPEncoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.171 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.XmlStreamWriterTest::testEBCDICEncoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.172 [INFO ] ParsingStrategy.parseTestSuite() - Found 12 test cases
[m[m31.08.2022 - 16:58:08.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedReaderTest::readTillEnd has 1 assertions: 
 assertEquals(-1, mr.read()); ref {mr} [44-44]
[m[m31.08.2022 - 16:58:08.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedReaderTest::shortReader has 1 assertions: 
 assertEquals(-1, mr.read()); ref {mr} [53-53]
[m[m31.08.2022 - 16:58:08.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedReaderTest::readMulti has 5 assertions: 
 assertEquals(3, read); ref {read} [66-66],
 assertEquals('0', cbuf[0]); ref {cbuf} [67-67],
 assertEquals('1', cbuf[1]); ref {cbuf} [68-68],
 assertEquals('2', cbuf[2]); ref {cbuf} [69-69],
 assertEquals('X', cbuf[3]); ref {cbuf} [70-70]
[m[m31.08.2022 - 16:58:08.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedReaderTest::readMultiWithOffset has 5 assertions: 
 assertEquals(2, read); ref {read} [82-82],
 assertEquals('X', cbuf[0]); ref {cbuf} [83-83],
 assertEquals('0', cbuf[1]); ref {cbuf} [84-84],
 assertEquals('1', cbuf[2]); ref {cbuf} [85-85],
 assertEquals('X', cbuf[3]); ref {cbuf} [86-86]
[m[m31.08.2022 - 16:58:08.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedReaderTest::markReset has 1 assertions: 
 assertEquals(-1, mr.read()); ref {mr} [101-101]
[m[m31.08.2022 - 16:58:08.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedReaderTest::markResetWithMarkOutsideBoundedReaderMax has 1 assertions: 
 assertEquals(-1, mr.read()); ref {mr} [113-113]
[m[m31.08.2022 - 16:58:08.173 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedReaderTest::markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset has 1 assertions: 
 assertEquals(-1, mr.read()); ref {mr} [124-124]
[m[m31.08.2022 - 16:58:08.173 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedReaderTest::markResetFromOffset1 has 2 assertions: 
 assertEquals(-1, mr.read()); ref {mr} [135-135],
 assertEquals(-1, mr.read()); ref {mr} [139-139]
[m[m31.08.2022 - 16:58:08.173 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedReaderTest::markResetMarkMore has 1 assertions: 
 assertEquals(-1, mr.read()); ref {mr} [154-154]
[m[m31.08.2022 - 16:58:08.173 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedReaderTest::skipTest has 1 assertions: 
 assertEquals(-1, mr.read()); ref {mr} [163-163]
[m[m31.08.2022 - 16:58:08.173 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedReaderTest::closeTest has 1 assertions: 
 assertTrue(closed.get()); ref {closed} [182-182]
[m[m31.08.2022 - 16:58:08.173 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BoundedReaderTest::testReadBytesEOF has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.196 [INFO ] ParsingStrategy.parseTestSuite() - Found 37 test cases
[m[m31.08.2022 - 16:58:08.197 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testNormalize has 138 assertions: 
 assertEquals(null, FilenameUtils.normalize(null)); ref {FilenameUtils} [101-101],
 assertEquals(null, FilenameUtils.normalize(":")); ref {FilenameUtils} [102-102],
 assertEquals(null, FilenameUtils.normalize("1:\\a\\b\\c.txt")); ref {FilenameUtils} [103-103],
 assertEquals(null, FilenameUtils.normalize("1:")); ref {FilenameUtils} [104-104],
 assertEquals(null, FilenameUtils.normalize("1:a")); ref {FilenameUtils} [105-105],
 assertEquals(null, FilenameUtils.normalize("\\\\\\a\\b\\c.txt")); ref {FilenameUtils} [106-106],
 assertEquals(null, FilenameUtils.normalize("\\\\a")); ref {FilenameUtils} [107-107],
 assertEquals("a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("a\\b/c.txt")); ref {FilenameUtils, SEP} [109-109],
 assertEquals("" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\a\\b/c.txt")); ref {FilenameUtils, SEP} [110-110],
 assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("C:\\a\\b/c.txt")); ref {FilenameUtils, SEP} [111-111],
 assertEquals("" + SEP + "" + SEP + "server" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\server\\a\\b/c.txt")); ref {FilenameUtils, SEP} [112-112],
 assertEquals("~" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("~\\a\\b/c.txt")); ref {FilenameUtils, SEP} [113-113],
 assertEquals("~user" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("~user\\a\\b/c.txt")); ref {FilenameUtils, SEP} [114-114],
 assertEquals("a" + SEP + "c", FilenameUtils.normalize("a/b/../c")); ref {FilenameUtils, SEP} [116-116],
 assertEquals("c", FilenameUtils.normalize("a/b/../../c")); ref {FilenameUtils} [117-117],
 assertEquals("c" + SEP, FilenameUtils.normalize("a/b/../../c/")); ref {FilenameUtils, SEP} [118-118],
 assertEquals(null, FilenameUtils.normalize("a/b/../../../c")); ref {FilenameUtils} [119-119],
 assertEquals("a" + SEP, FilenameUtils.normalize("a/b/..")); ref {FilenameUtils, SEP} [120-120],
 assertEquals("a" + SEP, FilenameUtils.normalize("a/b/../")); ref {FilenameUtils, SEP} [121-121],
 assertEquals("", FilenameUtils.normalize("a/b/../..")); ref {FilenameUtils} [122-122],
 assertEquals("", FilenameUtils.normalize("a/b/../../")); ref {FilenameUtils} [123-123],
 assertEquals(null, FilenameUtils.normalize("a/b/../../..")); ref {FilenameUtils} [124-124],
 assertEquals("a" + SEP + "d", FilenameUtils.normalize("a/b/../c/../d")); ref {FilenameUtils, SEP} [125-125],
 assertEquals("a" + SEP + "d" + SEP, FilenameUtils.normalize("a/b/../c/../d/")); ref {FilenameUtils, SEP} [126-126],
 assertEquals("a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("a/b//d")); ref {FilenameUtils, SEP} [127-127],
 assertEquals("a" + SEP + "b" + SEP, FilenameUtils.normalize("a/b/././.")); ref {FilenameUtils, SEP} [128-128],
 assertEquals("a" + SEP + "b" + SEP, FilenameUtils.normalize("a/b/./././")); ref {FilenameUtils, SEP} [129-129],
 assertEquals("a" + SEP, FilenameUtils.normalize("./a/")); ref {FilenameUtils, SEP} [130-130],
 assertEquals("a", FilenameUtils.normalize("./a")); ref {FilenameUtils} [131-131],
 assertEquals("", FilenameUtils.normalize("./")); ref {FilenameUtils} [132-132],
 assertEquals("", FilenameUtils.normalize(".")); ref {FilenameUtils} [133-133],
 assertEquals(null, FilenameUtils.normalize("../a")); ref {FilenameUtils} [134-134],
 assertEquals(null, FilenameUtils.normalize("..")); ref {FilenameUtils} [135-135],
 assertEquals("", FilenameUtils.normalize("")); ref {FilenameUtils} [136-136],
 assertEquals(SEP + "a", FilenameUtils.normalize("/a")); ref {FilenameUtils, SEP} [138-138],
 assertEquals(SEP + "a" + SEP, FilenameUtils.normalize("/a/")); ref {FilenameUtils, SEP} [139-139],
 assertEquals(SEP + "a" + SEP + "c", FilenameUtils.normalize("/a/b/../c")); ref {FilenameUtils, SEP} [140-140],
 assertEquals(SEP + "c", FilenameUtils.normalize("/a/b/../../c")); ref {FilenameUtils, SEP} [141-141],
 assertEquals(null, FilenameUtils.normalize("/a/b/../../../c")); ref {FilenameUtils} [142-142],
 assertEquals(SEP + "a" + SEP, FilenameUtils.normalize("/a/b/..")); ref {FilenameUtils, SEP} [143-143],
 assertEquals(SEP + "", FilenameUtils.normalize("/a/b/../..")); ref {FilenameUtils, SEP} [144-144],
 assertEquals(null, FilenameUtils.normalize("/a/b/../../..")); ref {FilenameUtils} [145-145],
 assertEquals(SEP + "a" + SEP + "d", FilenameUtils.normalize("/a/b/../c/../d")); ref {FilenameUtils, SEP} [146-146],
 assertEquals(SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("/a/b//d")); ref {FilenameUtils, SEP} [147-147],
 assertEquals(SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("/a/b/././.")); ref {FilenameUtils, SEP} [148-148],
 assertEquals(SEP + "a", FilenameUtils.normalize("/./a")); ref {FilenameUtils, SEP} [149-149],
 assertEquals(SEP + "", FilenameUtils.normalize("/./")); ref {FilenameUtils, SEP} [150-150],
 assertEquals(SEP + "", FilenameUtils.normalize("/.")); ref {FilenameUtils, SEP} [151-151],
 assertEquals(null, FilenameUtils.normalize("/../a")); ref {FilenameUtils} [152-152],
 assertEquals(null, FilenameUtils.normalize("/..")); ref {FilenameUtils} [153-153],
 assertEquals(SEP + "", FilenameUtils.normalize("/")); ref {FilenameUtils, SEP} [154-154],
 assertEquals("~" + SEP + "a", FilenameUtils.normalize("~/a")); ref {FilenameUtils, SEP} [156-156],
 assertEquals("~" + SEP + "a" + SEP, FilenameUtils.normalize("~/a/")); ref {FilenameUtils, SEP} [157-157],
 assertEquals("~" + SEP + "a" + SEP + "c", FilenameUtils.normalize("~/a/b/../c")); ref {FilenameUtils, SEP} [158-158],
 assertEquals("~" + SEP + "c", FilenameUtils.normalize("~/a/b/../../c")); ref {FilenameUtils, SEP} [159-159],
 assertEquals(null, FilenameUtils.normalize("~/a/b/../../../c")); ref {FilenameUtils} [160-160],
 assertEquals("~" + SEP + "a" + SEP, FilenameUtils.normalize("~/a/b/..")); ref {FilenameUtils, SEP} [161-161],
 assertEquals("~" + SEP + "", FilenameUtils.normalize("~/a/b/../..")); ref {FilenameUtils, SEP} [162-162],
 assertEquals(null, FilenameUtils.normalize("~/a/b/../../..")); ref {FilenameUtils} [163-163],
 assertEquals("~" + SEP + "a" + SEP + "d", FilenameUtils.normalize("~/a/b/../c/../d")); ref {FilenameUtils, SEP} [164-164],
 assertEquals("~" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("~/a/b//d")); ref {FilenameUtils, SEP} [165-165],
 assertEquals("~" + SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("~/a/b/././.")); ref {FilenameUtils, SEP} [166-166],
 assertEquals("~" + SEP + "a", FilenameUtils.normalize("~/./a")); ref {FilenameUtils, SEP} [167-167],
 assertEquals("~" + SEP, FilenameUtils.normalize("~/./")); ref {FilenameUtils, SEP} [168-168],
 assertEquals("~" + SEP, FilenameUtils.normalize("~/.")); ref {FilenameUtils, SEP} [169-169],
 assertEquals(null, FilenameUtils.normalize("~/../a")); ref {FilenameUtils} [170-170],
 assertEquals(null, FilenameUtils.normalize("~/..")); ref {FilenameUtils} [171-171],
 assertEquals("~" + SEP, FilenameUtils.normalize("~/")); ref {FilenameUtils, SEP} [172-172],
 assertEquals("~" + SEP, FilenameUtils.normalize("~")); ref {FilenameUtils, SEP} [173-173],
 assertEquals("~user" + SEP + "a", FilenameUtils.normalize("~user/a")); ref {FilenameUtils, SEP} [175-175],
 assertEquals("~user" + SEP + "a" + SEP, FilenameUtils.normalize("~user/a/")); ref {FilenameUtils, SEP} [176-176],
 assertEquals("~user" + SEP + "a" + SEP + "c", FilenameUtils.normalize("~user/a/b/../c")); ref {FilenameUtils, SEP} [177-177],
 assertEquals("~user" + SEP + "c", FilenameUtils.normalize("~user/a/b/../../c")); ref {FilenameUtils, SEP} [178-178],
 assertEquals(null, FilenameUtils.normalize("~user/a/b/../../../c")); ref {FilenameUtils} [179-179],
 assertEquals("~user" + SEP + "a" + SEP, FilenameUtils.normalize("~user/a/b/..")); ref {FilenameUtils, SEP} [180-180],
 assertEquals("~user" + SEP + "", FilenameUtils.normalize("~user/a/b/../..")); ref {FilenameUtils, SEP} [181-181],
 assertEquals(null, FilenameUtils.normalize("~user/a/b/../../..")); ref {FilenameUtils} [182-182],
 assertEquals("~user" + SEP + "a" + SEP + "d", FilenameUtils.normalize("~user/a/b/../c/../d")); ref {FilenameUtils, SEP} [183-183],
 assertEquals("~user" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("~user/a/b//d")); ref {FilenameUtils, SEP} [184-184],
 assertEquals("~user" + SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("~user/a/b/././.")); ref {FilenameUtils, SEP} [185-185],
 assertEquals("~user" + SEP + "a", FilenameUtils.normalize("~user/./a")); ref {FilenameUtils, SEP} [186-186],
 assertEquals("~user" + SEP + "", FilenameUtils.normalize("~user/./")); ref {FilenameUtils, SEP} [187-187],
 assertEquals("~user" + SEP + "", FilenameUtils.normalize("~user/.")); ref {FilenameUtils, SEP} [188-188],
 assertEquals(null, FilenameUtils.normalize("~user/../a")); ref {FilenameUtils} [189-189],
 assertEquals(null, FilenameUtils.normalize("~user/..")); ref {FilenameUtils} [190-190],
 assertEquals("~user" + SEP, FilenameUtils.normalize("~user/")); ref {FilenameUtils, SEP} [191-191],
 assertEquals("~user" + SEP, FilenameUtils.normalize("~user")); ref {FilenameUtils, SEP} [192-192],
 assertEquals("C:" + SEP + "a", FilenameUtils.normalize("C:/a")); ref {FilenameUtils, SEP} [194-194],
 assertEquals("C:" + SEP + "a" + SEP, FilenameUtils.normalize("C:/a/")); ref {FilenameUtils, SEP} [195-195],
 assertEquals("C:" + SEP + "a" + SEP + "c", FilenameUtils.normalize("C:/a/b/../c")); ref {FilenameUtils, SEP} [196-196],
 assertEquals("C:" + SEP + "c", FilenameUtils.normalize("C:/a/b/../../c")); ref {FilenameUtils, SEP} [197-197],
 assertEquals(null, FilenameUtils.normalize("C:/a/b/../../../c")); ref {FilenameUtils} [198-198],
 assertEquals("C:" + SEP + "a" + SEP, FilenameUtils.normalize("C:/a/b/..")); ref {FilenameUtils, SEP} [199-199],
 assertEquals("C:" + SEP + "", FilenameUtils.normalize("C:/a/b/../..")); ref {FilenameUtils, SEP} [200-200],
 assertEquals(null, FilenameUtils.normalize("C:/a/b/../../..")); ref {FilenameUtils} [201-201],
 assertEquals("C:" + SEP + "a" + SEP + "d", FilenameUtils.normalize("C:/a/b/../c/../d")); ref {FilenameUtils, SEP} [202-202],
 assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("C:/a/b//d")); ref {FilenameUtils, SEP} [203-203],
 assertEquals("C:" + SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("C:/a/b/././.")); ref {FilenameUtils, SEP} [204-204],
 assertEquals("C:" + SEP + "a", FilenameUtils.normalize("C:/./a")); ref {FilenameUtils, SEP} [205-205],
 assertEquals("C:" + SEP + "", FilenameUtils.normalize("C:/./")); ref {FilenameUtils, SEP} [206-206],
 assertEquals("C:" + SEP + "", FilenameUtils.normalize("C:/.")); ref {FilenameUtils, SEP} [207-207],
 assertEquals(null, FilenameUtils.normalize("C:/../a")); ref {FilenameUtils} [208-208],
 assertEquals(null, FilenameUtils.normalize("C:/..")); ref {FilenameUtils} [209-209],
 assertEquals("C:" + SEP + "", FilenameUtils.normalize("C:/")); ref {FilenameUtils, SEP} [210-210],
 assertEquals("C:" + "a", FilenameUtils.normalize("C:a")); ref {FilenameUtils} [212-212],
 assertEquals("C:" + "a" + SEP, FilenameUtils.normalize("C:a/")); ref {FilenameUtils, SEP} [213-213],
 assertEquals("C:" + "a" + SEP + "c", FilenameUtils.normalize("C:a/b/../c")); ref {FilenameUtils, SEP} [214-214],
 assertEquals("C:" + "c", FilenameUtils.normalize("C:a/b/../../c")); ref {FilenameUtils} [215-215],
 assertEquals(null, FilenameUtils.normalize("C:a/b/../../../c")); ref {FilenameUtils} [216-216],
 assertEquals("C:" + "a" + SEP, FilenameUtils.normalize("C:a/b/..")); ref {FilenameUtils, SEP} [217-217],
 assertEquals("C:" + "", FilenameUtils.normalize("C:a/b/../..")); ref {FilenameUtils} [218-218],
 assertEquals(null, FilenameUtils.normalize("C:a/b/../../..")); ref {FilenameUtils} [219-219],
 assertEquals("C:" + "a" + SEP + "d", FilenameUtils.normalize("C:a/b/../c/../d")); ref {FilenameUtils, SEP} [220-220],
 assertEquals("C:" + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("C:a/b//d")); ref {FilenameUtils, SEP} [221-221],
 assertEquals("C:" + "a" + SEP + "b" + SEP, FilenameUtils.normalize("C:a/b/././.")); ref {FilenameUtils, SEP} [222-222],
 assertEquals("C:" + "a", FilenameUtils.normalize("C:./a")); ref {FilenameUtils} [223-223],
 assertEquals("C:" + "", FilenameUtils.normalize("C:./")); ref {FilenameUtils} [224-224],
 assertEquals("C:" + "", FilenameUtils.normalize("C:.")); ref {FilenameUtils} [225-225],
 assertEquals(null, FilenameUtils.normalize("C:../a")); ref {FilenameUtils} [226-226],
 assertEquals(null, FilenameUtils.normalize("C:..")); ref {FilenameUtils} [227-227],
 assertEquals("C:" + "", FilenameUtils.normalize("C:")); ref {FilenameUtils} [228-228],
 assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalize("//server/a")); ref {FilenameUtils, SEP} [230-230],
 assertEquals(SEP + SEP + "server" + SEP + "a" + SEP, FilenameUtils.normalize("//server/a/")); ref {FilenameUtils, SEP} [231-231],
 assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "c", FilenameUtils.normalize("//server/a/b/../c")); ref {FilenameUtils, SEP} [232-232],
 assertEquals(SEP + SEP + "server" + SEP + "c", FilenameUtils.normalize("//server/a/b/../../c")); ref {FilenameUtils, SEP} [233-233],
 assertEquals(null, FilenameUtils.normalize("//server/a/b/../../../c")); ref {FilenameUtils} [234-234],
 assertEquals(SEP + SEP + "server" + SEP + "a" + SEP, FilenameUtils.normalize("//server/a/b/..")); ref {FilenameUtils, SEP} [235-235],
 assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/a/b/../..")); ref {FilenameUtils, SEP} [236-236],
 assertEquals(null, FilenameUtils.normalize("//server/a/b/../../..")); ref {FilenameUtils} [237-237],
 assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "d", FilenameUtils.normalize("//server/a/b/../c/../d")); ref {FilenameUtils, SEP} [238-238],
 assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("//server/a/b//d")); ref {FilenameUtils, SEP} [239-239],
 assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("//server/a/b/././.")); ref {FilenameUtils, SEP} [240-240],
 assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalize("//server/./a")); ref {FilenameUtils, SEP} [241-241],
 assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/./")); ref {FilenameUtils, SEP} [242-242],
 assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/.")); ref {FilenameUtils, SEP} [243-243],
 assertEquals(null, FilenameUtils.normalize("//server/../a")); ref {FilenameUtils} [244-244],
 assertEquals(null, FilenameUtils.normalize("//server/..")); ref {FilenameUtils} [245-245],
 assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/")); ref {FilenameUtils, SEP} [246-246]
[m[m31.08.2022 - 16:58:08.197 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testNormalize_with_nullbytes has 2 assertions: 
 assertEquals("a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("a\\b/c\u0000.txt")); ref {FilenameUtils, SEP} [252-252],
 assertEquals("a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\u0000a\\b/c.txt")); ref {FilenameUtils, SEP} [257-257]
[m[m31.08.2022 - 16:58:08.197 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testNormalizeUnixWin has 4 assertions: 
 // Normalize (Unix Separator)
assertEquals("/a/c/", FilenameUtils.normalize("/a/b/../c/", true)); ref {FilenameUtils} [266-266],
 assertEquals("/a/c/", FilenameUtils.normalize("\\a\\b\\..\\c\\", true)); ref {FilenameUtils} [267-267],
 // Normalize (Windows Separator)
assertEquals("\\a\\c\\", FilenameUtils.normalize("/a/b/../c/", false)); ref {FilenameUtils} [270-270],
 assertEquals("\\a\\c\\", FilenameUtils.normalize("\\a\\b\\..\\c\\", false)); ref {FilenameUtils} [271-271]
[m[m31.08.2022 - 16:58:08.198 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testNormalizeNoEndSeparator has 138 assertions: 
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator(null)); ref {FilenameUtils} [277-277],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator(":")); ref {FilenameUtils} [278-278],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("1:\\a\\b\\c.txt")); ref {FilenameUtils} [279-279],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("1:")); ref {FilenameUtils} [280-280],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("1:a")); ref {FilenameUtils} [281-281],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("\\\\\\a\\b\\c.txt")); ref {FilenameUtils} [282-282],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("\\\\a")); ref {FilenameUtils} [283-283],
 assertEquals("a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("a\\b/c.txt")); ref {FilenameUtils, SEP} [285-285],
 assertEquals("" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("\\a\\b/c.txt")); ref {FilenameUtils, SEP} [286-286],
 assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("C:\\a\\b/c.txt")); ref {FilenameUtils, SEP} [287-287],
 assertEquals("" + SEP + "" + SEP + "server" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("\\\\server\\a\\b/c.txt")); ref {FilenameUtils, SEP} [288-288],
 assertEquals("~" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("~\\a\\b/c.txt")); ref {FilenameUtils, SEP} [289-289],
 assertEquals("~user" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("~user\\a\\b/c.txt")); ref {FilenameUtils, SEP} [290-290],
 assertEquals("a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("a/b/../c")); ref {FilenameUtils, SEP} [292-292],
 assertEquals("c", FilenameUtils.normalizeNoEndSeparator("a/b/../../c")); ref {FilenameUtils} [293-293],
 assertEquals("c", FilenameUtils.normalizeNoEndSeparator("a/b/../../c/")); ref {FilenameUtils} [294-294],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("a/b/../../../c")); ref {FilenameUtils} [295-295],
 assertEquals("a", FilenameUtils.normalizeNoEndSeparator("a/b/..")); ref {FilenameUtils} [296-296],
 assertEquals("a", FilenameUtils.normalizeNoEndSeparator("a/b/../")); ref {FilenameUtils} [297-297],
 assertEquals("", FilenameUtils.normalizeNoEndSeparator("a/b/../..")); ref {FilenameUtils} [298-298],
 assertEquals("", FilenameUtils.normalizeNoEndSeparator("a/b/../../")); ref {FilenameUtils} [299-299],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("a/b/../../..")); ref {FilenameUtils} [300-300],
 assertEquals("a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("a/b/../c/../d")); ref {FilenameUtils, SEP} [301-301],
 assertEquals("a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("a/b/../c/../d/")); ref {FilenameUtils, SEP} [302-302],
 assertEquals("a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("a/b//d")); ref {FilenameUtils, SEP} [303-303],
 assertEquals("a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("a/b/././.")); ref {FilenameUtils, SEP} [304-304],
 assertEquals("a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("a/b/./././")); ref {FilenameUtils, SEP} [305-305],
 assertEquals("a", FilenameUtils.normalizeNoEndSeparator("./a/")); ref {FilenameUtils} [306-306],
 assertEquals("a", FilenameUtils.normalizeNoEndSeparator("./a")); ref {FilenameUtils} [307-307],
 assertEquals("", FilenameUtils.normalizeNoEndSeparator("./")); ref {FilenameUtils} [308-308],
 assertEquals("", FilenameUtils.normalizeNoEndSeparator(".")); ref {FilenameUtils} [309-309],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("../a")); ref {FilenameUtils} [310-310],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("..")); ref {FilenameUtils} [311-311],
 assertEquals("", FilenameUtils.normalizeNoEndSeparator("")); ref {FilenameUtils} [312-312],
 assertEquals(SEP + "a", FilenameUtils.normalizeNoEndSeparator("/a")); ref {FilenameUtils, SEP} [314-314],
 assertEquals(SEP + "a", FilenameUtils.normalizeNoEndSeparator("/a/")); ref {FilenameUtils, SEP} [315-315],
 assertEquals(SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("/a/b/../c")); ref {FilenameUtils, SEP} [316-316],
 assertEquals(SEP + "c", FilenameUtils.normalizeNoEndSeparator("/a/b/../../c")); ref {FilenameUtils, SEP} [317-317],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("/a/b/../../../c")); ref {FilenameUtils} [318-318],
 assertEquals(SEP + "a", FilenameUtils.normalizeNoEndSeparator("/a/b/..")); ref {FilenameUtils, SEP} [319-319],
 assertEquals(SEP + "", FilenameUtils.normalizeNoEndSeparator("/a/b/../..")); ref {FilenameUtils, SEP} [320-320],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("/a/b/../../..")); ref {FilenameUtils} [321-321],
 assertEquals(SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("/a/b/../c/../d")); ref {FilenameUtils, SEP} [322-322],
 assertEquals(SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("/a/b//d")); ref {FilenameUtils, SEP} [323-323],
 assertEquals(SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("/a/b/././.")); ref {FilenameUtils, SEP} [324-324],
 assertEquals(SEP + "a", FilenameUtils.normalizeNoEndSeparator("/./a")); ref {FilenameUtils, SEP} [325-325],
 assertEquals(SEP + "", FilenameUtils.normalizeNoEndSeparator("/./")); ref {FilenameUtils, SEP} [326-326],
 assertEquals(SEP + "", FilenameUtils.normalizeNoEndSeparator("/.")); ref {FilenameUtils, SEP} [327-327],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("/../a")); ref {FilenameUtils} [328-328],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("/..")); ref {FilenameUtils} [329-329],
 assertEquals(SEP + "", FilenameUtils.normalizeNoEndSeparator("/")); ref {FilenameUtils, SEP} [330-330],
 assertEquals("~" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~/a")); ref {FilenameUtils, SEP} [332-332],
 assertEquals("~" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~/a/")); ref {FilenameUtils, SEP} [333-333],
 assertEquals("~" + SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("~/a/b/../c")); ref {FilenameUtils, SEP} [334-334],
 assertEquals("~" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("~/a/b/../../c")); ref {FilenameUtils, SEP} [335-335],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("~/a/b/../../../c")); ref {FilenameUtils} [336-336],
 assertEquals("~" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~/a/b/..")); ref {FilenameUtils, SEP} [337-337],
 assertEquals("~" + SEP + "", FilenameUtils.normalizeNoEndSeparator("~/a/b/../..")); ref {FilenameUtils, SEP} [338-338],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("~/a/b/../../..")); ref {FilenameUtils} [339-339],
 assertEquals("~" + SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("~/a/b/../c/../d")); ref {FilenameUtils, SEP} [340-340],
 assertEquals("~" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("~/a/b//d")); ref {FilenameUtils, SEP} [341-341],
 assertEquals("~" + SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("~/a/b/././.")); ref {FilenameUtils, SEP} [342-342],
 assertEquals("~" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~/./a")); ref {FilenameUtils, SEP} [343-343],
 assertEquals("~" + SEP, FilenameUtils.normalizeNoEndSeparator("~/./")); ref {FilenameUtils, SEP} [344-344],
 assertEquals("~" + SEP, FilenameUtils.normalizeNoEndSeparator("~/.")); ref {FilenameUtils, SEP} [345-345],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("~/../a")); ref {FilenameUtils} [346-346],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("~/..")); ref {FilenameUtils} [347-347],
 assertEquals("~" + SEP, FilenameUtils.normalizeNoEndSeparator("~/")); ref {FilenameUtils, SEP} [348-348],
 assertEquals("~" + SEP, FilenameUtils.normalizeNoEndSeparator("~")); ref {FilenameUtils, SEP} [349-349],
 assertEquals("~user" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~user/a")); ref {FilenameUtils, SEP} [351-351],
 assertEquals("~user" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~user/a/")); ref {FilenameUtils, SEP} [352-352],
 assertEquals("~user" + SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("~user/a/b/../c")); ref {FilenameUtils, SEP} [353-353],
 assertEquals("~user" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("~user/a/b/../../c")); ref {FilenameUtils, SEP} [354-354],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("~user/a/b/../../../c")); ref {FilenameUtils} [355-355],
 assertEquals("~user" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~user/a/b/..")); ref {FilenameUtils, SEP} [356-356],
 assertEquals("~user" + SEP + "", FilenameUtils.normalizeNoEndSeparator("~user/a/b/../..")); ref {FilenameUtils, SEP} [357-357],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("~user/a/b/../../..")); ref {FilenameUtils} [358-358],
 assertEquals("~user" + SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("~user/a/b/../c/../d")); ref {FilenameUtils, SEP} [359-359],
 assertEquals("~user" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("~user/a/b//d")); ref {FilenameUtils, SEP} [360-360],
 assertEquals("~user" + SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("~user/a/b/././.")); ref {FilenameUtils, SEP} [361-361],
 assertEquals("~user" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~user/./a")); ref {FilenameUtils, SEP} [362-362],
 assertEquals("~user" + SEP + "", FilenameUtils.normalizeNoEndSeparator("~user/./")); ref {FilenameUtils, SEP} [363-363],
 assertEquals("~user" + SEP + "", FilenameUtils.normalizeNoEndSeparator("~user/.")); ref {FilenameUtils, SEP} [364-364],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("~user/../a")); ref {FilenameUtils} [365-365],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("~user/..")); ref {FilenameUtils} [366-366],
 assertEquals("~user" + SEP, FilenameUtils.normalizeNoEndSeparator("~user/")); ref {FilenameUtils, SEP} [367-367],
 assertEquals("~user" + SEP, FilenameUtils.normalizeNoEndSeparator("~user")); ref {FilenameUtils, SEP} [368-368],
 assertEquals("C:" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("C:/a")); ref {FilenameUtils, SEP} [370-370],
 assertEquals("C:" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("C:/a/")); ref {FilenameUtils, SEP} [371-371],
 assertEquals("C:" + SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("C:/a/b/../c")); ref {FilenameUtils, SEP} [372-372],
 assertEquals("C:" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("C:/a/b/../../c")); ref {FilenameUtils, SEP} [373-373],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("C:/a/b/../../../c")); ref {FilenameUtils} [374-374],
 assertEquals("C:" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("C:/a/b/..")); ref {FilenameUtils, SEP} [375-375],
 assertEquals("C:" + SEP + "", FilenameUtils.normalizeNoEndSeparator("C:/a/b/../..")); ref {FilenameUtils, SEP} [376-376],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("C:/a/b/../../..")); ref {FilenameUtils} [377-377],
 assertEquals("C:" + SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("C:/a/b/../c/../d")); ref {FilenameUtils, SEP} [378-378],
 assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("C:/a/b//d")); ref {FilenameUtils, SEP} [379-379],
 assertEquals("C:" + SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("C:/a/b/././.")); ref {FilenameUtils, SEP} [380-380],
 assertEquals("C:" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("C:/./a")); ref {FilenameUtils, SEP} [381-381],
 assertEquals("C:" + SEP + "", FilenameUtils.normalizeNoEndSeparator("C:/./")); ref {FilenameUtils, SEP} [382-382],
 assertEquals("C:" + SEP + "", FilenameUtils.normalizeNoEndSeparator("C:/.")); ref {FilenameUtils, SEP} [383-383],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("C:/../a")); ref {FilenameUtils} [384-384],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("C:/..")); ref {FilenameUtils} [385-385],
 assertEquals("C:" + SEP + "", FilenameUtils.normalizeNoEndSeparator("C:/")); ref {FilenameUtils, SEP} [386-386],
 assertEquals("C:" + "a", FilenameUtils.normalizeNoEndSeparator("C:a")); ref {FilenameUtils} [388-388],
 assertEquals("C:" + "a", FilenameUtils.normalizeNoEndSeparator("C:a/")); ref {FilenameUtils} [389-389],
 assertEquals("C:" + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("C:a/b/../c")); ref {FilenameUtils, SEP} [390-390],
 assertEquals("C:" + "c", FilenameUtils.normalizeNoEndSeparator("C:a/b/../../c")); ref {FilenameUtils} [391-391],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("C:a/b/../../../c")); ref {FilenameUtils} [392-392],
 assertEquals("C:" + "a", FilenameUtils.normalizeNoEndSeparator("C:a/b/..")); ref {FilenameUtils} [393-393],
 assertEquals("C:" + "", FilenameUtils.normalizeNoEndSeparator("C:a/b/../..")); ref {FilenameUtils} [394-394],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("C:a/b/../../..")); ref {FilenameUtils} [395-395],
 assertEquals("C:" + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("C:a/b/../c/../d")); ref {FilenameUtils, SEP} [396-396],
 assertEquals("C:" + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("C:a/b//d")); ref {FilenameUtils, SEP} [397-397],
 assertEquals("C:" + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("C:a/b/././.")); ref {FilenameUtils, SEP} [398-398],
 assertEquals("C:" + "a", FilenameUtils.normalizeNoEndSeparator("C:./a")); ref {FilenameUtils} [399-399],
 assertEquals("C:" + "", FilenameUtils.normalizeNoEndSeparator("C:./")); ref {FilenameUtils} [400-400],
 assertEquals("C:" + "", FilenameUtils.normalizeNoEndSeparator("C:.")); ref {FilenameUtils} [401-401],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("C:../a")); ref {FilenameUtils} [402-402],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("C:..")); ref {FilenameUtils} [403-403],
 assertEquals("C:" + "", FilenameUtils.normalizeNoEndSeparator("C:")); ref {FilenameUtils} [404-404],
 assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("//server/a")); ref {FilenameUtils, SEP} [406-406],
 assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("//server/a/")); ref {FilenameUtils, SEP} [407-407],
 assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("//server/a/b/../c")); ref {FilenameUtils, SEP} [408-408],
 assertEquals(SEP + SEP + "server" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("//server/a/b/../../c")); ref {FilenameUtils, SEP} [409-409],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("//server/a/b/../../../c")); ref {FilenameUtils} [410-410],
 assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("//server/a/b/..")); ref {FilenameUtils, SEP} [411-411],
 assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalizeNoEndSeparator("//server/a/b/../..")); ref {FilenameUtils, SEP} [412-412],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("//server/a/b/../../..")); ref {FilenameUtils} [413-413],
 assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("//server/a/b/../c/../d")); ref {FilenameUtils, SEP} [414-414],
 assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("//server/a/b//d")); ref {FilenameUtils, SEP} [415-415],
 assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("//server/a/b/././.")); ref {FilenameUtils, SEP} [416-416],
 assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("//server/./a")); ref {FilenameUtils, SEP} [417-417],
 assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalizeNoEndSeparator("//server/./")); ref {FilenameUtils, SEP} [418-418],
 assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalizeNoEndSeparator("//server/.")); ref {FilenameUtils, SEP} [419-419],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("//server/../a")); ref {FilenameUtils} [420-420],
 assertEquals(null, FilenameUtils.normalizeNoEndSeparator("//server/..")); ref {FilenameUtils} [421-421],
 assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalizeNoEndSeparator("//server/")); ref {FilenameUtils, SEP} [422-422]
[m[m31.08.2022 - 16:58:08.198 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testNormalizeNoEndSeparatorUnixWin has 4 assertions: 
 // Normalize (Unix Separator)
assertEquals("/a/c", FilenameUtils.normalizeNoEndSeparator("/a/b/../c/", true)); ref {FilenameUtils} [429-429],
 assertEquals("/a/c", FilenameUtils.normalizeNoEndSeparator("\\a\\b\\..\\c\\", true)); ref {FilenameUtils} [430-430],
 // Normalize (Windows Separator)
assertEquals("\\a\\c", FilenameUtils.normalizeNoEndSeparator("/a/b/../c/", false)); ref {FilenameUtils} [433-433],
 assertEquals("\\a\\c", FilenameUtils.normalizeNoEndSeparator("\\a\\b\\..\\c\\", false)); ref {FilenameUtils} [434-434]
[m[m31.08.2022 - 16:58:08.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testConcat has 29 assertions: 
 assertEquals(null, FilenameUtils.concat("", null)); ref {FilenameUtils} [440-440],
 assertEquals(null, FilenameUtils.concat(null, null)); ref {FilenameUtils} [441-441],
 assertEquals(null, FilenameUtils.concat(null, "")); ref {FilenameUtils} [442-442],
 assertEquals(null, FilenameUtils.concat(null, "a")); ref {FilenameUtils} [443-443],
 assertEquals(SEP + "a", FilenameUtils.concat(null, "/a")); ref {FilenameUtils, SEP} [444-444],
 // invalid prefix
assertEquals(null, FilenameUtils.concat("", ":")); ref {FilenameUtils} [446-446],
 // invalid prefix
assertEquals(null, FilenameUtils.concat(":", "")); ref {FilenameUtils} [447-447],
 assertEquals("f" + SEP, FilenameUtils.concat("", "f/")); ref {FilenameUtils, SEP} [449-449],
 assertEquals("f", FilenameUtils.concat("", "f")); ref {FilenameUtils} [450-450],
 assertEquals("a" + SEP + "f" + SEP, FilenameUtils.concat("a/", "f/")); ref {FilenameUtils, SEP} [451-451],
 assertEquals("a" + SEP + "f", FilenameUtils.concat("a", "f")); ref {FilenameUtils, SEP} [452-452],
 assertEquals("a" + SEP + "b" + SEP + "f" + SEP, FilenameUtils.concat("a/b/", "f/")); ref {FilenameUtils, SEP} [453-453],
 assertEquals("a" + SEP + "b" + SEP + "f", FilenameUtils.concat("a/b", "f")); ref {FilenameUtils, SEP} [454-454],
 assertEquals("a" + SEP + "f" + SEP, FilenameUtils.concat("a/b/", "../f/")); ref {FilenameUtils, SEP} [456-456],
 assertEquals("a" + SEP + "f", FilenameUtils.concat("a/b", "../f")); ref {FilenameUtils, SEP} [457-457],
 assertEquals("a" + SEP + "c" + SEP + "g" + SEP, FilenameUtils.concat("a/b/../c/", "f/../g/")); ref {FilenameUtils, SEP} [458-458],
 assertEquals("a" + SEP + "c" + SEP + "g", FilenameUtils.concat("a/b/../c", "f/../g")); ref {FilenameUtils, SEP} [459-459],
 assertEquals("a" + SEP + "c.txt" + SEP + "f", FilenameUtils.concat("a/c.txt", "f")); ref {FilenameUtils, SEP} [461-461],
 assertEquals(SEP + "f" + SEP, FilenameUtils.concat("", "/f/")); ref {FilenameUtils, SEP} [463-463],
 assertEquals(SEP + "f", FilenameUtils.concat("", "/f")); ref {FilenameUtils, SEP} [464-464],
 assertEquals(SEP + "f" + SEP, FilenameUtils.concat("a/", "/f/")); ref {FilenameUtils, SEP} [465-465],
 assertEquals(SEP + "f", FilenameUtils.concat("a", "/f")); ref {FilenameUtils, SEP} [466-466],
 assertEquals(SEP + "c" + SEP + "d", FilenameUtils.concat("a/b/", "/c/d")); ref {FilenameUtils, SEP} [468-468],
 assertEquals("C:c" + SEP + "d", FilenameUtils.concat("a/b/", "C:c/d")); ref {FilenameUtils, SEP} [469-469],
 assertEquals("C:" + SEP + "c" + SEP + "d", FilenameUtils.concat("a/b/", "C:/c/d")); ref {FilenameUtils, SEP} [470-470],
 assertEquals("~" + SEP + "c" + SEP + "d", FilenameUtils.concat("a/b/", "~/c/d")); ref {FilenameUtils, SEP} [471-471],
 assertEquals("~user" + SEP + "c" + SEP + "d", FilenameUtils.concat("a/b/", "~user/c/d")); ref {FilenameUtils, SEP} [472-472],
 assertEquals("~" + SEP, FilenameUtils.concat("a/b/", "~")); ref {FilenameUtils, SEP} [473-473],
 assertEquals("~user" + SEP, FilenameUtils.concat("a/b/", "~user")); ref {FilenameUtils, SEP} [474-474]
[m[m31.08.2022 - 16:58:08.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testSeparatorsToUnix has 6 assertions: 
 assertEquals(null, FilenameUtils.separatorsToUnix(null)); ref {FilenameUtils} [480-480],
 assertEquals("/a/b/c", FilenameUtils.separatorsToUnix("/a/b/c")); ref {FilenameUtils} [481-481],
 assertEquals("/a/b/c.txt", FilenameUtils.separatorsToUnix("/a/b/c.txt")); ref {FilenameUtils} [482-482],
 assertEquals("/a/b/c", FilenameUtils.separatorsToUnix("/a/b\\c")); ref {FilenameUtils} [483-483],
 assertEquals("/a/b/c", FilenameUtils.separatorsToUnix("\\a\\b\\c")); ref {FilenameUtils} [484-484],
 assertEquals("D:/a/b/c", FilenameUtils.separatorsToUnix("D:\\a\\b\\c")); ref {FilenameUtils} [485-485]
[m[m31.08.2022 - 16:58:08.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testSeparatorsToWindows has 6 assertions: 
 assertEquals(null, FilenameUtils.separatorsToWindows(null)); ref {FilenameUtils} [490-490],
 assertEquals("\\a\\b\\c", FilenameUtils.separatorsToWindows("\\a\\b\\c")); ref {FilenameUtils} [491-491],
 assertEquals("\\a\\b\\c.txt", FilenameUtils.separatorsToWindows("\\a\\b\\c.txt")); ref {FilenameUtils} [492-492],
 assertEquals("\\a\\b\\c", FilenameUtils.separatorsToWindows("\\a\\b/c")); ref {FilenameUtils} [493-493],
 assertEquals("\\a\\b\\c", FilenameUtils.separatorsToWindows("/a/b/c")); ref {FilenameUtils} [494-494],
 assertEquals("D:\\a\\b\\c", FilenameUtils.separatorsToWindows("D:/a/b/c")); ref {FilenameUtils} [495-495]
[m[m31.08.2022 - 16:58:08.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testSeparatorsToSystem has 12 assertions: 
 assertEquals(null, FilenameUtils.separatorsToSystem(null)); ref {FilenameUtils} [501-501],
 assertEquals("\\a\\b\\c", FilenameUtils.separatorsToSystem("\\a\\b\\c")); ref {FilenameUtils} [502-502],
 assertEquals("\\a\\b\\c.txt", FilenameUtils.separatorsToSystem("\\a\\b\\c.txt")); ref {FilenameUtils} [503-503],
 assertEquals("\\a\\b\\c", FilenameUtils.separatorsToSystem("\\a\\b/c")); ref {FilenameUtils} [504-504],
 assertEquals("\\a\\b\\c", FilenameUtils.separatorsToSystem("/a/b/c")); ref {FilenameUtils} [505-505],
 assertEquals("D:\\a\\b\\c", FilenameUtils.separatorsToSystem("D:/a/b/c")); ref {FilenameUtils} [506-506],
 assertEquals(null, FilenameUtils.separatorsToSystem(null)); ref {FilenameUtils} [508-508],
 assertEquals("/a/b/c", FilenameUtils.separatorsToSystem("/a/b/c")); ref {FilenameUtils} [509-509],
 assertEquals("/a/b/c.txt", FilenameUtils.separatorsToSystem("/a/b/c.txt")); ref {FilenameUtils} [510-510],
 assertEquals("/a/b/c", FilenameUtils.separatorsToSystem("/a/b\\c")); ref {FilenameUtils} [511-511],
 assertEquals("/a/b/c", FilenameUtils.separatorsToSystem("\\a\\b\\c")); ref {FilenameUtils} [512-512],
 assertEquals("D:/a/b/c", FilenameUtils.separatorsToSystem("D:\\a\\b\\c")); ref {FilenameUtils} [513-513]
[m[m31.08.2022 - 16:58:08.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetPrefixLength has 37 assertions: 
 assertEquals(-1, FilenameUtils.getPrefixLength(null)); ref {FilenameUtils} [520-520],
 assertEquals(-1, FilenameUtils.getPrefixLength(":")); ref {FilenameUtils} [521-521],
 assertEquals(-1, FilenameUtils.getPrefixLength("1:\\a\\b\\c.txt")); ref {FilenameUtils} [522-522],
 assertEquals(-1, FilenameUtils.getPrefixLength("1:")); ref {FilenameUtils} [523-523],
 assertEquals(-1, FilenameUtils.getPrefixLength("1:a")); ref {FilenameUtils} [524-524],
 assertEquals(-1, FilenameUtils.getPrefixLength("\\\\\\a\\b\\c.txt")); ref {FilenameUtils} [525-525],
 assertEquals(-1, FilenameUtils.getPrefixLength("\\\\a")); ref {FilenameUtils} [526-526],
 assertEquals(0, FilenameUtils.getPrefixLength("")); ref {FilenameUtils} [528-528],
 assertEquals(1, FilenameUtils.getPrefixLength("\\")); ref {FilenameUtils} [529-529],
 assertEquals(2, FilenameUtils.getPrefixLength("C:")); ref {FilenameUtils} [530-530],
 assertEquals(3, FilenameUtils.getPrefixLength("C:\\")); ref {FilenameUtils} [531-531],
 assertEquals(9, FilenameUtils.getPrefixLength("//server/")); ref {FilenameUtils} [532-532],
 assertEquals(2, FilenameUtils.getPrefixLength("~")); ref {FilenameUtils} [533-533],
 assertEquals(2, FilenameUtils.getPrefixLength("~/")); ref {FilenameUtils} [534-534],
 assertEquals(6, FilenameUtils.getPrefixLength("~user")); ref {FilenameUtils} [535-535],
 assertEquals(6, FilenameUtils.getPrefixLength("~user/")); ref {FilenameUtils} [536-536],
 assertEquals(0, FilenameUtils.getPrefixLength("a\\b\\c.txt")); ref {FilenameUtils} [538-538],
 assertEquals(1, FilenameUtils.getPrefixLength("\\a\\b\\c.txt")); ref {FilenameUtils} [539-539],
 assertEquals(2, FilenameUtils.getPrefixLength("C:a\\b\\c.txt")); ref {FilenameUtils} [540-540],
 assertEquals(3, FilenameUtils.getPrefixLength("C:\\a\\b\\c.txt")); ref {FilenameUtils} [541-541],
 assertEquals(9, FilenameUtils.getPrefixLength("\\\\server\\a\\b\\c.txt")); ref {FilenameUtils} [542-542],
 assertEquals(0, FilenameUtils.getPrefixLength("a/b/c.txt")); ref {FilenameUtils} [544-544],
 assertEquals(1, FilenameUtils.getPrefixLength("/a/b/c.txt")); ref {FilenameUtils} [545-545],
 assertEquals(3, FilenameUtils.getPrefixLength("C:/a/b/c.txt")); ref {FilenameUtils} [546-546],
 assertEquals(9, FilenameUtils.getPrefixLength("//server/a/b/c.txt")); ref {FilenameUtils} [547-547],
 assertEquals(2, FilenameUtils.getPrefixLength("~/a/b/c.txt")); ref {FilenameUtils} [548-548],
 assertEquals(6, FilenameUtils.getPrefixLength("~user/a/b/c.txt")); ref {FilenameUtils} [549-549],
 assertEquals(0, FilenameUtils.getPrefixLength("a\\b\\c.txt")); ref {FilenameUtils} [551-551],
 assertEquals(1, FilenameUtils.getPrefixLength("\\a\\b\\c.txt")); ref {FilenameUtils} [552-552],
 assertEquals(2, FilenameUtils.getPrefixLength("~\\a\\b\\c.txt")); ref {FilenameUtils} [553-553],
 assertEquals(6, FilenameUtils.getPrefixLength("~user\\a\\b\\c.txt")); ref {FilenameUtils} [554-554],
 assertEquals(9, FilenameUtils.getPrefixLength("//server/a/b/c.txt")); ref {FilenameUtils} [556-556],
 assertEquals(-1, FilenameUtils.getPrefixLength("\\\\\\a\\b\\c.txt")); ref {FilenameUtils} [557-557],
 assertEquals(-1, FilenameUtils.getPrefixLength("///a/b/c.txt")); ref {FilenameUtils} [558-558],
 assertEquals(1, FilenameUtils.getPrefixLength("/:foo")); ref {FilenameUtils} [560-560],
 assertEquals(1, FilenameUtils.getPrefixLength("/:/")); ref {FilenameUtils} [561-561],
 assertEquals(1, FilenameUtils.getPrefixLength("/:::::::.txt")); ref {FilenameUtils} [562-562]
[m[m31.08.2022 - 16:58:08.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testIndexOfLastSeparator has 4 assertions: 
 assertEquals(-1, FilenameUtils.indexOfLastSeparator(null)); ref {FilenameUtils} [567-567],
 assertEquals(-1, FilenameUtils.indexOfLastSeparator("noseperator.inthispath")); ref {FilenameUtils} [568-568],
 assertEquals(3, FilenameUtils.indexOfLastSeparator("a/b/c")); ref {FilenameUtils} [569-569],
 assertEquals(3, FilenameUtils.indexOfLastSeparator("a\\b\\c")); ref {FilenameUtils} [570-570]
[m[m31.08.2022 - 16:58:08.199 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testIndexOfExtension has 8 assertions: 
 assertEquals(-1, FilenameUtils.indexOfExtension(null)); ref {FilenameUtils} [575-575],
 assertEquals(-1, FilenameUtils.indexOfExtension("file")); ref {FilenameUtils} [576-576],
 assertEquals(4, FilenameUtils.indexOfExtension("file.txt")); ref {FilenameUtils} [577-577],
 assertEquals(13, FilenameUtils.indexOfExtension("a.txt/b.txt/c.txt")); ref {FilenameUtils} [578-578],
 assertEquals(-1, FilenameUtils.indexOfExtension("a/b/c")); ref {FilenameUtils} [579-579],
 assertEquals(-1, FilenameUtils.indexOfExtension("a\\b\\c")); ref {FilenameUtils} [580-580],
 assertEquals(-1, FilenameUtils.indexOfExtension("a/b.notextension/c")); ref {FilenameUtils} [581-581],
 assertEquals(-1, FilenameUtils.indexOfExtension("a\\b.notextension\\c")); ref {FilenameUtils} [582-582]
[m[m31.08.2022 - 16:58:08.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetPrefix has 30 assertions: 
 assertEquals(null, FilenameUtils.getPrefix(null)); ref {FilenameUtils} [588-588],
 assertEquals(null, FilenameUtils.getPrefix(":")); ref {FilenameUtils} [589-589],
 assertEquals(null, FilenameUtils.getPrefix("1:\\a\\b\\c.txt")); ref {FilenameUtils} [590-590],
 assertEquals(null, FilenameUtils.getPrefix("1:")); ref {FilenameUtils} [591-591],
 assertEquals(null, FilenameUtils.getPrefix("1:a")); ref {FilenameUtils} [592-592],
 assertEquals(null, FilenameUtils.getPrefix("\\\\\\a\\b\\c.txt")); ref {FilenameUtils} [593-593],
 assertEquals(null, FilenameUtils.getPrefix("\\\\a")); ref {FilenameUtils} [594-594],
 assertEquals("", FilenameUtils.getPrefix("")); ref {FilenameUtils} [596-596],
 assertEquals("\\", FilenameUtils.getPrefix("\\")); ref {FilenameUtils} [597-597],
 assertEquals("C:", FilenameUtils.getPrefix("C:")); ref {FilenameUtils} [598-598],
 assertEquals("C:\\", FilenameUtils.getPrefix("C:\\")); ref {FilenameUtils} [599-599],
 assertEquals("//server/", FilenameUtils.getPrefix("//server/")); ref {FilenameUtils} [600-600],
 assertEquals("~/", FilenameUtils.getPrefix("~")); ref {FilenameUtils} [601-601],
 assertEquals("~/", FilenameUtils.getPrefix("~/")); ref {FilenameUtils} [602-602],
 assertEquals("~user/", FilenameUtils.getPrefix("~user")); ref {FilenameUtils} [603-603],
 assertEquals("~user/", FilenameUtils.getPrefix("~user/")); ref {FilenameUtils} [604-604],
 assertEquals("", FilenameUtils.getPrefix("a\\b\\c.txt")); ref {FilenameUtils} [606-606],
 assertEquals("\\", FilenameUtils.getPrefix("\\a\\b\\c.txt")); ref {FilenameUtils} [607-607],
 assertEquals("C:\\", FilenameUtils.getPrefix("C:\\a\\b\\c.txt")); ref {FilenameUtils} [608-608],
 assertEquals("\\\\server\\", FilenameUtils.getPrefix("\\\\server\\a\\b\\c.txt")); ref {FilenameUtils} [609-609],
 assertEquals("", FilenameUtils.getPrefix("a/b/c.txt")); ref {FilenameUtils} [611-611],
 assertEquals("/", FilenameUtils.getPrefix("/a/b/c.txt")); ref {FilenameUtils} [612-612],
 assertEquals("C:/", FilenameUtils.getPrefix("C:/a/b/c.txt")); ref {FilenameUtils} [613-613],
 assertEquals("//server/", FilenameUtils.getPrefix("//server/a/b/c.txt")); ref {FilenameUtils} [614-614],
 assertEquals("~/", FilenameUtils.getPrefix("~/a/b/c.txt")); ref {FilenameUtils} [615-615],
 assertEquals("~user/", FilenameUtils.getPrefix("~user/a/b/c.txt")); ref {FilenameUtils} [616-616],
 assertEquals("", FilenameUtils.getPrefix("a\\b\\c.txt")); ref {FilenameUtils} [618-618],
 assertEquals("\\", FilenameUtils.getPrefix("\\a\\b\\c.txt")); ref {FilenameUtils} [619-619],
 assertEquals("~\\", FilenameUtils.getPrefix("~\\a\\b\\c.txt")); ref {FilenameUtils} [620-620],
 assertEquals("~user\\", FilenameUtils.getPrefix("~user\\a\\b\\c.txt")); ref {FilenameUtils} [621-621]
[m[m31.08.2022 - 16:58:08.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetPrefix_with_nullbyte has 1 assertions: 
 assertEquals("~user\\", FilenameUtils.getPrefix("~u\u0000ser\\a\\b\\c.txt")); ref {FilenameUtils} [627-627]
[m[m31.08.2022 - 16:58:08.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetPath has 30 assertions: 
 assertEquals(null, FilenameUtils.getPath(null)); ref {FilenameUtils} [635-635],
 assertEquals("", FilenameUtils.getPath("noseperator.inthispath")); ref {FilenameUtils} [636-636],
 assertEquals("", FilenameUtils.getPath("/noseperator.inthispath")); ref {FilenameUtils} [637-637],
 assertEquals("", FilenameUtils.getPath("\\noseperator.inthispath")); ref {FilenameUtils} [638-638],
 assertEquals("a/b/", FilenameUtils.getPath("a/b/c.txt")); ref {FilenameUtils} [639-639],
 assertEquals("a/b/", FilenameUtils.getPath("a/b/c")); ref {FilenameUtils} [640-640],
 assertEquals("a/b/c/", FilenameUtils.getPath("a/b/c/")); ref {FilenameUtils} [641-641],
 assertEquals("a\\b\\", FilenameUtils.getPath("a\\b\\c")); ref {FilenameUtils} [642-642],
 assertEquals(null, FilenameUtils.getPath(":")); ref {FilenameUtils} [644-644],
 assertEquals(null, FilenameUtils.getPath("1:/a/b/c.txt")); ref {FilenameUtils} [645-645],
 assertEquals(null, FilenameUtils.getPath("1:")); ref {FilenameUtils} [646-646],
 assertEquals(null, FilenameUtils.getPath("1:a")); ref {FilenameUtils} [647-647],
 assertEquals(null, FilenameUtils.getPath("///a/b/c.txt")); ref {FilenameUtils} [648-648],
 assertEquals(null, FilenameUtils.getPath("//a")); ref {FilenameUtils} [649-649],
 assertEquals("", FilenameUtils.getPath("")); ref {FilenameUtils} [651-651],
 assertEquals("", FilenameUtils.getPath("C:")); ref {FilenameUtils} [652-652],
 assertEquals("", FilenameUtils.getPath("C:/")); ref {FilenameUtils} [653-653],
 assertEquals("", FilenameUtils.getPath("//server/")); ref {FilenameUtils} [654-654],
 assertEquals("", FilenameUtils.getPath("~")); ref {FilenameUtils} [655-655],
 assertEquals("", FilenameUtils.getPath("~/")); ref {FilenameUtils} [656-656],
 assertEquals("", FilenameUtils.getPath("~user")); ref {FilenameUtils} [657-657],
 assertEquals("", FilenameUtils.getPath("~user/")); ref {FilenameUtils} [658-658],
 assertEquals("a/b/", FilenameUtils.getPath("a/b/c.txt")); ref {FilenameUtils} [660-660],
 assertEquals("a/b/", FilenameUtils.getPath("/a/b/c.txt")); ref {FilenameUtils} [661-661],
 assertEquals("", FilenameUtils.getPath("C:a")); ref {FilenameUtils} [662-662],
 assertEquals("a/b/", FilenameUtils.getPath("C:a/b/c.txt")); ref {FilenameUtils} [663-663],
 assertEquals("a/b/", FilenameUtils.getPath("C:/a/b/c.txt")); ref {FilenameUtils} [664-664],
 assertEquals("a/b/", FilenameUtils.getPath("//server/a/b/c.txt")); ref {FilenameUtils} [665-665],
 assertEquals("a/b/", FilenameUtils.getPath("~/a/b/c.txt")); ref {FilenameUtils} [666-666],
 assertEquals("a/b/", FilenameUtils.getPath("~user/a/b/c.txt")); ref {FilenameUtils} [667-667]
[m[m31.08.2022 - 16:58:08.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetPath_with_nullbyte has 1 assertions: 
 assertEquals("a/b/", FilenameUtils.getPath("~user/a/\u0000b/c.txt")); ref {FilenameUtils} [672-672]
[m[m31.08.2022 - 16:58:08.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetPathNoEndSeparator has 30 assertions: 
 assertEquals(null, FilenameUtils.getPath(null)); ref {FilenameUtils} [678-678],
 assertEquals("", FilenameUtils.getPath("noseperator.inthispath")); ref {FilenameUtils} [679-679],
 assertEquals("", FilenameUtils.getPathNoEndSeparator("/noseperator.inthispath")); ref {FilenameUtils} [680-680],
 assertEquals("", FilenameUtils.getPathNoEndSeparator("\\noseperator.inthispath")); ref {FilenameUtils} [681-681],
 assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("a/b/c.txt")); ref {FilenameUtils} [682-682],
 assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("a/b/c")); ref {FilenameUtils} [683-683],
 assertEquals("a/b/c", FilenameUtils.getPathNoEndSeparator("a/b/c/")); ref {FilenameUtils} [684-684],
 assertEquals("a\\b", FilenameUtils.getPathNoEndSeparator("a\\b\\c")); ref {FilenameUtils} [685-685],
 assertEquals(null, FilenameUtils.getPathNoEndSeparator(":")); ref {FilenameUtils} [687-687],
 assertEquals(null, FilenameUtils.getPathNoEndSeparator("1:/a/b/c.txt")); ref {FilenameUtils} [688-688],
 assertEquals(null, FilenameUtils.getPathNoEndSeparator("1:")); ref {FilenameUtils} [689-689],
 assertEquals(null, FilenameUtils.getPathNoEndSeparator("1:a")); ref {FilenameUtils} [690-690],
 assertEquals(null, FilenameUtils.getPathNoEndSeparator("///a/b/c.txt")); ref {FilenameUtils} [691-691],
 assertEquals(null, FilenameUtils.getPathNoEndSeparator("//a")); ref {FilenameUtils} [692-692],
 assertEquals("", FilenameUtils.getPathNoEndSeparator("")); ref {FilenameUtils} [694-694],
 assertEquals("", FilenameUtils.getPathNoEndSeparator("C:")); ref {FilenameUtils} [695-695],
 assertEquals("", FilenameUtils.getPathNoEndSeparator("C:/")); ref {FilenameUtils} [696-696],
 assertEquals("", FilenameUtils.getPathNoEndSeparator("//server/")); ref {FilenameUtils} [697-697],
 assertEquals("", FilenameUtils.getPathNoEndSeparator("~")); ref {FilenameUtils} [698-698],
 assertEquals("", FilenameUtils.getPathNoEndSeparator("~/")); ref {FilenameUtils} [699-699],
 assertEquals("", FilenameUtils.getPathNoEndSeparator("~user")); ref {FilenameUtils} [700-700],
 assertEquals("", FilenameUtils.getPathNoEndSeparator("~user/")); ref {FilenameUtils} [701-701],
 assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("a/b/c.txt")); ref {FilenameUtils} [703-703],
 assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("/a/b/c.txt")); ref {FilenameUtils} [704-704],
 assertEquals("", FilenameUtils.getPathNoEndSeparator("C:a")); ref {FilenameUtils} [705-705],
 assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("C:a/b/c.txt")); ref {FilenameUtils} [706-706],
 assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("C:/a/b/c.txt")); ref {FilenameUtils} [707-707],
 assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("//server/a/b/c.txt")); ref {FilenameUtils} [708-708],
 assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("~/a/b/c.txt")); ref {FilenameUtils} [709-709],
 assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("~user/a/b/c.txt")); ref {FilenameUtils} [710-710]
[m[m31.08.2022 - 16:58:08.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetPathNoEndSeparator_with_null_byte has 1 assertions: 
 assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("~user/a\u0000/b/c.txt")); ref {FilenameUtils} [716-716]
[m[m31.08.2022 - 16:58:08.200 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetFullPath has 28 assertions: 
 assertEquals(null, FilenameUtils.getFullPath(null)); ref {FilenameUtils} [724-724],
 assertEquals("", FilenameUtils.getFullPath("noseperator.inthispath")); ref {FilenameUtils} [725-725],
 assertEquals("a/b/", FilenameUtils.getFullPath("a/b/c.txt")); ref {FilenameUtils} [726-726],
 assertEquals("a/b/", FilenameUtils.getFullPath("a/b/c")); ref {FilenameUtils} [727-727],
 assertEquals("a/b/c/", FilenameUtils.getFullPath("a/b/c/")); ref {FilenameUtils} [728-728],
 assertEquals("a\\b\\", FilenameUtils.getFullPath("a\\b\\c")); ref {FilenameUtils} [729-729],
 assertEquals(null, FilenameUtils.getFullPath(":")); ref {FilenameUtils} [731-731],
 assertEquals(null, FilenameUtils.getFullPath("1:/a/b/c.txt")); ref {FilenameUtils} [732-732],
 assertEquals(null, FilenameUtils.getFullPath("1:")); ref {FilenameUtils} [733-733],
 assertEquals(null, FilenameUtils.getFullPath("1:a")); ref {FilenameUtils} [734-734],
 assertEquals(null, FilenameUtils.getFullPath("///a/b/c.txt")); ref {FilenameUtils} [735-735],
 assertEquals(null, FilenameUtils.getFullPath("//a")); ref {FilenameUtils} [736-736],
 assertEquals("", FilenameUtils.getFullPath("")); ref {FilenameUtils} [738-738],
 assertEquals("C:", FilenameUtils.getFullPath("C:")); ref {FilenameUtils} [739-739],
 assertEquals("C:/", FilenameUtils.getFullPath("C:/")); ref {FilenameUtils} [740-740],
 assertEquals("//server/", FilenameUtils.getFullPath("//server/")); ref {FilenameUtils} [741-741],
 assertEquals("~/", FilenameUtils.getFullPath("~")); ref {FilenameUtils} [742-742],
 assertEquals("~/", FilenameUtils.getFullPath("~/")); ref {FilenameUtils} [743-743],
 assertEquals("~user/", FilenameUtils.getFullPath("~user")); ref {FilenameUtils} [744-744],
 assertEquals("~user/", FilenameUtils.getFullPath("~user/")); ref {FilenameUtils} [745-745],
 assertEquals("a/b/", FilenameUtils.getFullPath("a/b/c.txt")); ref {FilenameUtils} [747-747],
 assertEquals("/a/b/", FilenameUtils.getFullPath("/a/b/c.txt")); ref {FilenameUtils} [748-748],
 assertEquals("C:", FilenameUtils.getFullPath("C:a")); ref {FilenameUtils} [749-749],
 assertEquals("C:a/b/", FilenameUtils.getFullPath("C:a/b/c.txt")); ref {FilenameUtils} [750-750],
 assertEquals("C:/a/b/", FilenameUtils.getFullPath("C:/a/b/c.txt")); ref {FilenameUtils} [751-751],
 assertEquals("//server/a/b/", FilenameUtils.getFullPath("//server/a/b/c.txt")); ref {FilenameUtils} [752-752],
 assertEquals("~/a/b/", FilenameUtils.getFullPath("~/a/b/c.txt")); ref {FilenameUtils} [753-753],
 assertEquals("~user/a/b/", FilenameUtils.getFullPath("~user/a/b/c.txt")); ref {FilenameUtils} [754-754]
[m[m31.08.2022 - 16:58:08.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetFullPathNoEndSeparator has 28 assertions: 
 assertEquals(null, FilenameUtils.getFullPathNoEndSeparator(null)); ref {FilenameUtils} [759-759],
 assertEquals("", FilenameUtils.getFullPathNoEndSeparator("noseperator.inthispath")); ref {FilenameUtils} [760-760],
 assertEquals("a/b", FilenameUtils.getFullPathNoEndSeparator("a/b/c.txt")); ref {FilenameUtils} [761-761],
 assertEquals("a/b", FilenameUtils.getFullPathNoEndSeparator("a/b/c")); ref {FilenameUtils} [762-762],
 assertEquals("a/b/c", FilenameUtils.getFullPathNoEndSeparator("a/b/c/")); ref {FilenameUtils} [763-763],
 assertEquals("a\\b", FilenameUtils.getFullPathNoEndSeparator("a\\b\\c")); ref {FilenameUtils} [764-764],
 assertEquals(null, FilenameUtils.getFullPathNoEndSeparator(":")); ref {FilenameUtils} [766-766],
 assertEquals(null, FilenameUtils.getFullPathNoEndSeparator("1:/a/b/c.txt")); ref {FilenameUtils} [767-767],
 assertEquals(null, FilenameUtils.getFullPathNoEndSeparator("1:")); ref {FilenameUtils} [768-768],
 assertEquals(null, FilenameUtils.getFullPathNoEndSeparator("1:a")); ref {FilenameUtils} [769-769],
 assertEquals(null, FilenameUtils.getFullPathNoEndSeparator("///a/b/c.txt")); ref {FilenameUtils} [770-770],
 assertEquals(null, FilenameUtils.getFullPathNoEndSeparator("//a")); ref {FilenameUtils} [771-771],
 assertEquals("", FilenameUtils.getFullPathNoEndSeparator("")); ref {FilenameUtils} [773-773],
 assertEquals("C:", FilenameUtils.getFullPathNoEndSeparator("C:")); ref {FilenameUtils} [774-774],
 assertEquals("C:/", FilenameUtils.getFullPathNoEndSeparator("C:/")); ref {FilenameUtils} [775-775],
 assertEquals("//server/", FilenameUtils.getFullPathNoEndSeparator("//server/")); ref {FilenameUtils} [776-776],
 assertEquals("~", FilenameUtils.getFullPathNoEndSeparator("~")); ref {FilenameUtils} [777-777],
 assertEquals("~/", FilenameUtils.getFullPathNoEndSeparator("~/")); ref {FilenameUtils} [778-778],
 assertEquals("~user", FilenameUtils.getFullPathNoEndSeparator("~user")); ref {FilenameUtils} [779-779],
 assertEquals("~user/", FilenameUtils.getFullPathNoEndSeparator("~user/")); ref {FilenameUtils} [780-780],
 assertEquals("a/b", FilenameUtils.getFullPathNoEndSeparator("a/b/c.txt")); ref {FilenameUtils} [782-782],
 assertEquals("/a/b", FilenameUtils.getFullPathNoEndSeparator("/a/b/c.txt")); ref {FilenameUtils} [783-783],
 assertEquals("C:", FilenameUtils.getFullPathNoEndSeparator("C:a")); ref {FilenameUtils} [784-784],
 assertEquals("C:a/b", FilenameUtils.getFullPathNoEndSeparator("C:a/b/c.txt")); ref {FilenameUtils} [785-785],
 assertEquals("C:/a/b", FilenameUtils.getFullPathNoEndSeparator("C:/a/b/c.txt")); ref {FilenameUtils} [786-786],
 assertEquals("//server/a/b", FilenameUtils.getFullPathNoEndSeparator("//server/a/b/c.txt")); ref {FilenameUtils} [787-787],
 assertEquals("~/a/b", FilenameUtils.getFullPathNoEndSeparator("~/a/b/c.txt")); ref {FilenameUtils} [788-788],
 assertEquals("~user/a/b", FilenameUtils.getFullPathNoEndSeparator("~user/a/b/c.txt")); ref {FilenameUtils} [789-789]
[m[m31.08.2022 - 16:58:08.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetFullPathNoEndSeparator_IO_248 has 6 assertions: 
 // Test single separator
assertEquals("/", FilenameUtils.getFullPathNoEndSeparator("/")); ref {FilenameUtils} [799-799],
 assertEquals("\\", FilenameUtils.getFullPathNoEndSeparator("\\")); ref {FilenameUtils} [800-800],
 // Test one level directory
assertEquals("/", FilenameUtils.getFullPathNoEndSeparator("/abc")); ref {FilenameUtils} [803-803],
 assertEquals("\\", FilenameUtils.getFullPathNoEndSeparator("\\abc")); ref {FilenameUtils} [804-804],
 // Test one level directory
assertEquals("/abc", FilenameUtils.getFullPathNoEndSeparator("/abc/xyz")); ref {FilenameUtils} [807-807],
 assertEquals("\\abc", FilenameUtils.getFullPathNoEndSeparator("\\abc\\xyz")); ref {FilenameUtils} [808-808]
[m[m31.08.2022 - 16:58:08.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetName has 6 assertions: 
 assertEquals(null, FilenameUtils.getName(null)); ref {FilenameUtils} [813-813],
 assertEquals("noseperator.inthispath", FilenameUtils.getName("noseperator.inthispath")); ref {FilenameUtils} [814-814],
 assertEquals("c.txt", FilenameUtils.getName("a/b/c.txt")); ref {FilenameUtils} [815-815],
 assertEquals("c", FilenameUtils.getName("a/b/c")); ref {FilenameUtils} [816-816],
 assertEquals("", FilenameUtils.getName("a/b/c/")); ref {FilenameUtils} [817-817],
 assertEquals("c", FilenameUtils.getName("a\\b\\c")); ref {FilenameUtils} [818-818]
[m[m31.08.2022 - 16:58:08.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testInjectionFailure has 1 assertions: 
 assertEquals("c", FilenameUtils.getName("a\\b\\\u0000c")); ref {FilenameUtils} [824-824]
[m[m31.08.2022 - 16:58:08.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetBaseName has 7 assertions: 
 assertEquals(null, FilenameUtils.getBaseName(null)); ref {FilenameUtils} [832-832],
 assertEquals("noseperator", FilenameUtils.getBaseName("noseperator.inthispath")); ref {FilenameUtils} [833-833],
 assertEquals("c", FilenameUtils.getBaseName("a/b/c.txt")); ref {FilenameUtils} [834-834],
 assertEquals("c", FilenameUtils.getBaseName("a/b/c")); ref {FilenameUtils} [835-835],
 assertEquals("", FilenameUtils.getBaseName("a/b/c/")); ref {FilenameUtils} [836-836],
 assertEquals("c", FilenameUtils.getBaseName("a\\b\\c")); ref {FilenameUtils} [837-837],
 assertEquals("file.txt", FilenameUtils.getBaseName("file.txt.bak")); ref {FilenameUtils} [838-838]
[m[m31.08.2022 - 16:58:08.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetBaseName_with_nullByte has 1 assertions: 
 assertEquals("file.txt", FilenameUtils.getBaseName("fil\u0000e.txt.bak")); ref {FilenameUtils} [844-844]
[m[m31.08.2022 - 16:58:08.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testGetExtension has 13 assertions: 
 assertEquals(null, FilenameUtils.getExtension(null)); ref {FilenameUtils} [852-852],
 assertEquals("ext", FilenameUtils.getExtension("file.ext")); ref {FilenameUtils} [853-853],
 assertEquals("", FilenameUtils.getExtension("README")); ref {FilenameUtils} [854-854],
 assertEquals("com", FilenameUtils.getExtension("domain.dot.com")); ref {FilenameUtils} [855-855],
 assertEquals("jpeg", FilenameUtils.getExtension("image.jpeg")); ref {FilenameUtils} [856-856],
 assertEquals("", FilenameUtils.getExtension("a.b/c")); ref {FilenameUtils} [857-857],
 assertEquals("txt", FilenameUtils.getExtension("a.b/c.txt")); ref {FilenameUtils} [858-858],
 assertEquals("", FilenameUtils.getExtension("a/b/c")); ref {FilenameUtils} [859-859],
 assertEquals("", FilenameUtils.getExtension("a.b\\c")); ref {FilenameUtils} [860-860],
 assertEquals("txt", FilenameUtils.getExtension("a.b\\c.txt")); ref {FilenameUtils} [861-861],
 assertEquals("", FilenameUtils.getExtension("a\\b\\c")); ref {FilenameUtils} [862-862],
 assertEquals("", FilenameUtils.getExtension("C:\\temp\\foo.bar\\README")); ref {FilenameUtils} [863-863],
 assertEquals("ext", FilenameUtils.getExtension("../filename.ext")); ref {FilenameUtils} [864-864]
[m[m31.08.2022 - 16:58:08.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testRemoveExtension has 13 assertions: 
 assertEquals(null, FilenameUtils.removeExtension(null)); ref {FilenameUtils} [869-869],
 assertEquals("file", FilenameUtils.removeExtension("file.ext")); ref {FilenameUtils} [870-870],
 assertEquals("README", FilenameUtils.removeExtension("README")); ref {FilenameUtils} [871-871],
 assertEquals("domain.dot", FilenameUtils.removeExtension("domain.dot.com")); ref {FilenameUtils} [872-872],
 assertEquals("image", FilenameUtils.removeExtension("image.jpeg")); ref {FilenameUtils} [873-873],
 assertEquals("a.b/c", FilenameUtils.removeExtension("a.b/c")); ref {FilenameUtils} [874-874],
 assertEquals("a.b/c", FilenameUtils.removeExtension("a.b/c.txt")); ref {FilenameUtils} [875-875],
 assertEquals("a/b/c", FilenameUtils.removeExtension("a/b/c")); ref {FilenameUtils} [876-876],
 assertEquals("a.b\\c", FilenameUtils.removeExtension("a.b\\c")); ref {FilenameUtils} [877-877],
 assertEquals("a.b\\c", FilenameUtils.removeExtension("a.b\\c.txt")); ref {FilenameUtils} [878-878],
 assertEquals("a\\b\\c", FilenameUtils.removeExtension("a\\b\\c")); ref {FilenameUtils} [879-879],
 assertEquals("C:\\temp\\foo.bar\\README", FilenameUtils.removeExtension("C:\\temp\\foo.bar\\README")); ref {FilenameUtils} [880-880],
 assertEquals("../filename", FilenameUtils.removeExtension("../filename.ext")); ref {FilenameUtils} [881-881]
[m[m31.08.2022 - 16:58:08.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testEquals has 7 assertions: 
 assertTrue(FilenameUtils.equals(null, null)); ref {FilenameUtils} [887-887],
 assertFalse(FilenameUtils.equals(null, "")); ref {FilenameUtils} [888-888],
 assertFalse(FilenameUtils.equals("", null)); ref {FilenameUtils} [889-889],
 assertTrue(FilenameUtils.equals("", "")); ref {FilenameUtils} [890-890],
 assertTrue(FilenameUtils.equals("file.txt", "file.txt")); ref {FilenameUtils} [891-891],
 assertFalse(FilenameUtils.equals("file.txt", "FILE.TXT")); ref {FilenameUtils} [892-892],
 assertFalse(FilenameUtils.equals("a\\b\\file.txt", "a/b/file.txt")); ref {FilenameUtils} [893-893]
[m[m31.08.2022 - 16:58:08.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testEqualsOnSystem has 7 assertions: 
 assertTrue(FilenameUtils.equalsOnSystem(null, null)); ref {FilenameUtils} [898-898],
 assertFalse(FilenameUtils.equalsOnSystem(null, "")); ref {FilenameUtils} [899-899],
 assertFalse(FilenameUtils.equalsOnSystem("", null)); ref {FilenameUtils} [900-900],
 assertTrue(FilenameUtils.equalsOnSystem("", "")); ref {FilenameUtils} [901-901],
 assertTrue(FilenameUtils.equalsOnSystem("file.txt", "file.txt")); ref {FilenameUtils} [902-902],
 assertEquals(WINDOWS, FilenameUtils.equalsOnSystem("file.txt", "FILE.TXT")); ref {WINDOWS, FilenameUtils} [903-903],
 assertFalse(FilenameUtils.equalsOnSystem("a\\b\\file.txt", "a/b/file.txt")); ref {FilenameUtils} [904-904]
[m[m31.08.2022 - 16:58:08.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testEqualsNormalized has 8 assertions: 
 assertTrue(FilenameUtils.equalsNormalized(null, null)); ref {FilenameUtils} [910-910],
 assertFalse(FilenameUtils.equalsNormalized(null, "")); ref {FilenameUtils} [911-911],
 assertFalse(FilenameUtils.equalsNormalized("", null)); ref {FilenameUtils} [912-912],
 assertTrue(FilenameUtils.equalsNormalized("", "")); ref {FilenameUtils} [913-913],
 assertTrue(FilenameUtils.equalsNormalized("file.txt", "file.txt")); ref {FilenameUtils} [914-914],
 assertFalse(FilenameUtils.equalsNormalized("file.txt", "FILE.TXT")); ref {FilenameUtils} [915-915],
 assertTrue(FilenameUtils.equalsNormalized("a\\b\\file.txt", "a/b/file.txt")); ref {FilenameUtils} [916-916],
 assertFalse(FilenameUtils.equalsNormalized("a/b/", "a/b")); ref {FilenameUtils} [917-917]
[m[m31.08.2022 - 16:58:08.201 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testEqualsNormalizedOnSystem has 8 assertions: 
 assertTrue(FilenameUtils.equalsNormalizedOnSystem(null, null)); ref {FilenameUtils} [922-922],
 assertFalse(FilenameUtils.equalsNormalizedOnSystem(null, "")); ref {FilenameUtils} [923-923],
 assertFalse(FilenameUtils.equalsNormalizedOnSystem("", null)); ref {FilenameUtils} [924-924],
 assertTrue(FilenameUtils.equalsNormalizedOnSystem("", "")); ref {FilenameUtils} [925-925],
 assertTrue(FilenameUtils.equalsNormalizedOnSystem("file.txt", "file.txt")); ref {FilenameUtils} [926-926],
 assertEquals(WINDOWS, FilenameUtils.equalsNormalizedOnSystem("file.txt", "FILE.TXT")); ref {WINDOWS, FilenameUtils} [927-927],
 assertTrue(FilenameUtils.equalsNormalizedOnSystem("a\\b\\file.txt", "a/b/file.txt")); ref {FilenameUtils} [928-928],
 assertFalse(FilenameUtils.equalsNormalizedOnSystem("a/b/", "a/b")); ref {FilenameUtils} [929-929]
[m[m31.08.2022 - 16:58:08.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testEqualsNormalizedError_IO_128 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testEquals_fullControl has 4 assertions: 
 assertFalse(FilenameUtils.equals("file.txt", "FILE.TXT", true, IOCase.SENSITIVE)); ref {IOCase.SENSITIVE, IOCase, FilenameUtils} [959-959],
 assertTrue(FilenameUtils.equals("file.txt", "FILE.TXT", true, IOCase.INSENSITIVE)); ref {IOCase.INSENSITIVE, IOCase, FilenameUtils} [960-960],
 assertEquals(WINDOWS, FilenameUtils.equals("file.txt", "FILE.TXT", true, IOCase.SYSTEM)); ref {IOCase.SYSTEM, WINDOWS, IOCase, FilenameUtils} [961-961],
 assertFalse(FilenameUtils.equals("file.txt", "FILE.TXT", true, null)); ref {FilenameUtils} [962-962]
[m[m31.08.2022 - 16:58:08.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testIsExtension has 24 assertions: 
 assertFalse(FilenameUtils.isExtension(null, (String) null)); ref {FilenameUtils} [968-968],
 assertFalse(FilenameUtils.isExtension("file.txt", (String) null)); ref {FilenameUtils} [969-969],
 assertTrue(FilenameUtils.isExtension("file", (String) null)); ref {FilenameUtils} [970-970],
 assertFalse(FilenameUtils.isExtension("file.txt", "")); ref {FilenameUtils} [971-971],
 assertTrue(FilenameUtils.isExtension("file", "")); ref {FilenameUtils} [972-972],
 assertTrue(FilenameUtils.isExtension("file.txt", "txt")); ref {FilenameUtils} [973-973],
 assertFalse(FilenameUtils.isExtension("file.txt", "rtf")); ref {FilenameUtils} [974-974],
 assertFalse(FilenameUtils.isExtension("a/b/file.txt", (String) null)); ref {FilenameUtils} [976-976],
 assertFalse(FilenameUtils.isExtension("a/b/file.txt", "")); ref {FilenameUtils} [977-977],
 assertTrue(FilenameUtils.isExtension("a/b/file.txt", "txt")); ref {FilenameUtils} [978-978],
 assertFalse(FilenameUtils.isExtension("a/b/file.txt", "rtf")); ref {FilenameUtils} [979-979],
 assertFalse(FilenameUtils.isExtension("a.b/file.txt", (String) null)); ref {FilenameUtils} [981-981],
 assertFalse(FilenameUtils.isExtension("a.b/file.txt", "")); ref {FilenameUtils} [982-982],
 assertTrue(FilenameUtils.isExtension("a.b/file.txt", "txt")); ref {FilenameUtils} [983-983],
 assertFalse(FilenameUtils.isExtension("a.b/file.txt", "rtf")); ref {FilenameUtils} [984-984],
 assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", (String) null)); ref {FilenameUtils} [986-986],
 assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", "")); ref {FilenameUtils} [987-987],
 assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", "txt")); ref {FilenameUtils} [988-988],
 assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", "rtf")); ref {FilenameUtils} [989-989],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", (String) null)); ref {FilenameUtils} [991-991],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "")); ref {FilenameUtils} [992-992],
 assertTrue(FilenameUtils.isExtension("a.b\\file.txt", "txt")); ref {FilenameUtils} [993-993],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "rtf")); ref {FilenameUtils} [994-994],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "TXT")); ref {FilenameUtils} [996-996]
[m[m31.08.2022 - 16:58:08.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testIsExtension_injection has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testIsExtensionArray has 30 assertions: 
 assertFalse(FilenameUtils.isExtension(null, (String[]) null)); ref {FilenameUtils} [1010-1010],
 assertFalse(FilenameUtils.isExtension("file.txt", (String[]) null)); ref {FilenameUtils} [1011-1011],
 assertTrue(FilenameUtils.isExtension("file", (String[]) null)); ref {FilenameUtils} [1012-1012],
 assertFalse(FilenameUtils.isExtension("file.txt", new String[0])); ref {FilenameUtils} [1013-1013],
 assertTrue(FilenameUtils.isExtension("file.txt", new String[] { "txt" })); ref {FilenameUtils} [1014-1014],
 assertFalse(FilenameUtils.isExtension("file.txt", new String[] { "rtf" })); ref {FilenameUtils} [1015-1015],
 assertTrue(FilenameUtils.isExtension("file", new String[] { "rtf", "" })); ref {FilenameUtils} [1016-1016],
 assertTrue(FilenameUtils.isExtension("file.txt", new String[] { "rtf", "txt" })); ref {FilenameUtils} [1017-1017],
 assertFalse(FilenameUtils.isExtension("a/b/file.txt", (String[]) null)); ref {FilenameUtils} [1019-1019],
 assertFalse(FilenameUtils.isExtension("a/b/file.txt", new String[0])); ref {FilenameUtils} [1020-1020],
 assertTrue(FilenameUtils.isExtension("a/b/file.txt", new String[] { "txt" })); ref {FilenameUtils} [1021-1021],
 assertFalse(FilenameUtils.isExtension("a/b/file.txt", new String[] { "rtf" })); ref {FilenameUtils} [1022-1022],
 assertTrue(FilenameUtils.isExtension("a/b/file.txt", new String[] { "rtf", "txt" })); ref {FilenameUtils} [1023-1023],
 assertFalse(FilenameUtils.isExtension("a.b/file.txt", (String[]) null)); ref {FilenameUtils} [1025-1025],
 assertFalse(FilenameUtils.isExtension("a.b/file.txt", new String[0])); ref {FilenameUtils} [1026-1026],
 assertTrue(FilenameUtils.isExtension("a.b/file.txt", new String[] { "txt" })); ref {FilenameUtils} [1027-1027],
 assertFalse(FilenameUtils.isExtension("a.b/file.txt", new String[] { "rtf" })); ref {FilenameUtils} [1028-1028],
 assertTrue(FilenameUtils.isExtension("a.b/file.txt", new String[] { "rtf", "txt" })); ref {FilenameUtils} [1029-1029],
 assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", (String[]) null)); ref {FilenameUtils} [1031-1031],
 assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", new String[0])); ref {FilenameUtils} [1032-1032],
 assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", new String[] { "txt" })); ref {FilenameUtils} [1033-1033],
 assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", new String[] { "rtf" })); ref {FilenameUtils} [1034-1034],
 assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", new String[] { "rtf", "txt" })); ref {FilenameUtils} [1035-1035],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", (String[]) null)); ref {FilenameUtils} [1037-1037],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new String[0])); ref {FilenameUtils} [1038-1038],
 assertTrue(FilenameUtils.isExtension("a.b\\file.txt", new String[] { "txt" })); ref {FilenameUtils} [1039-1039],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new String[] { "rtf" })); ref {FilenameUtils} [1040-1040],
 assertTrue(FilenameUtils.isExtension("a.b\\file.txt", new String[] { "rtf", "txt" })); ref {FilenameUtils} [1041-1041],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new String[] { "TXT" })); ref {FilenameUtils} [1043-1043],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new String[] { "TXT", "RTF" })); ref {FilenameUtils} [1044-1044]
[m[m31.08.2022 - 16:58:08.202 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FilenameUtilsTestCase::testIsExtensionCollection has 30 assertions: 
 assertFalse(FilenameUtils.isExtension(null, (Collection<String>) null)); ref {FilenameUtils} [1049-1049],
 assertFalse(FilenameUtils.isExtension("file.txt", (Collection<String>) null)); ref {FilenameUtils} [1050-1050],
 assertTrue(FilenameUtils.isExtension("file", (Collection<String>) null)); ref {FilenameUtils} [1051-1051],
 assertFalse(FilenameUtils.isExtension("file.txt", new ArrayList<String>())); ref {FilenameUtils} [1052-1052],
 assertTrue(FilenameUtils.isExtension("file.txt", new ArrayList<>(Arrays.asList(new String[] { "txt" })))); ref {Arrays, FilenameUtils} [1053-1053],
 assertFalse(FilenameUtils.isExtension("file.txt", new ArrayList<>(Arrays.asList(new String[] { "rtf" })))); ref {Arrays, FilenameUtils} [1054-1054],
 assertTrue(FilenameUtils.isExtension("file", new ArrayList<>(Arrays.asList(new String[] { "rtf", "" })))); ref {Arrays, FilenameUtils} [1055-1055],
 assertTrue(FilenameUtils.isExtension("file.txt", new ArrayList<>(Arrays.asList(new String[] { "rtf", "txt" })))); ref {Arrays, FilenameUtils} [1056-1056],
 assertFalse(FilenameUtils.isExtension("a/b/file.txt", (Collection<String>) null)); ref {FilenameUtils} [1058-1058],
 assertFalse(FilenameUtils.isExtension("a/b/file.txt", new ArrayList<String>())); ref {FilenameUtils} [1059-1059],
 assertTrue(FilenameUtils.isExtension("a/b/file.txt", new ArrayList<>(Arrays.asList(new String[] { "txt" })))); ref {Arrays, FilenameUtils} [1060-1060],
 assertFalse(FilenameUtils.isExtension("a/b/file.txt", new ArrayList<>(Arrays.asList(new String[] { "rtf" })))); ref {Arrays, FilenameUtils} [1061-1061],
 assertTrue(FilenameUtils.isExtension("a/b/file.txt", new ArrayList<>(Arrays.asList(new String[] { "rtf", "txt" })))); ref {Arrays, FilenameUtils} [1062-1062],
 assertFalse(FilenameUtils.isExtension("a.b/file.txt", (Collection<String>) null)); ref {FilenameUtils} [1064-1064],
 assertFalse(FilenameUtils.isExtension("a.b/file.txt", new ArrayList<String>())); ref {FilenameUtils} [1065-1065],
 assertTrue(FilenameUtils.isExtension("a.b/file.txt", new ArrayList<>(Arrays.asList(new String[] { "txt" })))); ref {Arrays, FilenameUtils} [1066-1066],
 assertFalse(FilenameUtils.isExtension("a.b/file.txt", new ArrayList<>(Arrays.asList(new String[] { "rtf" })))); ref {Arrays, FilenameUtils} [1067-1067],
 assertTrue(FilenameUtils.isExtension("a.b/file.txt", new ArrayList<>(Arrays.asList(new String[] { "rtf", "txt" })))); ref {Arrays, FilenameUtils} [1068-1068],
 assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", (Collection<String>) null)); ref {FilenameUtils} [1070-1070],
 assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", new ArrayList<String>())); ref {FilenameUtils} [1071-1071],
 assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", new ArrayList<>(Arrays.asList(new String[] { "txt" })))); ref {Arrays, FilenameUtils} [1072-1072],
 assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", new ArrayList<>(Arrays.asList(new String[] { "rtf" })))); ref {Arrays, FilenameUtils} [1073-1073],
 assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", new ArrayList<>(Arrays.asList(new String[] { "rtf", "txt" })))); ref {Arrays, FilenameUtils} [1074-1074],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", (Collection<String>) null)); ref {FilenameUtils} [1076-1076],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<String>())); ref {FilenameUtils} [1077-1077],
 assertTrue(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList(new String[] { "txt" })))); ref {Arrays, FilenameUtils} [1078-1078],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList(new String[] { "rtf" })))); ref {Arrays, FilenameUtils} [1079-1079],
 assertTrue(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList(new String[] { "rtf", "txt" })))); ref {Arrays, FilenameUtils} [1080-1080],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList(new String[] { "TXT" })))); ref {Arrays, FilenameUtils} [1082-1082],
 assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList(new String[] { "TXT", "RTF" })))); ref {Arrays, FilenameUtils} [1083-1083]
[m[m31.08.2022 - 16:58:08.206 [INFO ] ParsingStrategy.parseTestSuite() - Found 22 test cases
[m[m31.08.2022 - 16:58:08.206 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testCtor has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.206 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testEOFException has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.206 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testSwapShort has 4 assertions: 
 assertEquals((short) 0, EndianUtils.swapShort((short) 0)); ref {EndianUtils} [53-53],
 assertEquals((short) 0x0201, EndianUtils.swapShort((short) 0x0102)); ref {EndianUtils} [54-54],
 assertEquals((short) 0xffff, EndianUtils.swapShort((short) 0xffff)); ref {EndianUtils} [55-55],
 assertEquals((short) 0x0102, EndianUtils.swapShort((short) 0x0201)); ref {EndianUtils} [56-56]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testSwapInteger has 7 assertions: 
 assertEquals(0, EndianUtils.swapInteger(0)); ref {EndianUtils} [61-61],
 assertEquals(0x04030201, EndianUtils.swapInteger(0x01020304)); ref {EndianUtils} [62-62],
 assertEquals(0x01000000, EndianUtils.swapInteger(0x00000001)); ref {EndianUtils} [63-63],
 assertEquals(0x00000001, EndianUtils.swapInteger(0x01000000)); ref {EndianUtils} [64-64],
 assertEquals(0x11111111, EndianUtils.swapInteger(0x11111111)); ref {EndianUtils} [65-65],
 assertEquals(0xabcdef10, EndianUtils.swapInteger(0x10efcdab)); ref {EndianUtils} [66-66],
 assertEquals(0xab, EndianUtils.swapInteger(0xab000000)); ref {EndianUtils} [67-67]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testSwapLong has 4 assertions: 
 assertEquals(0, EndianUtils.swapLong(0)); ref {EndianUtils} [72-72],
 assertEquals(0x0807060504030201L, EndianUtils.swapLong(0x0102030405060708L)); ref {EndianUtils} [73-73],
 assertEquals(0xffffffffffffffffL, EndianUtils.swapLong(0xffffffffffffffffL)); ref {EndianUtils} [74-74],
 assertEquals(0xab, EndianUtils.swapLong(0xab00000000000000L)); ref {EndianUtils} [75-75]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testSwapFloat has 2 assertions: 
 assertEquals(0.0f, EndianUtils.swapFloat(0.0f), 0.0); ref {EndianUtils} [80-80],
 assertEquals(f2, EndianUtils.swapFloat(f1), 0.0); ref {EndianUtils, f1, f2} [83-83]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testSwapDouble has 2 assertions: 
 assertEquals(0.0, EndianUtils.swapDouble(0.0), 0.0); ref {EndianUtils} [88-88],
 assertEquals(d2, EndianUtils.swapDouble(d1), 0.0); ref {EndianUtils, d1, d2} [91-91]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testSymmetry has 5 assertions: 
 assertEquals((short) 0x0102, EndianUtils.swapShort(EndianUtils.swapShort((short) 0x0102))); ref {EndianUtils} [100-100],
 assertEquals(0x01020304, EndianUtils.swapInteger(EndianUtils.swapInteger(0x01020304))); ref {EndianUtils} [101-101],
 assertEquals(0x0102030405060708L, EndianUtils.swapLong(EndianUtils.swapLong(0x0102030405060708L))); ref {EndianUtils} [102-102],
 assertEquals(f1, EndianUtils.swapFloat(EndianUtils.swapFloat(f1)), 0.0); ref {EndianUtils, f1} [104-104],
 assertEquals(d1, EndianUtils.swapDouble(EndianUtils.swapDouble(d1)), 0.0); ref {EndianUtils, d1} [106-106]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testReadSwappedShort has 2 assertions: 
 assertEquals(0x0102, EndianUtils.readSwappedShort(bytes, 0)); ref {bytes, EndianUtils} [112-112],
 assertEquals(0x0102, EndianUtils.readSwappedShort(input)); ref {input, EndianUtils} [115-115]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testWriteSwappedShort has 4 assertions: 
 assertEquals(0x02, bytes[0]); ref {bytes} [122-122],
 assertEquals(0x01, bytes[1]); ref {bytes} [123-123],
 assertEquals(0x02, bytes[0]); ref {bytes} [128-128],
 assertEquals(0x01, bytes[1]); ref {bytes} [129-129]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testReadSwappedUnsignedShort has 2 assertions: 
 assertEquals(0x00000102, EndianUtils.readSwappedUnsignedShort(bytes, 0)); ref {bytes, EndianUtils} [135-135],
 assertEquals(0x00000102, EndianUtils.readSwappedUnsignedShort(input)); ref {input, EndianUtils} [138-138]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testReadSwappedInteger has 2 assertions: 
 assertEquals(0x01020304, EndianUtils.readSwappedInteger(bytes, 0)); ref {bytes, EndianUtils} [144-144],
 assertEquals(0x01020304, EndianUtils.readSwappedInteger(input)); ref {input, EndianUtils} [147-147]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testWriteSwappedInteger has 8 assertions: 
 assertEquals(0x04, bytes[0]); ref {bytes} [154-154],
 assertEquals(0x03, bytes[1]); ref {bytes} [155-155],
 assertEquals(0x02, bytes[2]); ref {bytes} [156-156],
 assertEquals(0x01, bytes[3]); ref {bytes} [157-157],
 assertEquals(0x04, bytes[0]); ref {bytes} [162-162],
 assertEquals(0x03, bytes[1]); ref {bytes} [163-163],
 assertEquals(0x02, bytes[2]); ref {bytes} [164-164],
 assertEquals(0x01, bytes[3]); ref {bytes} [165-165]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testReadSwappedUnsignedInteger has 2 assertions: 
 assertEquals(0x0000000001020304L, EndianUtils.readSwappedUnsignedInteger(bytes, 0)); ref {bytes, EndianUtils} [171-171],
 assertEquals(0x0000000001020304L, EndianUtils.readSwappedUnsignedInteger(input)); ref {input, EndianUtils} [174-174]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testReadSwappedLong has 2 assertions: 
 assertEquals(0x0102030405060708L, EndianUtils.readSwappedLong(bytes, 0)); ref {bytes, EndianUtils} [180-180],
 assertEquals(0x0102030405060708L, EndianUtils.readSwappedLong(input)); ref {input, EndianUtils} [183-183]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testWriteSwappedLong has 16 assertions: 
 assertEquals(0x08, bytes[0]); ref {bytes} [190-190],
 assertEquals(0x07, bytes[1]); ref {bytes} [191-191],
 assertEquals(0x06, bytes[2]); ref {bytes} [192-192],
 assertEquals(0x05, bytes[3]); ref {bytes} [193-193],
 assertEquals(0x04, bytes[4]); ref {bytes} [194-194],
 assertEquals(0x03, bytes[5]); ref {bytes} [195-195],
 assertEquals(0x02, bytes[6]); ref {bytes} [196-196],
 assertEquals(0x01, bytes[7]); ref {bytes} [197-197],
 assertEquals(0x08, bytes[0]); ref {bytes} [202-202],
 assertEquals(0x07, bytes[1]); ref {bytes} [203-203],
 assertEquals(0x06, bytes[2]); ref {bytes} [204-204],
 assertEquals(0x05, bytes[3]); ref {bytes} [205-205],
 assertEquals(0x04, bytes[4]); ref {bytes} [206-206],
 assertEquals(0x03, bytes[5]); ref {bytes} [207-207],
 assertEquals(0x02, bytes[6]); ref {bytes} [208-208],
 assertEquals(0x01, bytes[7]); ref {bytes} [209-209]
[m[m31.08.2022 - 16:58:08.207 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testReadSwappedFloat has 2 assertions: 
 assertEquals(f1, f2, 0.0); ref {f1, f2} [217-217],
 assertEquals(f1, EndianUtils.readSwappedFloat(input), 0.0); ref {input, EndianUtils, f1} [220-220]
[m[m31.08.2022 - 16:58:08.208 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testWriteSwappedFloat has 8 assertions: 
 assertEquals(0x04, bytes[0]); ref {bytes} [228-228],
 assertEquals(0x03, bytes[1]); ref {bytes} [229-229],
 assertEquals(0x02, bytes[2]); ref {bytes} [230-230],
 assertEquals(0x01, bytes[3]); ref {bytes} [231-231],
 assertEquals(0x04, bytes[0]); ref {bytes} [236-236],
 assertEquals(0x03, bytes[1]); ref {bytes} [237-237],
 assertEquals(0x02, bytes[2]); ref {bytes} [238-238],
 assertEquals(0x01, bytes[3]); ref {bytes} [239-239]
[m[m31.08.2022 - 16:58:08.208 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testReadSwappedDouble has 2 assertions: 
 assertEquals(d1, d2, 0.0); ref {d1, d2} [247-247],
 assertEquals(d1, EndianUtils.readSwappedDouble(input), 0.0); ref {input, EndianUtils, d1} [250-250]
[m[m31.08.2022 - 16:58:08.208 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testWriteSwappedDouble has 16 assertions: 
 assertEquals(0x08, bytes[0]); ref {bytes} [258-258],
 assertEquals(0x07, bytes[1]); ref {bytes} [259-259],
 assertEquals(0x06, bytes[2]); ref {bytes} [260-260],
 assertEquals(0x05, bytes[3]); ref {bytes} [261-261],
 assertEquals(0x04, bytes[4]); ref {bytes} [262-262],
 assertEquals(0x03, bytes[5]); ref {bytes} [263-263],
 assertEquals(0x02, bytes[6]); ref {bytes} [264-264],
 assertEquals(0x01, bytes[7]); ref {bytes} [265-265],
 assertEquals(0x08, bytes[0]); ref {bytes} [270-270],
 assertEquals(0x07, bytes[1]); ref {bytes} [271-271],
 assertEquals(0x06, bytes[2]); ref {bytes} [272-272],
 assertEquals(0x05, bytes[3]); ref {bytes} [273-273],
 assertEquals(0x04, bytes[4]); ref {bytes} [274-274],
 assertEquals(0x03, bytes[5]); ref {bytes} [275-275],
 assertEquals(0x02, bytes[6]); ref {bytes} [276-276],
 assertEquals(0x01, bytes[7]); ref {bytes} [277-277]
[m[m31.08.2022 - 16:58:08.208 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testSymmetryOfLong has 2 assertions: 
 assertEquals(ln1, ln2); ref {ln2, ln1} [292-292],
 assertEquals(test, val, 0); ref {val, test} [298-298]
[m[m31.08.2022 - 16:58:08.208 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.EndianUtilsTest::testUnsignedOverrun has 2 assertions: 
 assertEquals("readSwappedUnsignedInteger(byte[], int) was incorrect", expected, actual); ref {actual, expected} [309-309],
 assertEquals("readSwappedUnsignedInteger(InputStream) was incorrect", expected, actual); ref {actual, expected} [313-313]
[m[m31.08.2022 - 16:58:08.208 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.213 [INFO ] ParsingStrategy.parseTestSuite() - Found 18 test cases
[m[m31.08.2022 - 16:58:08.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::noAccept has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream))); ref {testStream} [66-67]
[m[m31.08.2022 - 16:58:08.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::exceptionIncludesClassName has 2 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream))); ref {testStream} [73-74],
 assertTrue("Expecting message to contain " + name, ice.getMessage().contains(name)); ref {name, ice} [78-78]
[m[m31.08.2022 - 16:58:08.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::acceptCustomMatcher has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept(ALWAYS_TRUE)); ref {ALWAYS_TRUE, testStream} [84-87]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::rejectCustomMatcher has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject(ALWAYS_TRUE)); ref {ALWAYS_TRUE, testStream} [92-96]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::acceptPattern has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept(Pattern.compile(".*MockSerializedClass.*"))); ref {Pattern, testStream} [101-104]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::rejectPattern has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject(Pattern.compile("org.*"))); ref {Pattern, testStream} [109-113]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::acceptWildcard has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept("org.apache.commons.io.*")); ref {testStream} [118-121]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::rejectWildcard has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject("org.*")); ref {testStream} [126-130]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::ourTestClassNotAccepted has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept(Integer.class)); ref {testStream} [135-138]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::ourTestClassOnlyAccepted has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class)); ref {testStream} [143-146]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::ourTestClassAcceptedFirst has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class, Integer.class)); ref {testStream} [151-154]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::ourTestClassAcceptedSecond has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept(Integer.class, MockSerializedClass.class)); ref {testStream} [159-162]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::ourTestClassAcceptedFirstWildcard has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept("*MockSerializedClass", "*Integer")); ref {testStream} [167-170]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::ourTestClassAcceptedSecondWildcard has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept("*Integer", "*MockSerializedClass")); ref {testStream} [175-178]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::reject has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept(Long.class).reject(MockSerializedClass.class, Integer.class)); ref {testStream} [183-187]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::rejectPrecedence has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject(MockSerializedClass.class, Integer.class)); ref {testStream} [192-196]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::rejectOnly has 1 assertions: 
 assertSerialization(willClose(new ValidatingObjectInputStream(testStream)).reject(Integer.class)); ref {testStream} [201-204]
[m[m31.08.2022 - 16:58:08.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.serialization.ValidatingObjectInputStreamTest::customInvalidMethod has 1 assertions: 
 assertSerialization(willClose(new CustomVOIS(testStream)).reject(Integer.class)); ref {testStream} [220-223]
[m[m31.08.2022 - 16:58:08.215 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.DirectoryFileComparatorTest::testSortArray has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.215 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 16:58:08.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ThreadMonitorTestCase::testTimeout has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ThreadMonitorTestCase::testCompletedWithoutTimeout has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ThreadMonitorTestCase::testNoTimeout has 2 assertions: 
 assertNull("Timeout -1, Monitor should be null", monitor); ref {monitor} [68-68],
 assertNull("Timeout 0, Monitor should be null", monitor); ref {monitor} [78-78]
[m[m31.08.2022 - 16:58:08.217 [INFO ] ParsingStrategy.parseTestSuite() - Found 11 test cases
[m[m31.08.2022 - 16:58:08.217 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderUtilitiesTest::testContentTypeEncoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.217 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderUtilitiesTest::testContentTypeMime has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.217 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderUtilitiesTest::testAppXml has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.217 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderUtilitiesTest::testTextXml has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.217 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderUtilitiesTest::testCalculateRawEncodingNoBOM has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.218 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderUtilitiesTest::testCalculateRawEncodingStandard has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.218 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderUtilitiesTest::testCalculateRawEncodingStandardUtf32 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.218 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderUtilitiesTest::testCalculateRawEncodingAdditonalUTF16 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.218 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderUtilitiesTest::testCalculateRawEncodingAdditonalUTF32 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.218 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderUtilitiesTest::testCalculateHttpEncoding has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.218 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderUtilitiesTest::testCalculateHttpEncodingUtf32 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.219 [INFO ] ParsingStrategy.parseTestSuite() - Found 14 test cases
[m[m31.08.2022 - 16:58:08.219 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadBoolean has 3 assertions: 
 assertEquals(false, sdis.readBoolean()); ref {sdis} [72-72],
 assertEquals(true, sdis.readBoolean()); ref {sdis} [73-73],
 assertEquals(true, sdis.readBoolean()); ref {sdis} [74-74]
[m[m31.08.2022 - 16:58:08.219 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadByte has 1 assertions: 
 assertEquals(0x01, this.sdis.readByte()); ref {this.sdis} [80-80]
[m[m31.08.2022 - 16:58:08.219 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadChar has 1 assertions: 
 assertEquals((char) 0x0201, this.sdis.readChar()); ref {this.sdis} [85-85]
[m[m31.08.2022 - 16:58:08.219 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadDouble has 1 assertions: 
 assertEquals(Double.longBitsToDouble(0x0807060504030201L), this.sdis.readDouble(), 0); ref {Double, this.sdis} [90-90]
[m[m31.08.2022 - 16:58:08.219 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadFloat has 1 assertions: 
 assertEquals(Float.intBitsToFloat(0x04030201), this.sdis.readFloat(), 0); ref {Float, this.sdis} [95-95]
[m[m31.08.2022 - 16:58:08.219 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadFully has 1 assertions: 
 assertEquals(bytes[i], bytesIn[i]); ref {bytes, i, bytesIn} [103-103]
[m[m31.08.2022 - 16:58:08.219 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadInt has 1 assertions: 
 assertEquals(0x04030201, this.sdis.readInt()); ref {this.sdis} [109-109]
[m[m31.08.2022 - 16:58:08.219 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadLine has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.219 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadLong has 1 assertions: 
 assertEquals(0x0807060504030201L, this.sdis.readLong()); ref {this.sdis} [120-120]
[m[m31.08.2022 - 16:58:08.220 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadShort has 1 assertions: 
 assertEquals((short) 0x0201, this.sdis.readShort()); ref {this.sdis} [125-125]
[m[m31.08.2022 - 16:58:08.220 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadUnsignedByte has 1 assertions: 
 assertEquals(0x01, this.sdis.readUnsignedByte()); ref {this.sdis} [130-130]
[m[m31.08.2022 - 16:58:08.220 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadUnsignedShort has 1 assertions: 
 assertEquals((short) 0x0201, this.sdis.readUnsignedShort()); ref {this.sdis} [135-135]
[m[m31.08.2022 - 16:58:08.220 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testReadUTF has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.220 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.SwappedDataInputStreamTest::testSkipBytes has 1 assertions: 
 assertEquals(0x08070605, this.sdis.readInt()); ref {this.sdis} [147-147]
[m[m31.08.2022 - 16:58:08.222 [INFO ] ParsingStrategy.parseTestSuite() - Found 6 test cases
[m[m31.08.2022 - 16:58:08.222 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.NullReaderTest::testRead has 4 assertions: 
 assertEquals("Check Value [" + i + "]", i, reader.read()); ref {reader, i} [41-41],
 // Check End of File
assertEquals("End of File", -1, reader.read()); ref {reader} [45-45],
 assertEquals("Read after end of file", e.getMessage()); ref {e} [52-52],
 assertEquals("Available after close", 0, reader.getPosition()); ref {reader} [57-57]
[m[m31.08.2022 - 16:58:08.222 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.NullReaderTest::testReadCharArray has 8 assertions: 
 assertEquals("Read 1", chars.length, count1); ref {count1, chars.length, chars} [67-67],
 assertEquals("Check Chars 1", i, chars[i]); ref {i, chars} [69-69],
 assertEquals("Read 2", 5, count2); ref {count2} [74-74],
 assertEquals("Check Chars 2", count1 + i, chars[i]); ref {count1, i, chars} [76-76],
 assertEquals("Read 3 (EOF)", -1, count3); ref {count3} [81-81],
 assertEquals("Read after end of file", e.getMessage()); ref {e} [88-88],
 assertEquals("Read 5", lth, count5); ref {lth, count5} [98-98],
 assertEquals("Check Chars 3", i, chars[i]); ref {i, chars} [100-100]
[m[m31.08.2022 - 16:58:08.222 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.NullReaderTest::testEOFException has 2 assertions: 
 assertEquals("Read 1", 0, reader.read()); ref {reader} [107-107],
 assertEquals("Read 2", 1, reader.read()); ref {reader} [108-108]
[m[m31.08.2022 - 16:58:08.222 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.NullReaderTest::testMarkAndReset has 6 assertions: 
 assertTrue("Mark Should be Supported", reader.markSupported()); ref {reader} [124-124],
 assertEquals("No Mark IOException message", "No position has been marked", e.getMessage()); ref {e} [131-133],
 assertEquals("Read Before Mark [" + position + "]", position, reader.read()); ref {reader, position} [137-137],
 assertEquals("Read After Mark [" + i + "]", position + i, reader.read()); ref {reader, i, position} [145-145],
 assertEquals("Read After Reset [" + i + "]", position + i, reader.read()); ref {reader, i, position} [153-153],
 assertEquals("Read limit IOException message", "Marked position [" + position + "] is no longer valid - passed the read limit [" + readlimit + "]", e.getMessage()); ref {readlimit, e, position} [161-165]
[m[m31.08.2022 - 16:58:08.222 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.NullReaderTest::testMarkNotSupported has 3 assertions: 
 assertFalse("Mark Should NOT be Supported", reader.markSupported()); ref {reader} [173-173],
 assertEquals("mark() error message", "Mark not supported", e.getMessage()); ref {e} [179-179],
 assertEquals("reset() error message", "Mark not supported", e.getMessage()); ref {e} [186-186]
[m[m31.08.2022 - 16:58:08.222 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.NullReaderTest::testSkip has 7 assertions: 
 assertEquals("Read 1", 0, reader.read()); ref {reader} [194-194],
 assertEquals("Read 2", 1, reader.read()); ref {reader} [195-195],
 assertEquals("Skip 1", 5, reader.skip(5)); ref {reader} [196-196],
 assertEquals("Read 3", 7, reader.read()); ref {reader} [197-197],
 // only 2 left to skip
assertEquals("Skip 2", 2, reader.skip(5)); ref {reader} [198-198],
 // End of file
assertEquals("Skip 3 (EOF)", -1, reader.skip(5)); ref {reader} [199-199],
 assertEquals("Skip after EOF IOException message", "Skip after end of file", e.getMessage()); ref {e} [204-206]
[m[m31.08.2022 - 16:58:08.223 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 16:58:08.224 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.TaggedOutputStreamTest::testNormalStream has 4 assertions: 
 assertEquals(3, buffer.size()); ref {buffer} [46-46],
 assertEquals('a', buffer.toByteArray()[0]); ref {buffer} [47-47],
 assertEquals('b', buffer.toByteArray()[1]); ref {buffer} [48-48],
 assertEquals('c', buffer.toByteArray()[2]); ref {buffer} [49-49]
[m[m31.08.2022 - 16:58:08.224 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.TaggedOutputStreamTest::testBrokenStream has 6 assertions: 
 assertTrue(stream.isCauseOf(e)); ref {stream, e} [66-66],
 assertEquals(exception, e2); ref {exception, e2} [71-71],
 assertTrue(stream.isCauseOf(e)); ref {stream, e} [80-80],
 assertEquals(exception, e2); ref {exception, e2} [85-85],
 assertTrue(stream.isCauseOf(e)); ref {stream, e} [94-94],
 assertEquals(exception, e2); ref {exception, e2} [99-99]
[m[m31.08.2022 - 16:58:08.224 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.TaggedOutputStreamTest::testOtherException has 2 assertions: 
 assertFalse(stream.isCauseOf(exception)); ref {exception, stream} [110-110],
 assertFalse(stream.isCauseOf(new TaggedIOException(exception, UUID.randomUUID()))); ref {exception, stream, UUID} [111-112]
[m[m31.08.2022 - 16:58:08.224 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:08.224 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsWaitForTestCase::testWaitFor has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.224 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsWaitForTestCase::testWaitForInterrupted has 1 assertions: 
 assertTrue(wasInterrupted.get()); ref {wasInterrupted} [60-60]
[m[m31.08.2022 - 16:58:08.225 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 16:58:08.225 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ByteOrderParserTest::testParseBig has 1 assertions: 
 Assert.assertEquals(ByteOrder.BIG_ENDIAN, parseByteOrder("BIG_ENDIAN")); ref {Assert, ByteOrder.BIG_ENDIAN, ByteOrder} [32-32]
[m[m31.08.2022 - 16:58:08.225 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ByteOrderParserTest::testParseLittle has 1 assertions: 
 Assert.assertEquals(ByteOrder.LITTLE_ENDIAN, parseByteOrder("LITTLE_ENDIAN")); ref {Assert, ByteOrder.LITTLE_ENDIAN, ByteOrder} [37-37]
[m[m31.08.2022 - 16:58:08.225 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ByteOrderParserTest::testThrowsException has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.225 [INFO ] ParsingStrategy.parseTestSuite() - Found 5 test cases
[m[m31.08.2022 - 16:58:08.225 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanDirectoryTestCase::testCleanEmpty has 2 assertions: 
 assertEquals(0, top.list().length); ref {top, top.list().length} [52-52],
 assertEquals(0, top.list().length); ref {top, top.list().length} [56-56]
[m[m31.08.2022 - 16:58:08.226 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanDirectoryTestCase::testDeletesRegular has 2 assertions: 
 assertEquals(2, top.list().length); ref {top, top.list().length} [64-64],
 assertEquals(0, top.list().length); ref {top, top.list().length} [68-68]
[m[m31.08.2022 - 16:58:08.226 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanDirectoryTestCase::testDeletesNested has 3 assertions: 
 assertTrue(nested.mkdirs()); ref {nested} [75-75],
 assertEquals(1, top.list().length); ref {top, top.list().length} [79-79],
 assertEquals(0, top.list().length); ref {top, top.list().length} [83-83]
[m[m31.08.2022 - 16:58:08.226 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanDirectoryTestCase::testThrowsOnNullList has 1 assertions: 
 assertEquals("Failed to list contents of " + top.getAbsolutePath(), e.getMessage()); ref {top, e} [98-99]
[m[m31.08.2022 - 16:58:08.226 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.FileUtilsCleanDirectoryTestCase::testThrowsOnCannotDeleteFile has 1 assertions: 
 assertEquals("Unable to delete file: " + file.getAbsolutePath(), e.getMessage()); ref {file, e} [118-119]
[m[m31.08.2022 - 16:58:08.228 [INFO ] ParsingStrategy.parseTestSuite() - Found 15 test cases
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testRawNoBomUsAscii has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testRawNoBomUtf8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testRawNoBomUtf16BE has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testRawNoBomUtf16LE has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testRawNoBomUtf32BE has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testRawNoBomUtf32LE has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testRawNoBomIso8859_1 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testRawNoBomCp1047 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testRawBomUtf8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testRawBomUtf16 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testRawBomUtf32 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testHttp has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testRawContent has 2 assertions: 
 assertEquals("Check encoding", xmlReader.getEncoding(), encoding); ref {xmlReader, encoding} [286-286],
 assertEquals("Check content", xml, IOUtils.toString(xmlReader)); ref {IOUtils, xmlReader, xml} [287-287]
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testHttpContent has 2 assertions: 
 assertEquals("Check encoding", xmlReader.getEncoding(), encoding); ref {xmlReader, encoding} [296-296],
 assertEquals("Check content", xml, IOUtils.toString(xmlReader)); ref {IOUtils, xmlReader, xml} [297-297]
[m[m31.08.2022 - 16:58:08.229 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.XmlStreamReaderTest::testEncodingAttributeXML has 1 assertions: 
 assertEquals(xmlReader.getEncoding(), "UTF-8"); ref {xmlReader} [372-372]
[m[m31.08.2022 - 16:58:08.231 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 16:58:08.232 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ByteArrayOutputStreamTestCase::testToInputStream has 2 assertions: 
 assertEquals(8224, baoutData.length); ref {baoutData.length, baoutData} [118-118],
 assertEquals(8254, baoutData.length); ref {baoutData.length, baoutData} [124-124]
[m[m31.08.2022 - 16:58:08.232 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ByteArrayOutputStreamTestCase::testToInputStreamWithReset has 2 assertions: 
 assertEquals(8224, baoutData.length); ref {baoutData.length, baoutData} [153-153],
 assertEquals(30, baoutData.length); ref {baoutData.length, baoutData} [159-159]
[m[m31.08.2022 - 16:58:08.232 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ByteArrayOutputStreamTestCase::testStream has 6 assertions: 
 assertEquals(36, written); ref {written} [176-176],
 assertEquals(32, written); ref {written} [181-181],
 assertEquals(155, written); ref {written} [190-190],
 assertEquals(155, written); ref {written} [196-196],
 assertEquals("ASCII decoded String must be equal", refString, baoutString); ref {refString, baoutString} [210-210],
 assertSame(baos1.toByteArray(), baos2.toByteArray()); ref {baos1, baos2} [216-216]
[m[m31.08.2022 - 16:58:08.232 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.232 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 16:58:08.241 [INFO ] ParsingStrategy.parseTestSuite() - Found 44 test cases
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testAvailableWithBOM has 1 assertions: 
 assertEquals(7, in.available()); ref {in} [201-201]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testAvailableWithoutBOM has 1 assertions: 
 assertEquals(4, in.available()); ref {in} [209-209]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testClose has 1 assertions: 
 del.assertCloseCalled(); ref {del} [220-220]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testEmptyBufferWithBOM has 1 assertions: 
 assertEquals(-1, in.read(buf)); ref {buf, in} [229-229]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testEmptyBufferWithoutBOM has 1 assertions: 
 assertEquals(-1, in.read(buf)); ref {buf, in} [238-238]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testGetBOMFirstThenRead has 7 assertions: 
 assertEquals("getBOM", ByteOrderMark.UTF_8, in.getBOM()); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [246-246],
 assertTrue("hasBOM()", in.hasBOM()); ref {in} [247-247],
 assertTrue("hasBOM(UTF-8)", in.hasBOM(ByteOrderMark.UTF_8)); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [248-248],
 assertEquals('A', in.read()); ref {in} [249-249],
 assertEquals('B', in.read()); ref {in} [250-250],
 assertEquals('C', in.read()); ref {in} [251-251],
 assertEquals(-1, in.read()); ref {in} [252-252]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testGetBOMFirstThenReadInclude has 10 assertions: 
 assertTrue("hasBOM()", in.hasBOM()); ref {in} [260-260],
 assertTrue("hasBOM(UTF-8)", in.hasBOM(ByteOrderMark.UTF_8)); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [261-261],
 assertEquals("getBOM", ByteOrderMark.UTF_8, in.getBOM()); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [262-262],
 assertEquals(0xEF, in.read()); ref {in} [263-263],
 assertEquals(0xBB, in.read()); ref {in} [264-264],
 assertEquals(0xBF, in.read()); ref {in} [265-265],
 assertEquals('A', in.read()); ref {in} [266-266],
 assertEquals('B', in.read()); ref {in} [267-267],
 assertEquals('C', in.read()); ref {in} [268-268],
 assertEquals(-1, in.read()); ref {in} [269-269]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testLargeBufferWithBOM has 1 assertions: 
 assertData(data, buf, in.read(buf)); ref {buf, data, in} [278-278]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testLargeBufferWithoutBOM has 1 assertions: 
 assertData(data, buf, in.read(buf)); ref {buf, data, in} [287-287]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testLeadingNonBOMBufferedRead has 1 assertions: 
 assertData(data, buf, in.read(buf)); ref {buf, data, in} [296-296]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testLeadingNonBOMSingleRead has 4 assertions: 
 assertEquals(0xEF, in.read()); ref {in} [304-304],
 assertEquals(0xAB, in.read()); ref {in} [305-305],
 assertEquals(0xCD, in.read()); ref {in} [306-306],
 assertEquals(-1, in.read()); ref {in} [307-307]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testMarkResetAfterReadWithBOM has 2 assertions: 
 assertTrue(in.markSupported()); ref {in} [315-315],
 assertEquals('B', in.read()); ref {in} [323-323]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testMarkResetAfterReadWithoutBOM has 2 assertions: 
 assertTrue(in.markSupported()); ref {in} [331-331],
 assertEquals('B', in.read()); ref {in} [339-339]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testMarkResetBeforeReadWithBOM has 2 assertions: 
 assertTrue(in.markSupported()); ref {in} [347-347],
 assertEquals('A', in.read()); ref {in} [354-354]
[m[m31.08.2022 - 16:58:08.242 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testMarkResetBeforeReadWithoutBOM has 2 assertions: 
 assertTrue(in.markSupported()); ref {in} [362-362],
 assertEquals('A', in.read()); ref {in} [369-369]
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testNoBoms has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadEmpty has 4 assertions: 
 assertEquals(-1, in.read()); ref {in} [398-398],
 assertFalse("hasBOM()", in.hasBOM()); ref {in} [399-399],
 assertFalse("hasBOM(UTF-8)", in.hasBOM(ByteOrderMark.UTF_8)); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [400-400],
 assertNull("getBOM", in.getBOM()); ref {in} [401-401]
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadSmall has 6 assertions: 
 assertEquals('A', in.read()); ref {in} [409-409],
 assertEquals('B', in.read()); ref {in} [410-410],
 assertEquals(-1, in.read()); ref {in} [411-411],
 assertFalse("hasBOM()", in.hasBOM()); ref {in} [412-412],
 assertFalse("hasBOM(UTF-8)", in.hasBOM(ByteOrderMark.UTF_8)); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [413-413],
 assertNull("getBOM", in.getBOM()); ref {in} [414-414]
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadTwiceWithBOM has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadTwiceWithoutBOM has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadWithBOMInclude has 10 assertions: 
 assertEquals(0xEF, in.read()); ref {in} [432-432],
 assertEquals(0xBB, in.read()); ref {in} [433-433],
 assertEquals(0xBF, in.read()); ref {in} [434-434],
 assertEquals('A', in.read()); ref {in} [435-435],
 assertEquals('B', in.read()); ref {in} [436-436],
 assertEquals('C', in.read()); ref {in} [437-437],
 assertEquals(-1, in.read()); ref {in} [438-438],
 assertTrue("hasBOM()", in.hasBOM()); ref {in} [439-439],
 assertTrue("hasBOM(UTF-8)", in.hasBOM(ByteOrderMark.UTF_8)); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [440-440],
 assertEquals("getBOM", ByteOrderMark.UTF_8, in.getBOM()); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [441-441]
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadWithBOMUtf16Be has 10 assertions: 
 assertEquals(0, in.read()); ref {in} [449-449],
 assertEquals('A', in.read()); ref {in} [450-450],
 assertEquals(0, in.read()); ref {in} [451-451],
 assertEquals('B', in.read()); ref {in} [452-452],
 assertEquals(0, in.read()); ref {in} [453-453],
 assertEquals('C', in.read()); ref {in} [454-454],
 assertEquals(-1, in.read()); ref {in} [455-455],
 assertTrue("hasBOM()", in.hasBOM()); ref {in} [456-456],
 assertTrue("hasBOM(UTF-16BE)", in.hasBOM(ByteOrderMark.UTF_16BE)); ref {ByteOrderMark, ByteOrderMark.UTF_16BE, in} [457-457],
 assertEquals("getBOM", ByteOrderMark.UTF_16BE, in.getBOM()); ref {ByteOrderMark, ByteOrderMark.UTF_16BE, in} [458-458]
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadWithBOMUtf16Le has 10 assertions: 
 assertEquals('A', in.read()); ref {in} [472-472],
 assertEquals(0, in.read()); ref {in} [473-473],
 assertEquals('B', in.read()); ref {in} [474-474],
 assertEquals(0, in.read()); ref {in} [475-475],
 assertEquals('C', in.read()); ref {in} [476-476],
 assertEquals(0, in.read()); ref {in} [477-477],
 assertEquals(-1, in.read()); ref {in} [478-478],
 assertTrue("hasBOM()", in.hasBOM()); ref {in} [479-479],
 assertTrue("hasBOM(UTF-16LE)", in.hasBOM(ByteOrderMark.UTF_16LE)); ref {ByteOrderMark, in, ByteOrderMark.UTF_16LE} [480-480],
 assertEquals("getBOM", ByteOrderMark.UTF_16LE, in.getBOM()); ref {ByteOrderMark, in, ByteOrderMark.UTF_16LE} [481-481]
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadWithBOMUtf32Be has 16 assertions: 
 assertEquals(0, in.read()); ref {in} [496-496],
 assertEquals(0, in.read()); ref {in} [497-497],
 assertEquals(0, in.read()); ref {in} [498-498],
 assertEquals('A', in.read()); ref {in} [499-499],
 assertEquals(0, in.read()); ref {in} [500-500],
 assertEquals(0, in.read()); ref {in} [501-501],
 assertEquals(0, in.read()); ref {in} [502-502],
 assertEquals('B', in.read()); ref {in} [503-503],
 assertEquals(0, in.read()); ref {in} [504-504],
 assertEquals(0, in.read()); ref {in} [505-505],
 assertEquals(0, in.read()); ref {in} [506-506],
 assertEquals('C', in.read()); ref {in} [507-507],
 assertEquals(-1, in.read()); ref {in} [508-508],
 assertTrue("hasBOM()", in.hasBOM()); ref {in} [509-509],
 assertTrue("hasBOM(UTF-32BE)", in.hasBOM(ByteOrderMark.UTF_32BE)); ref {ByteOrderMark, in, ByteOrderMark.UTF_32BE} [510-510],
 assertEquals("getBOM", ByteOrderMark.UTF_32BE, in.getBOM()); ref {ByteOrderMark, ByteOrderMark.UTF_32BE, in} [511-511]
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadWithBOMUtf32Le has 16 assertions: 
 assertEquals('A', in.read()); ref {in} [526-526],
 assertEquals(0, in.read()); ref {in} [527-527],
 assertEquals(0, in.read()); ref {in} [528-528],
 assertEquals(0, in.read()); ref {in} [529-529],
 assertEquals('B', in.read()); ref {in} [530-530],
 assertEquals(0, in.read()); ref {in} [531-531],
 assertEquals(0, in.read()); ref {in} [532-532],
 assertEquals(0, in.read()); ref {in} [533-533],
 assertEquals('C', in.read()); ref {in} [534-534],
 assertEquals(0, in.read()); ref {in} [535-535],
 assertEquals(0, in.read()); ref {in} [536-536],
 assertEquals(0, in.read()); ref {in} [537-537],
 assertEquals(-1, in.read()); ref {in} [538-538],
 assertTrue("hasBOM()", in.hasBOM()); ref {in} [539-539],
 assertTrue("hasBOM(UTF-32LE)", in.hasBOM(ByteOrderMark.UTF_32LE)); ref {ByteOrderMark, in, ByteOrderMark.UTF_32LE} [540-540],
 assertEquals("getBOM", ByteOrderMark.UTF_32LE, in.getBOM()); ref {ByteOrderMark, in, ByteOrderMark.UTF_32LE} [541-541]
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadWithBOMUtf8 has 7 assertions: 
 assertEquals('A', in.read()); ref {in} [555-555],
 assertEquals('B', in.read()); ref {in} [556-556],
 assertEquals('C', in.read()); ref {in} [557-557],
 assertEquals(-1, in.read()); ref {in} [558-558],
 assertTrue("hasBOM()", in.hasBOM()); ref {in} [559-559],
 assertTrue("hasBOM(UTF-8)", in.hasBOM(ByteOrderMark.UTF_8)); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [560-560],
 assertEquals("getBOM", ByteOrderMark.UTF_8, in.getBOM()); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [561-561]
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadWithMultipleBOM has 8 assertions: 
 assertEquals('A', in.read()); ref {in} [576-576],
 assertEquals('B', in.read()); ref {in} [577-577],
 assertEquals('C', in.read()); ref {in} [578-578],
 assertEquals(-1, in.read()); ref {in} [579-579],
 assertTrue("hasBOM()", in.hasBOM()); ref {in} [580-580],
 assertTrue("hasBOM(UTF-8)", in.hasBOM(ByteOrderMark.UTF_8)); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [581-581],
 assertFalse("hasBOM(UTF-16BE)", in.hasBOM(ByteOrderMark.UTF_16BE)); ref {ByteOrderMark, ByteOrderMark.UTF_16BE, in} [582-582],
 assertEquals("getBOM", ByteOrderMark.UTF_8, in.getBOM()); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [583-583]
[m[m31.08.2022 - 16:58:08.243 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadWithoutBOM has 7 assertions: 
 assertEquals('A', in.read()); ref {in} [591-591],
 assertEquals('B', in.read()); ref {in} [592-592],
 assertEquals('C', in.read()); ref {in} [593-593],
 assertEquals(-1, in.read()); ref {in} [594-594],
 assertFalse("hasBOM()", in.hasBOM()); ref {in} [595-595],
 assertFalse("hasBOM(UTF-8)", in.hasBOM(ByteOrderMark.UTF_8)); ref {ByteOrderMark.UTF_8, ByteOrderMark, in} [596-596],
 assertNull("getBOM", in.getBOM()); ref {in} [597-597]
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadXmlWithBOMUcs2 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadXmlWithBOMUcs4 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadXmlWithBOMUtf16Be has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadXmlWithBOMUtf16Le has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadXmlWithBOMUtf32Be has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadXmlWithBOMUtf32Le has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadXmlWithBOMUtf8 has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadXmlWithoutBOMUtf32Be has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testReadXmlWithoutBOMUtf32Le has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testSkipWithBOM has 1 assertions: 
 assertEquals('C', in.read()); ref {in} [685-685]
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testSkipWithoutBOM has 1 assertions: 
 assertEquals('C', in.read()); ref {in} [694-694]
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::skipReturnValueWithBom has 2 assertions: 
 assertEquals(2, is1.skip(2)); ref {is1} [703-703],
 assertEquals((byte) 0x33, is1.read()); ref {is1} [704-704]
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::skipReturnValueWithoutBom has 2 assertions: 
 // IO-428
assertEquals(2, is2.skip(2)); ref {is2} [712-712],
 assertEquals((byte) 0x33, is2.read()); ref {is2} [713-713]
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testSmallBufferWithBOM has 2 assertions: 
 assertData(new byte[] { 'A', 'B' }, buf, in.read(buf, 0, 2)); ref {buf, in} [722-722],
 assertData(new byte[] { 'C' }, buf, in.read(buf, 0, 2)); ref {buf, in} [723-723]
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testSmallBufferWithoutBOM has 2 assertions: 
 assertData(new byte[] { 'A', 'B' }, buf, in.read(buf, 0, 2)); ref {buf, in} [732-732],
 assertData(new byte[] { 'C' }, buf, in.read(buf, 0, 2)); ref {buf, in} [733-733]
[m[m31.08.2022 - 16:58:08.244 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.input.BOMInputStreamTest::testSupportCode has 7 assertions: 
 assertEquals(5, len); ref {len} [743-743],
 assertEquals(0xEF, buf[0] & 0xFF); ref {buf} [744-744],
 assertEquals(0xBB, buf[1] & 0xFF); ref {buf} [745-745],
 assertEquals(0xBF, buf[2] & 0xFF); ref {buf} [746-746],
 assertEquals('A', buf[3] & 0xFF); ref {buf} [747-747],
 assertEquals('B', buf[4] & 0xFF); ref {buf} [748-748],
 assertData(new byte[] { (byte) 0xEF, (byte) 0xBB, (byte) 0xBF, 'A', 'B' }, buf, len); ref {buf, len} [750-752]
[m[m31.08.2022 - 16:58:08.246 [INFO ] ParsingStrategy.parseTestSuite() - Found 9 test cases
[m[m31.08.2022 - 16:58:08.246 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ByteOrderMarkTestCase::charsetName has 3 assertions: 
 assertEquals("test1 name", "test1", TEST_BOM_1.getCharsetName()); ref {TEST_BOM_1} [45-45],
 assertEquals("test2 name", "test2", TEST_BOM_2.getCharsetName()); ref {TEST_BOM_2} [46-46],
 assertEquals("test3 name", "test3", TEST_BOM_3.getCharsetName()); ref {TEST_BOM_3} [47-47]
[m[m31.08.2022 - 16:58:08.246 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ByteOrderMarkTestCase::constantCharsetNames has 5 assertions: 
 assertNotNull(Charset.forName(ByteOrderMark.UTF_8.getCharsetName())); ref {ByteOrderMark.UTF_8, ByteOrderMark, Charset} [53-53],
 assertNotNull(Charset.forName(ByteOrderMark.UTF_16BE.getCharsetName())); ref {ByteOrderMark, ByteOrderMark.UTF_16BE, Charset} [54-54],
 assertNotNull(Charset.forName(ByteOrderMark.UTF_16LE.getCharsetName())); ref {ByteOrderMark, Charset, ByteOrderMark.UTF_16LE} [55-55],
 assertNotNull(Charset.forName(ByteOrderMark.UTF_32BE.getCharsetName())); ref {ByteOrderMark, ByteOrderMark.UTF_32BE, Charset} [56-56],
 assertNotNull(Charset.forName(ByteOrderMark.UTF_32LE.getCharsetName())); ref {ByteOrderMark, Charset, ByteOrderMark.UTF_32LE} [57-57]
[m[m31.08.2022 - 16:58:08.246 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ByteOrderMarkTestCase::testLength has 3 assertions: 
 assertEquals("test1 length", 1, TEST_BOM_1.length()); ref {TEST_BOM_1} [62-62],
 assertEquals("test2 length", 2, TEST_BOM_2.length()); ref {TEST_BOM_2} [63-63],
 assertEquals("test3 length", 3, TEST_BOM_3.length()); ref {TEST_BOM_3} [64-64]
[m[m31.08.2022 - 16:58:08.246 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ByteOrderMarkTestCase::get has 6 assertions: 
 assertEquals("test1 get(0)", 1, TEST_BOM_1.get(0)); ref {TEST_BOM_1} [70-70],
 assertEquals("test2 get(0)", 1, TEST_BOM_2.get(0)); ref {TEST_BOM_2} [71-71],
 assertEquals("test2 get(1)", 2, TEST_BOM_2.get(1)); ref {TEST_BOM_2} [72-72],
 assertEquals("test3 get(0)", 1, TEST_BOM_3.get(0)); ref {TEST_BOM_3} [73-73],
 assertEquals("test3 get(1)", 2, TEST_BOM_3.get(1)); ref {TEST_BOM_3} [74-74],
 assertEquals("test3 get(2)", 3, TEST_BOM_3.get(2)); ref {TEST_BOM_3} [75-75]
[m[m31.08.2022 - 16:58:08.247 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ByteOrderMarkTestCase::getBytes has 3 assertions: 
 assertTrue("test1 bytes", Arrays.equals(TEST_BOM_1.getBytes(), new byte[] { (byte) 1 })); ref {Arrays, TEST_BOM_1} [81-81],
 assertTrue("test1 bytes", Arrays.equals(TEST_BOM_2.getBytes(), new byte[] { (byte) 1, (byte) 2 })); ref {Arrays, TEST_BOM_2} [82-82],
 assertTrue("test1 bytes", Arrays.equals(TEST_BOM_3.getBytes(), new byte[] { (byte) 1, (byte) 2, (byte) 3 })); ref {Arrays, TEST_BOM_3} [83-83]
[m[m31.08.2022 - 16:58:08.247 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ByteOrderMarkTestCase::testEquals has 8 assertions: 
 assertTrue("test1 equals", TEST_BOM_1.equals(TEST_BOM_1)); ref {TEST_BOM_1} [90-90],
 assertTrue("test2 equals", TEST_BOM_2.equals(TEST_BOM_2)); ref {TEST_BOM_2} [91-91],
 assertTrue("test3 equals", TEST_BOM_3.equals(TEST_BOM_3)); ref {TEST_BOM_3} [92-92],
 assertFalse("Object not equal", TEST_BOM_1.equals(new Object())); ref {TEST_BOM_1} [94-94],
 assertFalse("test1-1 not equal", TEST_BOM_1.equals(new ByteOrderMark("1a", 2))); ref {TEST_BOM_1} [95-95],
 assertFalse("test1-2 not test2", TEST_BOM_1.equals(new ByteOrderMark("1b", 1, 2))); ref {TEST_BOM_1} [96-96],
 assertFalse("test2 not equal", TEST_BOM_2.equals(new ByteOrderMark("2", 1, 1))); ref {TEST_BOM_2} [97-97],
 assertFalse("test3 not equal", TEST_BOM_3.equals(new ByteOrderMark("3", 1, 2, 4))); ref {TEST_BOM_3} [98-98]
[m[m31.08.2022 - 16:58:08.247 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ByteOrderMarkTestCase::testHashCode has 3 assertions: 
 assertEquals("hash test1 ", bomClassHash + 1, TEST_BOM_1.hashCode()); ref {bomClassHash, TEST_BOM_1} [105-105],
 assertEquals("hash test2 ", bomClassHash + 3, TEST_BOM_2.hashCode()); ref {TEST_BOM_2, bomClassHash} [106-106],
 assertEquals("hash test3 ", bomClassHash + 6, TEST_BOM_3.hashCode()); ref {TEST_BOM_3, bomClassHash} [107-107]
[m[m31.08.2022 - 16:58:08.247 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ByteOrderMarkTestCase::errors has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.247 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.ByteOrderMarkTestCase::testToString has 3 assertions: 
 assertEquals("test1 ", "ByteOrderMark[test1: 0x1]", TEST_BOM_1.toString()); ref {TEST_BOM_1} [142-142],
 assertEquals("test2 ", "ByteOrderMark[test2: 0x1,0x2]", TEST_BOM_2.toString()); ref {TEST_BOM_2} [143-143],
 assertEquals("test3 ", "ByteOrderMark[test3: 0x1,0x2,0x3]", TEST_BOM_3.toString()); ref {TEST_BOM_3} [144-144]
[m[m31.08.2022 - 16:58:08.247 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 16:58:08.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.comparator.NameFileComparatorTest::testCaseSensitivity has 7 assertions: 
 /* test null as well */
assertTrue("sensitive file1 & file2 = 0", sensitive.compare(equalFile1, equalFile2) == 0); ref {equalFile2, equalFile1, sensitive} [48-48],
 assertTrue("sensitive file1 & file3 > 0", sensitive.compare(equalFile1, file3) > 0); ref {file3, equalFile1, sensitive} [49-49],
 assertTrue("sensitive file1 & less  > 0", sensitive.compare(equalFile1, lessFile) > 0); ref {lessFile, equalFile1, sensitive} [50-50],
 assertTrue("insensitive file1 & file2 = 0", insensitive.compare(equalFile1, equalFile2) == 0); ref {insensitive, equalFile2, equalFile1} [53-53],
 assertTrue("insensitive file1 & file3 = 0", insensitive.compare(equalFile1, file3) == 0); ref {insensitive, file3, equalFile1} [54-54],
 assertTrue("insensitive file1 & file4 > 0", insensitive.compare(equalFile1, lessFile) > 0); ref {lessFile, insensitive, equalFile1} [55-55],
 assertTrue("insensitive file3 & less  > 0", insensitive.compare(file3, lessFile) > 0); ref {lessFile, insensitive, file3} [56-56]
[m[m31.08.2022 - 16:58:08.256 [INFO ] ParsingStrategy.parseTestSuite() - Found 53 test cases
[m[m31.08.2022 - 16:58:08.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_byteArrayToOutputStream has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [60-60],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [61-61]
[m[m31.08.2022 - 16:58:08.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_byteArrayToOutputStream_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [73-73]
[m[m31.08.2022 - 16:58:08.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_byteArrayToOutputStream_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_byteArrayToWriter has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [97-97],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [98-98]
[m[m31.08.2022 - 16:58:08.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_byteArrayToWriter_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [112-112]
[m[m31.08.2022 - 16:58:08.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_byteArrayToWriter_nullWriter has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_byteArrayToWriter_Encoding has 1 assertions: 
 assertTrue("Content differs", Arrays.equals(inData, bytes)); ref {inData, bytes, Arrays} [138-138]
[m[m31.08.2022 - 16:58:08.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_byteArrayToWriter_Encoding_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [152-152]
[m[m31.08.2022 - 16:58:08.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_byteArrayToWriter_Encoding_nullWriter has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_byteArrayToWriter_Encoding_nullEncoding has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [175-175],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [176-176]
[m[m31.08.2022 - 16:58:08.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charSequenceToOutputStream has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [191-191],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [192-192]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charSequenceToOutputStream_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [204-204]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charSequenceToOutputStream_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charSequenceToOutputStream_Encoding has 1 assertions: 
 assertTrue("Content differs", Arrays.equals(inData, bytes)); ref {inData, bytes, Arrays} [231-231]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charSequenceToOutputStream_Encoding_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [243-243]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charSequenceToOutputStream_Encoding_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charSequenceToOutputStream_nullEncoding has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [267-267],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [268-268]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charSequenceToWriter has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [285-285],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [286-286]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charSequenceToWriter_Encoding_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [300-300]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charSequenceToWriter_Encoding_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_stringToOutputStream has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [325-325],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [326-326]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_stringToOutputStream_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [338-338]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_stringToOutputStream_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_stringToOutputStream_Encoding has 1 assertions: 
 assertTrue("Content differs", Arrays.equals(inData, bytes)); ref {inData, bytes, Arrays} [365-365]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_stringToOutputStream_Encoding_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [377-377]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_stringToOutputStream_Encoding_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_stringToOutputStream_nullEncoding has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [401-401],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [402-402]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_stringToWriter has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [419-419],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [420-420]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_stringToWriter_Encoding_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [434-434]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_stringToWriter_Encoding_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charArrayToOutputStream has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [459-459],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [460-460]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charArrayToOutputStream_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [472-472]
[m[m31.08.2022 - 16:58:08.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charArrayToOutputStream_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charArrayToOutputStream_Encoding has 1 assertions: 
 assertTrue("Content differs", Arrays.equals(inData, bytes)); ref {inData, bytes, Arrays} [499-499]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charArrayToOutputStream_Encoding_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [511-511]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charArrayToOutputStream_Encoding_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charArrayToOutputStream_nullEncoding has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [535-535],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [536-536]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charArrayToWriter has 2 assertions: 
 assertEquals("Sizes differ", inData.length, baout.size()); ref {inData.length, inData, baout} [553-553],
 assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray())); ref {inData, Arrays, baout} [554-554]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charArrayToWriter_Encoding_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [568-568]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWrite_charArrayToWriter_Encoding_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_OutputStream has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [598-598]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_OutputStream_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [610-610]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_OutputStream_nullSeparator has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [627-627]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_OutputStream_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_OutputStream_Encoding has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [658-658]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_OutputStream_Encoding_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [670-670]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_OutputStream_Encoding_nullSeparator has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [687-687]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_OutputStream_Encoding_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_OutputStream_Encoding_nullEncoding has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [717-717]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_Writer has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [739-739]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_Writer_nullData has 1 assertions: 
 assertEquals("Sizes differ", 0, baout.size()); ref {baout} [753-753]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_Writer_nullSeparator has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [772-772]
[m[m31.08.2022 - 16:58:08.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOUtilsWriteTestCase::testWriteLines_Writer_nullStream has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.259 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:08.259 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOExceptionWithCauseTestCase::testIOExceptionStringThrowable has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.259 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.IOExceptionWithCauseTestCase::testIOExceptionThrowable has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.260 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 16:58:08.260 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.CountingOutputStreamTest::testCounting has 9 assertions: 
 assertByteArrayEquals("CountingOutputStream.write(int)", baos.toByteArray(), 0, 20); ref {baos} [47-47],
 assertEquals("CountingOutputStream.getCount()", cos.getCount(), 20); ref {cos} [48-48],
 assertByteArrayEquals("CountingOutputStream.write(byte[])", baos.toByteArray(), 0, 30); ref {baos} [55-55],
 assertEquals("CountingOutputStream.getCount()", cos.getCount(), 30); ref {cos} [56-56],
 assertByteArrayEquals("CountingOutputStream.write(byte[], int, int)", baos.toByteArray(), 0, 35); ref {baos} [62-62],
 assertEquals("CountingOutputStream.getCount()", cos.getCount(), 35); ref {cos} [63-63],
 assertEquals("CountingOutputStream.resetCount()", count, 35); ref {count} [66-66],
 assertByteArrayEquals("CountingOutputStream.write(int)", baos.toByteArray(), 35, 45); ref {baos} [71-71],
 assertEquals("CountingOutputStream.getCount()", cos.getCount(), 10); ref {cos} [72-72]
[m[m31.08.2022 - 16:58:08.260 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.CountingOutputStreamTest::testLargeFiles_IO84 has 2 assertions: 
 assertEquals("getByteCount()", size, cos.getByteCount()); ref {size, cos} [107-107],
 assertEquals("resetByteCount()", size, cos.resetByteCount()); ref {size, cos} [108-108]
[m[m31.08.2022 - 16:58:08.262 [INFO ] ParsingStrategy.parseTestSuite() - Found 21 test cases
[m[m31.08.2022 - 16:58:08.262 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::appendCharSequence has 1 assertions: 
 assertEquals("ABC", writer.toString()); ref {writer} [39-39]
[m[m31.08.2022 - 16:58:08.262 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::appendCharSequence_with_offset has 1 assertions: 
 assertEquals("BC", writer.toString()); ref {writer} [49-49]
[m[m31.08.2022 - 16:58:08.262 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::appendChar has 1 assertions: 
 assertEquals("c", writer.toString()); ref {writer} [58-58]
[m[m31.08.2022 - 16:58:08.262 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::writeString has 1 assertions: 
 assertEquals("ABC", writer.toString()); ref {writer} [67-67]
[m[m31.08.2022 - 16:58:08.262 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::writeStringPartial has 1 assertions: 
 assertEquals("BC", writer.toString()); ref {writer} [76-76]
[m[m31.08.2022 - 16:58:08.262 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::writeCharArray has 1 assertions: 
 assertEquals("ABC", writer.toString()); ref {writer} [85-85]
[m[m31.08.2022 - 16:58:08.262 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::writeInt has 1 assertions: 
 assertEquals("A", writer.toString()); ref {writer} [94-94]
[m[m31.08.2022 - 16:58:08.262 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::writeCharArrayPartial has 1 assertions: 
 assertEquals("BC", writer.toString()); ref {writer} [103-103]
[m[m31.08.2022 - 16:58:08.262 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::nullString has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::nullCharArray has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::nullCharSequencec has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::exceptions_in_append_char has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::exceptions_in_append_charSequence has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::exceptions_in_append_charSequence_offset has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::exceptions_in_write_int has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::exceptions_in_write_char_array has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::exceptions_in_write_offset_char_array has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::exceptions_in_write_string has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::exceptions_in_write_string_offset has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::exceptions_in_flush has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.ProxyWriterTest::exceptions_in_close has 0 assertions: 
 
[m[m31.08.2022 - 16:58:08.264 [INFO ] ParsingStrategy.parseTestSuite() - Found 12 test cases
[m[m31.08.2022 - 16:58:08.265 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.StringBuilderWriterTest::testAppendConstructCapacity has 1 assertions: 
 assertEquals("Foo", writer.toString()); ref {writer} [40-40]
[m[m31.08.2022 - 16:58:08.265 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.StringBuilderWriterTest::testAppendConstructStringBuilder has 2 assertions: 
 assertEquals("FooBar", writer.toString()); ref {writer} [49-49],
 assertSame(builder, writer.getBuilder()); ref {builder, writer} [50-50]
[m[m31.08.2022 - 16:58:08.265 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.StringBuilderWriterTest::testAppendConstructNull has 1 assertions: 
 assertEquals("Foo", writer.toString()); ref {writer} [58-58]
[m[m31.08.2022 - 16:58:08.265 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.StringBuilderWriterTest::testAppendChar has 1 assertions: 
 assertEquals("Foo", writer.toString()); ref {writer} [66-66]
[m[m31.08.2022 - 16:58:08.265 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.StringBuilderWriterTest::testAppendCharSequence has 1 assertions: 
 assertEquals("FooBar", writer.toString()); ref {writer} [74-74]
[m[m31.08.2022 - 16:58:08.265 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.StringBuilderWriterTest::testAppendCharSequencePortion has 1 assertions: 
 assertEquals("BarFoo", writer.toString()); ref {writer} [82-82]
[m[m31.08.2022 - 16:58:08.265 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.StringBuilderWriterTest::testClose has 1 assertions: 
 assertEquals("FooBar", writer.toString()); ref {writer} [96-96]
[m[m31.08.2022 - 16:58:08.265 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.StringBuilderWriterTest::testWriteChar has 3 assertions: 
 assertEquals("F", writer.toString()); ref {writer} [103-103],
 assertEquals("Fo", writer.toString()); ref {writer} [105-105],
 assertEquals("Foo", writer.toString()); ref {writer} [107-107]
[m[m31.08.2022 - 16:58:08.265 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.StringBuilderWriterTest::testWriteCharArray has 2 assertions: 
 assertEquals("Foo", writer.toString()); ref {writer} [115-115],
 assertEquals("FooBar", writer.toString()); ref {writer} [117-117]
[m[m31.08.2022 - 16:58:08.265 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.StringBuilderWriterTest::testWriteCharArrayPortion has 2 assertions: 
 assertEquals("Bar", writer.toString()); ref {writer} [125-125],
 assertEquals("BarFoo", writer.toString()); ref {writer} [127-127]
[m[m31.08.2022 - 16:58:08.265 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.StringBuilderWriterTest::testWriteString has 2 assertions: 
 assertEquals("Foo", writer.toString()); ref {writer} [135-135],
 assertEquals("FooBar", writer.toString()); ref {writer} [137-137]
[m[m31.08.2022 - 16:58:08.265 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.io.output.StringBuilderWriterTest::testWriteStringPortion has 2 assertions: 
 assertEquals("Bar", writer.toString()); ref {writer} [145-145],
 assertEquals("BarFoo", writer.toString()); ref {writer} [147-147]
[m[m31.08.2022 - 16:58:08.273 [INFO ] ParsingStrategy.mergePartialSuites() - ====================================================================
[m[m31.08.2022 - 16:58:08.273 [INFO ] ParsingStrategy.mergePartialSuites() - Finished parsing the test suite.
[m[m31.08.2022 - 16:58:08.275 [INFO ] ParsingStrategy.mergePartialSuites() - It contains 1078 test cases and 3460 assertions.
[m[m31.08.2022 - 16:58:08.387 [INFO ] JUnitTestSuiteReducer.reduce() - Starting test suite reduction
[m[32m31.08.2022 - 17:05:00.624 [DEBUG] GeneticReductionStrategy.reduce() - Jenetics Statistics:
[m[32m31.08.2022 - 17:05:00.643 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 17:05:00.643 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |  Time statistics                                                          |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |             Selection: sum=0.082369981000 s; mean=0.005491332067 s        |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |              Altering: sum=5.922125839000 s; mean=0.394808389267 s        |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |   Fitness calculation: sum=384.789012958000 s; mean=25.652600863867 s     |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |     Overall execution: sum=390.770610323000 s; mean=26.051374021533 s     |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |  Evolution statistics                                                     |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |           Generations: 15                                                 |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |               Altered: sum=28,833,767; mean=1922251.133333333             |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                Killed: sum=0; mean=0.000000000                            |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |              Invalids: sum=0; mean=0.000000000                            |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |  Population statistics                                                    |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                   Age: max=12; mean=0.593427; var=0.944377                |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |               Fitness:                                                    |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      min  = -1.000000000000                               |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      max  = -1.000000000000                               |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      mean = -1.000000000000                               |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      var  = 0.000000000000                                |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      std  = 0.000000000000                                |
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 17:05:00.644 [DEBUG] GeneticReductionStrategy.reduce() - Best Result:
[m[32m31.08.2022 - 17:05:00.645 [DEBUG] GeneticReductionStrategy.reduce() - [11111111|11001111|11111001|11011011|11111111|11111111|11111111|11111111|11111111|11111101|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11011111|11111111|11111111|11111101|11111011|11111111|11111101|11111101|11111011|10111111|11111111|11111111|11111111|11111110|11111111|11111111|11101110|11111111|11111101|11111111|11111111|11111111|11111110|11011110|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111110|11111111|11111111|11111111|11111111|11111011|11111111|11110111|11111011|11111111|11110110|11111111|11111111|11111111|11110111|11111111|11111111|10111111|00111111|11111111|11101111|11111111|11111110|11111111|11110111|11111111|11011111|11111111|11111111|11111111|11111111|11111011|11111111|11111111|11111111|11111111|11111111|01111111|11111101|11110111|11111111|10111111|11111111|11111110|11111111|11111101|11111111|11111101|11111111|10111111|11011011|11111111|11111101|11111110|11111111|11111111|11111111|10010111|11111111|11101111|11111111|11111111|11111111|11011110|11111111|11110110|11111111|11111111|11111111|11111111|11111111|11111101|11111111|11111111|11111111|11111111|11111111|11111111|11111110|11111111|10111111|11111111|11111111] -> -1
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullCharArray
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullCharBuffer
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCtor
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping copy_byteArrayToOutputStream
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping copy_byteArrayToWriter
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_byteArrayToWriterWithEncoding
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToOutputStream
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping copy_inputStreamToWriterWithEncoding
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_readerToOutputStream
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping copy_readerToWriter
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping copy_stringToOutputStream
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping copy_stringToWriter
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFile
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFile_Parent
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetTempDirectoryPath
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetTempDirectory
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetUserDirectoryPath
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetUserDirectory
[m[32m31.08.2022 - 17:05:01.480 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_openInputStream_exists
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_openInputStream_existsButIsDirectory
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_openInputStream_notExists
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_openOutputStream_noParentCreateFile
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_openOutputStream_noParentNoFile
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_openOutputStream_exists
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_openOutputStream_existsButIsDirectory
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_openOutputStream_notExists
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_openOutputStream_notExistsCannotCreate
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteCountToDisplaySizeBigInteger
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteCountToDisplaySizeLong
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFile1
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFile2
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFile3
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFile4
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFileUtf8
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDecodeUrlEncodingUtf8
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFiles1
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFiles3
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFiles3a
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFiles4
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToURLs1
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToURLs3a
[m[32m31.08.2022 - 17:05:01.481 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContentEquals
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContentEqualsIgnoreEOL
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyURLToFile
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyURLToFileWithTimeout
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testForceMkdir
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testForceMkdirParent
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSizeOfDirectory
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSizeOfDirectoryAsBigInteger
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareSizeOf
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSizeOf
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSizeOfAsBigInteger
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsFileNewerOlder
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyFile1
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyFileToOutputStream
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyFile2
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyToSelf
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyFile2WithoutFileDatePreservation
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyDirectoryToDirectory_NonExistingDest
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyDirectoryToNonExistingDest
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyDirectoryToExistingDest
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyDirectoryFiltered
[m[32m31.08.2022 - 17:05:01.482 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyDirectoryPreserveDates
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyDirectoryToChild
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyDirectoryToGrandChild
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyDirectoryToItself
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyDirectoryErrors
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyToDirectoryWithFile
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyToDirectoryWithFileSourceIsNull
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyToDirectoryWithFileSourceDoesNotExist
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyToDirectoryWithDirectory
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyToDirectoryWithIterable
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyToDirectoryWithIterableSourceIsNull
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyToDirectoryWithIterableSourceDoesNotExist
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testForceDeleteAFile1
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testForceDeleteAFile2
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testForceDeleteAFile3
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyFile2ToDir
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testForceDeleteDir
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileUtils
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTouch
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testListFiles
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIterateFiles
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIterateFilesAndDirs
[m[32m31.08.2022 - 17:05:01.483 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFileToStringWithDefaultEncoding
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFileToStringWithEncoding
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFileToByteArray
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadLines
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteStringToFile1
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteStringToFile2
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteStringToFile3
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteCharSequence1
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteCharSequence2
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteByteArrayToFile
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteByteArrayToFile_WithOffsetAndLength
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_4arg_Writer_nullData
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_4arg_nullSeparator
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_3arg_nullSeparator
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.484 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChecksumCRC32
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChecksum
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChecksumOnNullFile
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChecksumOnNullChecksum
[m[32m31.08.2022 - 17:05:01.485 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChecksumOnDirectory
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChecksumDouble
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteDirectoryWithNonDirectory
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteQuietlyForNull
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteQuietlyDir
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteQuietlyFile
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteQuietlyNonExistent
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMoveFile_Rename
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMoveFile_CopyDelete
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMoveFile_Errors
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMoveFileToDirectory
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMoveFileToDirectory_Errors
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMoveDirectory_Rename
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMoveDirectory_CopyDelete
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMoveDirectory_Errors
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMoveDirectoryToDirectory
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMoveDirectoryToDirectory_Errors
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMoveToDirectory
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMoveToDirectory_Errors
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIO300
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIO276
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIncorrectOutputSize
[m[32m31.08.2022 - 17:05:01.486 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerFile
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerDirectory
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerDirectory_NullStrategy
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerDirectory_ForceStrategy
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerNull
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerExitWhenFinished_NoTrackAfter
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerExitWhenFinished1
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerExitWhenFinished2
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping should_cycle_bytes
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping should_handle_whole_range_of_bytes
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAdd
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemove
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoFilters
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterBuiltUsingConstructor
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterBuiltUsingAdd
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping simpleString
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping inTheMiddleOfTheLine
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping multipleBlankLines
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping twoLinesAtEnd
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping malformed
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping retainLineFeed
[m[32m31.08.2022 - 17:05:01.487 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilter
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterAndLimitA
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterAndLimitB
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterAndLimitC
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterAndLimitD
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterDirAndFile1
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterDirAndFile2
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterDirAndFile3
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterDirAndFile4
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLimitToCurrent
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMissingStartDirectory
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHandleStartDirectoryFalse
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCancel
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiThreadCancel
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterString
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClose
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping write_four_chunks
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping write_two_chunks_default_constructor
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping negative_chunksize_not_permitted
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseBranchIOException
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseMainIOException
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTee
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping simpleString
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping inTheMiddleOfTheLine
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping multipleBlankLines
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping twoLinesAtEnd
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping crOnlyNotAtEof
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping crAtEnd
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping retainLineFeed
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOrPattern
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullStringPattern
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullPatternPattern
[m[32m31.08.2022 - 17:05:01.488 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRead
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAvailable
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkip
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReset
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClose
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClose
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRead
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadBuffer
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadBufferOffsetLength
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF8WithSingleByteRead
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLargeUTF8WithSingleByteRead
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF8WithBufferedRead
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLargeUTF8WithBufferedRead
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF16WithSingleByteRead
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadZero
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadZeroEmptyString
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharsetMismatchInfiniteLoop
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEmptyStream
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalStream
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBrokenStream
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOtherException
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRead
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRequiredCharsets
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIso8859_1
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToCharset
[m[32m31.08.2022 - 17:05:01.489 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUsAscii
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUtf16
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUtf16Be
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUtf16Le
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUtf8
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInputStream
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCanonicalPath
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDirectoryContainsDirectory
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDirectoryContainsFile
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDirectoryDoesNotContainFile
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDirectoryDoesNotExist
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIO466
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileDoesNotExist
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileDoesNotExistBug
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnrealizedContainment
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSuffix
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSuffixCaseInsensitive
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDirectory
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFiles
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrefix
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrefixCaseInsensitive
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNameFilter
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNameFilterNullArgument
[m[32m31.08.2022 - 17:05:01.490 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNameFilterNullArrayArgument
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNameFilterNullListArgument
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTrue
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNot
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAnd
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOr
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileFilterUtils_and
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileFilterUtils_or
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeprecatedWildcard
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWildcard
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDelegateFileFilter
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMakeCVSAware
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMakeSVNAware
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAgeFilter
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSizeFilter
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHidden
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCanRead
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCanWrite
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEmpty
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMakeDirectoryOnly
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMakeFileOnly
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMagicNumberFileFilterBytes
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMagicNumberFileFilterBytesOffset
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMagicNumberFileFilterString
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMagicNumberFileFilterStringOffset
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMagicNumberFileFilterValidation
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterArray
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterArray_fromList
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterArrayNullParameters
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterList
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterList_fromArray
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterListNullParameters
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterSet
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterSet_fromArray
[m[32m31.08.2022 - 17:05:01.491 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterSetNullParameters
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEnsureTestCoverage
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullFilters
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDelegation
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClose
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMark
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkip
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRead
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadCharArray
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadCharArrayPortion
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testZeroLines
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOneLines
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTwoLines
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testThreeLines
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMissingFile
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testValidEncoding
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInvalidEncoding
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextLineOnlyDefaultEncoding
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextLineOnlyNullEncoding
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextLineOnlyUtf8Encoding
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextOnly
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextWithException
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseEarly
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilteringFileReader
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilteringBufferedReader
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNonexistantFile
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareDirectorySizes
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparator
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseComparator
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArrayNull
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArray
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortList
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortListNull
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 17:05:01.492 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToOutputStream
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToOutputStreamWithBufferSize
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToOutputStream_nullIn
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToOutputStream_nullOut
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToOutputStream_IO84
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToWriter
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToWriter_nullIn
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToWriter_nullOut
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToWriter_Encoding
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToWriter_Encoding_nullIn
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToWriter_Encoding_nullOut
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_inputStreamToWriter_Encoding_nullEncoding
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_readerToOutputStream
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_readerToOutputStream_nullIn
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_readerToOutputStream_nullOut
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_readerToOutputStream_Encoding
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_readerToOutputStream_Encoding_nullIn
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_readerToOutputStream_Encoding_nullOut
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_readerToOutputStream_Encoding_nullEncoding
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_readerToWriter
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_readerToWriter_nullIn
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_readerToWriter_nullOut
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_readerToWriter_IO84
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_serialization
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getName
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toString
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isCaseSensitive
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_checkCompare_functionality
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_checkCompare_case
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_checkEquals_functionality
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_checkEquals_case
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_checkStartsWith_functionality
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_checkStartsWith_case
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_checkEndsWith_functionality
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_checkEndsWith_case
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_checkIndexOf_functionality
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_checkIndexOf_case
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_checkRegionMatches_functionality
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_checkRegionMatches_case
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparator
[m[32m31.08.2022 - 17:05:01.493 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseComparator
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArrayNull
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArray
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortList
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortListNull
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping noNames
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsFileNewer
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsFileNewerImaginaryFile
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsFileNewerNoFile
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsFileNewerNoDate
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsFileNewerNoFileReference
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClose
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRegex
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIterateFilesByExtension
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testListFilesByExtension
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testListFiles
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBufferedRead_AvailableCharset
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBufferedRead_RequiredCharset
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBufferedRead_UTF8
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharsetMismatchInfiniteLoop_RequiredCharsets
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIO_356_B10_D10_S0_UTF16
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIO_356_B10_D10_S0_UTF8
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIO_356_B10_D10_S1_UTF8
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIO_356_B10_D10_S2_UTF8
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIO_356_B10_D13_S0_UTF8
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIO_356_B10_D13_S1_UTF8
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIO_356_Loop_UTF16
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIO_356_Loop_UTF8
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLargeBufferedRead_RequiredCharsets
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLargeBufferedRead_UTF8
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLargeSingleByteRead_RequiredCharsets
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLargeSingleByteRead_UTF8
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMarkReset_USASCII
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMarkReset_UTF8
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMarkSupported
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadZero_EmptyString
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadZero_RequiredCharsets
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSingleByteRead_RequiredCharsets
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSingleByteRead_UTF16
[m[32m31.08.2022 - 17:05:01.494 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSingleByteRead_UTF8
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkip_UTF8
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAvailable
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRead
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFlush
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF8WithSingleByteWrite
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLargeUTF8WithSingleByteWrite
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF8WithBufferedWrite
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLargeUTF8WithBufferedWrite
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF16WithSingleByteWrite
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF16WithBufferedWrite
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF16BEWithSingleByteWrite
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF16BEWithBufferedWrite
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF16LEWithSingleByteWrite
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF16LEWithBufferedWrite
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFlush
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteImmediately
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadNothing
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadOneByte
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadToArray
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadToArrayWithOffset
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkip
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMarkReset
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultConstructor
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddRemoveObservers
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMonitor
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testThreadFactory
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping trustJavaLang
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping trustJavaIncludingArrays
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTaggedIOException
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping noPattern
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping star
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping starAndQuestionMark
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteStringBuilder
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteInt
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMatch
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMatchOnSystem
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMatchCaseSpecified
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplitOnTokens
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMatch2
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping constructorIterable_Null
[m[32m31.08.2022 - 17:05:01.495 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping constructorArray_Null
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparator
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseComparator
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArrayNull
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArray
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortList
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortListNull
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilter
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterAndLimitA
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterAndLimitB
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterAndLimitC
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterAndLimitD
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterDirAndFile1
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterDirAndFile2
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterDirAndFile3
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterDirAndFile4
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLimitToCurrent
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMissingStartDirectory
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHandleStartDirectoryFalse
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCancel
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiThreadCancel
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteNullBaSucceeds
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongFile
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBufferBreak
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiByteBreak
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTailerEof
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTailerEndOfFileReached
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStopWithNoFile
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInterrupt
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStopWithNoFileUsingExecutor
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIO335
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddRemoveListeners
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDirectory
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCreate
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileUpdate
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileDelete
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetByteCount
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDataByteCalled
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDataBytesCalled
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping sameEncoding_string_constructor
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping sameEncoding_string_string_constructor
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping sameEncoding_Charset_constructor
[m[32m31.08.2022 - 17:05:01.496 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping sameEncoding_string_Charset_constructor
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping sameEncoding_CharsetEncoder_constructor
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping sameEncoding_string_CharsetEncoder_constructor
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDifferentEncoding
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping constructor_File_encoding_badEncoding
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping constructor_File_directory
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping constructor_File_nullFile
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping constructor_fileName_nullFile
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping sameEncoding_null_Charset_constructor
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCaseSensitivity
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparator
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseComparator
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArrayNull
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArray
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortList
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortListNull
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAdd
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemove
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoFilters
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterBuiltUsingConstructor
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFilterBuiltUsingAdd
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpace_String
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceOS_String_NullPath
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceOS_String_InitError
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceOS_String_Other
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceOS_String_Windows
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceOS_String_Unix
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceWindows_String_ParseCommaFormatBytes
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceWindows_String_EmptyPath
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceWindows_String_NormalResponse
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceWindows_String_StripDrive
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceWindows_String_quoted
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceWindows_String_EmptyResponse
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceWindows_String_EmptyMultiLineResponse
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceWindows_String_InvalidTextResponse
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceWindows_String_NoSuchDirectoryResponse
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_EmptyPath
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_NormalResponseLinux
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_NormalResponseFreeBSD
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_NormalResponseKbLinux
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_NormalResponseKbSolaris
[m[32m31.08.2022 - 17:05:01.497 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_LongResponse
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_LongResponseKb
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_EmptyResponse
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_InvalidResponse1
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_InvalidResponse2
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_InvalidResponse3
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFreeSpaceUnix_String_InvalidResponse4
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNull
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteNormal
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteQuietlyNormal
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteForce
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteNull
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseQuietly_AllCloseableIOException
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseQuietly_CloseableIOException
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseQuietly_Selector
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseQuietly_SelectorIOException
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseQuietly_SelectorTwice
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseQuietly_ServerSocket
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseQuietly_ServerSocketIOException
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseQuietly_Socket
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloseQuietly_SocketIOException
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstants
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContentEquals_InputStream_InputStream
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContentEquals_Reader_Reader
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContentEqualsIgnoreEOL
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_ByteArray_OutputStream
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_ByteArray_Writer
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopy_String_Writer
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyLarge_CharExtraLength
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyLarge_CharFullLength
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyLarge_CharNoSkip
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyLarge_CharSkip
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyLarge_CharSkipInvalid
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyLarge_ExtraLength
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyLarge_FullLength
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyLarge_NoSkip
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyLarge_Skip
[m[32m31.08.2022 - 17:05:01.498 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyLarge_SkipInvalid
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRead_ReadableByteChannel
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFully_InputStream_ByteArray
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFully_InputStream__ReturnByteArray
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFully_InputStream_Offset
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFully_ReadableByteChannel
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFully_Reader
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFully_Reader_Offset
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadLines_InputStream
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadLines_InputStream_String
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadLines_Reader
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkip_FileReader
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkip_InputStream
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkip_ReadableByteChannel
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkipFully_InputStream
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkipFully_ReadableByteChannel
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkipFully_Reader
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStringToOutputStream
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToBufferedInputStream_InputStream
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToBufferedInputStreamWithBufferSize_InputStream
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToByteArray_InputStream
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToByteArray_InputStream_Size
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToByteArray_InputStream_SizeIllegal
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToByteArray_InputStream_SizeLong
[m[32m31.08.2022 - 17:05:01.499 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToByteArray_InputStream_SizeZero
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToByteArray_Reader
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToByteArray_String
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToByteArray_URI
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToByteArray_URL
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToByteArray_URLConnection
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToCharArray_InputStream
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToCharArray_InputStream_CharsetName
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToCharArray_Reader
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToInputStream_CharSequence
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToInputStream_String
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString_ByteArray
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString_InputStream
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString_Reader
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString_URI
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString_URI_CharsetName
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString_URL
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString_URL_CharsetName
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString_URL_CharsetNameNull
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToString_ExistingResourceAtRootPackage
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToString_ExistingResourceAtSubPackage
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToString_ExistingResourceAtSubPackage_WithClassLoader
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToString_NonExistingResource
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToString_NonExistingResource_WithClassLoader
[m[32m31.08.2022 - 17:05:01.500 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToString_NullResource
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToString_NullResource_WithClassLoader
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToString_NullCharset
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToString_NullCharset_WithClassLoader
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToByteArray_ExistingResourceAtRootPackage
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToByteArray_ExistingResourceAtRootPackage_WithClassLoader
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToByteArray_ExistingResourceAtSubPackage
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToByteArray_ExistingResourceAtSubPackage_WithClassLoader
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToByteArray_NonExistingResource
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToByteArray_NonExistingResource_WithClassLoader
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToByteArray_Null
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToByteArray_Null_WithClassLoader
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToURL_ExistingResourceAtRootPackage
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToURL_ExistingResourceAtRootPackage_WithClassLoader
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToURL_ExistingResourceAtSubPackage
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToURL_ExistingResourceAtSubPackage_WithClassLoader
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToURL_NonExistingResource
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToURL_Null
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResourceToURL_Null_WithClassLoader
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsBufferedNull
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsBufferedInputStream
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsBufferedInputStreamWithBufferSize
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsBufferedOutputStream
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsBufferedOutputStreamWithBufferSize
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsBufferedReader
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsBufferedReaderWithBufferSize
[m[32m31.08.2022 - 17:05:01.501 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsBufferedWriter
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsBufferedWriterWithBufferSize
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyLarge_SkipWithInvalidOffset
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadSingle
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadArray
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCaseSensitivity
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparator
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArrayNull
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArray
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortList
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortListNull
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCleanDirWithSymlinkFile
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCleanDirWithASymlinkDir
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCleanDirWithParentSymlinks
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStillClearsIfGivenDirectoryIsASymlink
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIdentifiesSymlinkDir
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIdentifiesSymlinkFile
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIdentifiesBrokenSymlinkFile
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCorrectlyIdentifySymlinkWithParentSymLink
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping write_four_chunks
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping negative_chunksize_not_permitted
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping defaultConstructor
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnsupportedEncodingUTF16
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnsupportedEncodingBig5
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerFile
[m[32m31.08.2022 - 17:05:01.502 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerDirectory
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerDirectory_NullStrategy
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerDirectory_ForceStrategy
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerNull
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerExitWhenFinishedFirst
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerExitWhenFinished_NoTrackAfter
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerExitWhenFinished1
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileCleanerExitWhenFinished2
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDump
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFlush
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClose
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRead
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadByteArray
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMarkAndReset
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMarkNotSupported
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkip
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileLocked
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAlternateLockDir
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFileNotLocked
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_File_encoding_badEncoding
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_File_directory
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_File_nullFile
[m[32m31.08.2022 - 17:05:01.503 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_fileName_nullFile
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDataIntegrityWithBufferedReader
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNull
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparator
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseComparator
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArrayNull
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArray
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortList
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortListNull
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCounting
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLargeFiles_IO84
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResetting
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testZeroLength1
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testZeroLength2
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testZeroLength3
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEOF1
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEOF2
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEOF3
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkipping
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoXmlHeader
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEmpty
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultEncoding
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF8Encoding
[m[32m31.08.2022 - 17:05:01.504 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF16Encoding
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF16BEEncoding
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUTF16LEEncoding
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLatin1Encoding
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLatin7Encoding
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLatin15Encoding
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEUC_JPEncoding
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEBCDICEncoding
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping readTillEnd
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping shortReader
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping readMulti
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping readMultiWithOffset
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping markReset
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping markResetWithMarkOutsideBoundedReaderMax
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping markResetFromOffset1
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping markResetMarkMore
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping skipTest
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping closeTest
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadBytesEOF
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalize
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalize_with_nullbytes
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalizeUnixWin
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalizeNoEndSeparator
[m[32m31.08.2022 - 17:05:01.505 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalizeNoEndSeparatorUnixWin
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConcat
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSeparatorsToUnix
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSeparatorsToWindows
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSeparatorsToSystem
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetPrefixLength
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfLastSeparator
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfExtension
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetPrefix
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetPrefix_with_nullbyte
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetPath
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetPath_with_nullbyte
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetPathNoEndSeparator
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetPathNoEndSeparator_with_null_byte
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFullPath
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFullPathNoEndSeparator
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFullPathNoEndSeparator_IO_248
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetName
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInjectionFailure
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetBaseName
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetBaseName_with_nullByte
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetExtension
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveExtension
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 17:05:01.506 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsOnSystem
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsNormalizedOnSystem
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsNormalizedError_IO_128
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals_fullControl
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsExtension_injection
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsExtensionArray
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsExtensionCollection
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCtor
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEOFException
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSwapShort
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSwapInteger
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSwapLong
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSwapFloat
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSwapDouble
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSymmetry
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadSwappedShort
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteSwappedShort
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadSwappedUnsignedShort
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadSwappedInteger
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteSwappedInteger
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadSwappedUnsignedInteger
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadSwappedLong
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteSwappedLong
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadSwappedFloat
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteSwappedFloat
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadSwappedDouble
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteSwappedDouble
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSymmetryOfLong
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnsignedOverrun
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContentTypeEncoding
[m[32m31.08.2022 - 17:05:01.507 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContentTypeMime
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppXml
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTextXml
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateRawEncodingNoBOM
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateRawEncodingStandard
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateRawEncodingStandardUtf32
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateRawEncodingAdditonalUTF16
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateRawEncodingAdditonalUTF32
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateHttpEncoding
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateHttpEncodingUtf32
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping noAccept
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptionIncludesClassName
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping acceptCustomMatcher
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping rejectCustomMatcher
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping acceptPattern
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping rejectPattern
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping acceptWildcard
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping rejectWildcard
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping ourTestClassOnlyAccepted
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping ourTestClassAcceptedFirst
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping ourTestClassAcceptedSecond
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping ourTestClassAcceptedFirstWildcard
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping reject
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping rejectPrecedence
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping rejectOnly
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping customInvalidMethod
[m[32m31.08.2022 - 17:05:01.508 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArray
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseComparator
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArrayNull
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortList
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortListNull
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompletedWithoutTimeout
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoTimeout
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContentTypeEncoding
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContentTypeMime
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppXml
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTextXml
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateRawEncodingNoBOM
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateRawEncodingStandard
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateRawEncodingStandardUtf32
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateRawEncodingAdditonalUTF32
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateHttpEncoding
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCalculateHttpEncodingUtf32
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRead
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadCharArray
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEOFException
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMarkAndReset
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMarkNotSupported
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkip
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalStream
[m[32m31.08.2022 - 17:05:01.509 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBrokenStream
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOtherException
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWaitFor
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWaitForInterrupted
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseBig
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseLittle
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testThrowsException
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCleanEmpty
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeletesRegular
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testThrowsOnCannotDeleteFile
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawNoBomUsAscii
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawNoBomUtf8
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawNoBomUtf16BE
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawNoBomUtf32BE
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawNoBomUtf32LE
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawNoBomIso8859_1
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawNoBomCp1047
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawBomUtf8
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawBomUtf16
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawBomUtf32
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHttp
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawContent
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHttpContent
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEncodingAttributeXML
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToInputStream
[m[32m31.08.2022 - 17:05:01.510 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToInputStreamWithReset
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStream
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAvailableWithBOM
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAvailableWithoutBOM
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClose
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEmptyBufferWithBOM
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEmptyBufferWithoutBOM
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetBOMFirstThenRead
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetBOMFirstThenReadInclude
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLargeBufferWithBOM
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLargeBufferWithoutBOM
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLeadingNonBOMBufferedRead
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLeadingNonBOMSingleRead
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMarkResetAfterReadWithBOM
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMarkResetAfterReadWithoutBOM
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMarkResetBeforeReadWithBOM
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMarkResetBeforeReadWithoutBOM
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoBoms
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadEmpty
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadSmall
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadTwiceWithBOM
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadTwiceWithoutBOM
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadWithBOMInclude
[m[32m31.08.2022 - 17:05:01.511 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadWithBOMUtf16Be
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadWithBOMUtf16Le
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadWithBOMUtf32Be
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadWithBOMUtf32Le
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadWithBOMUtf8
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadWithMultipleBOM
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadWithoutBOM
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadXmlWithBOMUcs2
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadXmlWithBOMUcs4
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadXmlWithBOMUtf16Be
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadXmlWithBOMUtf32Be
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadXmlWithBOMUtf32Le
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadXmlWithBOMUtf8
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadXmlWithoutBOMUtf32Be
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkipWithBOM
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSkipWithoutBOM
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping skipReturnValueWithBom
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping skipReturnValueWithoutBom
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSmallBufferWithoutBOM
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSupportCode
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping charsetName
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping constantCharsetNames
[m[32m31.08.2022 - 17:05:01.512 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLength
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping get
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping getBytes
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping errors
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCaseSensitivity
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparator
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArrayNull
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortArray
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortList
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSortListNull
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_byteArrayToOutputStream
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_byteArrayToWriter
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_byteArrayToWriter_nullData
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_byteArrayToWriter_Encoding
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_byteArrayToWriter_Encoding_nullData
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_byteArrayToWriter_Encoding_nullWriter
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_byteArrayToWriter_Encoding_nullEncoding
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charSequenceToOutputStream
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charSequenceToOutputStream_nullData
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charSequenceToOutputStream_nullStream
[m[32m31.08.2022 - 17:05:01.513 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charSequenceToOutputStream_Encoding
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charSequenceToOutputStream_Encoding_nullData
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charSequenceToOutputStream_Encoding_nullStream
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charSequenceToOutputStream_nullEncoding
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charSequenceToWriter
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charSequenceToWriter_Encoding_nullData
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charSequenceToWriter_Encoding_nullStream
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_stringToOutputStream_nullData
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_stringToOutputStream_nullStream
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_stringToOutputStream_Encoding
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_stringToOutputStream_Encoding_nullData
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_stringToOutputStream_Encoding_nullStream
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_stringToOutputStream_nullEncoding
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_stringToWriter
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_stringToWriter_Encoding_nullData
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_stringToWriter_Encoding_nullStream
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charArrayToOutputStream
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charArrayToOutputStream_nullData
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charArrayToOutputStream_nullStream
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charArrayToOutputStream_Encoding
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charArrayToOutputStream_Encoding_nullData
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charArrayToOutputStream_Encoding_nullStream
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charArrayToOutputStream_nullEncoding
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charArrayToWriter
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charArrayToWriter_Encoding_nullData
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrite_charArrayToWriter_Encoding_nullStream
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_OutputStream
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_OutputStream_nullData
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_OutputStream_nullSeparator
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_OutputStream_nullStream
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_OutputStream_Encoding
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_OutputStream_Encoding_nullData
[m[32m31.08.2022 - 17:05:01.514 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_OutputStream_Encoding_nullSeparator
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_OutputStream_Encoding_nullStream
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_OutputStream_Encoding_nullEncoding
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_Writer
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_Writer_nullData
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_Writer_nullSeparator
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteLines_Writer_nullStream
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIOExceptionStringThrowable
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIOExceptionThrowable
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCounting
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLargeFiles_IO84
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping appendCharSequence
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping appendCharSequence_with_offset
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping appendChar
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping writeString
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping writeStringPartial
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping writeInt
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping writeCharArrayPartial
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nullString
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nullCharArray
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nullCharSequencec
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptions_in_append_char
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptions_in_append_charSequence
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptions_in_append_charSequence_offset
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptions_in_write_int
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptions_in_write_char_array
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptions_in_write_offset_char_array
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptions_in_write_string
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptions_in_write_string_offset
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptions_in_flush
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptions_in_close
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendConstructCapacity
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendConstructStringBuilder
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendConstructNull
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendChar
[m[32m31.08.2022 - 17:05:01.515 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendCharSequence
[m[32m31.08.2022 - 17:05:01.516 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendCharSequencePortion
[m[32m31.08.2022 - 17:05:01.516 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClose
[m[32m31.08.2022 - 17:05:01.516 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteChar
[m[32m31.08.2022 - 17:05:01.516 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteCharArray
[m[32m31.08.2022 - 17:05:01.516 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteCharArrayPortion
[m[32m31.08.2022 - 17:05:01.516 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteString
[m[32m31.08.2022 - 17:05:01.516 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteStringPortion
[m[m31.08.2022 - 17:05:01.523 [INFO ] JUnitTestSuiteReducer.reduce() - Finished test suite reduction
[m[m31.08.2022 - 17:05:01.524 [INFO ] JUnitTestSuiteReducer.reduce() - Reduced test suite from 1078 to 1005 test cases: 73 redundant test cases found
[m[m31.08.2022 - 17:05:01.527 [INFO ] JUnitTestSuiteReducer.generateReport() - Generated report and wrote it to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/tsr-report-%x%.xml
[m[m31.08.2022 - 17:05:01.527 [INFO ] CompilationUnitExtractor.parseCompilationUnitsFromFilePath() - Collecting compilation units from File Path /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/projects/commons-io/src/test/java
[m[m31.08.2022 - 17:05:02.249 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ProxyReaderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/ProxyReaderTest.java
[m[m31.08.2022 - 17:05:02.252 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CopyUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/CopyUtilsTest.java
[m[m31.08.2022 - 17:05:02.288 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileUtilsTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FileUtilsTestCase.java
[m[m31.08.2022 - 17:05:02.289 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileCleanerTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FileCleanerTestCase.java
[m[m31.08.2022 - 17:05:02.290 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote InfiniteCircularInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java
[m[m31.08.2022 - 17:05:02.293 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AndFileFilterTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/filefilter/AndFileFilterTestCase.java
[m[m31.08.2022 - 17:05:02.294 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote WindowsLineEndingInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/WindowsLineEndingInputStreamTest.java
[m[m31.08.2022 - 17:05:02.297 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DirectoryWalkerTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/DirectoryWalkerTestCase.java
[m[m31.08.2022 - 17:05:02.300 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ConditionalFileFilterAbstractTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/filefilter/ConditionalFileFilterAbstractTestCase.java
[m[m31.08.2022 - 17:05:02.301 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CloseShieldInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/CloseShieldInputStreamTest.java
[m[m31.08.2022 - 17:05:02.302 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ChunkedWriterTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/ChunkedWriterTest.java
[m[m31.08.2022 - 17:05:02.303 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TeeOutputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/TeeOutputStreamTest.java
[m[m31.08.2022 - 17:05:02.304 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote UnixLineEndingInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/UnixLineEndingInputStreamTest.java
[m[m31.08.2022 - 17:05:02.304 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote RegexpClassNameMatcherTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/serialization/RegexpClassNameMatcherTest.java
[m[m31.08.2022 - 17:05:02.304 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MessageDigestCalculatingInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/MessageDigestCalculatingInputStreamTest.java
[m[m31.08.2022 - 17:05:02.305 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote BrokenInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/BrokenInputStreamTest.java
[m[m31.08.2022 - 17:05:02.306 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ComparatorAbstractTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java
[m[m31.08.2022 - 17:05:02.309 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ClassLoaderObjectInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java
[m[m31.08.2022 - 17:05:02.309 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AutoCloseInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/AutoCloseInputStreamTest.java
[m[m31.08.2022 - 17:05:02.310 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ReaderInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/ReaderInputStreamTest.java
[m[m31.08.2022 - 17:05:02.311 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TaggedInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/TaggedInputStreamTest.java
[m[m31.08.2022 - 17:05:02.311 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ClosedInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/ClosedInputStreamTest.java
[m[m31.08.2022 - 17:05:02.312 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote IOFileFilterAbstractTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/filefilter/IOFileFilterAbstractTestCase.java
[m[m31.08.2022 - 17:05:02.313 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CharsetsTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/CharsetsTestCase.java
[m[m31.08.2022 - 17:05:02.314 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DemuxTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/DemuxTestCase.java
[m[m31.08.2022 - 17:05:02.316 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileUtilsDirectoryContainsTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FileUtilsDirectoryContainsTestCase.java
[m[m31.08.2022 - 17:05:02.316 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MockSerializedClass.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/serialization/MockSerializedClass.java
[m[m31.08.2022 - 17:05:02.329 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileFilterTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/filefilter/FileFilterTestCase.java
[m[m31.08.2022 - 17:05:02.330 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CharSequenceReaderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/CharSequenceReaderTest.java
[m[m31.08.2022 - 17:05:02.333 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote LineIteratorTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/LineIteratorTestCase.java
[m[m31.08.2022 - 17:05:02.334 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote SizeFileComparatorTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/comparator/SizeFileComparatorTest.java
[m[m31.08.2022 - 17:05:02.338 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote IOUtilsCopyTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/IOUtilsCopyTestCase.java
[m[m31.08.2022 - 17:05:02.342 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote IOCaseTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/IOCaseTestCase.java
[m[m31.08.2022 - 17:05:02.343 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DefaultFileComparatorTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/comparator/DefaultFileComparatorTest.java
[m[m31.08.2022 - 17:05:02.343 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FullClassNameMatcherTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/serialization/FullClassNameMatcherTest.java
[m[m31.08.2022 - 17:05:02.344 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileUtilsFileNewerTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FileUtilsFileNewerTestCase.java
[m[m31.08.2022 - 17:05:02.345 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CloseShieldOutputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/CloseShieldOutputStreamTest.java
[m[m31.08.2022 - 17:05:02.346 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote RegexFileFilterTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/filefilter/RegexFileFilterTestCase.java
[m[m31.08.2022 - 17:05:02.347 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AbstractMonitorTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/monitor/AbstractMonitorTestCase.java
[m[m31.08.2022 - 17:05:02.349 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileUtilsListFilesTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FileUtilsListFilesTestCase.java
[m[m31.08.2022 - 17:05:02.350 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ClosedOutputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/ClosedOutputStreamTest.java
[m[m31.08.2022 - 17:05:02.352 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote WriterOutputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/WriterOutputStreamTest.java
[m[m31.08.2022 - 17:05:02.353 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TeeInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/TeeInputStreamTest.java
[m[m31.08.2022 - 17:05:02.354 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileAlterationMonitorTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/monitor/FileAlterationMonitorTestCase.java
[m[m31.08.2022 - 17:05:02.355 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MoreComplexObject.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/serialization/MoreComplexObject.java
[m[m31.08.2022 - 17:05:02.355 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MoreComplexObjectTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/serialization/MoreComplexObjectTest.java
[m[m31.08.2022 - 17:05:02.356 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TaggedIOExceptionTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/TaggedIOExceptionTest.java
[m[m31.08.2022 - 17:05:02.356 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote WildcardClassNameMatcherTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/serialization/WildcardClassNameMatcherTest.java
[m[m31.08.2022 - 17:05:02.357 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AppendableOutputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/AppendableOutputStreamTest.java
[m[m31.08.2022 - 17:05:02.359 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FilenameUtilsWildcardTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FilenameUtilsWildcardTestCase.java
[m[m31.08.2022 - 17:05:02.360 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CompositeFileComparatorTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/comparator/CompositeFileComparatorTest.java
[m[m31.08.2022 - 17:05:02.361 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote YellOnCloseInputStream.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/testtools/YellOnCloseInputStream.java
[m[m31.08.2022 - 17:05:02.364 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DirectoryWalkerTestCaseJava4.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/DirectoryWalkerTestCaseJava4.java
[m[m31.08.2022 - 17:05:02.365 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ProxyOutputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/ProxyOutputStreamTest.java
[m[m31.08.2022 - 17:05:02.365 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote SelectorAdapter.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/SelectorAdapter.java
[m[m31.08.2022 - 17:05:02.371 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote XmlStreamReader.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/compatibility/XmlStreamReader.java
[m[m31.08.2022 - 17:05:02.377 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TailerTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/TailerTest.java
[m[m31.08.2022 - 17:05:02.380 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileAlterationObserverTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/monitor/FileAlterationObserverTestCase.java
[m[m31.08.2022 - 17:05:02.380 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ThresholdingOutputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/ThresholdingOutputStreamTest.java
[m[m31.08.2022 - 17:05:02.381 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ObservableInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/ObservableInputStreamTest.java
[m[m31.08.2022 - 17:05:02.383 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileWriterWithEncodingTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/FileWriterWithEncodingTest.java
[m[m31.08.2022 - 17:05:02.384 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote PathFileComparatorTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/comparator/PathFileComparatorTest.java
[m[m31.08.2022 - 17:05:02.387 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote OrFileFilterTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/filefilter/OrFileFilterTestCase.java
[m[m31.08.2022 - 17:05:02.391 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileSystemUtilsTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FileSystemUtilsTestCase.java
[m[m31.08.2022 - 17:05:02.391 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ClosingBase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/serialization/ClosingBase.java
[m[m31.08.2022 - 17:05:02.392 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileDeleteStrategyTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FileDeleteStrategyTestCase.java
[m[m31.08.2022 - 17:05:02.405 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote IOUtilsTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/IOUtilsTestCase.java
[m[m31.08.2022 - 17:05:02.406 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote BoundedInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/BoundedInputStreamTest.java
[m[m31.08.2022 - 17:05:02.407 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ExtensionFileComparatorTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/comparator/ExtensionFileComparatorTest.java
[m[m31.08.2022 - 17:05:02.412 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileUtilsCleanSymlinksTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java
[m[m31.08.2022 - 17:05:02.413 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CollectionFileListener.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/monitor/CollectionFileListener.java
[m[m31.08.2022 - 17:05:02.414 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ChunkedOutputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/ChunkedOutputStreamTest.java
[m[m31.08.2022 - 17:05:02.414 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ReversedLinesFileReaderTestSimple.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/ReversedLinesFileReaderTestSimple.java
[m[m31.08.2022 - 17:05:02.417 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileCleaningTrackerTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FileCleaningTrackerTestCase.java
[m[m31.08.2022 - 17:05:02.420 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote HexDumpTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/HexDumpTest.java
[m[m31.08.2022 - 17:05:02.421 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote BrokenOutputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/BrokenOutputStreamTest.java
[m[m31.08.2022 - 17:05:02.422 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote NullInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/NullInputStreamTest.java
[m[m31.08.2022 - 17:05:02.423 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote LockableFileWriterTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/LockableFileWriterTest.java
[m[m31.08.2022 - 17:05:02.424 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ReversedLinesFileReaderTestParamFile.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java
[m[m31.08.2022 - 17:05:02.424 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote NullOutputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/NullOutputStreamTest.java
[m[m31.08.2022 - 17:05:02.425 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote LastModifiedFileComparatorTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/comparator/LastModifiedFileComparatorTest.java
[m[m31.08.2022 - 17:05:02.427 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CountingInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/CountingInputStreamTest.java
[m[m31.08.2022 - 17:05:02.428 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote XmlStreamWriterTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/XmlStreamWriterTest.java
[m[m31.08.2022 - 17:05:02.429 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote BoundedReaderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/BoundedReaderTest.java
[m[m31.08.2022 - 17:05:02.443 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FilenameUtilsTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FilenameUtilsTestCase.java
[m[m31.08.2022 - 17:05:02.445 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote EndianUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/EndianUtilsTest.java
[m[m31.08.2022 - 17:05:02.446 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote XmlStreamReaderUtilitiesCompatibilityTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/compatibility/XmlStreamReaderUtilitiesCompatibilityTest.java
[m[m31.08.2022 - 17:05:02.447 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ValidatingObjectInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/serialization/ValidatingObjectInputStreamTest.java
[m[m31.08.2022 - 17:05:02.448 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DirectoryFileComparatorTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/comparator/DirectoryFileComparatorTest.java
[m[m31.08.2022 - 17:05:02.448 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ThreadMonitorTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/ThreadMonitorTestCase.java
[m[m31.08.2022 - 17:05:02.452 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote XmlStreamReaderUtilitiesTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/XmlStreamReaderUtilitiesTest.java
[m[m31.08.2022 - 17:05:02.453 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote SwappedDataInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/SwappedDataInputStreamTest.java
[m[m31.08.2022 - 17:05:02.455 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote NullReaderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/NullReaderTest.java
[m[m31.08.2022 - 17:05:02.455 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TaggedOutputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/TaggedOutputStreamTest.java
[m[m31.08.2022 - 17:05:02.456 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileUtilsWaitForTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FileUtilsWaitForTestCase.java
[m[m31.08.2022 - 17:05:02.456 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ByteOrderParserTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/ByteOrderParserTest.java
[m[m31.08.2022 - 17:05:02.457 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileUtilsCleanDirectoryTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java
[m[m31.08.2022 - 17:05:02.460 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote XmlStreamReaderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/XmlStreamReaderTest.java
[m[m31.08.2022 - 17:05:02.462 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TestUtils.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/testtools/TestUtils.java
[m[m31.08.2022 - 17:05:02.463 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ByteArrayOutputStreamTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java
[m[m31.08.2022 - 17:05:02.464 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote YellOnFlushAndCloseOutputStream.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/testtools/YellOnFlushAndCloseOutputStream.java
[m[m31.08.2022 - 17:05:02.464 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote XmlStreamReaderException.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/compatibility/XmlStreamReaderException.java
[m[m31.08.2022 - 17:05:02.472 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote BOMInputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/input/BOMInputStreamTest.java
[m[m31.08.2022 - 17:05:02.473 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ByteOrderMarkTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/ByteOrderMarkTestCase.java
[m[m31.08.2022 - 17:05:02.474 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote NameFileComparatorTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/comparator/NameFileComparatorTest.java
[m[m31.08.2022 - 17:05:02.479 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote IOUtilsWriteTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/IOUtilsWriteTestCase.java
[m[m31.08.2022 - 17:05:02.479 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote IOExceptionWithCauseTestCase.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/IOExceptionWithCauseTestCase.java
[m[m31.08.2022 - 17:05:02.480 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CountingOutputStreamTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/CountingOutputStreamTest.java
[m[m31.08.2022 - 17:05:02.481 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ProxyWriterTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/ProxyWriterTest.java
[m[m31.08.2022 - 17:05:02.482 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StringBuilderWriterTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen/org/apache/commons/io/output/StringBuilderWriterTest.java
[m[m31.08.2022 - 17:05:02.482 [INFO ] JUnitJSRFacade.logTime() - ******************************************************************
[m[m31.08.2022 - 17:05:02.482 [INFO ] JUnitJSRFacade.logTime() - * Facade Statistics:
[m[m31.08.2022 - 17:05:02.482 [INFO ] JUnitJSRFacade.logTime() - * Parsing took: 1.294 seconds
[m[m31.08.2022 - 17:05:02.482 [INFO ] JUnitJSRFacade.logTime() - * Reduction took: 413.252 seconds
[m[m31.08.2022 - 17:05:02.483 [INFO ] JUnitJSRFacade.logTime() - * Serialization took: 0.955 seconds
[m[m31.08.2022 - 17:05:02.483 [INFO ] JUnitJSRFacade.logTime() - * Overall: 415.501 seconds
[m[m31.08.2022 - 17:05:02.483 [INFO ] JUnitJSRFacade.logTime() - ******************************************************************
[mSuccessfully reduced your test suite!
+----------------------------------- Summary -----------------------------------+
| Test suite size: 1078 test cases
+-------------------------------------------------------------------------------+
| Found 1005 relevant test cases:
|    org.apache.commons.io.input.ProxyReaderTest:testNullCharArray
|    org.apache.commons.io.input.ProxyReaderTest:testNullCharBuffer
|    org.apache.commons.io.CopyUtilsTest:testCtor
|    org.apache.commons.io.CopyUtilsTest:copy_byteArrayToOutputStream
|    org.apache.commons.io.CopyUtilsTest:copy_byteArrayToWriter
|    org.apache.commons.io.CopyUtilsTest:testCopy_byteArrayToWriterWithEncoding
|    org.apache.commons.io.CopyUtilsTest:testCopy_inputStreamToOutputStream
|    org.apache.commons.io.CopyUtilsTest:copy_inputStreamToWriterWithEncoding
|    org.apache.commons.io.CopyUtilsTest:testCopy_readerToOutputStream
|    org.apache.commons.io.CopyUtilsTest:copy_readerToWriter
|    org.apache.commons.io.CopyUtilsTest:copy_stringToOutputStream
|    org.apache.commons.io.CopyUtilsTest:copy_stringToWriter
|    org.apache.commons.io.FileUtilsTestCase:testGetFile
|    org.apache.commons.io.FileUtilsTestCase:testGetFile_Parent
|    org.apache.commons.io.FileUtilsTestCase:testGetTempDirectoryPath
|    org.apache.commons.io.FileUtilsTestCase:testGetTempDirectory
|    org.apache.commons.io.FileUtilsTestCase:testGetUserDirectoryPath
|    org.apache.commons.io.FileUtilsTestCase:testGetUserDirectory
|    org.apache.commons.io.FileUtilsTestCase:test_openInputStream_exists
|    org.apache.commons.io.FileUtilsTestCase:test_openInputStream_existsButIsDirectory
|    org.apache.commons.io.FileUtilsTestCase:test_openInputStream_notExists
|    org.apache.commons.io.FileUtilsTestCase:test_openOutputStream_noParentCreateFile
|    org.apache.commons.io.FileUtilsTestCase:test_openOutputStream_noParentNoFile
|    org.apache.commons.io.FileUtilsTestCase:test_openOutputStream_exists
|    org.apache.commons.io.FileUtilsTestCase:test_openOutputStream_existsButIsDirectory
|    org.apache.commons.io.FileUtilsTestCase:test_openOutputStream_notExists
|    org.apache.commons.io.FileUtilsTestCase:test_openOutputStream_notExistsCannotCreate
|    org.apache.commons.io.FileUtilsTestCase:testByteCountToDisplaySizeBigInteger
|    org.apache.commons.io.FileUtilsTestCase:testByteCountToDisplaySizeLong
|    org.apache.commons.io.FileUtilsTestCase:testToFile1
|    org.apache.commons.io.FileUtilsTestCase:testToFile2
|    org.apache.commons.io.FileUtilsTestCase:testToFile3
|    org.apache.commons.io.FileUtilsTestCase:testToFile4
|    org.apache.commons.io.FileUtilsTestCase:testToFileUtf8
|    org.apache.commons.io.FileUtilsTestCase:testDecodeUrlEncodingUtf8
|    org.apache.commons.io.FileUtilsTestCase:testToFiles1
|    org.apache.commons.io.FileUtilsTestCase:testToFiles3
|    org.apache.commons.io.FileUtilsTestCase:testToFiles3a
|    org.apache.commons.io.FileUtilsTestCase:testToFiles4
|    org.apache.commons.io.FileUtilsTestCase:testToURLs1
|    org.apache.commons.io.FileUtilsTestCase:testToURLs3a
|    org.apache.commons.io.FileUtilsTestCase:testContentEquals
|    org.apache.commons.io.FileUtilsTestCase:testContentEqualsIgnoreEOL
|    org.apache.commons.io.FileUtilsTestCase:testCopyURLToFile
|    org.apache.commons.io.FileUtilsTestCase:testCopyURLToFileWithTimeout
|    org.apache.commons.io.FileUtilsTestCase:testForceMkdir
|    org.apache.commons.io.FileUtilsTestCase:testForceMkdirParent
|    org.apache.commons.io.FileUtilsTestCase:testSizeOfDirectory
|    org.apache.commons.io.FileUtilsTestCase:testSizeOfDirectoryAsBigInteger
|    org.apache.commons.io.FileUtilsTestCase:testCompareSizeOf
|    org.apache.commons.io.FileUtilsTestCase:testSizeOf
|    org.apache.commons.io.FileUtilsTestCase:testSizeOfAsBigInteger
|    org.apache.commons.io.FileUtilsTestCase:testIsFileNewerOlder
|    org.apache.commons.io.FileUtilsTestCase:testCopyFile1
|    org.apache.commons.io.FileUtilsTestCase:testCopyFileToOutputStream
|    org.apache.commons.io.FileUtilsTestCase:testCopyFile2
|    org.apache.commons.io.FileUtilsTestCase:testCopyToSelf
|    org.apache.commons.io.FileUtilsTestCase:testCopyFile2WithoutFileDatePreservation
|    org.apache.commons.io.FileUtilsTestCase:testCopyDirectoryToDirectory_NonExistingDest
|    org.apache.commons.io.FileUtilsTestCase:testCopyDirectoryToNonExistingDest
|    org.apache.commons.io.FileUtilsTestCase:testCopyDirectoryToExistingDest
|    org.apache.commons.io.FileUtilsTestCase:testCopyDirectoryFiltered
|    org.apache.commons.io.FileUtilsTestCase:testCopyDirectoryPreserveDates
|    org.apache.commons.io.FileUtilsTestCase:testCopyDirectoryToChild
|    org.apache.commons.io.FileUtilsTestCase:testCopyDirectoryToGrandChild
|    org.apache.commons.io.FileUtilsTestCase:testCopyDirectoryToItself
|    org.apache.commons.io.FileUtilsTestCase:testCopyDirectoryErrors
|    org.apache.commons.io.FileUtilsTestCase:testCopyToDirectoryWithFile
|    org.apache.commons.io.FileUtilsTestCase:testCopyToDirectoryWithFileSourceIsNull
|    org.apache.commons.io.FileUtilsTestCase:testCopyToDirectoryWithFileSourceDoesNotExist
|    org.apache.commons.io.FileUtilsTestCase:testCopyToDirectoryWithDirectory
|    org.apache.commons.io.FileUtilsTestCase:testCopyToDirectoryWithIterable
|    org.apache.commons.io.FileUtilsTestCase:testCopyToDirectoryWithIterableSourceIsNull
|    org.apache.commons.io.FileUtilsTestCase:testCopyToDirectoryWithIterableSourceDoesNotExist
|    org.apache.commons.io.FileUtilsTestCase:testForceDeleteAFile1
|    org.apache.commons.io.FileUtilsTestCase:testForceDeleteAFile2
|    org.apache.commons.io.FileUtilsTestCase:testForceDeleteAFile3
|    org.apache.commons.io.FileUtilsTestCase:testCopyFile2ToDir
|    org.apache.commons.io.FileUtilsTestCase:testForceDeleteDir
|    org.apache.commons.io.FileUtilsTestCase:testFileUtils
|    org.apache.commons.io.FileUtilsTestCase:testTouch
|    org.apache.commons.io.FileUtilsTestCase:testListFiles
|    org.apache.commons.io.FileUtilsTestCase:testIterateFiles
|    org.apache.commons.io.FileUtilsTestCase:testIterateFilesAndDirs
|    org.apache.commons.io.FileUtilsTestCase:testReadFileToStringWithDefaultEncoding
|    org.apache.commons.io.FileUtilsTestCase:testReadFileToStringWithEncoding
|    org.apache.commons.io.FileUtilsTestCase:testReadFileToByteArray
|    org.apache.commons.io.FileUtilsTestCase:testReadLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteStringToFile1
|    org.apache.commons.io.FileUtilsTestCase:testWriteStringToFile2
|    org.apache.commons.io.FileUtilsTestCase:testWriteStringToFile3
|    org.apache.commons.io.FileUtilsTestCase:testWriteCharSequence1
|    org.apache.commons.io.FileUtilsTestCase:testWriteCharSequence2
|    org.apache.commons.io.FileUtilsTestCase:testWriteByteArrayToFile
|    org.apache.commons.io.FileUtilsTestCase:testWriteByteArrayToFile_WithOffsetAndLength
|    org.apache.commons.io.FileUtilsTestCase:testWriteLines_4arg_Writer_nullData
|    org.apache.commons.io.FileUtilsTestCase:testWriteLines_4arg_nullSeparator
|    org.apache.commons.io.FileUtilsTestCase:testWriteLines_3arg_nullSeparator
|    org.apache.commons.io.FileUtilsTestCase:testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testChecksumCRC32
|    org.apache.commons.io.FileUtilsTestCase:testChecksum
|    org.apache.commons.io.FileUtilsTestCase:testChecksumOnNullFile
|    org.apache.commons.io.FileUtilsTestCase:testChecksumOnNullChecksum
|    org.apache.commons.io.FileUtilsTestCase:testChecksumOnDirectory
|    org.apache.commons.io.FileUtilsTestCase:testChecksumDouble
|    org.apache.commons.io.FileUtilsTestCase:testDeleteDirectoryWithNonDirectory
|    org.apache.commons.io.FileUtilsTestCase:testDeleteQuietlyForNull
|    org.apache.commons.io.FileUtilsTestCase:testDeleteQuietlyDir
|    org.apache.commons.io.FileUtilsTestCase:testDeleteQuietlyFile
|    org.apache.commons.io.FileUtilsTestCase:testDeleteQuietlyNonExistent
|    org.apache.commons.io.FileUtilsTestCase:testMoveFile_Rename
|    org.apache.commons.io.FileUtilsTestCase:testMoveFile_CopyDelete
|    org.apache.commons.io.FileUtilsTestCase:testMoveFile_Errors
|    org.apache.commons.io.FileUtilsTestCase:testMoveFileToDirectory
|    org.apache.commons.io.FileUtilsTestCase:testMoveFileToDirectory_Errors
|    org.apache.commons.io.FileUtilsTestCase:testMoveDirectory_Rename
|    org.apache.commons.io.FileUtilsTestCase:testMoveDirectory_CopyDelete
|    org.apache.commons.io.FileUtilsTestCase:testMoveDirectory_Errors
|    org.apache.commons.io.FileUtilsTestCase:testMoveDirectoryToDirectory
|    org.apache.commons.io.FileUtilsTestCase:testMoveDirectoryToDirectory_Errors
|    org.apache.commons.io.FileUtilsTestCase:testMoveToDirectory
|    org.apache.commons.io.FileUtilsTestCase:testMoveToDirectory_Errors
|    org.apache.commons.io.FileUtilsTestCase:testIO300
|    org.apache.commons.io.FileUtilsTestCase:testIO276
|    org.apache.commons.io.FileUtilsTestCase:testIncorrectOutputSize
|    org.apache.commons.io.FileCleanerTestCase:testFileCleanerFile
|    org.apache.commons.io.FileCleanerTestCase:testFileCleanerDirectory
|    org.apache.commons.io.FileCleanerTestCase:testFileCleanerDirectory_NullStrategy
|    org.apache.commons.io.FileCleanerTestCase:testFileCleanerDirectory_ForceStrategy
|    org.apache.commons.io.FileCleanerTestCase:testFileCleanerNull
|    org.apache.commons.io.FileCleanerTestCase:testFileCleanerExitWhenFinished_NoTrackAfter
|    org.apache.commons.io.FileCleanerTestCase:testFileCleanerExitWhenFinished1
|    org.apache.commons.io.FileCleanerTestCase:testFileCleanerExitWhenFinished2
|    org.apache.commons.io.input.InfiniteCircularInputStreamTest:should_cycle_bytes
|    org.apache.commons.io.input.InfiniteCircularInputStreamTest:should_handle_whole_range_of_bytes
|    org.apache.commons.io.filefilter.AndFileFilterTestCase:testAdd
|    org.apache.commons.io.filefilter.AndFileFilterTestCase:testRemove
|    org.apache.commons.io.filefilter.AndFileFilterTestCase:testNoFilters
|    org.apache.commons.io.filefilter.AndFileFilterTestCase:testFilterBuiltUsingConstructor
|    org.apache.commons.io.filefilter.AndFileFilterTestCase:testFilterBuiltUsingAdd
|    org.apache.commons.io.input.WindowsLineEndingInputStreamTest:simpleString
|    org.apache.commons.io.input.WindowsLineEndingInputStreamTest:inTheMiddleOfTheLine
|    org.apache.commons.io.input.WindowsLineEndingInputStreamTest:multipleBlankLines
|    org.apache.commons.io.input.WindowsLineEndingInputStreamTest:twoLinesAtEnd
|    org.apache.commons.io.input.WindowsLineEndingInputStreamTest:malformed
|    org.apache.commons.io.input.WindowsLineEndingInputStreamTest:retainLineFeed
|    org.apache.commons.io.DirectoryWalkerTestCase:testFilter
|    org.apache.commons.io.DirectoryWalkerTestCase:testFilterAndLimitA
|    org.apache.commons.io.DirectoryWalkerTestCase:testFilterAndLimitB
|    org.apache.commons.io.DirectoryWalkerTestCase:testFilterAndLimitC
|    org.apache.commons.io.DirectoryWalkerTestCase:testFilterAndLimitD
|    org.apache.commons.io.DirectoryWalkerTestCase:testFilterDirAndFile1
|    org.apache.commons.io.DirectoryWalkerTestCase:testFilterDirAndFile2
|    org.apache.commons.io.DirectoryWalkerTestCase:testFilterDirAndFile3
|    org.apache.commons.io.DirectoryWalkerTestCase:testFilterDirAndFile4
|    org.apache.commons.io.DirectoryWalkerTestCase:testLimitToCurrent
|    org.apache.commons.io.DirectoryWalkerTestCase:testMissingStartDirectory
|    org.apache.commons.io.DirectoryWalkerTestCase:testHandleStartDirectoryFalse
|    org.apache.commons.io.DirectoryWalkerTestCase:testCancel
|    org.apache.commons.io.DirectoryWalkerTestCase:testMultiThreadCancel
|    org.apache.commons.io.DirectoryWalkerTestCase:testFilterString
|    org.apache.commons.io.input.CloseShieldInputStreamTest:testClose
|    org.apache.commons.io.output.ChunkedWriterTest:write_four_chunks
|    org.apache.commons.io.output.ChunkedWriterTest:write_two_chunks_default_constructor
|    org.apache.commons.io.output.ChunkedWriterTest:negative_chunksize_not_permitted
|    org.apache.commons.io.output.TeeOutputStreamTest:testCloseBranchIOException
|    org.apache.commons.io.output.TeeOutputStreamTest:testCloseMainIOException
|    org.apache.commons.io.output.TeeOutputStreamTest:testTee
|    org.apache.commons.io.input.UnixLineEndingInputStreamTest:simpleString
|    org.apache.commons.io.input.UnixLineEndingInputStreamTest:inTheMiddleOfTheLine
|    org.apache.commons.io.input.UnixLineEndingInputStreamTest:multipleBlankLines
|    org.apache.commons.io.input.UnixLineEndingInputStreamTest:twoLinesAtEnd
|    org.apache.commons.io.input.UnixLineEndingInputStreamTest:crOnlyNotAtEof
|    org.apache.commons.io.input.UnixLineEndingInputStreamTest:crAtEnd
|    org.apache.commons.io.input.UnixLineEndingInputStreamTest:retainLineFeed
|    org.apache.commons.io.serialization.RegexpClassNameMatcherTest:testOrPattern
|    org.apache.commons.io.serialization.RegexpClassNameMatcherTest:testNullStringPattern
|    org.apache.commons.io.serialization.RegexpClassNameMatcherTest:testNullPatternPattern
|    org.apache.commons.io.input.BrokenInputStreamTest:testRead
|    org.apache.commons.io.input.BrokenInputStreamTest:testAvailable
|    org.apache.commons.io.input.BrokenInputStreamTest:testSkip
|    org.apache.commons.io.input.BrokenInputStreamTest:testReset
|    org.apache.commons.io.input.BrokenInputStreamTest:testClose
|    org.apache.commons.io.input.MessageDigestCalculatingInputStreamTest:test
|    org.apache.commons.io.input.AutoCloseInputStreamTest:testClose
|    org.apache.commons.io.input.AutoCloseInputStreamTest:testRead
|    org.apache.commons.io.input.AutoCloseInputStreamTest:testReadBuffer
|    org.apache.commons.io.input.AutoCloseInputStreamTest:testReadBufferOffsetLength
|    org.apache.commons.io.input.ReaderInputStreamTest:testUTF8WithSingleByteRead
|    org.apache.commons.io.input.ReaderInputStreamTest:testLargeUTF8WithSingleByteRead
|    org.apache.commons.io.input.ReaderInputStreamTest:testUTF8WithBufferedRead
|    org.apache.commons.io.input.ReaderInputStreamTest:testLargeUTF8WithBufferedRead
|    org.apache.commons.io.input.ReaderInputStreamTest:testUTF16WithSingleByteRead
|    org.apache.commons.io.input.ReaderInputStreamTest:testReadZero
|    org.apache.commons.io.input.ReaderInputStreamTest:testReadZeroEmptyString
|    org.apache.commons.io.input.ReaderInputStreamTest:testCharsetMismatchInfiniteLoop
|    org.apache.commons.io.input.TaggedInputStreamTest:testEmptyStream
|    org.apache.commons.io.input.TaggedInputStreamTest:testNormalStream
|    org.apache.commons.io.input.TaggedInputStreamTest:testBrokenStream
|    org.apache.commons.io.input.TaggedInputStreamTest:testOtherException
|    org.apache.commons.io.input.ClosedInputStreamTest:testRead
|    org.apache.commons.io.CharsetsTestCase:testRequiredCharsets
|    org.apache.commons.io.CharsetsTestCase:testIso8859_1
|    org.apache.commons.io.CharsetsTestCase:testToCharset
|    org.apache.commons.io.CharsetsTestCase:testUsAscii
|    org.apache.commons.io.CharsetsTestCase:testUtf16
|    org.apache.commons.io.CharsetsTestCase:testUtf16Be
|    org.apache.commons.io.CharsetsTestCase:testUtf16Le
|    org.apache.commons.io.CharsetsTestCase:testUtf8
|    org.apache.commons.io.DemuxTestCase:testInputStream
|    org.apache.commons.io.FileUtilsDirectoryContainsTestCase:testCanonicalPath
|    org.apache.commons.io.FileUtilsDirectoryContainsTestCase:testDirectoryContainsDirectory
|    org.apache.commons.io.FileUtilsDirectoryContainsTestCase:testDirectoryContainsFile
|    org.apache.commons.io.FileUtilsDirectoryContainsTestCase:testDirectoryDoesNotContainFile
|    org.apache.commons.io.FileUtilsDirectoryContainsTestCase:testDirectoryDoesNotExist
|    org.apache.commons.io.FileUtilsDirectoryContainsTestCase:testIO466
|    org.apache.commons.io.FileUtilsDirectoryContainsTestCase:testFileDoesNotExist
|    org.apache.commons.io.FileUtilsDirectoryContainsTestCase:testFileDoesNotExistBug
|    org.apache.commons.io.FileUtilsDirectoryContainsTestCase:testUnrealizedContainment
|    org.apache.commons.io.filefilter.FileFilterTestCase:testSuffix
|    org.apache.commons.io.filefilter.FileFilterTestCase:testSuffixCaseInsensitive
|    org.apache.commons.io.filefilter.FileFilterTestCase:testDirectory
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFiles
|    org.apache.commons.io.filefilter.FileFilterTestCase:testPrefix
|    org.apache.commons.io.filefilter.FileFilterTestCase:testPrefixCaseInsensitive
|    org.apache.commons.io.filefilter.FileFilterTestCase:testNameFilter
|    org.apache.commons.io.filefilter.FileFilterTestCase:testNameFilterNullArgument
|    org.apache.commons.io.filefilter.FileFilterTestCase:testNameFilterNullArrayArgument
|    org.apache.commons.io.filefilter.FileFilterTestCase:testNameFilterNullListArgument
|    org.apache.commons.io.filefilter.FileFilterTestCase:testTrue
|    org.apache.commons.io.filefilter.FileFilterTestCase:testNot
|    org.apache.commons.io.filefilter.FileFilterTestCase:testAnd
|    org.apache.commons.io.filefilter.FileFilterTestCase:testOr
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFileFilterUtils_and
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFileFilterUtils_or
|    org.apache.commons.io.filefilter.FileFilterTestCase:testDeprecatedWildcard
|    org.apache.commons.io.filefilter.FileFilterTestCase:testWildcard
|    org.apache.commons.io.filefilter.FileFilterTestCase:testDelegateFileFilter
|    org.apache.commons.io.filefilter.FileFilterTestCase:testMakeCVSAware
|    org.apache.commons.io.filefilter.FileFilterTestCase:testMakeSVNAware
|    org.apache.commons.io.filefilter.FileFilterTestCase:testAgeFilter
|    org.apache.commons.io.filefilter.FileFilterTestCase:testSizeFilter
|    org.apache.commons.io.filefilter.FileFilterTestCase:testHidden
|    org.apache.commons.io.filefilter.FileFilterTestCase:testCanRead
|    org.apache.commons.io.filefilter.FileFilterTestCase:testCanWrite
|    org.apache.commons.io.filefilter.FileFilterTestCase:testEmpty
|    org.apache.commons.io.filefilter.FileFilterTestCase:testMakeDirectoryOnly
|    org.apache.commons.io.filefilter.FileFilterTestCase:testMakeFileOnly
|    org.apache.commons.io.filefilter.FileFilterTestCase:testMagicNumberFileFilterBytes
|    org.apache.commons.io.filefilter.FileFilterTestCase:testMagicNumberFileFilterBytesOffset
|    org.apache.commons.io.filefilter.FileFilterTestCase:testMagicNumberFileFilterString
|    org.apache.commons.io.filefilter.FileFilterTestCase:testMagicNumberFileFilterStringOffset
|    org.apache.commons.io.filefilter.FileFilterTestCase:testMagicNumberFileFilterValidation
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFilterArray
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFilterArray_fromList
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFilterArrayNullParameters
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFilterList
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFilterList_fromArray
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFilterListNullParameters
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFilterSet
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFilterSet_fromArray
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFilterSetNullParameters
|    org.apache.commons.io.filefilter.FileFilterTestCase:testEnsureTestCoverage
|    org.apache.commons.io.filefilter.FileFilterTestCase:testNullFilters
|    org.apache.commons.io.filefilter.FileFilterTestCase:testDelegation
|    org.apache.commons.io.input.CharSequenceReaderTest:testClose
|    org.apache.commons.io.input.CharSequenceReaderTest:testMark
|    org.apache.commons.io.input.CharSequenceReaderTest:testSkip
|    org.apache.commons.io.input.CharSequenceReaderTest:testRead
|    org.apache.commons.io.input.CharSequenceReaderTest:testReadCharArray
|    org.apache.commons.io.input.CharSequenceReaderTest:testReadCharArrayPortion
|    org.apache.commons.io.LineIteratorTestCase:testConstructor
|    org.apache.commons.io.LineIteratorTestCase:testZeroLines
|    org.apache.commons.io.LineIteratorTestCase:testOneLines
|    org.apache.commons.io.LineIteratorTestCase:testTwoLines
|    org.apache.commons.io.LineIteratorTestCase:testThreeLines
|    org.apache.commons.io.LineIteratorTestCase:testMissingFile
|    org.apache.commons.io.LineIteratorTestCase:testValidEncoding
|    org.apache.commons.io.LineIteratorTestCase:testInvalidEncoding
|    org.apache.commons.io.LineIteratorTestCase:testNextLineOnlyDefaultEncoding
|    org.apache.commons.io.LineIteratorTestCase:testNextLineOnlyNullEncoding
|    org.apache.commons.io.LineIteratorTestCase:testNextLineOnlyUtf8Encoding
|    org.apache.commons.io.LineIteratorTestCase:testNextOnly
|    org.apache.commons.io.LineIteratorTestCase:testNextWithException
|    org.apache.commons.io.LineIteratorTestCase:testCloseEarly
|    org.apache.commons.io.LineIteratorTestCase:testFilteringFileReader
|    org.apache.commons.io.LineIteratorTestCase:testFilteringBufferedReader
|    org.apache.commons.io.comparator.SizeFileComparatorTest:testNonexistantFile
|    org.apache.commons.io.comparator.SizeFileComparatorTest:testCompareDirectorySizes
|    org.apache.commons.io.comparator.SizeFileComparatorTest:testComparator
|    org.apache.commons.io.comparator.SizeFileComparatorTest:testReverseComparator
|    org.apache.commons.io.comparator.SizeFileComparatorTest:testSortArrayNull
|    org.apache.commons.io.comparator.SizeFileComparatorTest:testSortArray
|    org.apache.commons.io.comparator.SizeFileComparatorTest:testSortList
|    org.apache.commons.io.comparator.SizeFileComparatorTest:testSortListNull
|    org.apache.commons.io.comparator.SizeFileComparatorTest:testToString
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_inputStreamToOutputStream
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_inputStreamToOutputStreamWithBufferSize
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_inputStreamToOutputStream_nullIn
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_inputStreamToOutputStream_nullOut
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_inputStreamToOutputStream_IO84
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_inputStreamToWriter
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_inputStreamToWriter_nullIn
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_inputStreamToWriter_nullOut
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_inputStreamToWriter_Encoding
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_inputStreamToWriter_Encoding_nullIn
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_inputStreamToWriter_Encoding_nullOut
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_inputStreamToWriter_Encoding_nullEncoding
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_readerToOutputStream
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_readerToOutputStream_nullIn
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_readerToOutputStream_nullOut
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_readerToOutputStream_Encoding
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_readerToOutputStream_Encoding_nullIn
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_readerToOutputStream_Encoding_nullOut
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_readerToOutputStream_Encoding_nullEncoding
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_readerToWriter
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_readerToWriter_nullIn
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_readerToWriter_nullOut
|    org.apache.commons.io.IOUtilsCopyTestCase:testCopy_readerToWriter_IO84
|    org.apache.commons.io.IOCaseTestCase:test_serialization
|    org.apache.commons.io.IOCaseTestCase:test_getName
|    org.apache.commons.io.IOCaseTestCase:test_toString
|    org.apache.commons.io.IOCaseTestCase:test_isCaseSensitive
|    org.apache.commons.io.IOCaseTestCase:test_checkCompare_functionality
|    org.apache.commons.io.IOCaseTestCase:test_checkCompare_case
|    org.apache.commons.io.IOCaseTestCase:test_checkEquals_functionality
|    org.apache.commons.io.IOCaseTestCase:test_checkEquals_case
|    org.apache.commons.io.IOCaseTestCase:test_checkStartsWith_functionality
|    org.apache.commons.io.IOCaseTestCase:test_checkStartsWith_case
|    org.apache.commons.io.IOCaseTestCase:test_checkEndsWith_functionality
|    org.apache.commons.io.IOCaseTestCase:test_checkEndsWith_case
|    org.apache.commons.io.IOCaseTestCase:test_checkIndexOf_functionality
|    org.apache.commons.io.IOCaseTestCase:test_checkIndexOf_case
|    org.apache.commons.io.IOCaseTestCase:test_checkRegionMatches_functionality
|    org.apache.commons.io.IOCaseTestCase:test_checkRegionMatches_case
|    org.apache.commons.io.comparator.DefaultFileComparatorTest:testComparator
|    org.apache.commons.io.comparator.DefaultFileComparatorTest:testReverseComparator
|    org.apache.commons.io.comparator.DefaultFileComparatorTest:testSortArrayNull
|    org.apache.commons.io.comparator.DefaultFileComparatorTest:testSortArray
|    org.apache.commons.io.comparator.DefaultFileComparatorTest:testSortList
|    org.apache.commons.io.comparator.DefaultFileComparatorTest:testSortListNull
|    org.apache.commons.io.comparator.DefaultFileComparatorTest:testToString
|    org.apache.commons.io.serialization.FullClassNameMatcherTest:noNames
|    org.apache.commons.io.FileUtilsFileNewerTestCase:testIsFileNewer
|    org.apache.commons.io.FileUtilsFileNewerTestCase:testIsFileNewerImaginaryFile
|    org.apache.commons.io.FileUtilsFileNewerTestCase:testIsFileNewerNoFile
|    org.apache.commons.io.FileUtilsFileNewerTestCase:testIsFileNewerNoDate
|    org.apache.commons.io.FileUtilsFileNewerTestCase:testIsFileNewerNoFileReference
|    org.apache.commons.io.output.CloseShieldOutputStreamTest:testClose
|    org.apache.commons.io.filefilter.RegexFileFilterTestCase:testRegex
|    org.apache.commons.io.FileUtilsListFilesTestCase:testIterateFilesByExtension
|    org.apache.commons.io.FileUtilsListFilesTestCase:testListFilesByExtension
|    org.apache.commons.io.FileUtilsListFilesTestCase:testListFiles
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testBufferedRead_AvailableCharset
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testBufferedRead_RequiredCharset
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testBufferedRead_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testCharsetMismatchInfiniteLoop_RequiredCharsets
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testIO_356_B10_D10_S0_UTF16
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testIO_356_B10_D10_S0_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testIO_356_B10_D10_S1_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testIO_356_B10_D10_S2_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testIO_356_B10_D13_S0_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testIO_356_B10_D13_S1_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testIO_356_Loop_UTF16
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testIO_356_Loop_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testLargeBufferedRead_RequiredCharsets
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testLargeBufferedRead_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testLargeSingleByteRead_RequiredCharsets
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testLargeSingleByteRead_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testMarkReset_USASCII
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testMarkReset_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testMarkSupported
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testReadZero_EmptyString
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testReadZero_RequiredCharsets
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testSingleByteRead_RequiredCharsets
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testSingleByteRead_UTF16
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testSingleByteRead_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testSkip_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testAvailable
|    org.apache.commons.io.output.ClosedOutputStreamTest:testRead
|    org.apache.commons.io.output.ClosedOutputStreamTest:testFlush
|    org.apache.commons.io.output.WriterOutputStreamTest:testUTF8WithSingleByteWrite
|    org.apache.commons.io.output.WriterOutputStreamTest:testLargeUTF8WithSingleByteWrite
|    org.apache.commons.io.output.WriterOutputStreamTest:testUTF8WithBufferedWrite
|    org.apache.commons.io.output.WriterOutputStreamTest:testLargeUTF8WithBufferedWrite
|    org.apache.commons.io.output.WriterOutputStreamTest:testUTF16WithSingleByteWrite
|    org.apache.commons.io.output.WriterOutputStreamTest:testUTF16WithBufferedWrite
|    org.apache.commons.io.output.WriterOutputStreamTest:testUTF16BEWithSingleByteWrite
|    org.apache.commons.io.output.WriterOutputStreamTest:testUTF16BEWithBufferedWrite
|    org.apache.commons.io.output.WriterOutputStreamTest:testUTF16LEWithSingleByteWrite
|    org.apache.commons.io.output.WriterOutputStreamTest:testUTF16LEWithBufferedWrite
|    org.apache.commons.io.output.WriterOutputStreamTest:testFlush
|    org.apache.commons.io.output.WriterOutputStreamTest:testWriteImmediately
|    org.apache.commons.io.input.TeeInputStreamTest:testReadNothing
|    org.apache.commons.io.input.TeeInputStreamTest:testReadOneByte
|    org.apache.commons.io.input.TeeInputStreamTest:testReadToArray
|    org.apache.commons.io.input.TeeInputStreamTest:testReadToArrayWithOffset
|    org.apache.commons.io.input.TeeInputStreamTest:testSkip
|    org.apache.commons.io.input.TeeInputStreamTest:testMarkReset
|    org.apache.commons.io.monitor.FileAlterationMonitorTestCase:testDefaultConstructor
|    org.apache.commons.io.monitor.FileAlterationMonitorTestCase:testAddRemoveObservers
|    org.apache.commons.io.monitor.FileAlterationMonitorTestCase:testMonitor
|    org.apache.commons.io.monitor.FileAlterationMonitorTestCase:testThreadFactory
|    org.apache.commons.io.serialization.MoreComplexObjectTest:trustJavaLang
|    org.apache.commons.io.serialization.MoreComplexObjectTest:trustJavaIncludingArrays
|    org.apache.commons.io.TaggedIOExceptionTest:testTaggedIOException
|    org.apache.commons.io.serialization.WildcardClassNameMatcherTest:noPattern
|    org.apache.commons.io.serialization.WildcardClassNameMatcherTest:star
|    org.apache.commons.io.serialization.WildcardClassNameMatcherTest:starAndQuestionMark
|    org.apache.commons.io.output.AppendableOutputStreamTest:testWriteStringBuilder
|    org.apache.commons.io.output.AppendableOutputStreamTest:testWriteInt
|    org.apache.commons.io.FilenameUtilsWildcardTestCase:testMatch
|    org.apache.commons.io.FilenameUtilsWildcardTestCase:testMatchOnSystem
|    org.apache.commons.io.FilenameUtilsWildcardTestCase:testMatchCaseSpecified
|    org.apache.commons.io.FilenameUtilsWildcardTestCase:testSplitOnTokens
|    org.apache.commons.io.FilenameUtilsWildcardTestCase:testMatch2
|    org.apache.commons.io.comparator.CompositeFileComparatorTest:constructorIterable_Null
|    org.apache.commons.io.comparator.CompositeFileComparatorTest:constructorArray_Null
|    org.apache.commons.io.comparator.CompositeFileComparatorTest:testComparator
|    org.apache.commons.io.comparator.CompositeFileComparatorTest:testReverseComparator
|    org.apache.commons.io.comparator.CompositeFileComparatorTest:testSortArrayNull
|    org.apache.commons.io.comparator.CompositeFileComparatorTest:testSortArray
|    org.apache.commons.io.comparator.CompositeFileComparatorTest:testSortList
|    org.apache.commons.io.comparator.CompositeFileComparatorTest:testSortListNull
|    org.apache.commons.io.comparator.CompositeFileComparatorTest:testToString
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testFilter
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testFilterAndLimitA
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testFilterAndLimitB
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testFilterAndLimitC
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testFilterAndLimitD
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testFilterDirAndFile1
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testFilterDirAndFile2
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testFilterDirAndFile3
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testFilterDirAndFile4
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testLimitToCurrent
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testMissingStartDirectory
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testHandleStartDirectoryFalse
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testCancel
|    org.apache.commons.io.DirectoryWalkerTestCaseJava4:testMultiThreadCancel
|    org.apache.commons.io.output.ProxyOutputStreamTest:testWrite
|    org.apache.commons.io.output.ProxyOutputStreamTest:testWriteNullBaSucceeds
|    org.apache.commons.io.input.TailerTest:testLongFile
|    org.apache.commons.io.input.TailerTest:testBufferBreak
|    org.apache.commons.io.input.TailerTest:testMultiByteBreak
|    org.apache.commons.io.input.TailerTest:testTailerEof
|    org.apache.commons.io.input.TailerTest:testTailerEndOfFileReached
|    org.apache.commons.io.input.TailerTest:testStopWithNoFile
|    org.apache.commons.io.input.TailerTest:testInterrupt
|    org.apache.commons.io.input.TailerTest:testStopWithNoFileUsingExecutor
|    org.apache.commons.io.input.TailerTest:testIO335
|    org.apache.commons.io.monitor.FileAlterationObserverTestCase:testAddRemoveListeners
|    org.apache.commons.io.monitor.FileAlterationObserverTestCase:testToString
|    org.apache.commons.io.monitor.FileAlterationObserverTestCase:testDirectory
|    org.apache.commons.io.monitor.FileAlterationObserverTestCase:testFileCreate
|    org.apache.commons.io.monitor.FileAlterationObserverTestCase:testFileUpdate
|    org.apache.commons.io.monitor.FileAlterationObserverTestCase:testFileDelete
|    org.apache.commons.io.output.ThresholdingOutputStreamTest:testSetByteCount
|    org.apache.commons.io.input.ObservableInputStreamTest:testDataByteCalled
|    org.apache.commons.io.input.ObservableInputStreamTest:testDataBytesCalled
|    org.apache.commons.io.output.FileWriterWithEncodingTest:sameEncoding_string_constructor
|    org.apache.commons.io.output.FileWriterWithEncodingTest:sameEncoding_string_string_constructor
|    org.apache.commons.io.output.FileWriterWithEncodingTest:sameEncoding_Charset_constructor
|    org.apache.commons.io.output.FileWriterWithEncodingTest:sameEncoding_string_Charset_constructor
|    org.apache.commons.io.output.FileWriterWithEncodingTest:sameEncoding_CharsetEncoder_constructor
|    org.apache.commons.io.output.FileWriterWithEncodingTest:sameEncoding_string_CharsetEncoder_constructor
|    org.apache.commons.io.output.FileWriterWithEncodingTest:testDifferentEncoding
|    org.apache.commons.io.output.FileWriterWithEncodingTest:constructor_File_encoding_badEncoding
|    org.apache.commons.io.output.FileWriterWithEncodingTest:constructor_File_directory
|    org.apache.commons.io.output.FileWriterWithEncodingTest:constructor_File_nullFile
|    org.apache.commons.io.output.FileWriterWithEncodingTest:constructor_fileName_nullFile
|    org.apache.commons.io.output.FileWriterWithEncodingTest:sameEncoding_null_Charset_constructor
|    org.apache.commons.io.comparator.PathFileComparatorTest:testCaseSensitivity
|    org.apache.commons.io.comparator.PathFileComparatorTest:testComparator
|    org.apache.commons.io.comparator.PathFileComparatorTest:testReverseComparator
|    org.apache.commons.io.comparator.PathFileComparatorTest:testSortArrayNull
|    org.apache.commons.io.comparator.PathFileComparatorTest:testSortArray
|    org.apache.commons.io.comparator.PathFileComparatorTest:testSortList
|    org.apache.commons.io.comparator.PathFileComparatorTest:testSortListNull
|    org.apache.commons.io.comparator.PathFileComparatorTest:testToString
|    org.apache.commons.io.filefilter.OrFileFilterTestCase:testAdd
|    org.apache.commons.io.filefilter.OrFileFilterTestCase:testRemove
|    org.apache.commons.io.filefilter.OrFileFilterTestCase:testNoFilters
|    org.apache.commons.io.filefilter.OrFileFilterTestCase:testFilterBuiltUsingConstructor
|    org.apache.commons.io.filefilter.OrFileFilterTestCase:testFilterBuiltUsingAdd
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpace_String
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceOS_String_NullPath
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceOS_String_InitError
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceOS_String_Other
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceOS_String_Windows
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceOS_String_Unix
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceWindows_String_ParseCommaFormatBytes
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceWindows_String_EmptyPath
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceWindows_String_NormalResponse
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceWindows_String_StripDrive
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceWindows_String_quoted
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceWindows_String_EmptyResponse
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceWindows_String_EmptyMultiLineResponse
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceWindows_String_InvalidTextResponse
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceWindows_String_NoSuchDirectoryResponse
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_EmptyPath
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_NormalResponseLinux
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_NormalResponseFreeBSD
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_NormalResponseKbLinux
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_NormalResponseKbSolaris
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_LongResponse
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_LongResponseKb
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_EmptyResponse
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_InvalidResponse1
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_InvalidResponse2
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_InvalidResponse3
|    org.apache.commons.io.FileSystemUtilsTestCase:testGetFreeSpaceUnix_String_InvalidResponse4
|    org.apache.commons.io.output.NullWriterTest:testNull
|    org.apache.commons.io.FileDeleteStrategyTestCase:testDeleteNormal
|    org.apache.commons.io.FileDeleteStrategyTestCase:testDeleteQuietlyNormal
|    org.apache.commons.io.FileDeleteStrategyTestCase:testDeleteForce
|    org.apache.commons.io.FileDeleteStrategyTestCase:testDeleteNull
|    org.apache.commons.io.FileDeleteStrategyTestCase:testToString
|    org.apache.commons.io.IOUtilsTestCase:testCloseQuietly_AllCloseableIOException
|    org.apache.commons.io.IOUtilsTestCase:testCloseQuietly_CloseableIOException
|    org.apache.commons.io.IOUtilsTestCase:testCloseQuietly_Selector
|    org.apache.commons.io.IOUtilsTestCase:testCloseQuietly_SelectorIOException
|    org.apache.commons.io.IOUtilsTestCase:testCloseQuietly_SelectorTwice
|    org.apache.commons.io.IOUtilsTestCase:testCloseQuietly_ServerSocket
|    org.apache.commons.io.IOUtilsTestCase:testCloseQuietly_ServerSocketIOException
|    org.apache.commons.io.IOUtilsTestCase:testCloseQuietly_Socket
|    org.apache.commons.io.IOUtilsTestCase:testCloseQuietly_SocketIOException
|    org.apache.commons.io.IOUtilsTestCase:testConstants
|    org.apache.commons.io.IOUtilsTestCase:testContentEquals_InputStream_InputStream
|    org.apache.commons.io.IOUtilsTestCase:testContentEquals_Reader_Reader
|    org.apache.commons.io.IOUtilsTestCase:testContentEqualsIgnoreEOL
|    org.apache.commons.io.IOUtilsTestCase:testCopy_ByteArray_OutputStream
|    org.apache.commons.io.IOUtilsTestCase:testCopy_ByteArray_Writer
|    org.apache.commons.io.IOUtilsTestCase:testCopy_String_Writer
|    org.apache.commons.io.IOUtilsTestCase:testCopyLarge_CharExtraLength
|    org.apache.commons.io.IOUtilsTestCase:testCopyLarge_CharFullLength
|    org.apache.commons.io.IOUtilsTestCase:testCopyLarge_CharNoSkip
|    org.apache.commons.io.IOUtilsTestCase:testCopyLarge_CharSkip
|    org.apache.commons.io.IOUtilsTestCase:testCopyLarge_CharSkipInvalid
|    org.apache.commons.io.IOUtilsTestCase:testCopyLarge_ExtraLength
|    org.apache.commons.io.IOUtilsTestCase:testCopyLarge_FullLength
|    org.apache.commons.io.IOUtilsTestCase:testCopyLarge_NoSkip
|    org.apache.commons.io.IOUtilsTestCase:testCopyLarge_Skip
|    org.apache.commons.io.IOUtilsTestCase:testCopyLarge_SkipInvalid
|    org.apache.commons.io.IOUtilsTestCase:testRead_ReadableByteChannel
|    org.apache.commons.io.IOUtilsTestCase:testReadFully_InputStream_ByteArray
|    org.apache.commons.io.IOUtilsTestCase:testReadFully_InputStream__ReturnByteArray
|    org.apache.commons.io.IOUtilsTestCase:testReadFully_InputStream_Offset
|    org.apache.commons.io.IOUtilsTestCase:testReadFully_ReadableByteChannel
|    org.apache.commons.io.IOUtilsTestCase:testReadFully_Reader
|    org.apache.commons.io.IOUtilsTestCase:testReadFully_Reader_Offset
|    org.apache.commons.io.IOUtilsTestCase:testReadLines_InputStream
|    org.apache.commons.io.IOUtilsTestCase:testReadLines_InputStream_String
|    org.apache.commons.io.IOUtilsTestCase:testReadLines_Reader
|    org.apache.commons.io.IOUtilsTestCase:testSkip_FileReader
|    org.apache.commons.io.IOUtilsTestCase:testSkip_InputStream
|    org.apache.commons.io.IOUtilsTestCase:testSkip_ReadableByteChannel
|    org.apache.commons.io.IOUtilsTestCase:testSkipFully_InputStream
|    org.apache.commons.io.IOUtilsTestCase:testSkipFully_ReadableByteChannel
|    org.apache.commons.io.IOUtilsTestCase:testSkipFully_Reader
|    org.apache.commons.io.IOUtilsTestCase:testStringToOutputStream
|    org.apache.commons.io.IOUtilsTestCase:testToBufferedInputStream_InputStream
|    org.apache.commons.io.IOUtilsTestCase:testToBufferedInputStreamWithBufferSize_InputStream
|    org.apache.commons.io.IOUtilsTestCase:testToByteArray_InputStream
|    org.apache.commons.io.IOUtilsTestCase:testToByteArray_InputStream_Size
|    org.apache.commons.io.IOUtilsTestCase:testToByteArray_InputStream_SizeIllegal
|    org.apache.commons.io.IOUtilsTestCase:testToByteArray_InputStream_SizeLong
|    org.apache.commons.io.IOUtilsTestCase:testToByteArray_InputStream_SizeZero
|    org.apache.commons.io.IOUtilsTestCase:testToByteArray_Reader
|    org.apache.commons.io.IOUtilsTestCase:testToByteArray_String
|    org.apache.commons.io.IOUtilsTestCase:testToByteArray_URI
|    org.apache.commons.io.IOUtilsTestCase:testToByteArray_URL
|    org.apache.commons.io.IOUtilsTestCase:testToByteArray_URLConnection
|    org.apache.commons.io.IOUtilsTestCase:testToCharArray_InputStream
|    org.apache.commons.io.IOUtilsTestCase:testToCharArray_InputStream_CharsetName
|    org.apache.commons.io.IOUtilsTestCase:testToCharArray_Reader
|    org.apache.commons.io.IOUtilsTestCase:testToInputStream_CharSequence
|    org.apache.commons.io.IOUtilsTestCase:testToInputStream_String
|    org.apache.commons.io.IOUtilsTestCase:testToString_ByteArray
|    org.apache.commons.io.IOUtilsTestCase:testToString_InputStream
|    org.apache.commons.io.IOUtilsTestCase:testToString_Reader
|    org.apache.commons.io.IOUtilsTestCase:testToString_URI
|    org.apache.commons.io.IOUtilsTestCase:testToString_URI_CharsetName
|    org.apache.commons.io.IOUtilsTestCase:testToString_URL
|    org.apache.commons.io.IOUtilsTestCase:testToString_URL_CharsetName
|    org.apache.commons.io.IOUtilsTestCase:testToString_URL_CharsetNameNull
|    org.apache.commons.io.IOUtilsTestCase:testResourceToString_ExistingResourceAtRootPackage
|    org.apache.commons.io.IOUtilsTestCase:testResourceToString_ExistingResourceAtSubPackage
|    org.apache.commons.io.IOUtilsTestCase:testResourceToString_ExistingResourceAtSubPackage_WithClassLoader
|    org.apache.commons.io.IOUtilsTestCase:testResourceToString_NonExistingResource
|    org.apache.commons.io.IOUtilsTestCase:testResourceToString_NonExistingResource_WithClassLoader
|    org.apache.commons.io.IOUtilsTestCase:testResourceToString_NullResource
|    org.apache.commons.io.IOUtilsTestCase:testResourceToString_NullResource_WithClassLoader
|    org.apache.commons.io.IOUtilsTestCase:testResourceToString_NullCharset
|    org.apache.commons.io.IOUtilsTestCase:testResourceToString_NullCharset_WithClassLoader
|    org.apache.commons.io.IOUtilsTestCase:testResourceToByteArray_ExistingResourceAtRootPackage
|    org.apache.commons.io.IOUtilsTestCase:testResourceToByteArray_ExistingResourceAtRootPackage_WithClassLoader
|    org.apache.commons.io.IOUtilsTestCase:testResourceToByteArray_ExistingResourceAtSubPackage
|    org.apache.commons.io.IOUtilsTestCase:testResourceToByteArray_ExistingResourceAtSubPackage_WithClassLoader
|    org.apache.commons.io.IOUtilsTestCase:testResourceToByteArray_NonExistingResource
|    org.apache.commons.io.IOUtilsTestCase:testResourceToByteArray_NonExistingResource_WithClassLoader
|    org.apache.commons.io.IOUtilsTestCase:testResourceToByteArray_Null
|    org.apache.commons.io.IOUtilsTestCase:testResourceToByteArray_Null_WithClassLoader
|    org.apache.commons.io.IOUtilsTestCase:testResourceToURL_ExistingResourceAtRootPackage
|    org.apache.commons.io.IOUtilsTestCase:testResourceToURL_ExistingResourceAtRootPackage_WithClassLoader
|    org.apache.commons.io.IOUtilsTestCase:testResourceToURL_ExistingResourceAtSubPackage
|    org.apache.commons.io.IOUtilsTestCase:testResourceToURL_ExistingResourceAtSubPackage_WithClassLoader
|    org.apache.commons.io.IOUtilsTestCase:testResourceToURL_NonExistingResource
|    org.apache.commons.io.IOUtilsTestCase:testResourceToURL_Null
|    org.apache.commons.io.IOUtilsTestCase:testResourceToURL_Null_WithClassLoader
|    org.apache.commons.io.IOUtilsTestCase:testAsBufferedNull
|    org.apache.commons.io.IOUtilsTestCase:testAsBufferedInputStream
|    org.apache.commons.io.IOUtilsTestCase:testAsBufferedInputStreamWithBufferSize
|    org.apache.commons.io.IOUtilsTestCase:testAsBufferedOutputStream
|    org.apache.commons.io.IOUtilsTestCase:testAsBufferedOutputStreamWithBufferSize
|    org.apache.commons.io.IOUtilsTestCase:testAsBufferedReader
|    org.apache.commons.io.IOUtilsTestCase:testAsBufferedReaderWithBufferSize
|    org.apache.commons.io.IOUtilsTestCase:testAsBufferedWriter
|    org.apache.commons.io.IOUtilsTestCase:testAsBufferedWriterWithBufferSize
|    org.apache.commons.io.IOUtilsTestCase:testCopyLarge_SkipWithInvalidOffset
|    org.apache.commons.io.input.BoundedInputStreamTest:testReadSingle
|    org.apache.commons.io.input.BoundedInputStreamTest:testReadArray
|    org.apache.commons.io.comparator.ExtensionFileComparatorTest:testCaseSensitivity
|    org.apache.commons.io.comparator.ExtensionFileComparatorTest:testComparator
|    org.apache.commons.io.comparator.ExtensionFileComparatorTest:testSortArrayNull
|    org.apache.commons.io.comparator.ExtensionFileComparatorTest:testSortArray
|    org.apache.commons.io.comparator.ExtensionFileComparatorTest:testSortList
|    org.apache.commons.io.comparator.ExtensionFileComparatorTest:testSortListNull
|    org.apache.commons.io.comparator.ExtensionFileComparatorTest:testToString
|    org.apache.commons.io.FileUtilsCleanSymlinksTestCase:testCleanDirWithSymlinkFile
|    org.apache.commons.io.FileUtilsCleanSymlinksTestCase:testCleanDirWithASymlinkDir
|    org.apache.commons.io.FileUtilsCleanSymlinksTestCase:testCleanDirWithParentSymlinks
|    org.apache.commons.io.FileUtilsCleanSymlinksTestCase:testStillClearsIfGivenDirectoryIsASymlink
|    org.apache.commons.io.FileUtilsCleanSymlinksTestCase:testIdentifiesSymlinkDir
|    org.apache.commons.io.FileUtilsCleanSymlinksTestCase:testIdentifiesSymlinkFile
|    org.apache.commons.io.FileUtilsCleanSymlinksTestCase:testIdentifiesBrokenSymlinkFile
|    org.apache.commons.io.FileUtilsCleanSymlinksTestCase:testCorrectlyIdentifySymlinkWithParentSymLink
|    org.apache.commons.io.output.ChunkedOutputStreamTest:write_four_chunks
|    org.apache.commons.io.output.ChunkedOutputStreamTest:negative_chunksize_not_permitted
|    org.apache.commons.io.output.ChunkedOutputStreamTest:defaultConstructor
|    org.apache.commons.io.input.ReversedLinesFileReaderTestSimple:testUnsupportedEncodingUTF16
|    org.apache.commons.io.input.ReversedLinesFileReaderTestSimple:testUnsupportedEncodingBig5
|    org.apache.commons.io.FileCleaningTrackerTestCase:testFileCleanerFile
|    org.apache.commons.io.FileCleaningTrackerTestCase:testFileCleanerDirectory
|    org.apache.commons.io.FileCleaningTrackerTestCase:testFileCleanerDirectory_NullStrategy
|    org.apache.commons.io.FileCleaningTrackerTestCase:testFileCleanerDirectory_ForceStrategy
|    org.apache.commons.io.FileCleaningTrackerTestCase:testFileCleanerNull
|    org.apache.commons.io.FileCleaningTrackerTestCase:testFileCleanerExitWhenFinishedFirst
|    org.apache.commons.io.FileCleaningTrackerTestCase:testFileCleanerExitWhenFinished_NoTrackAfter
|    org.apache.commons.io.FileCleaningTrackerTestCase:testFileCleanerExitWhenFinished1
|    org.apache.commons.io.FileCleaningTrackerTestCase:testFileCleanerExitWhenFinished2
|    org.apache.commons.io.HexDumpTest:testDump
|    org.apache.commons.io.output.BrokenOutputStreamTest:testWrite
|    org.apache.commons.io.output.BrokenOutputStreamTest:testFlush
|    org.apache.commons.io.output.BrokenOutputStreamTest:testClose
|    org.apache.commons.io.input.NullInputStreamTest:testRead
|    org.apache.commons.io.input.NullInputStreamTest:testReadByteArray
|    org.apache.commons.io.input.NullInputStreamTest:testMarkAndReset
|    org.apache.commons.io.input.NullInputStreamTest:testMarkNotSupported
|    org.apache.commons.io.input.NullInputStreamTest:testSkip
|    org.apache.commons.io.output.LockableFileWriterTest:testFileLocked
|    org.apache.commons.io.output.LockableFileWriterTest:testAlternateLockDir
|    org.apache.commons.io.output.LockableFileWriterTest:testFileNotLocked
|    org.apache.commons.io.output.LockableFileWriterTest:testConstructor_File_encoding_badEncoding
|    org.apache.commons.io.output.LockableFileWriterTest:testConstructor_File_directory
|    org.apache.commons.io.output.LockableFileWriterTest:testConstructor_File_nullFile
|    org.apache.commons.io.output.LockableFileWriterTest:testConstructor_fileName_nullFile
|    org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile:testDataIntegrityWithBufferedReader
|    org.apache.commons.io.output.NullOutputStreamTest:testNull
|    org.apache.commons.io.comparator.LastModifiedFileComparatorTest:testComparator
|    org.apache.commons.io.comparator.LastModifiedFileComparatorTest:testReverseComparator
|    org.apache.commons.io.comparator.LastModifiedFileComparatorTest:testSortArrayNull
|    org.apache.commons.io.comparator.LastModifiedFileComparatorTest:testSortArray
|    org.apache.commons.io.comparator.LastModifiedFileComparatorTest:testSortList
|    org.apache.commons.io.comparator.LastModifiedFileComparatorTest:testSortListNull
|    org.apache.commons.io.comparator.LastModifiedFileComparatorTest:testToString
|    org.apache.commons.io.input.CountingInputStreamTest:testCounting
|    org.apache.commons.io.input.CountingInputStreamTest:testLargeFiles_IO84
|    org.apache.commons.io.input.CountingInputStreamTest:testResetting
|    org.apache.commons.io.input.CountingInputStreamTest:testZeroLength1
|    org.apache.commons.io.input.CountingInputStreamTest:testZeroLength2
|    org.apache.commons.io.input.CountingInputStreamTest:testZeroLength3
|    org.apache.commons.io.input.CountingInputStreamTest:testEOF1
|    org.apache.commons.io.input.CountingInputStreamTest:testEOF2
|    org.apache.commons.io.input.CountingInputStreamTest:testEOF3
|    org.apache.commons.io.input.CountingInputStreamTest:testSkipping
|    org.apache.commons.io.output.XmlStreamWriterTest:testNoXmlHeader
|    org.apache.commons.io.output.XmlStreamWriterTest:testEmpty
|    org.apache.commons.io.output.XmlStreamWriterTest:testDefaultEncoding
|    org.apache.commons.io.output.XmlStreamWriterTest:testUTF8Encoding
|    org.apache.commons.io.output.XmlStreamWriterTest:testUTF16Encoding
|    org.apache.commons.io.output.XmlStreamWriterTest:testUTF16BEEncoding
|    org.apache.commons.io.output.XmlStreamWriterTest:testUTF16LEEncoding
|    org.apache.commons.io.output.XmlStreamWriterTest:testLatin1Encoding
|    org.apache.commons.io.output.XmlStreamWriterTest:testLatin7Encoding
|    org.apache.commons.io.output.XmlStreamWriterTest:testLatin15Encoding
|    org.apache.commons.io.output.XmlStreamWriterTest:testEUC_JPEncoding
|    org.apache.commons.io.output.XmlStreamWriterTest:testEBCDICEncoding
|    org.apache.commons.io.input.BoundedReaderTest:readTillEnd
|    org.apache.commons.io.input.BoundedReaderTest:shortReader
|    org.apache.commons.io.input.BoundedReaderTest:readMulti
|    org.apache.commons.io.input.BoundedReaderTest:readMultiWithOffset
|    org.apache.commons.io.input.BoundedReaderTest:markReset
|    org.apache.commons.io.input.BoundedReaderTest:markResetWithMarkOutsideBoundedReaderMax
|    org.apache.commons.io.input.BoundedReaderTest:markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset
|    org.apache.commons.io.input.BoundedReaderTest:markResetFromOffset1
|    org.apache.commons.io.input.BoundedReaderTest:markResetMarkMore
|    org.apache.commons.io.input.BoundedReaderTest:skipTest
|    org.apache.commons.io.input.BoundedReaderTest:closeTest
|    org.apache.commons.io.input.BoundedReaderTest:testReadBytesEOF
|    org.apache.commons.io.FilenameUtilsTestCase:testNormalize
|    org.apache.commons.io.FilenameUtilsTestCase:testNormalize_with_nullbytes
|    org.apache.commons.io.FilenameUtilsTestCase:testNormalizeUnixWin
|    org.apache.commons.io.FilenameUtilsTestCase:testNormalizeNoEndSeparator
|    org.apache.commons.io.FilenameUtilsTestCase:testNormalizeNoEndSeparatorUnixWin
|    org.apache.commons.io.FilenameUtilsTestCase:testConcat
|    org.apache.commons.io.FilenameUtilsTestCase:testSeparatorsToUnix
|    org.apache.commons.io.FilenameUtilsTestCase:testSeparatorsToWindows
|    org.apache.commons.io.FilenameUtilsTestCase:testSeparatorsToSystem
|    org.apache.commons.io.FilenameUtilsTestCase:testGetPrefixLength
|    org.apache.commons.io.FilenameUtilsTestCase:testIndexOfLastSeparator
|    org.apache.commons.io.FilenameUtilsTestCase:testIndexOfExtension
|    org.apache.commons.io.FilenameUtilsTestCase:testGetPrefix
|    org.apache.commons.io.FilenameUtilsTestCase:testGetPrefix_with_nullbyte
|    org.apache.commons.io.FilenameUtilsTestCase:testGetPath
|    org.apache.commons.io.FilenameUtilsTestCase:testGetPath_with_nullbyte
|    org.apache.commons.io.FilenameUtilsTestCase:testGetPathNoEndSeparator
|    org.apache.commons.io.FilenameUtilsTestCase:testGetPathNoEndSeparator_with_null_byte
|    org.apache.commons.io.FilenameUtilsTestCase:testGetFullPath
|    org.apache.commons.io.FilenameUtilsTestCase:testGetFullPathNoEndSeparator
|    org.apache.commons.io.FilenameUtilsTestCase:testGetFullPathNoEndSeparator_IO_248
|    org.apache.commons.io.FilenameUtilsTestCase:testGetName
|    org.apache.commons.io.FilenameUtilsTestCase:testInjectionFailure
|    org.apache.commons.io.FilenameUtilsTestCase:testGetBaseName
|    org.apache.commons.io.FilenameUtilsTestCase:testGetBaseName_with_nullByte
|    org.apache.commons.io.FilenameUtilsTestCase:testGetExtension
|    org.apache.commons.io.FilenameUtilsTestCase:testRemoveExtension
|    org.apache.commons.io.FilenameUtilsTestCase:testEquals
|    org.apache.commons.io.FilenameUtilsTestCase:testEqualsOnSystem
|    org.apache.commons.io.FilenameUtilsTestCase:testEqualsNormalizedOnSystem
|    org.apache.commons.io.FilenameUtilsTestCase:testEqualsNormalizedError_IO_128
|    org.apache.commons.io.FilenameUtilsTestCase:testEquals_fullControl
|    org.apache.commons.io.FilenameUtilsTestCase:testIsExtension_injection
|    org.apache.commons.io.FilenameUtilsTestCase:testIsExtensionArray
|    org.apache.commons.io.FilenameUtilsTestCase:testIsExtensionCollection
|    org.apache.commons.io.EndianUtilsTest:testCtor
|    org.apache.commons.io.EndianUtilsTest:testEOFException
|    org.apache.commons.io.EndianUtilsTest:testSwapShort
|    org.apache.commons.io.EndianUtilsTest:testSwapInteger
|    org.apache.commons.io.EndianUtilsTest:testSwapLong
|    org.apache.commons.io.EndianUtilsTest:testSwapFloat
|    org.apache.commons.io.EndianUtilsTest:testSwapDouble
|    org.apache.commons.io.EndianUtilsTest:testSymmetry
|    org.apache.commons.io.EndianUtilsTest:testReadSwappedShort
|    org.apache.commons.io.EndianUtilsTest:testWriteSwappedShort
|    org.apache.commons.io.EndianUtilsTest:testReadSwappedUnsignedShort
|    org.apache.commons.io.EndianUtilsTest:testReadSwappedInteger
|    org.apache.commons.io.EndianUtilsTest:testWriteSwappedInteger
|    org.apache.commons.io.EndianUtilsTest:testReadSwappedUnsignedInteger
|    org.apache.commons.io.EndianUtilsTest:testReadSwappedLong
|    org.apache.commons.io.EndianUtilsTest:testWriteSwappedLong
|    org.apache.commons.io.EndianUtilsTest:testReadSwappedFloat
|    org.apache.commons.io.EndianUtilsTest:testWriteSwappedFloat
|    org.apache.commons.io.EndianUtilsTest:testReadSwappedDouble
|    org.apache.commons.io.EndianUtilsTest:testWriteSwappedDouble
|    org.apache.commons.io.EndianUtilsTest:testSymmetryOfLong
|    org.apache.commons.io.EndianUtilsTest:testUnsignedOverrun
|    org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest:testContentTypeEncoding
|    org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest:testContentTypeMime
|    org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest:testAppXml
|    org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest:testTextXml
|    org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest:testCalculateRawEncodingNoBOM
|    org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest:testCalculateRawEncodingStandard
|    org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest:testCalculateRawEncodingStandardUtf32
|    org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest:testCalculateRawEncodingAdditonalUTF16
|    org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest:testCalculateRawEncodingAdditonalUTF32
|    org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest:testCalculateHttpEncoding
|    org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest:testCalculateHttpEncodingUtf32
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:noAccept
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:exceptionIncludesClassName
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:acceptCustomMatcher
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:rejectCustomMatcher
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:acceptPattern
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:rejectPattern
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:acceptWildcard
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:rejectWildcard
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:ourTestClassOnlyAccepted
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:ourTestClassAcceptedFirst
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:ourTestClassAcceptedSecond
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:ourTestClassAcceptedFirstWildcard
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:reject
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:rejectPrecedence
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:rejectOnly
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:customInvalidMethod
|    org.apache.commons.io.comparator.DirectoryFileComparatorTest:testSortArray
|    org.apache.commons.io.comparator.DirectoryFileComparatorTest:testReverseComparator
|    org.apache.commons.io.comparator.DirectoryFileComparatorTest:testSortArrayNull
|    org.apache.commons.io.comparator.DirectoryFileComparatorTest:testSortList
|    org.apache.commons.io.comparator.DirectoryFileComparatorTest:testSortListNull
|    org.apache.commons.io.comparator.DirectoryFileComparatorTest:testToString
|    org.apache.commons.io.ThreadMonitorTestCase:testCompletedWithoutTimeout
|    org.apache.commons.io.ThreadMonitorTestCase:testNoTimeout
|    org.apache.commons.io.input.XmlStreamReaderUtilitiesTest:testContentTypeEncoding
|    org.apache.commons.io.input.XmlStreamReaderUtilitiesTest:testContentTypeMime
|    org.apache.commons.io.input.XmlStreamReaderUtilitiesTest:testAppXml
|    org.apache.commons.io.input.XmlStreamReaderUtilitiesTest:testTextXml
|    org.apache.commons.io.input.XmlStreamReaderUtilitiesTest:testCalculateRawEncodingNoBOM
|    org.apache.commons.io.input.XmlStreamReaderUtilitiesTest:testCalculateRawEncodingStandard
|    org.apache.commons.io.input.XmlStreamReaderUtilitiesTest:testCalculateRawEncodingStandardUtf32
|    org.apache.commons.io.input.XmlStreamReaderUtilitiesTest:testCalculateRawEncodingAdditonalUTF32
|    org.apache.commons.io.input.XmlStreamReaderUtilitiesTest:testCalculateHttpEncoding
|    org.apache.commons.io.input.XmlStreamReaderUtilitiesTest:testCalculateHttpEncodingUtf32
|    org.apache.commons.io.input.NullReaderTest:testRead
|    org.apache.commons.io.input.NullReaderTest:testReadCharArray
|    org.apache.commons.io.input.NullReaderTest:testEOFException
|    org.apache.commons.io.input.NullReaderTest:testMarkAndReset
|    org.apache.commons.io.input.NullReaderTest:testMarkNotSupported
|    org.apache.commons.io.input.NullReaderTest:testSkip
|    org.apache.commons.io.output.TaggedOutputStreamTest:testNormalStream
|    org.apache.commons.io.output.TaggedOutputStreamTest:testBrokenStream
|    org.apache.commons.io.output.TaggedOutputStreamTest:testOtherException
|    org.apache.commons.io.FileUtilsWaitForTestCase:testWaitFor
|    org.apache.commons.io.FileUtilsWaitForTestCase:testWaitForInterrupted
|    org.apache.commons.io.ByteOrderParserTest:testParseBig
|    org.apache.commons.io.ByteOrderParserTest:testParseLittle
|    org.apache.commons.io.ByteOrderParserTest:testThrowsException
|    org.apache.commons.io.FileUtilsCleanDirectoryTestCase:testCleanEmpty
|    org.apache.commons.io.FileUtilsCleanDirectoryTestCase:testDeletesRegular
|    org.apache.commons.io.FileUtilsCleanDirectoryTestCase:testThrowsOnCannotDeleteFile
|    org.apache.commons.io.input.XmlStreamReaderTest:testRawNoBomUsAscii
|    org.apache.commons.io.input.XmlStreamReaderTest:testRawNoBomUtf8
|    org.apache.commons.io.input.XmlStreamReaderTest:testRawNoBomUtf16BE
|    org.apache.commons.io.input.XmlStreamReaderTest:testRawNoBomUtf32BE
|    org.apache.commons.io.input.XmlStreamReaderTest:testRawNoBomUtf32LE
|    org.apache.commons.io.input.XmlStreamReaderTest:testRawNoBomIso8859_1
|    org.apache.commons.io.input.XmlStreamReaderTest:testRawNoBomCp1047
|    org.apache.commons.io.input.XmlStreamReaderTest:testRawBomUtf8
|    org.apache.commons.io.input.XmlStreamReaderTest:testRawBomUtf16
|    org.apache.commons.io.input.XmlStreamReaderTest:testRawBomUtf32
|    org.apache.commons.io.input.XmlStreamReaderTest:testHttp
|    org.apache.commons.io.input.XmlStreamReaderTest:testRawContent
|    org.apache.commons.io.input.XmlStreamReaderTest:testHttpContent
|    org.apache.commons.io.input.XmlStreamReaderTest:testEncodingAttributeXML
|    org.apache.commons.io.output.ByteArrayOutputStreamTestCase:testToInputStream
|    org.apache.commons.io.output.ByteArrayOutputStreamTestCase:testToInputStreamWithReset
|    org.apache.commons.io.output.ByteArrayOutputStreamTestCase:testStream
|    org.apache.commons.io.input.BOMInputStreamTest:testAvailableWithBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testAvailableWithoutBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testClose
|    org.apache.commons.io.input.BOMInputStreamTest:testEmptyBufferWithBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testEmptyBufferWithoutBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testGetBOMFirstThenRead
|    org.apache.commons.io.input.BOMInputStreamTest:testGetBOMFirstThenReadInclude
|    org.apache.commons.io.input.BOMInputStreamTest:testLargeBufferWithBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testLargeBufferWithoutBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testLeadingNonBOMBufferedRead
|    org.apache.commons.io.input.BOMInputStreamTest:testLeadingNonBOMSingleRead
|    org.apache.commons.io.input.BOMInputStreamTest:testMarkResetAfterReadWithBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testMarkResetAfterReadWithoutBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testMarkResetBeforeReadWithBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testMarkResetBeforeReadWithoutBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testNoBoms
|    org.apache.commons.io.input.BOMInputStreamTest:testReadEmpty
|    org.apache.commons.io.input.BOMInputStreamTest:testReadSmall
|    org.apache.commons.io.input.BOMInputStreamTest:testReadTwiceWithBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testReadTwiceWithoutBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testReadWithBOMInclude
|    org.apache.commons.io.input.BOMInputStreamTest:testReadWithBOMUtf16Be
|    org.apache.commons.io.input.BOMInputStreamTest:testReadWithBOMUtf16Le
|    org.apache.commons.io.input.BOMInputStreamTest:testReadWithBOMUtf32Be
|    org.apache.commons.io.input.BOMInputStreamTest:testReadWithBOMUtf32Le
|    org.apache.commons.io.input.BOMInputStreamTest:testReadWithBOMUtf8
|    org.apache.commons.io.input.BOMInputStreamTest:testReadWithMultipleBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testReadWithoutBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testReadXmlWithBOMUcs2
|    org.apache.commons.io.input.BOMInputStreamTest:testReadXmlWithBOMUcs4
|    org.apache.commons.io.input.BOMInputStreamTest:testReadXmlWithBOMUtf16Be
|    org.apache.commons.io.input.BOMInputStreamTest:testReadXmlWithBOMUtf32Be
|    org.apache.commons.io.input.BOMInputStreamTest:testReadXmlWithBOMUtf32Le
|    org.apache.commons.io.input.BOMInputStreamTest:testReadXmlWithBOMUtf8
|    org.apache.commons.io.input.BOMInputStreamTest:testReadXmlWithoutBOMUtf32Be
|    org.apache.commons.io.input.BOMInputStreamTest:testSkipWithBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testSkipWithoutBOM
|    org.apache.commons.io.input.BOMInputStreamTest:skipReturnValueWithBom
|    org.apache.commons.io.input.BOMInputStreamTest:skipReturnValueWithoutBom
|    org.apache.commons.io.input.BOMInputStreamTest:testSmallBufferWithoutBOM
|    org.apache.commons.io.input.BOMInputStreamTest:testSupportCode
|    org.apache.commons.io.ByteOrderMarkTestCase:charsetName
|    org.apache.commons.io.ByteOrderMarkTestCase:constantCharsetNames
|    org.apache.commons.io.ByteOrderMarkTestCase:testLength
|    org.apache.commons.io.ByteOrderMarkTestCase:get
|    org.apache.commons.io.ByteOrderMarkTestCase:getBytes
|    org.apache.commons.io.ByteOrderMarkTestCase:testEquals
|    org.apache.commons.io.ByteOrderMarkTestCase:testHashCode
|    org.apache.commons.io.ByteOrderMarkTestCase:errors
|    org.apache.commons.io.ByteOrderMarkTestCase:testToString
|    org.apache.commons.io.comparator.NameFileComparatorTest:testCaseSensitivity
|    org.apache.commons.io.comparator.NameFileComparatorTest:testComparator
|    org.apache.commons.io.comparator.NameFileComparatorTest:testSortArrayNull
|    org.apache.commons.io.comparator.NameFileComparatorTest:testSortArray
|    org.apache.commons.io.comparator.NameFileComparatorTest:testSortList
|    org.apache.commons.io.comparator.NameFileComparatorTest:testSortListNull
|    org.apache.commons.io.comparator.NameFileComparatorTest:testToString
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_byteArrayToOutputStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_byteArrayToWriter
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_byteArrayToWriter_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_byteArrayToWriter_Encoding
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_byteArrayToWriter_Encoding_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_byteArrayToWriter_Encoding_nullWriter
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_byteArrayToWriter_Encoding_nullEncoding
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charSequenceToOutputStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charSequenceToOutputStream_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charSequenceToOutputStream_nullStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charSequenceToOutputStream_Encoding
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charSequenceToOutputStream_Encoding_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charSequenceToOutputStream_Encoding_nullStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charSequenceToOutputStream_nullEncoding
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charSequenceToWriter
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charSequenceToWriter_Encoding_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charSequenceToWriter_Encoding_nullStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_stringToOutputStream_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_stringToOutputStream_nullStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_stringToOutputStream_Encoding
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_stringToOutputStream_Encoding_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_stringToOutputStream_Encoding_nullStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_stringToOutputStream_nullEncoding
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_stringToWriter
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_stringToWriter_Encoding_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_stringToWriter_Encoding_nullStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charArrayToOutputStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charArrayToOutputStream_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charArrayToOutputStream_nullStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charArrayToOutputStream_Encoding
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charArrayToOutputStream_Encoding_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charArrayToOutputStream_Encoding_nullStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charArrayToOutputStream_nullEncoding
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charArrayToWriter
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charArrayToWriter_Encoding_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_charArrayToWriter_Encoding_nullStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_OutputStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_OutputStream_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_OutputStream_nullSeparator
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_OutputStream_nullStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_OutputStream_Encoding
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_OutputStream_Encoding_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_OutputStream_Encoding_nullSeparator
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_OutputStream_Encoding_nullStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_OutputStream_Encoding_nullEncoding
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_Writer
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_Writer_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_Writer_nullSeparator
|    org.apache.commons.io.IOUtilsWriteTestCase:testWriteLines_Writer_nullStream
|    org.apache.commons.io.IOExceptionWithCauseTestCase:testIOExceptionStringThrowable
|    org.apache.commons.io.IOExceptionWithCauseTestCase:testIOExceptionThrowable
|    org.apache.commons.io.output.CountingOutputStreamTest:testCounting
|    org.apache.commons.io.output.CountingOutputStreamTest:testLargeFiles_IO84
|    org.apache.commons.io.output.ProxyWriterTest:appendCharSequence
|    org.apache.commons.io.output.ProxyWriterTest:appendCharSequence_with_offset
|    org.apache.commons.io.output.ProxyWriterTest:appendChar
|    org.apache.commons.io.output.ProxyWriterTest:writeString
|    org.apache.commons.io.output.ProxyWriterTest:writeStringPartial
|    org.apache.commons.io.output.ProxyWriterTest:writeInt
|    org.apache.commons.io.output.ProxyWriterTest:writeCharArrayPartial
|    org.apache.commons.io.output.ProxyWriterTest:nullString
|    org.apache.commons.io.output.ProxyWriterTest:nullCharArray
|    org.apache.commons.io.output.ProxyWriterTest:nullCharSequencec
|    org.apache.commons.io.output.ProxyWriterTest:exceptions_in_append_char
|    org.apache.commons.io.output.ProxyWriterTest:exceptions_in_append_charSequence
|    org.apache.commons.io.output.ProxyWriterTest:exceptions_in_append_charSequence_offset
|    org.apache.commons.io.output.ProxyWriterTest:exceptions_in_write_int
|    org.apache.commons.io.output.ProxyWriterTest:exceptions_in_write_char_array
|    org.apache.commons.io.output.ProxyWriterTest:exceptions_in_write_offset_char_array
|    org.apache.commons.io.output.ProxyWriterTest:exceptions_in_write_string
|    org.apache.commons.io.output.ProxyWriterTest:exceptions_in_write_string_offset
|    org.apache.commons.io.output.ProxyWriterTest:exceptions_in_flush
|    org.apache.commons.io.output.ProxyWriterTest:exceptions_in_close
|    org.apache.commons.io.output.StringBuilderWriterTest:testAppendConstructCapacity
|    org.apache.commons.io.output.StringBuilderWriterTest:testAppendConstructStringBuilder
|    org.apache.commons.io.output.StringBuilderWriterTest:testAppendConstructNull
|    org.apache.commons.io.output.StringBuilderWriterTest:testAppendChar
|    org.apache.commons.io.output.StringBuilderWriterTest:testAppendCharSequence
|    org.apache.commons.io.output.StringBuilderWriterTest:testAppendCharSequencePortion
|    org.apache.commons.io.output.StringBuilderWriterTest:testClose
|    org.apache.commons.io.output.StringBuilderWriterTest:testWriteChar
|    org.apache.commons.io.output.StringBuilderWriterTest:testWriteCharArray
|    org.apache.commons.io.output.StringBuilderWriterTest:testWriteCharArrayPortion
|    org.apache.commons.io.output.StringBuilderWriterTest:testWriteString
|    org.apache.commons.io.output.StringBuilderWriterTest:testWriteStringPortion
+-------------------------------------------------------------------------------+
| Found 73 redundant test cases:
|    org.apache.commons.io.CopyUtilsTest:copy_inputStreamToWriter
|    org.apache.commons.io.FileUtilsTestCase:testToFile5
|    org.apache.commons.io.FileUtilsTestCase:testDecodeUrl
|    org.apache.commons.io.FileUtilsTestCase:testDecodeUrlLenient
|    org.apache.commons.io.FileUtilsTestCase:testDecodeUrlNullSafe
|    org.apache.commons.io.FileUtilsTestCase:testToFiles2
|    org.apache.commons.io.FileUtilsTestCase:testCopyFile1ToDir
|    org.apache.commons.io.FileUtilsTestCase:testListFilesWithDirs
|    org.apache.commons.io.FileUtilsTestCase:testWriteLines_4arg
|    org.apache.commons.io.FileUtilsTestCase:testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines
|    org.apache.commons.io.FileUtilsTestCase:testMoveFile_CopyDelete_Failed
|    org.apache.commons.io.FileCleanerTestCase:testFileCleanerExitWhenFinishedFirst
|    org.apache.commons.io.input.WindowsLineEndingInputStreamTest:linuxLinefeeds
|    org.apache.commons.io.input.UnixLineEndingInputStreamTest:crOnlyEnsureAtEof
|    org.apache.commons.io.serialization.RegexpClassNameMatcherTest:testSimplePatternFromString
|    org.apache.commons.io.serialization.RegexpClassNameMatcherTest:testSimplePatternFromPattern
|    org.apache.commons.io.DemuxTestCase:testOutputStream
|    org.apache.commons.io.FileUtilsDirectoryContainsTestCase:testDirectoryDoesNotContainsDirectory
|    org.apache.commons.io.FileUtilsDirectoryContainsTestCase:testSameFile
|    org.apache.commons.io.filefilter.FileFilterTestCase:testFalse
|    org.apache.commons.io.input.CharSequenceReaderTest:testMarkSupported
|    org.apache.commons.io.IOCaseTestCase:test_forName
|    org.apache.commons.io.serialization.FullClassNameMatcherTest:withNames
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testIO_356_B10_D20_S0_UTF8
|    org.apache.commons.io.input.CharSequenceInputStreamTest:testSkip_USASCII
|    org.apache.commons.io.input.TeeInputStreamTest:testReadEverything
|    org.apache.commons.io.serialization.MoreComplexObjectTest:useBlacklist
|    org.apache.commons.io.FilenameUtilsWildcardTestCase:test_IO_246
|    org.apache.commons.io.FilenameUtilsWildcardTestCase:testLocaleIndependence
|    org.apache.commons.io.comparator.CompositeFileComparatorTest:constructorIterable_order
|    org.apache.commons.io.input.TailerTest:testTailer
|    org.apache.commons.io.monitor.FileAlterationObserverTestCase:testObserveSingleFile
|    org.apache.commons.io.IOUtilsTestCase:testCloseQuietly_SelectorNull
|    org.apache.commons.io.IOUtilsTestCase:testToByteArray_InputStream_NegativeSize
|    org.apache.commons.io.IOUtilsTestCase:testToString_URI_CharsetNameNull
|    org.apache.commons.io.IOUtilsTestCase:testResourceToString_ExistingResourceAtRootPackage_WithClassLoader
|    org.apache.commons.io.IOUtilsTestCase:testResourceToURL_NonExistingResource_WithClassLoader
|    org.apache.commons.io.comparator.ExtensionFileComparatorTest:testReverseComparator
|    org.apache.commons.io.input.NullInputStreamTest:testEOFException
|    org.apache.commons.io.FilenameUtilsTestCase:testEqualsNormalized
|    org.apache.commons.io.FilenameUtilsTestCase:testIsExtension
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:ourTestClassNotAccepted
|    org.apache.commons.io.serialization.ValidatingObjectInputStreamTest:ourTestClassAcceptedSecondWildcard
|    org.apache.commons.io.comparator.DirectoryFileComparatorTest:testComparator
|    org.apache.commons.io.ThreadMonitorTestCase:testTimeout
|    org.apache.commons.io.input.XmlStreamReaderUtilitiesTest:testCalculateRawEncodingAdditonalUTF16
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadBoolean
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadByte
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadChar
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadDouble
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadFloat
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadFully
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadInt
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadLine
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadLong
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadShort
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadUnsignedByte
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadUnsignedShort
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testReadUTF
|    org.apache.commons.io.input.SwappedDataInputStreamTest:testSkipBytes
|    org.apache.commons.io.FileUtilsCleanDirectoryTestCase:testDeletesNested
|    org.apache.commons.io.FileUtilsCleanDirectoryTestCase:testThrowsOnNullList
|    org.apache.commons.io.input.XmlStreamReaderTest:testRawNoBomUtf16LE
|    org.apache.commons.io.input.BOMInputStreamTest:testReadXmlWithBOMUtf16Le
|    org.apache.commons.io.input.BOMInputStreamTest:testReadXmlWithoutBOMUtf32Le
|    org.apache.commons.io.input.BOMInputStreamTest:testSmallBufferWithBOM
|    org.apache.commons.io.comparator.NameFileComparatorTest:testReverseComparator
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_byteArrayToOutputStream_nullData
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_byteArrayToOutputStream_nullStream
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_byteArrayToWriter_nullWriter
|    org.apache.commons.io.IOUtilsWriteTestCase:testWrite_stringToOutputStream
|    org.apache.commons.io.output.ProxyWriterTest:writeCharArray
+-------------------------------------------------------------------------------+
| Wrote reduced test suite code to: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-io/lc/genetic_1.0_0.6/gen
+-------------------------------------------------------------------------------+
