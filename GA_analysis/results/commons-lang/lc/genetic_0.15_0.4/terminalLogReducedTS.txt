WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[32m31.08.2022 - 15:15:18.289 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Current absolute path is: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/projects/commons-lang
[m[32m31.08.2022 - 15:15:18.292 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to jar: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/projects/commons-lang/target/commons-lang3-3.4-fat-tests.jar
[m[32m31.08.2022 - 15:15:18.292 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to slicer: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/JSR/slicer/Slicer4J
[m[32m31.08.2022 - 15:15:18.293 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to out dir: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4
[m[32m31.08.2022 - 15:15:18.293 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to out logging jar: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/JSR/slicer/DynamicSlicingCore/DynamicSlicingLoggingClasses/DynamicSlicingLogger.jar
[m[m31.08.2022 - 15:15:20.824 [INFO ] ParsingStrategy.parseTestSuiteFromFilePath() - Parsing test suite from File Path
[m[m31.08.2022 - 15:15:20.824 [INFO ] CompilationUnitExtractor.parseCompilationUnitsFromFilePath() - Collecting compilation units from File Path /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/projects/commons-lang/src/test/java
[m[m31.08.2022 - 15:15:22.511 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m31.08.2022 - 15:15:22.513 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.AbstractExceptionContextTest::testAddContextValue has 17 assertions: 
 assertTrue(message.indexOf(TEST_MESSAGE) >= 0); ref {TEST_MESSAGE, message} [63-63],
 assertTrue(message.indexOf("test1") >= 0); ref {message} [64-64],
 assertTrue(message.indexOf("test2") >= 0); ref {message} [65-65],
 assertTrue(message.indexOf("test Date") >= 0); ref {message} [66-66],
 assertTrue(message.indexOf("test Nbr") >= 0); ref {message} [67-67],
 assertTrue(message.indexOf("some value") >= 0); ref {message} [68-68],
 assertTrue(message.indexOf("5") >= 0); ref {message} [69-69],
 assertTrue(exceptionContext.getFirstContextValue("test1") == null); ref {exceptionContext} [71-71],
 assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); ref {exceptionContext} [72-72],
 assertEquals(5, exceptionContext.getContextLabels().size()); ref {exceptionContext} [74-74],
 assertTrue(exceptionContext.getContextLabels().contains("test1")); ref {exceptionContext} [75-75],
 assertTrue(exceptionContext.getContextLabels().contains("test2")); ref {exceptionContext} [76-76],
 assertTrue(exceptionContext.getContextLabels().contains("test Date")); ref {exceptionContext} [77-77],
 assertTrue(exceptionContext.getContextLabels().contains("test Nbr")); ref {exceptionContext} [78-78],
 assertEquals(5, exceptionContext.getContextLabels().size()); ref {exceptionContext} [81-81],
 assertTrue(exceptionContext.getContextLabels().contains("test2")); ref {exceptionContext} [82-82],
 assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); ref {TEST_MESSAGE, contextMessage} [85-85]
[m[m31.08.2022 - 15:15:22.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.AbstractExceptionContextTest::testSetContextValue has 14 assertions: 
 assertTrue(message.indexOf(TEST_MESSAGE) >= 0); ref {TEST_MESSAGE, message} [94-94],
 assertTrue(message.indexOf("test Poorly written obj") >= 0); ref {message} [95-95],
 assertTrue(message.indexOf("Crap") >= 0); ref {message} [96-96],
 assertTrue(exceptionContext.getFirstContextValue("crap") == null); ref {exceptionContext} [98-98],
 assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); ref {exceptionContext} [99-99],
 assertEquals(7, exceptionContext.getContextEntries().size()); ref {exceptionContext} [101-101],
 assertEquals(6, exceptionContext.getContextLabels().size()); ref {exceptionContext} [102-102],
 assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); ref {exceptionContext} [104-104],
 assertTrue(!exceptionContext.getContextLabels().contains("crap")); ref {exceptionContext} [105-105],
 assertEquals(7, exceptionContext.getContextEntries().size()); ref {exceptionContext} [109-109],
 assertEquals(6, exceptionContext.getContextLabels().size()); ref {exceptionContext} [110-110],
 assertEquals(6, exceptionContext.getContextEntries().size()); ref {exceptionContext} [114-114],
 assertEquals(6, exceptionContext.getContextLabels().size()); ref {exceptionContext} [115-115],
 assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); ref {TEST_MESSAGE, contextMessage} [118-118]
[m[m31.08.2022 - 15:15:22.515 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.AbstractExceptionContextTest::testGetFirstContextValue has 4 assertions: 
 assertTrue(exceptionContext.getFirstContextValue("test1") == null); ref {exceptionContext} [125-125],
 assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); ref {exceptionContext} [126-126],
 assertTrue(exceptionContext.getFirstContextValue("crap") == null); ref {exceptionContext} [127-127],
 assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); ref {exceptionContext} [131-131]
[m[m31.08.2022 - 15:15:22.515 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.AbstractExceptionContextTest::testGetContextValues has 3 assertions: 
 assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); ref {exceptionContext, Collections} [138-138],
 assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); ref {exceptionContext, Arrays} [139-139],
 assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); ref {exceptionContext} [143-143]
[m[m31.08.2022 - 15:15:22.516 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.AbstractExceptionContextTest::testGetContextLabels has 7 assertions: 
 assertEquals(5, exceptionContext.getContextEntries().size()); ref {exceptionContext} [148-148],
 assertEquals(6, exceptionContext.getContextEntries().size()); ref {exceptionContext} [153-153],
 assertEquals(5, labels.size()); ref {labels} [154-154],
 assertTrue(labels.contains("test1")); ref {labels} [155-155],
 assertTrue(labels.contains("test2")); ref {labels} [156-156],
 assertTrue(labels.contains("test Date")); ref {labels} [157-157],
 assertTrue(labels.contains("test Nbr")); ref {labels} [158-158]
[m[m31.08.2022 - 15:15:22.517 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.AbstractExceptionContextTest::testGetContextEntries has 8 assertions: 
 assertEquals(5, exceptionContext.getContextEntries().size()); ref {exceptionContext} [163-163],
 assertEquals(6, entries.size()); ref {entries} [168-168],
 assertEquals("test1", entries.get(0).getKey()); ref {entries} [169-169],
 assertEquals("test2", entries.get(1).getKey()); ref {entries} [170-170],
 assertEquals("test Date", entries.get(2).getKey()); ref {entries} [171-171],
 assertEquals("test Nbr", entries.get(3).getKey()); ref {entries} [172-172],
 assertEquals("test Poorly written obj", entries.get(4).getKey()); ref {entries} [173-173],
 assertEquals("test2", entries.get(5).getKey()); ref {entries} [174-174]
[m[m31.08.2022 - 15:15:22.517 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.AbstractExceptionContextTest::testJavaSerialization has 1 assertions: 
 assertEquals(exceptionContext.getFormattedExceptionMessage(null), clone.getFormattedExceptionMessage(null)); ref {exceptionContext, clone} [182-182]
[m[m31.08.2022 - 15:15:22.520 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 15:15:22.520 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.AbstractConcurrentInitializerTest::testGet has 1 assertions: 
 assertNotNull("No managed object", createInitializer().get()); ref {} [47-47]
[m[m31.08.2022 - 15:15:22.521 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.AbstractConcurrentInitializerTest::testGetMultipleTimes has 1 assertions: 
 assertEquals("Got different object at " + i, obj, initializer.get()); ref {obj, i, initializer} [61-61]
[m[m31.08.2022 - 15:15:22.521 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.AbstractConcurrentInitializerTest::testGetConcurrent has 1 assertions: 
 assertEquals("Wrong object", managedObject, t.object); ref {t, managedObject, t.object} [111-111]
[m[m31.08.2022 - 15:15:22.522 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:22.531 [INFO ] ParsingStrategy.parseTestSuite() - Found 9 test cases
[m[m31.08.2022 - 15:15:22.531 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.PairTest::testPairOf has 6 assertions: 
 assertTrue(pair instanceof ImmutablePair<?, ?>); ref {pair} [41-41],
 assertEquals(0, ((ImmutablePair<Integer, String>) pair).left.intValue()); ref {((ImmutablePair<Integer, String>) pair).left, pair} [42-42],
 assertEquals("foo", ((ImmutablePair<Integer, String>) pair).right); ref {((ImmutablePair<Integer, String>) pair).right, pair} [43-43],
 assertTrue(pair2 instanceof ImmutablePair<?, ?>); ref {pair2} [45-45],
 assertNull(((ImmutablePair<Object, String>) pair2).left); ref {((ImmutablePair<Object, String>) pair2).left, pair2} [46-46],
 assertEquals("bar", ((ImmutablePair<Object, String>) pair2).right); ref {((ImmutablePair<Object, String>) pair2).right, pair2} [47-47]
[m[m31.08.2022 - 15:15:22.532 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.PairTest::testCompatibilityBetweenPairs has 5 assertions: 
 assertEquals(pair, pair2); ref {pair, pair2} [54-54],
 assertEquals(pair.hashCode(), pair2.hashCode()); ref {pair, pair2} [55-55],
 assertTrue(set.contains(pair2)); ref {set, pair2} [58-58],
 assertFalse(pair.equals(pair2)); ref {pair, pair2} [61-61],
 assertFalse(pair.hashCode() == pair2.hashCode()); ref {pair, pair2} [62-62]
[m[m31.08.2022 - 15:15:22.532 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.PairTest::testMapEntry has 2 assertions: 
 assertEquals(pair, entry); ref {entry, pair} [71-71],
 assertEquals(pair.hashCode(), entry.hashCode()); ref {entry, pair} [72-72]
[m[m31.08.2022 - 15:15:22.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.PairTest::testComparable1 has 4 assertions: 
 assertTrue(pair1.compareTo(pair1) == 0); ref {pair1} [79-79],
 assertTrue(pair1.compareTo(pair2) < 0); ref {pair1, pair2} [80-80],
 assertTrue(pair2.compareTo(pair2) == 0); ref {pair2} [81-81],
 assertTrue(pair2.compareTo(pair1) > 0); ref {pair1, pair2} [82-82]
[m[m31.08.2022 - 15:15:22.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.PairTest::testComparable2 has 4 assertions: 
 assertTrue(pair1.compareTo(pair1) == 0); ref {pair1} [89-89],
 assertTrue(pair1.compareTo(pair2) < 0); ref {pair1, pair2} [90-90],
 assertTrue(pair2.compareTo(pair2) == 0); ref {pair2} [91-91],
 assertTrue(pair2.compareTo(pair1) > 0); ref {pair1, pair2} [92-92]
[m[m31.08.2022 - 15:15:22.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.PairTest::testToString has 1 assertions: 
 assertEquals("(Key,Value)", pair.toString()); ref {pair} [98-98]
[m[m31.08.2022 - 15:15:22.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.PairTest::testToStringCustom has 1 assertions: 
 assertEquals("Test created on " + "04-25-2011", pair.toString("Test created on %2$tm-%2$td-%2$tY")); ref {pair} [106-106]
[m[m31.08.2022 - 15:15:22.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.PairTest::testFormattable_simple has 1 assertions: 
 assertEquals("(Key,Value)", String.format("%1$s", pair)); ref {String, pair} [112-112]
[m[m31.08.2022 - 15:15:22.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.PairTest::testFormattable_padded has 1 assertions: 
 assertEquals("         (Key,Value)", String.format("%1$20s", pair)); ref {String, pair} [118-118]
[m[m31.08.2022 - 15:15:22.542 [INFO ] ParsingStrategy.parseTestSuite() - Found 18 test cases
[m[m31.08.2022 - 15:15:22.542 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testConstructors has 5 assertions: 
 assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); ref {} [33-33],
 assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f); ref {} [35-35],
 assertEquals(2f, new MutableFloat(Float.valueOf(2f)).floatValue(), 0.0001f); ref {Float} [37-37],
 assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f); ref {} [38-38],
 assertEquals(2f, new MutableFloat("2.0").floatValue(), 0.0001f); ref {} [40-40]
[m[m31.08.2022 - 15:15:22.542 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testConstructorNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.543 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testGetSet has 8 assertions: 
 assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); ref {} [52-52],
 assertEquals(Float.valueOf(0), new MutableFloat().getValue()); ref {Float} [53-53],
 assertEquals(1f, mutNum.floatValue(), 0.0001f); ref {mutNum} [56-56],
 assertEquals(Float.valueOf(1f), mutNum.getValue()); ref {Float, mutNum} [57-57],
 assertEquals(2f, mutNum.floatValue(), 0.0001f); ref {mutNum} [60-60],
 assertEquals(Float.valueOf(2f), mutNum.getValue()); ref {Float, mutNum} [61-61],
 assertEquals(3f, mutNum.floatValue(), 0.0001f); ref {mutNum} [64-64],
 assertEquals(Float.valueOf(3f), mutNum.getValue()); ref {Float, mutNum} [65-65]
[m[m31.08.2022 - 15:15:22.543 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testSetNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.543 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testNanInfinite has 3 assertions: 
 assertTrue(mutNum.isNaN()); ref {mutNum} [77-77],
 assertTrue(mutNum.isInfinite()); ref {mutNum} [80-80],
 assertTrue(mutNum.isInfinite()); ref {mutNum} [83-83]
[m[m31.08.2022 - 15:15:22.543 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testEquals has 10 assertions: 
 assertTrue(mutNumA.equals(mutNumA)); ref {mutNumA} [92-92],
 assertTrue(mutNumA.equals(mutNumB)); ref {mutNumA, mutNumB} [93-93],
 assertTrue(mutNumB.equals(mutNumA)); ref {mutNumA, mutNumB} [94-94],
 assertTrue(mutNumB.equals(mutNumB)); ref {mutNumB} [95-95],
 assertFalse(mutNumA.equals(mutNumC)); ref {mutNumA, mutNumC} [96-96],
 assertFalse(mutNumB.equals(mutNumC)); ref {mutNumB, mutNumC} [97-97],
 assertTrue(mutNumC.equals(mutNumC)); ref {mutNumC} [98-98],
 assertFalse(mutNumA.equals(null)); ref {mutNumA} [99-99],
 assertFalse(mutNumA.equals(Float.valueOf(0f))); ref {mutNumA, Float} [100-100],
 assertFalse(mutNumA.equals("0")); ref {mutNumA} [101-101]
[m[m31.08.2022 - 15:15:22.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testHashCode has 4 assertions: 
 assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); ref {mutNumA} [110-110],
 assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); ref {mutNumA, mutNumB} [111-111],
 assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); ref {mutNumA, mutNumC} [112-112],
 assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode()); ref {mutNumA, Float} [113-113]
[m[m31.08.2022 - 15:15:22.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testCompareTo has 3 assertions: 
 assertEquals(0, mutNum.compareTo(new MutableFloat(0f))); ref {mutNum} [120-120],
 assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f))); ref {mutNum} [121-121],
 assertEquals(-1, mutNum.compareTo(new MutableFloat(1f))); ref {mutNum} [122-122]
[m[m31.08.2022 - 15:15:22.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testCompareToNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testPrimitiveValues has 6 assertions: 
 assertEquals(1, mutNum.intValue()); ref {mutNum} [135-135],
 assertEquals(1.7, mutNum.doubleValue(), 0.00001); ref {mutNum} [136-136],
 assertEquals((byte) 1, mutNum.byteValue()); ref {mutNum} [137-137],
 assertEquals((short) 1, mutNum.shortValue()); ref {mutNum} [138-138],
 assertEquals(1, mutNum.intValue()); ref {mutNum} [139-139],
 assertEquals(1L, mutNum.longValue()); ref {mutNum} [140-140]
[m[m31.08.2022 - 15:15:22.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testToFloat has 2 assertions: 
 assertEquals(Float.valueOf(0f), new MutableFloat(0f).toFloat()); ref {Float} [145-145],
 assertEquals(Float.valueOf(12.3f), new MutableFloat(12.3f).toFloat()); ref {Float} [146-146]
[m[m31.08.2022 - 15:15:22.545 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testIncrement has 2 assertions: 
 assertEquals(2, mutNum.intValue()); ref {mutNum} [154-154],
 assertEquals(2L, mutNum.longValue()); ref {mutNum} [155-155]
[m[m31.08.2022 - 15:15:22.545 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testDecrement has 2 assertions: 
 assertEquals(0, mutNum.intValue()); ref {mutNum} [163-163],
 assertEquals(0L, mutNum.longValue()); ref {mutNum} [164-164]
[m[m31.08.2022 - 15:15:22.545 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testAddValuePrimitive has 1 assertions: 
 assertEquals(2.1f, mutNum.floatValue(), 0.01f); ref {mutNum} [172-172]
[m[m31.08.2022 - 15:15:22.545 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testAddValueObject has 1 assertions: 
 assertEquals(2.1f, mutNum.floatValue(), 0.01f); ref {mutNum} [180-180]
[m[m31.08.2022 - 15:15:22.545 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testSubtractValuePrimitive has 1 assertions: 
 assertEquals(0.1f, mutNum.floatValue(), 0.01f); ref {mutNum} [188-188]
[m[m31.08.2022 - 15:15:22.545 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testSubtractValueObject has 1 assertions: 
 assertEquals(0.1f, mutNum.floatValue(), 0.01f); ref {mutNum} [196-196]
[m[m31.08.2022 - 15:15:22.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableFloatTest::testToString has 3 assertions: 
 assertEquals("0.0", new MutableFloat(0f).toString()); ref {} [201-201],
 assertEquals("10.0", new MutableFloat(10f).toString()); ref {} [202-202],
 assertEquals("-123.0", new MutableFloat(-123f).toString()); ref {} [203-203]
[m[m31.08.2022 - 15:15:22.556 [INFO ] ParsingStrategy.parseTestSuite() - Found 26 test cases
[m[m31.08.2022 - 15:15:22.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new SerializationUtils()); ref {} [70-70],
 assertEquals(1, cons.length); ref {cons.length, cons} [72-72],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [73-73],
 assertTrue(Modifier.isPublic(SerializationUtils.class.getModifiers())); ref {Modifier} [74-74],
 assertFalse(Modifier.isFinal(SerializationUtils.class.getModifiers())); ref {Modifier} [75-75]
[m[m31.08.2022 - 15:15:22.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testException has 8 assertions: 
 assertSame(null, serEx.getMessage()); ref {serEx} [84-84],
 assertSame(null, serEx.getCause()); ref {serEx} [85-85],
 assertSame("Message", serEx.getMessage()); ref {serEx} [88-88],
 assertSame(null, serEx.getCause()); ref {serEx} [89-89],
 assertEquals("java.lang.Exception", serEx.getMessage()); ref {serEx} [92-92],
 assertSame(ex, serEx.getCause()); ref {ex, serEx} [93-93],
 assertSame("Message", serEx.getMessage()); ref {serEx} [96-96],
 assertSame(ex, serEx.getCause()); ref {ex, serEx} [97-97]
[m[m31.08.2022 - 15:15:22.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testSerializeStream has 2 assertions: 
 assertEquals(testBytes.length, realBytes.length); ref {testBytes.length, realBytes.length, testBytes, realBytes} [115-115],
 assertEquals(realBytes[i], testBytes[i]); ref {i, testBytes, realBytes} [117-117]
[m[m31.08.2022 - 15:15:22.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testSerializeStreamUnserializable has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.558 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testSerializeStreamNullObj has 2 assertions: 
 assertEquals(testBytes.length, realBytes.length); ref {testBytes.length, realBytes.length, testBytes, realBytes} [146-146],
 assertEquals(realBytes[i], testBytes[i]); ref {i, testBytes, realBytes} [148-148]
[m[m31.08.2022 - 15:15:22.558 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testSerializeStreamObjNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.558 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testSerializeStreamNullNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.558 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testSerializeIOException has 1 assertions: 
 assertEquals("java.io.IOException: " + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage()); ref {e, SERIALIZE_IO_EXCEPTION_MESSAGE} [186-186]
[m[m31.08.2022 - 15:15:22.558 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testDeserializeStream has 8 assertions: 
 assertNotNull(test); ref {test} [202-202],
 assertTrue(test instanceof HashMap<?, ?>); ref {test} [203-203],
 assertTrue(test != iMap); ref {iMap, test} [204-204],
 assertEquals(iString, testMap.get("FOO")); ref {iString, testMap} [206-206],
 assertTrue(iString != testMap.get("FOO")); ref {iString, testMap} [207-207],
 assertEquals(iInteger, testMap.get("BAR")); ref {iInteger, testMap} [208-208],
 assertTrue(iInteger != testMap.get("BAR")); ref {iInteger, testMap} [209-209],
 assertEquals(iMap, testMap); ref {iMap, testMap} [210-210]
[m[m31.08.2022 - 15:15:22.558 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testDeserializeClassCastException has 1 assertions: 
 Assert.assertEquals(value, SerializationUtils.deserialize(serialized)); ref {Assert, value, SerializationUtils, serialized} [217-217]
[m[m31.08.2022 - 15:15:22.559 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testDeserializeStreamOfNull has 1 assertions: 
 assertNull(test); ref {test} [233-233]
[m[m31.08.2022 - 15:15:22.559 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testDeserializeStreamNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.559 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testDeserializeStreamBadStream has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.559 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testDeserializeStreamClassNotFound has 1 assertions: 
 assertEquals("java.lang.ClassNotFoundException: " + CLASS_NOT_FOUND_MESSAGE, se.getMessage()); ref {se, CLASS_NOT_FOUND_MESSAGE} [270-270]
[m[m31.08.2022 - 15:15:22.559 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testRoundtrip has 1 assertions: 
 assertEquals(iMap, newMap); ref {iMap, newMap} [277-277]
[m[m31.08.2022 - 15:15:22.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testSerializeBytes has 2 assertions: 
 assertEquals(testBytes.length, realBytes.length); ref {testBytes.length, realBytes.length, testBytes, realBytes} [293-293],
 assertEquals(realBytes[i], testBytes[i]); ref {i, testBytes, realBytes} [295-295]
[m[m31.08.2022 - 15:15:22.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testSerializeBytesUnserializable has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testSerializeBytesNull has 2 assertions: 
 assertEquals(testBytes.length, realBytes.length); ref {testBytes.length, realBytes.length, testBytes, realBytes} [321-321],
 assertEquals(realBytes[i], testBytes[i]); ref {i, testBytes, realBytes} [323-323]
[m[m31.08.2022 - 15:15:22.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testDeserializeBytes has 8 assertions: 
 assertNotNull(test); ref {test} [338-338],
 assertTrue(test instanceof HashMap<?, ?>); ref {test} [339-339],
 assertTrue(test != iMap); ref {iMap, test} [340-340],
 assertEquals(iString, testMap.get("FOO")); ref {iString, testMap} [342-342],
 assertTrue(iString != testMap.get("FOO")); ref {iString, testMap} [343-343],
 assertEquals(iInteger, testMap.get("BAR")); ref {iInteger, testMap} [344-344],
 assertTrue(iInteger != testMap.get("BAR")); ref {iInteger, testMap} [345-345],
 assertEquals(iMap, testMap); ref {iMap, testMap} [346-346]
[m[m31.08.2022 - 15:15:22.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testDeserializeBytesOfNull has 1 assertions: 
 assertNull(test); ref {test} [358-358]
[m[m31.08.2022 - 15:15:22.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testDeserializeBytesNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.561 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testDeserializeBytesBadStream has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.561 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testClone has 8 assertions: 
 assertNotNull(test); ref {test} [386-386],
 assertTrue(test instanceof HashMap<?, ?>); ref {test} [387-387],
 assertTrue(test != iMap); ref {iMap, test} [388-388],
 assertEquals(iString, testMap.get("FOO")); ref {iString, testMap} [390-390],
 assertTrue(iString != testMap.get("FOO")); ref {iString, testMap} [391-391],
 assertEquals(iInteger, testMap.get("BAR")); ref {iInteger, testMap} [392-392],
 assertTrue(iInteger != testMap.get("BAR")); ref {iInteger, testMap} [393-393],
 assertEquals(iMap, testMap); ref {iMap, testMap} [394-394]
[m[m31.08.2022 - 15:15:22.561 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testCloneNull has 1 assertions: 
 assertNull(test); ref {test} [400-400]
[m[m31.08.2022 - 15:15:22.561 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testCloneUnserializable has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.561 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerialization has 1 assertions: 
 assertEquals(primitiveType, clone); ref {clone, primitiveType} [421-421]
[m[m31.08.2022 - 15:15:22.566 [INFO ] ParsingStrategy.parseTestSuite() - Found 9 test cases
[m[m31.08.2022 - 15:15:22.567 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.JsonToStringStyleTest::testNull has 1 assertions: 
 assertEquals("null", new ToStringBuilder(null).toString()); ref {} [54-54]
[m[m31.08.2022 - 15:15:22.567 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.JsonToStringStyleTest::testBlank has 1 assertions: 
 assertEquals("{}", new ToStringBuilder(base).toString()); ref {base} [59-59]
[m[m31.08.2022 - 15:15:22.567 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.JsonToStringStyleTest::testAppendSuper has 6 assertions: 
 assertEquals("{}", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").toString()); ref {SystemUtils.LINE_SEPARATOR, SystemUtils, base} [64-68],
 assertEquals("{}", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  null" + SystemUtils.LINE_SEPARATOR + "]").toString()); ref {SystemUtils.LINE_SEPARATOR, SystemUtils, base} [69-73],
 assertEquals("{\"a\":\"hello\"}", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); ref {SystemUtils.LINE_SEPARATOR, SystemUtils, base} [74-79],
 assertEquals("{\"a\":\"hello\"}", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  null" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); ref {SystemUtils.LINE_SEPARATOR, SystemUtils, base} [80-86],
 assertEquals("{\"a\":\"hello\"}", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); ref {base} [87-88],
 assertEquals("{\"a\":\"hello\",\"b\":\"world\"}", new ToStringBuilder(base).appendSuper("{\"a\":\"hello\"}").append("b", "world").toString()); ref {base} [90-91]
[m[m31.08.2022 - 15:15:22.568 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.JsonToStringStyleTest::testObject has 8 assertions: 
 assertEquals("{\"a\":null}", new ToStringBuilder(base).append("a", (Object) null).toString()); ref {base} [112-113],
 assertEquals("{\"a\":3}", new ToStringBuilder(base).append("a", i3).toString()); ref {i3, base} [114-115],
 assertEquals("{\"a\":3,\"b\":4}", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); ref {i3, i4, base} [116-118],
 assertEquals("{\"a\":[]}", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); ref {base} [132-135],
 assertEquals("{\"a\":{}}", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); ref {base} [143-146],
 assertEquals("{\"a\":[]}", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); ref {base} [154-157],
 assertEquals("{\"a\":[1,2,3]}", new ToStringBuilder(base).append("a", (Object) new int[] { 1, 2, 3 }, true).toString()); ref {base} [166-169],
 assertEquals("{\"a\":[\"v\",\"x\",\"y\",\"z\"]}", new ToStringBuilder(base).append("a", (Object) new String[] { "v", "x", "y", "z" }, true).toString()); ref {base} [178-182]
[m[m31.08.2022 - 15:15:22.568 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.JsonToStringStyleTest::testPerson has 1 assertions: 
 assertEquals("{\"name\":\"Jane Doe\",\"age\":25,\"smoker\":true}", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); ref {p, p.age, p.smoker, p.name} [192-196]
[m[m31.08.2022 - 15:15:22.568 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.JsonToStringStyleTest::testLong has 2 assertions: 
 assertEquals("{\"a\":3}", new ToStringBuilder(base).append("a", 3L).toString()); ref {base} [208-209],
 assertEquals("{\"a\":3,\"b\":4}", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); ref {base} [210-212]
[m[m31.08.2022 - 15:15:22.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.JsonToStringStyleTest::testObjectArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.JsonToStringStyleTest::testLongArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.JsonToStringStyleTest::testLongArrayArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.580 [INFO ] ParsingStrategy.parseTestSuite() - Found 17 test cases
[m[m31.08.2022 - 15:15:22.581 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testFormat has 21 assertions: 
 assertEquals(sdf.format(date1), fdf.format(date1)); ref {sdf, fdf, date1} [92-92],
 assertEquals("2003-01-10T15:33:20", fdf.format(date1)); ref {fdf, date1} [93-93],
 assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); ref {fdf, cal1} [94-94],
 assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); ref {millis1, fdf} [95-95],
 assertEquals("2003-07-10T09:00:00", fdf.format(date2)); ref {fdf, date2} [96-96],
 assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); ref {fdf, cal2} [97-97],
 assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); ref {millis2, fdf} [98-98],
 assertEquals("-0500", fdf.format(date1)); ref {fdf, date1} [101-101],
 assertEquals("-0500", fdf.format(cal1)); ref {fdf, cal1} [102-102],
 assertEquals("-0500", fdf.format(millis1)); ref {millis1, fdf} [103-103],
 assertEquals("-0400", fdf.format(date2)); ref {fdf, date2} [105-105],
 assertEquals("-0400", fdf.format(cal2)); ref {fdf, cal2} [106-106],
 assertEquals("-0400", fdf.format(millis2)); ref {millis2, fdf} [107-107],
 assertEquals("-05:00", fdf.format(date1)); ref {fdf, date1} [110-110],
 assertEquals("-05:00", fdf.format(cal1)); ref {fdf, cal1} [111-111],
 assertEquals("-05:00", fdf.format(millis1)); ref {millis1, fdf} [112-112],
 assertEquals("-04:00", fdf.format(date2)); ref {fdf, date2} [114-114],
 assertEquals("-04:00", fdf.format(cal2)); ref {fdf, cal2} [115-115],
 assertEquals("-04:00", fdf.format(millis2)); ref {millis2, fdf} [116-116],
 // SDF bug fix starting with Java 7
assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); ref {sdf, fdf, date1} [123-123],
 assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); ref {sdf, fdf, date2} [124-124]
[m[m31.08.2022 - 15:15:22.582 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testShortDateStyleWithLocales has 2 assertions: 
 assertEquals("2/3/04", fdf.format(cal)); ref {fdf, cal} [141-141],
 assertEquals("2004-02-03", fdf.format(cal)); ref {fdf, cal} [144-144]
[m[m31.08.2022 - 15:15:22.582 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testLowYearPadding has 4 assertions: 
 assertEquals("0001/01/01", format.format(cal)); ref {format, cal} [157-157],
 assertEquals("0010/01/01", format.format(cal)); ref {format, cal} [159-159],
 assertEquals("0100/01/01", format.format(cal)); ref {format, cal} [161-161],
 assertEquals("0999/01/01", format.format(cal)); ref {format, cal} [163-163]
[m[m31.08.2022 - 15:15:22.582 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testMilleniumBug has 1 assertions: 
 assertEquals("01.01.1000", format.format(cal)); ref {format, cal} [174-174]
[m[m31.08.2022 - 15:15:22.582 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testSimpleDate has 3 assertions: 
 assertEquals("2004/12/31", format.format(cal)); ref {format, cal} [187-187],
 assertEquals("0999/12/31", format.format(cal)); ref {format, cal} [189-189],
 assertEquals("0001/03/02", format.format(cal)); ref {format, cal} [191-191]
[m[m31.08.2022 - 15:15:22.583 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testLang303 has 1 assertions: 
 assertEquals(output, format.format(cal)); ref {output, format, cal} [203-203]
[m[m31.08.2022 - 15:15:22.583 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testLang538 has 2 assertions: 
 assertEquals("dateTime", "2009-10-16T16:42:16.000Z", format.format(cal.getTime())); ref {format, cal} [215-215],
 assertEquals("dateTime", "2009-10-16T08:42:16.000Z", format.format(cal)); ref {format, cal} [216-216]
[m[m31.08.2022 - 15:15:22.583 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testLang645 has 1 assertions: 
 assertEquals("fredag, week 53", fdf.format(d)); ref {d, fdf} [229-229]
[m[m31.08.2022 - 15:15:22.583 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testEquals has 3 assertions: 
 assertEquals(printer1, printer2); ref {printer2, printer1} [237-237],
 assertEquals(printer1.hashCode(), printer2.hashCode()); ref {printer2, printer1} [238-238],
 assertFalse(printer1.equals(new Object())); ref {printer1} [240-240]
[m[m31.08.2022 - 15:15:22.584 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testToStringContainsName has 1 assertions: 
 assertTrue(printer.toString().startsWith("FastDate")); ref {printer} [246-246]
[m[m31.08.2022 - 15:15:22.584 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testPatternMatches has 1 assertions: 
 assertEquals(YYYY_MM_DD, printer.getPattern()); ref {YYYY_MM_DD, printer} [252-252]
[m[m31.08.2022 - 15:15:22.584 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testLocaleMatches has 1 assertions: 
 assertEquals(SWEDEN, printer.getLocale()); ref {SWEDEN, printer} [258-258]
[m[m31.08.2022 - 15:15:22.584 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testTimeZoneMatches has 1 assertions: 
 assertEquals(NEW_YORK, printer.getTimeZone()); ref {printer, NEW_YORK} [264-264]
[m[m31.08.2022 - 15:15:22.584 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testTimeZoneAsZ has 3 assertions: 
 assertEquals("+0000", noColonFormat.format(c)); ref {c, noColonFormat} [272-272],
 assertEquals("Z", isoFormat.format(c)); ref {c, isoFormat} [275-275],
 assertEquals("+00:00", colonFormat.format(c)); ref {c, colonFormat} [278-278]
[m[m31.08.2022 - 15:15:22.584 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::test1806Argument has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.585 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::test1806 has 3 assertions: 
 assertEquals(trial.one, printer.format(cal)); ref {printer, trial.one, trial, cal} [321-321],
 assertEquals(trial.two, printer.format(cal)); ref {trial.two, printer, trial, cal} [324-324],
 assertEquals(trial.three, printer.format(cal)); ref {printer, trial.three, trial, cal} [327-327]
[m[m31.08.2022 - 15:15:22.585 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDatePrinterTest::testLang1103 has 5 assertions: 
 assertEquals("2", getInstance("d", SWEDEN).format(cal)); ref {SWEDEN, cal} [336-336],
 assertEquals("02", getInstance("dd", SWEDEN).format(cal)); ref {SWEDEN, cal} [337-337],
 assertEquals("002", getInstance("ddd", SWEDEN).format(cal)); ref {SWEDEN, cal} [338-338],
 assertEquals("0002", getInstance("dddd", SWEDEN).format(cal)); ref {SWEDEN, cal} [339-339],
 assertEquals("00002", getInstance("ddddd", SWEDEN).format(cal)); ref {SWEDEN, cal} [340-340]
[m[m31.08.2022 - 15:15:22.616 [INFO ] ParsingStrategy.parseTestSuite() - Found 10 test cases
[m[m31.08.2022 - 15:15:22.616 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.AnnotationUtilsTest::testEquivalence has 2 assertions: 
 assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); ref {field1, AnnotationUtils, field2} [399-399],
 assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); ref {field1, AnnotationUtils, field2} [400-400]
[m[m31.08.2022 - 15:15:22.616 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.AnnotationUtilsTest::testSameInstance has 1 assertions: 
 assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); ref {field1, AnnotationUtils} [405-405]
[m[m31.08.2022 - 15:15:22.617 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.AnnotationUtilsTest::testNonEquivalentAnnotationsOfSameType has 2 assertions: 
 assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); ref {field1, AnnotationUtils, field3} [410-410],
 assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); ref {field1, AnnotationUtils, field3} [411-411]
[m[m31.08.2022 - 15:15:22.617 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.AnnotationUtilsTest::testAnnotationsOfDifferingTypes has 2 assertions: 
 assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field4.getAnnotation(NestAnnotation.class))); ref {field1, AnnotationUtils, field4} [416-416],
 assertFalse(AnnotationUtils.equals(field4.getAnnotation(NestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); ref {field1, AnnotationUtils, field4} [417-417]
[m[m31.08.2022 - 15:15:22.617 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.AnnotationUtilsTest::testOneArgNull has 2 assertions: 
 assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); ref {field1, AnnotationUtils} [422-422],
 assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); ref {field1, AnnotationUtils} [423-423]
[m[m31.08.2022 - 15:15:22.617 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.AnnotationUtilsTest::testBothArgsNull has 1 assertions: 
 assertTrue(AnnotationUtils.equals(null, null)); ref {AnnotationUtils} [428-428]
[m[m31.08.2022 - 15:15:22.617 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.AnnotationUtilsTest::testIsValidAnnotationMemberType has 4 assertions: 
 assertTrue(AnnotationUtils.isValidAnnotationMemberType(type)); ref {AnnotationUtils, type} [436-436],
 assertTrue(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0).getClass())); ref {Array, AnnotationUtils, type} [437-438],
 assertFalse(AnnotationUtils.isValidAnnotationMemberType(type)); ref {AnnotationUtils, type} [441-441],
 assertFalse(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0).getClass())); ref {Array, AnnotationUtils, type} [442-443]
[m[m31.08.2022 - 15:15:22.618 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.AnnotationUtilsTest::testGeneratedAnnotationEquivalentToRealAnnotation has 8 assertions: 
 assertTrue(real.equals(generated)); ref {generated, real} [472-472],
 assertFalse(generated.equals(real)); ref {generated, real} [473-473],
 assertTrue(AnnotationUtils.equals(generated, real)); ref {generated, AnnotationUtils, real} [474-474],
 assertTrue(AnnotationUtils.equals(real, generated)); ref {generated, AnnotationUtils, real} [475-475],
 assertFalse(generated.equals(generated2)); ref {generated, generated2} [480-480],
 assertFalse(generated2.equals(generated)); ref {generated, generated2} [481-481],
 assertTrue(AnnotationUtils.equals(generated, generated2)); ref {generated, AnnotationUtils, generated2} [482-482],
 assertTrue(AnnotationUtils.equals(generated2, generated)); ref {generated, AnnotationUtils, generated2} [483-483]
[m[m31.08.2022 - 15:15:22.618 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.AnnotationUtilsTest::testHashCode has 3 assertions: 
 assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); ref {test, AnnotationUtils} [489-489],
 assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); ref {AnnotationUtils, testAnnotation1} [491-491],
 assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); ref {AnnotationUtils, testAnnotation3} [493-493]
[m[m31.08.2022 - 15:15:22.618 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.AnnotationUtilsTest::testToString has 5 assertions: 
 assertTrue(toString.startsWith("@org.junit.Test(")); ref {toString} [501-501],
 assertTrue(toString.endsWith(")")); ref {toString} [502-502],
 assertTrue(toString.contains("expected=class org.junit.Test$None")); ref {toString} [503-503],
 assertTrue(toString.contains("timeout=666000")); ref {toString} [504-504],
 assertTrue(toString.contains(", ")); ref {toString} [505-505]
[m[m31.08.2022 - 15:15:22.621 [INFO ] ParsingStrategy.parseTestSuite() - Found 9 test cases
[m[m31.08.2022 - 15:15:22.622 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffResultTest::testListIsNonModifiable has 2 assertions: 
 assertEquals(diffs, list.getDiffs()); ref {diffs, list} [68-68],
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [69-69]
[m[m31.08.2022 - 15:15:22.622 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffResultTest::testIterator has 2 assertions: 
 assertTrue(expectedIterator.hasNext()); ref {expectedIterator} [85-85],
 assertEquals(expectedIterator.next(), iterator.next()); ref {iterator, expectedIterator} [86-86]
[m[m31.08.2022 - 15:15:22.622 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffResultTest::testToStringOutput has 1 assertions: 
 assertEquals("DiffResultTest.EmptyClass[test=false] differs from DiffResultTest.EmptyClass[test=true]", list.toString()); ref {list} [95-97]
[m[m31.08.2022 - 15:15:22.622 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffResultTest::testToStringSpecifyStyleOutput has 2 assertions: 
 assertTrue(list.getToStringStyle().equals(SHORT_STYLE)); ref {SHORT_STYLE, list} [103-103],
 assertEquals(expectedOutput, list.toString(ToStringStyle.MULTI_LINE_STYLE)); ref {expectedOutput, ToStringStyle, list, ToStringStyle.MULTI_LINE_STYLE} [115-116]
[m[m31.08.2022 - 15:15:22.623 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffResultTest::testNullLhs has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.623 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffResultTest::testNullRhs has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.623 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffResultTest::testNullList has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.623 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffResultTest::testNullStyle has 1 assertions: 
 assertEquals(ToStringStyle.DEFAULT_STYLE, diffResult.getToStringStyle()); ref {diffResult, ToStringStyle.DEFAULT_STYLE, ToStringStyle} [140-140]
[m[m31.08.2022 - 15:15:22.623 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffResultTest::testNoDifferencesString has 1 assertions: 
 assertEquals(DiffResult.OBJECTS_SAME_STRING, diffResult.toString()); ref {diffResult, DiffResult, DiffResult.OBJECTS_SAME_STRING} [147-147]
[m[m31.08.2022 - 15:15:22.624 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 15:15:22.624 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest::testNumberOfInitializeInvocations has 1 assertions: 
 assertEquals("Wrong number of invocations", 1, initializer.initCounter.get()); ref {initializer.initCounter, initializer} [61-62]
[m[m31.08.2022 - 15:15:22.624 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:22.681 [INFO ] ParsingStrategy.parseTestSuite() - Found 19 test cases
[m[m31.08.2022 - 15:15:22.682 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testIsAssignable has 141 assertions: 
 // list0 = list0;
delegateBooleanAssertion(types, 0, 0, true); ref {types} [133-133],
 delegateBooleanAssertion(types, 0, 1, true); ref {types} [135-135],
 delegateBooleanAssertion(types, 1, 0, true); ref {types} [137-137],
 delegateBooleanAssertion(types, 0, 2, true); ref {types} [139-139],
 delegateBooleanAssertion(types, 2, 0, true); ref {types} [141-141],
 delegateBooleanAssertion(types, 0, 3, true); ref {types} [143-143],
 delegateBooleanAssertion(types, 3, 0, true); ref {types} [145-145],
 delegateBooleanAssertion(types, 0, 4, true); ref {types} [147-147],
 delegateBooleanAssertion(types, 4, 0, true); ref {types} [149-149],
 delegateBooleanAssertion(types, 0, 5, true); ref {types} [151-151],
 delegateBooleanAssertion(types, 5, 0, true); ref {types} [153-153],
 delegateBooleanAssertion(types, 0, 6, true); ref {types} [155-155],
 delegateBooleanAssertion(types, 6, 0, true); ref {types} [157-157],
 // list1 = list1;
delegateBooleanAssertion(types, 1, 1, true); ref {types} [159-159],
 delegateBooleanAssertion(types, 1, 2, true); ref {types} [161-161],
 delegateBooleanAssertion(types, 2, 1, false); ref {types} [163-163],
 delegateBooleanAssertion(types, 1, 3, true); ref {types} [165-165],
 delegateBooleanAssertion(types, 3, 1, false); ref {types} [167-167],
 // list4 = list1;
delegateBooleanAssertion(types, 1, 4, false); ref {types} [169-169],
 // list1 = list4;
delegateBooleanAssertion(types, 4, 1, false); ref {types} [171-171],
 // list5 = list1;
delegateBooleanAssertion(types, 1, 5, false); ref {types} [173-173],
 // list1 = list5;
delegateBooleanAssertion(types, 5, 1, false); ref {types} [175-175],
 delegateBooleanAssertion(types, 1, 6, true); ref {types} [177-177],
 delegateBooleanAssertion(types, 6, 1, false); ref {types} [179-179],
 // list2 = list2;
delegateBooleanAssertion(types, 2, 2, true); ref {types} [181-181],
 delegateBooleanAssertion(types, 2, 3, false); ref {types} [183-183],
 delegateBooleanAssertion(types, 3, 2, true); ref {types} [185-185],
 delegateBooleanAssertion(types, 2, 4, false); ref {types} [187-187],
 delegateBooleanAssertion(types, 4, 2, true); ref {types} [189-189],
 delegateBooleanAssertion(types, 2, 5, false); ref {types} [191-191],
 delegateBooleanAssertion(types, 5, 2, true); ref {types} [193-193],
 delegateBooleanAssertion(types, 2, 6, false); ref {types} [195-195],
 // list3 = list3;
delegateBooleanAssertion(types, 6, 2, true); ref {types} [197-197],
 delegateBooleanAssertion(types, 3, 3, true); ref {types} [199-199],
 // list4 = list3;
delegateBooleanAssertion(types, 3, 4, false); ref {types} [201-201],
 // list3 = list4;
delegateBooleanAssertion(types, 4, 3, false); ref {types} [203-203],
 // list5 = list3;
delegateBooleanAssertion(types, 3, 5, false); ref {types} [205-205],
 // list3 = list5;
delegateBooleanAssertion(types, 5, 3, false); ref {types} [207-207],
 delegateBooleanAssertion(types, 3, 6, true); ref {types} [209-209],
 delegateBooleanAssertion(types, 6, 3, false); ref {types} [211-211],
 // list4 = list4;
delegateBooleanAssertion(types, 4, 4, true); ref {types} [213-213],
 delegateBooleanAssertion(types, 4, 5, true); ref {types} [215-215],
 delegateBooleanAssertion(types, 5, 4, false); ref {types} [217-217],
 delegateBooleanAssertion(types, 4, 6, true); ref {types} [219-219],
 delegateBooleanAssertion(types, 6, 4, false); ref {types} [221-221],
 // list5 = list5;
delegateBooleanAssertion(types, 5, 5, true); ref {types} [223-223],
 delegateBooleanAssertion(types, 5, 6, false); ref {types} [225-225],
 delegateBooleanAssertion(types, 6, 5, false); ref {types} [227-227],
 // list6 = list6;
delegateBooleanAssertion(types, 6, 6, true); ref {types} [229-229],
 // list7 = list7;
delegateBooleanAssertion(types, 7, 7, true); ref {types} [232-232],
 delegateBooleanAssertion(types, 7, 8, true); ref {types} [234-234],
 delegateBooleanAssertion(types, 8, 7, true); ref {types} [236-236],
 delegateBooleanAssertion(types, 7, 9, true); ref {types} [238-238],
 delegateBooleanAssertion(types, 9, 7, true); ref {types} [240-240],
 delegateBooleanAssertion(types, 7, 10, true); ref {types} [242-242],
 delegateBooleanAssertion(types, 10, 7, true); ref {types} [244-244],
 delegateBooleanAssertion(types, 7, 11, true); ref {types} [246-246],
 delegateBooleanAssertion(types, 11, 7, true); ref {types} [248-248],
 delegateBooleanAssertion(types, 7, 12, true); ref {types} [250-250],
 delegateBooleanAssertion(types, 12, 7, true); ref {types} [252-252],
 delegateBooleanAssertion(types, 7, 13, true); ref {types} [254-254],
 delegateBooleanAssertion(types, 13, 7, true); ref {types} [256-256],
 // list8 = list8;
delegateBooleanAssertion(types, 8, 8, true); ref {types} [258-258],
 delegateBooleanAssertion(types, 8, 9, true); ref {types} [260-260],
 delegateBooleanAssertion(types, 9, 8, false); ref {types} [262-262],
 delegateBooleanAssertion(types, 8, 10, true); ref {types} [264-264],
 delegateBooleanAssertion(types, 10, 8, false); ref {types} [266-266],
 // list11 = list8;
delegateBooleanAssertion(types, 8, 11, false); ref {types} [268-268],
 // list8 = list11;
delegateBooleanAssertion(types, 11, 8, false); ref {types} [270-270],
 // list12 = list8;
delegateBooleanAssertion(types, 8, 12, false); ref {types} [272-272],
 // list8 = list12;
delegateBooleanAssertion(types, 12, 8, false); ref {types} [274-274],
 delegateBooleanAssertion(types, 8, 13, true); ref {types} [276-276],
 delegateBooleanAssertion(types, 13, 8, false); ref {types} [278-278],
 // list9 = list9;
delegateBooleanAssertion(types, 9, 9, true); ref {types} [280-280],
 delegateBooleanAssertion(types, 9, 10, false); ref {types} [282-282],
 delegateBooleanAssertion(types, 10, 9, true); ref {types} [284-284],
 delegateBooleanAssertion(types, 9, 11, false); ref {types} [286-286],
 delegateBooleanAssertion(types, 11, 9, true); ref {types} [288-288],
 delegateBooleanAssertion(types, 9, 12, false); ref {types} [290-290],
 delegateBooleanAssertion(types, 12, 9, true); ref {types} [292-292],
 delegateBooleanAssertion(types, 9, 13, false); ref {types} [294-294],
 delegateBooleanAssertion(types, 13, 9, true); ref {types} [296-296],
 // list10 = list10;
delegateBooleanAssertion(types, 10, 10, true); ref {types} [298-298],
 // list11 = list10;
delegateBooleanAssertion(types, 10, 11, false); ref {types} [300-300],
 // list10 = list11;
delegateBooleanAssertion(types, 11, 10, false); ref {types} [302-302],
 // list12 = list10;
delegateBooleanAssertion(types, 10, 12, false); ref {types} [304-304],
 // list10 = list12;
delegateBooleanAssertion(types, 12, 10, false); ref {types} [306-306],
 delegateBooleanAssertion(types, 10, 13, true); ref {types} [308-308],
 delegateBooleanAssertion(types, 13, 10, false); ref {types} [310-310],
 // list11 = list11;
delegateBooleanAssertion(types, 11, 11, true); ref {types} [312-312],
 delegateBooleanAssertion(types, 11, 12, true); ref {types} [314-314],
 delegateBooleanAssertion(types, 12, 11, false); ref {types} [316-316],
 delegateBooleanAssertion(types, 11, 13, true); ref {types} [318-318],
 delegateBooleanAssertion(types, 13, 11, false); ref {types} [320-320],
 // list12 = list12;
delegateBooleanAssertion(types, 12, 12, true); ref {types} [322-322],
 delegateBooleanAssertion(types, 12, 13, false); ref {types} [324-324],
 delegateBooleanAssertion(types, 13, 12, false); ref {types} [326-326],
 // list13 = list13;
delegateBooleanAssertion(types, 13, 13, true); ref {types} [328-328],
 Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); ref {disType, Assert, TypeUtils, datType} [341-341],
 // dis = da;
Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); ref {disType, Assert, daType, TypeUtils} [343-343],
 Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); ref {uhderType, disType, Assert, TypeUtils} [345-345],
 Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); ref {disType, Assert, dingType, String, TypeUtils} [347-348],
 Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); ref {testerType, disType, Assert, TypeUtils} [350-350],
 // dis = tester2;
Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); ref {disType, Assert, tester2Type, TypeUtils} [352-352],
 // dat = dat2;
Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); ref {Assert, dat2Type, TypeUtils, datType} [354-354],
 // dat2 = dat;
Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); ref {Assert, dat2Type, TypeUtils, datType} [356-356],
 // dat = dat3;
Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); ref {Assert, dat3Type, TypeUtils, datType} [358-358],
 Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); ref {Assert, TypeUtils} [368-368],
 Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); ref {Assert, TypeUtils} [370-370],
 Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); ref {Assert, TypeUtils} [372-372],
 Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); ref {Assert, TypeUtils} [374-374],
 Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); ref {Assert, TypeUtils} [376-376],
 Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); ref {Assert, TypeUtils} [378-378],
 Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); ref {Assert, TypeUtils} [380-380],
 Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); ref {Assert, TypeUtils} [382-382],
 // Long lngW = 1;
Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); ref {Assert, TypeUtils} [384-384],
 // lngW = Integer.valueOf( 0 );
Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); ref {Assert, TypeUtils} [386-386],
 Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); ref {Assert, TypeUtils} [388-388],
 Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); ref {Assert, TypeUtils} [390-390],
 Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); ref {Assert, TypeUtils} [391-391],
 Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); ref {Assert, TypeUtils} [392-392],
 Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); ref {Assert, intComparableType, TypeUtils} [395-395],
 Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); ref {Assert, TypeUtils} [396-396],
 Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); ref {Assert, TypeUtils} [398-398],
 // longComparable = 1;
Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); ref {Assert, longComparableType, TypeUtils} [401-401],
 // longComparable = Integer.valueOf( 0 );
Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); ref {Assert, longComparableType, TypeUtils} [403-403],
 // int[] ia;
// long[] la = ia;
Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); ref {Assert, TypeUtils} [406-406],
 Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); ref {Assert, caType, TypeUtils} [410-410],
 // int[] ina = ia;
Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); ref {Assert, TypeUtils} [412-412],
 // oa = ina;
Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); ref {Assert, TypeUtils} [416-416],
 Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); ref {Assert, TypeUtils} [418-418],
 Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); ref {Assert, cClassType, bClassType, TypeUtils} [426-426],
 Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); ref {dClassType, Assert, bClassType, TypeUtils} [428-428],
 Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); ref {Assert, eClassType, bClassType, TypeUtils} [430-430],
 Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); ref {Assert, bClassType, TypeUtils, fClassType} [432-432],
 Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); ref {dClassType, Assert, cClassType, TypeUtils} [434-434],
 Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); ref {Assert, eClassType, cClassType, TypeUtils} [436-436],
 Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); ref {Assert, cClassType, TypeUtils, fClassType} [438-438],
 Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); ref {dClassType, Assert, eClassType, TypeUtils} [440-440],
 Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); ref {dClassType, Assert, TypeUtils, fClassType} [442-442],
 Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); ref {Assert, eClassType, TypeUtils, fClassType} [444-444]
[m[m31.08.2022 - 15:15:22.682 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testIsInstance has 2 assertions: 
 Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); ref {Assert, intComparableType, TypeUtils} [469-469],
 // uriComparable = 1;
Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); ref {Assert, uriComparableType, TypeUtils} [471-471]
[m[m31.08.2022 - 15:15:22.683 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments has 17 assertions: 
 Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar)); ref {Assert, treeSetTypeVar, typeVarAssigns} [482-483],
 Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, typeVarAssigns.get(treeSetTypeVar)); ref {Assert, treeSetTypeVar, typeArg, typeVarAssigns} [485-486],
 Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar)); ref {Assert, treeSetTypeVar, typeVarAssigns} [490-491],
 Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class, typeVarAssigns.get(treeSetTypeVar)); ref {Assert, treeSetTypeVar, typeArg, typeVarAssigns} [493-494],
 Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar)); ref {Assert, treeSetTypeVar, typeVarAssigns} [499-500],
 Assert.assertTrue(typeVarAssigns.size() == 2); ref {Assert, typeVarAssigns} [503-503],
 Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0])); ref {Assert, typeVarAssigns} [504-504],
 Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0])); ref {Assert, typeVarAssigns} [505-505],
 Assert.assertEquals(2, typeVarAssigns.size()); ref {Assert, typeVarAssigns} [508-508],
 Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0])); ref {Assert, typeVarAssigns} [509-509],
 Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1])); ref {Assert, typeVarAssigns} [510-510],
 Assert.assertEquals(2, typeVarAssigns.size()); ref {Assert, typeVarAssigns} [513-513],
 Assert.assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[0])); ref {Assert, typeVarAssigns} [514-514],
 Assert.assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[1])); ref {Assert, typeVarAssigns} [515-515],
 Assert.assertEquals(2, typeVarAssigns.size()); ref {Assert, typeVarAssigns} [518-518],
 Assert.assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(getClass().getTypeParameters()[0])); ref {Assert, typeVarAssigns} [519-519],
 Assert.assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(Other.class.getTypeParameters()[0])); ref {Assert, typeVarAssigns} [520-520]
[m[m31.08.2022 - 15:15:22.683 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testTypesSatisfyVariables has 3 assertions: 
 Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns)); ref {Assert, TypeUtils, typeVarAssigns} [529-529],
 Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns)); ref {Assert, TypeUtils, typeVarAssigns} [532-532],
 Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns)); ref {Assert, TypeUtils, typeVarAssigns} [535-535]
[m[m31.08.2022 - 15:15:22.683 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testDetermineTypeVariableAssignments has 2 assertions: 
 Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); ref {Assert, treeSetTypeVar, typeVarAssigns} [546-546],
 Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar)); ref {Assert, iterableType, treeSetTypeVar, typeVarAssigns} [547-548]
[m[m31.08.2022 - 15:15:22.683 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testGetRawType has 9 assertions: 
 Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null)); ref {Assert, stringParentFieldType, TypeUtils} [559-559],
 Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType, null)); ref {integerParentFieldType, Assert, TypeUtils} [560-562],
 Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null)); ref {Assert, foosFieldType, TypeUtils} [563-563],
 Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, StringParameterizedChild.class)); ref {Assert, genericParentT, TypeUtils} [564-565],
 Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, stringParentFieldType)); ref {Assert, genericParentT, stringParentFieldType, TypeUtils} [566-567],
 Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0], foosFieldType)); ref {Assert, foosFieldType, TypeUtils} [568-569],
 Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0], foosFieldType)); ref {Assert, foosFieldType, TypeUtils} [570-571],
 Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class)); ref {Assert, genericParentT, TypeUtils} [572-572],
 Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField("barParents").getGenericType(), null)); ref {Assert, TypeUtils} [573-574]
[m[m31.08.2022 - 15:15:22.683 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testIsArrayTypeClasses has 20 assertions: 
 Assert.assertTrue(TypeUtils.isArrayType(boolean[].class)); ref {Assert, TypeUtils} [579-579],
 Assert.assertTrue(TypeUtils.isArrayType(byte[].class)); ref {Assert, TypeUtils} [580-580],
 Assert.assertTrue(TypeUtils.isArrayType(short[].class)); ref {Assert, TypeUtils} [581-581],
 Assert.assertTrue(TypeUtils.isArrayType(int[].class)); ref {Assert, TypeUtils} [582-582],
 Assert.assertTrue(TypeUtils.isArrayType(char[].class)); ref {Assert, TypeUtils} [583-583],
 Assert.assertTrue(TypeUtils.isArrayType(long[].class)); ref {Assert, TypeUtils} [584-584],
 Assert.assertTrue(TypeUtils.isArrayType(float[].class)); ref {Assert, TypeUtils} [585-585],
 Assert.assertTrue(TypeUtils.isArrayType(double[].class)); ref {Assert, TypeUtils} [586-586],
 Assert.assertTrue(TypeUtils.isArrayType(Object[].class)); ref {Assert, TypeUtils} [587-587],
 Assert.assertTrue(TypeUtils.isArrayType(String[].class)); ref {Assert, TypeUtils} [588-588],
 Assert.assertFalse(TypeUtils.isArrayType(boolean.class)); ref {Assert, TypeUtils} [590-590],
 Assert.assertFalse(TypeUtils.isArrayType(byte.class)); ref {Assert, TypeUtils} [591-591],
 Assert.assertFalse(TypeUtils.isArrayType(short.class)); ref {Assert, TypeUtils} [592-592],
 Assert.assertFalse(TypeUtils.isArrayType(int.class)); ref {Assert, TypeUtils} [593-593],
 Assert.assertFalse(TypeUtils.isArrayType(char.class)); ref {Assert, TypeUtils} [594-594],
 Assert.assertFalse(TypeUtils.isArrayType(long.class)); ref {Assert, TypeUtils} [595-595],
 Assert.assertFalse(TypeUtils.isArrayType(float.class)); ref {Assert, TypeUtils} [596-596],
 Assert.assertFalse(TypeUtils.isArrayType(double.class)); ref {Assert, TypeUtils} [597-597],
 Assert.assertFalse(TypeUtils.isArrayType(Object.class)); ref {Assert, TypeUtils} [598-598],
 Assert.assertFalse(TypeUtils.isArrayType(String.class)); ref {Assert, TypeUtils} [599-599]
[m[m31.08.2022 - 15:15:22.684 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testIsArrayGenericTypes has 14 assertions: 
 Assert.assertFalse(TypeUtils.isArrayType(types[0])); ref {types, Assert, TypeUtils} [610-610],
 Assert.assertFalse(TypeUtils.isArrayType(types[1])); ref {types, Assert, TypeUtils} [611-611],
 Assert.assertFalse(TypeUtils.isArrayType(types[2])); ref {types, Assert, TypeUtils} [612-612],
 Assert.assertFalse(TypeUtils.isArrayType(types[3])); ref {types, Assert, TypeUtils} [613-613],
 Assert.assertFalse(TypeUtils.isArrayType(types[4])); ref {types, Assert, TypeUtils} [614-614],
 Assert.assertFalse(TypeUtils.isArrayType(types[5])); ref {types, Assert, TypeUtils} [615-615],
 Assert.assertFalse(TypeUtils.isArrayType(types[6])); ref {types, Assert, TypeUtils} [616-616],
 Assert.assertTrue(TypeUtils.isArrayType(types[7])); ref {types, Assert, TypeUtils} [617-617],
 Assert.assertTrue(TypeUtils.isArrayType(types[8])); ref {types, Assert, TypeUtils} [618-618],
 Assert.assertTrue(TypeUtils.isArrayType(types[9])); ref {types, Assert, TypeUtils} [619-619],
 Assert.assertTrue(TypeUtils.isArrayType(types[10])); ref {types, Assert, TypeUtils} [620-620],
 Assert.assertTrue(TypeUtils.isArrayType(types[11])); ref {types, Assert, TypeUtils} [621-621],
 Assert.assertTrue(TypeUtils.isArrayType(types[12])); ref {types, Assert, TypeUtils} [622-622],
 Assert.assertTrue(TypeUtils.isArrayType(types[13])); ref {types, Assert, TypeUtils} [623-623]
[m[m31.08.2022 - 15:15:22.684 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testGetPrimitiveArrayComponentType has 16 assertions: 
 Assert.assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class)); ref {Assert, TypeUtils} [628-628],
 Assert.assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class)); ref {Assert, TypeUtils} [629-629],
 Assert.assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class)); ref {Assert, TypeUtils} [630-630],
 Assert.assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class)); ref {Assert, TypeUtils} [631-631],
 Assert.assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class)); ref {Assert, TypeUtils} [632-632],
 Assert.assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class)); ref {Assert, TypeUtils} [633-633],
 Assert.assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class)); ref {Assert, TypeUtils} [634-634],
 Assert.assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class)); ref {Assert, TypeUtils} [635-635],
 Assert.assertNull(TypeUtils.getArrayComponentType(boolean.class)); ref {Assert, TypeUtils} [637-637],
 Assert.assertNull(TypeUtils.getArrayComponentType(byte.class)); ref {Assert, TypeUtils} [638-638],
 Assert.assertNull(TypeUtils.getArrayComponentType(short.class)); ref {Assert, TypeUtils} [639-639],
 Assert.assertNull(TypeUtils.getArrayComponentType(int.class)); ref {Assert, TypeUtils} [640-640],
 Assert.assertNull(TypeUtils.getArrayComponentType(char.class)); ref {Assert, TypeUtils} [641-641],
 Assert.assertNull(TypeUtils.getArrayComponentType(long.class)); ref {Assert, TypeUtils} [642-642],
 Assert.assertNull(TypeUtils.getArrayComponentType(float.class)); ref {Assert, TypeUtils} [643-643],
 Assert.assertNull(TypeUtils.getArrayComponentType(double.class)); ref {Assert, TypeUtils} [644-644]
[m[m31.08.2022 - 15:15:22.684 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testGetArrayComponentType has 14 assertions: 
 Assert.assertNull(TypeUtils.getArrayComponentType(types[0])); ref {types, Assert, TypeUtils} [655-655],
 Assert.assertNull(TypeUtils.getArrayComponentType(types[1])); ref {types, Assert, TypeUtils} [656-656],
 Assert.assertNull(TypeUtils.getArrayComponentType(types[2])); ref {types, Assert, TypeUtils} [657-657],
 Assert.assertNull(TypeUtils.getArrayComponentType(types[3])); ref {types, Assert, TypeUtils} [658-658],
 Assert.assertNull(TypeUtils.getArrayComponentType(types[4])); ref {types, Assert, TypeUtils} [659-659],
 Assert.assertNull(TypeUtils.getArrayComponentType(types[5])); ref {types, Assert, TypeUtils} [660-660],
 Assert.assertNull(TypeUtils.getArrayComponentType(types[6])); ref {types, Assert, TypeUtils} [661-661],
 Assert.assertEquals(types[0], TypeUtils.getArrayComponentType(types[7])); ref {types, Assert, TypeUtils} [662-662],
 Assert.assertEquals(types[1], TypeUtils.getArrayComponentType(types[8])); ref {types, Assert, TypeUtils} [663-663],
 Assert.assertEquals(types[2], TypeUtils.getArrayComponentType(types[9])); ref {types, Assert, TypeUtils} [664-664],
 Assert.assertEquals(types[3], TypeUtils.getArrayComponentType(types[10])); ref {types, Assert, TypeUtils} [665-665],
 Assert.assertEquals(types[4], TypeUtils.getArrayComponentType(types[11])); ref {types, Assert, TypeUtils} [666-666],
 Assert.assertEquals(types[5], TypeUtils.getArrayComponentType(types[12])); ref {types, Assert, TypeUtils} [667-667],
 Assert.assertEquals(types[6], TypeUtils.getArrayComponentType(types[13])); ref {types, Assert, TypeUtils} [668-668]
[m[m31.08.2022 - 15:15:22.684 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testLang820 has 1 assertions: 
 Assert.assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray)); ref {expectedArray, typeArray, Assert, TypeUtils} [675-675]
[m[m31.08.2022 - 15:15:22.684 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testParameterize has 2 assertions: 
 Assert.assertTrue(TypeUtils.equals(getClass().getField("stringComparable").getGenericType(), stringComparableType)); ref {Assert, stringComparableType, TypeUtils} [681-682],
 Assert.assertEquals("java.lang.Comparable<java.lang.String>", stringComparableType.toString()); ref {Assert, stringComparableType} [683-683]
[m[m31.08.2022 - 15:15:22.685 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testParameterizeWithOwner has 1 assertions: 
 Assert.assertTrue(TypeUtils.equals(getClass().getField("dat2").getGenericType(), dat2Type)); ref {Assert, dat2Type, TypeUtils} [690-690]
[m[m31.08.2022 - 15:15:22.685 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testWildcardType has 3 assertions: 
 Assert.assertTrue(TypeUtils.equals(((ParameterizedType) cClass.getGenericType()).getActualTypeArguments()[0], simpleWildcard)); ref {Assert, cClass, simpleWildcard, TypeUtils} [697-698],
 Assert.assertEquals(String.format("? extends %s", String.class.getName()), TypeUtils.toString(simpleWildcard)); ref {Assert, simpleWildcard, String, TypeUtils} [699-699],
 Assert.assertEquals(String.format("? extends %s", String.class.getName()), simpleWildcard.toString()); ref {Assert, simpleWildcard, String} [700-700]
[m[m31.08.2022 - 15:15:22.685 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testUnboundedWildcardType has 5 assertions: 
 Assert.assertTrue(TypeUtils.equals(TypeUtils.WILDCARD_ALL, unbounded)); ref {Assert, TypeUtils.WILDCARD_ALL, unbounded, TypeUtils} [706-706],
 Assert.assertArrayEquals(new Type[] { Object.class }, TypeUtils.getImplicitUpperBounds(unbounded)); ref {Assert, unbounded, TypeUtils} [707-707],
 Assert.assertArrayEquals(new Type[] { null }, TypeUtils.getImplicitLowerBounds(unbounded)); ref {Assert, unbounded, TypeUtils} [708-708],
 Assert.assertEquals("?", TypeUtils.toString(unbounded)); ref {Assert, unbounded, TypeUtils} [709-709],
 Assert.assertEquals("?", unbounded.toString()); ref {Assert, unbounded} [710-710]
[m[m31.08.2022 - 15:15:22.685 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testLowerBoundedWildcardType has 4 assertions: 
 Assert.assertEquals(String.format("? super %s", java.sql.Date.class.getName()), TypeUtils.toString(lowerBounded)); ref {lowerBounded, Assert, String, TypeUtils} [716-716],
 Assert.assertEquals(String.format("? super %s", java.sql.Date.class.getName()), lowerBounded.toString()); ref {lowerBounded, Assert, String} [717-717],
 Assert.assertEquals(String.format("? super %s", iterableT0.getName()), TypeUtils.toString(lowerTypeVariable)); ref {iterableT0, Assert, lowerTypeVariable, String, TypeUtils} [721-721],
 Assert.assertEquals(String.format("? super %s", iterableT0.getName()), lowerTypeVariable.toString()); ref {iterableT0, Assert, lowerTypeVariable, String} [722-722]
[m[m31.08.2022 - 15:15:22.685 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testGenericArrayType has 2 assertions: 
 Assert.assertTrue(TypeUtils.equals(expected, actual)); ref {actual, Assert, expected, TypeUtils} [731-731],
 Assert.assertEquals("java.lang.Comparable<? extends java.lang.Integer>[]", actual.toString()); ref {actual, Assert} [732-732]
[m[m31.08.2022 - 15:15:22.685 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testToLongString has 1 assertions: 
 Assert.assertEquals(getClass().getName() + ":B", TypeUtils.toLongString(getClass().getTypeParameters()[0])); ref {Assert, TypeUtils} [737-737]
[m[m31.08.2022 - 15:15:22.685 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeUtilsTest::testWrap has 2 assertions: 
 Assert.assertTrue(TypeUtils.equals(t, TypeUtils.wrap(t).getType())); ref {Assert, t, TypeUtils} [743-743],
 Assert.assertEquals(String.class, TypeUtils.wrap(String.class).getType()); ref {Assert, TypeUtils} [745-745]
[m[m31.08.2022 - 15:15:22.702 [INFO ] ParsingStrategy.parseTestSuite() - Found 36 test cases
[m[m31.08.2022 - 15:15:22.703 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new ObjectUtils()); ref {} [56-56],
 assertEquals(1, cons.length); ref {cons.length, cons} [58-58],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [59-59],
 assertTrue(Modifier.isPublic(ObjectUtils.class.getModifiers())); ref {Modifier} [60-60],
 assertFalse(Modifier.isFinal(ObjectUtils.class.getModifiers())); ref {Modifier} [61-61]
[m[m31.08.2022 - 15:15:22.703 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testIsNull has 2 assertions: 
 assertSame("dflt was not returned when o was null", dflt, ObjectUtils.defaultIfNull(null, dflt)); ref {dflt, ObjectUtils} [69-69],
 assertSame("dflt was returned when o was not null", o, ObjectUtils.defaultIfNull(o, dflt)); ref {dflt, ObjectUtils, o} [70-70]
[m[m31.08.2022 - 15:15:22.703 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testFirstNonNull has 8 assertions: 
 assertEquals("", ObjectUtils.firstNonNull(null, "")); ref {ObjectUtils} [75-75],
 assertEquals("123", firstNonNullGenerics); ref {firstNonNullGenerics} [77-77],
 assertEquals("123", ObjectUtils.firstNonNull("123", null, "456", null)); ref {ObjectUtils} [78-78],
 assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE)); ref {Boolean.TRUE, Boolean, ObjectUtils} [79-79],
 // Explicitly pass in an empty array of Object type to ensure compiler doesn't complain of unchecked generic array creation
assertNull(ObjectUtils.firstNonNull(new Object[0])); ref {ObjectUtils} [82-82],
 // Cast to Object in line below ensures compiler doesn't complain of unchecked generic array creation
assertNull(ObjectUtils.firstNonNull((Object) null, (Object) null)); ref {ObjectUtils} [85-85],
 // assertSame("123", ObjectUtils.firstNonNull(null, ObjectUtils.NULL, "123", "456"));
// assertSame("456", ObjectUtils.firstNonNull(ObjectUtils.NULL, "456", "123", null));
// assertNull(ObjectUtils.firstNonNull(null, null, ObjectUtils.NULL));
assertNull(ObjectUtils.firstNonNull((Object) null)); ref {ObjectUtils} [90-90],
 assertNull(ObjectUtils.firstNonNull((Object[]) null)); ref {ObjectUtils} [91-91]
[m[m31.08.2022 - 15:15:22.703 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testEquals has 5 assertions: 
 assertTrue("ObjectUtils.equals(null, null) returned false", ObjectUtils.equals(null, null)); ref {ObjectUtils} [97-97],
 assertTrue("ObjectUtils.equals(\"foo\", null) returned true", !ObjectUtils.equals(FOO, null)); ref {FOO, ObjectUtils} [98-98],
 assertTrue("ObjectUtils.equals(null, \"bar\") returned true", !ObjectUtils.equals(null, BAR)); ref {BAR, ObjectUtils} [99-99],
 assertTrue("ObjectUtils.equals(\"foo\", \"bar\") returned true", !ObjectUtils.equals(FOO, BAR)); ref {BAR, FOO, ObjectUtils} [100-100],
 assertTrue("ObjectUtils.equals(\"foo\", \"foo\") returned false", ObjectUtils.equals(FOO, FOO)); ref {FOO, ObjectUtils} [101-101]
[m[m31.08.2022 - 15:15:22.703 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testNotEqual has 5 assertions: 
 assertFalse("ObjectUtils.notEqual(null, null) returned false", ObjectUtils.notEqual(null, null)); ref {ObjectUtils} [106-106],
 assertTrue("ObjectUtils.notEqual(\"foo\", null) returned true", ObjectUtils.notEqual(FOO, null)); ref {FOO, ObjectUtils} [107-107],
 assertTrue("ObjectUtils.notEqual(null, \"bar\") returned true", ObjectUtils.notEqual(null, BAR)); ref {BAR, ObjectUtils} [108-108],
 assertTrue("ObjectUtils.notEqual(\"foo\", \"bar\") returned true", ObjectUtils.notEqual(FOO, BAR)); ref {BAR, FOO, ObjectUtils} [109-109],
 assertFalse("ObjectUtils.notEqual(\"foo\", \"foo\") returned false", ObjectUtils.notEqual(FOO, FOO)); ref {FOO, ObjectUtils} [110-110]
[m[m31.08.2022 - 15:15:22.703 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testHashCode has 2 assertions: 
 assertEquals(0, ObjectUtils.hashCode(null)); ref {ObjectUtils} [115-115],
 assertEquals("a".hashCode(), ObjectUtils.hashCode("a")); ref {ObjectUtils} [116-116]
[m[m31.08.2022 - 15:15:22.703 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testHashCodeMulti_multiple_emptyArray has 1 assertions: 
 assertEquals(1, ObjectUtils.hashCodeMulti(array)); ref {array, ObjectUtils} [122-122]
[m[m31.08.2022 - 15:15:22.704 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testHashCodeMulti_multiple_nullArray has 1 assertions: 
 assertEquals(1, ObjectUtils.hashCodeMulti(array)); ref {array, ObjectUtils} [128-128]
[m[m31.08.2022 - 15:15:22.704 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testHashCodeMulti_multiple_likeList has 4 assertions: 
 assertEquals(list0.hashCode(), ObjectUtils.hashCodeMulti()); ref {list0, ObjectUtils} [134-134],
 assertEquals(list1.hashCode(), ObjectUtils.hashCodeMulti("a")); ref {list1, ObjectUtils} [137-137],
 assertEquals(list2.hashCode(), ObjectUtils.hashCodeMulti("a", "b")); ref {list2, ObjectUtils} [140-140],
 assertEquals(list3.hashCode(), ObjectUtils.hashCodeMulti("a", "b", "c")); ref {list3, ObjectUtils} [143-143]
[m[m31.08.2022 - 15:15:22.704 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testIdentityToStringStringBuffer has 1 assertions: 
 assertEquals(expected, buffer.toString()); ref {expected, buffer} [194-194]
[m[m31.08.2022 - 15:15:22.704 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testIdentityToStringStringBuilder has 4 assertions: 
 assertEquals(null, ObjectUtils.identityToString(null)); ref {ObjectUtils} [210-210],
 assertEquals("java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)), ObjectUtils.identityToString(FOO)); ref {Integer, FOO, System, ObjectUtils} [211-213],
 assertEquals(expected, ObjectUtils.identityToString(i)); ref {expected, i, ObjectUtils} [217-217],
 assertEquals(expected, builder.toString()); ref {expected, builder} [221-221]
[m[m31.08.2022 - 15:15:22.704 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testIdentityToStringStrBuilder has 1 assertions: 
 assertEquals(expected, builder.toString()); ref {expected, builder} [243-243]
[m[m31.08.2022 - 15:15:22.704 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testIdentityToStringAppendable has 1 assertions: 
 assertEquals(expected, appendable.toString()); ref {appendable, expected} [266-266]
[m[m31.08.2022 - 15:15:22.704 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testToString_Object has 2 assertions: 
 assertEquals("", ObjectUtils.toString((Object) null)); ref {ObjectUtils} [288-288],
 assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE)); ref {Boolean.TRUE, Boolean, ObjectUtils} [289-289]
[m[m31.08.2022 - 15:15:22.704 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testToString_ObjectString has 2 assertions: 
 assertEquals(BAR, ObjectUtils.toString((Object) null, BAR)); ref {BAR, ObjectUtils} [294-294],
 assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR)); ref {Boolean.TRUE, BAR, Boolean, ObjectUtils} [295-295]
[m[m31.08.2022 - 15:15:22.705 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testNull has 3 assertions: 
 assertNotNull(ObjectUtils.NULL); ref {ObjectUtils.NULL, ObjectUtils} [301-301],
 // 1 Check that NULL really is a Null i.e. the definition has not been changed
assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null); ref {ObjectUtils.NULL, ObjectUtils} [303-303],
 assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL)); ref {ObjectUtils.NULL, SerializationUtils, ObjectUtils} [304-304]
[m[m31.08.2022 - 15:15:22.705 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testMax has 12 assertions: 
 assertNotSame(nonNullComparable1, nonNullComparable2); ref {nonNullComparable2, nonNullComparable1} [317-317],
 assertNull(ObjectUtils.max((String) null)); ref {ObjectUtils} [319-319],
 assertNull(ObjectUtils.max(nullAray)); ref {nullAray, ObjectUtils} [320-320],
 assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1)); ref {nonNullComparable1, ObjectUtils} [321-321],
 assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, null)); ref {nonNullComparable1, ObjectUtils} [322-322],
 assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1, null)); ref {nonNullComparable1, ObjectUtils} [323-323],
 assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, nonNullComparable2)); ref {nonNullComparable2, nonNullComparable1, ObjectUtils} [324-324],
 assertSame(nonNullComparable2, ObjectUtils.max(nonNullComparable2, nonNullComparable1)); ref {nonNullComparable2, nonNullComparable1, ObjectUtils} [325-325],
 assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, minComparable)); ref {nonNullComparable1, minComparable, ObjectUtils} [326-326],
 assertSame(nonNullComparable1, ObjectUtils.max(minComparable, nonNullComparable1)); ref {nonNullComparable1, minComparable, ObjectUtils} [327-327],
 assertSame(nonNullComparable1, ObjectUtils.max(null, minComparable, null, nonNullComparable1)); ref {nonNullComparable1, minComparable, ObjectUtils} [328-328],
 assertNull(ObjectUtils.max((String) null, (String) null)); ref {ObjectUtils} [330-330]
[m[m31.08.2022 - 15:15:22.705 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testMin has 12 assertions: 
 assertNotSame(nonNullComparable1, nonNullComparable2); ref {nonNullComparable2, nonNullComparable1} [343-343],
 assertNull(ObjectUtils.min((String) null)); ref {ObjectUtils} [345-345],
 assertNull(ObjectUtils.min(nullAray)); ref {nullAray, ObjectUtils} [346-346],
 assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); ref {nonNullComparable1, ObjectUtils} [347-347],
 assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); ref {nonNullComparable1, ObjectUtils} [348-348],
 assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); ref {nonNullComparable1, ObjectUtils} [349-349],
 assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); ref {nonNullComparable2, nonNullComparable1, ObjectUtils} [350-350],
 assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); ref {nonNullComparable2, nonNullComparable1, ObjectUtils} [351-351],
 assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); ref {nonNullComparable1, minComparable, ObjectUtils} [352-352],
 assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); ref {nonNullComparable1, minComparable, ObjectUtils} [353-353],
 assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); ref {nonNullComparable1, minComparable, ObjectUtils} [354-354],
 assertNull(ObjectUtils.min((String) null, (String) null)); ref {ObjectUtils} [356-356]
[m[m31.08.2022 - 15:15:22.705 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testCompare has 8 assertions: 
 assertEquals("Null Null false", 0, ObjectUtils.compare(nullValue, nullValue)); ref {nullValue, ObjectUtils} [368-368],
 assertEquals("Null Null true", 0, ObjectUtils.compare(nullValue, nullValue, true)); ref {nullValue, ObjectUtils} [369-369],
 assertEquals("Null one false", -1, ObjectUtils.compare(nullValue, one)); ref {one, nullValue, ObjectUtils} [371-371],
 assertEquals("Null one true", 1, ObjectUtils.compare(nullValue, one, true)); ref {one, nullValue, ObjectUtils} [372-372],
 assertEquals("one Null false", 1, ObjectUtils.compare(one, nullValue)); ref {one, nullValue, ObjectUtils} [374-374],
 assertEquals("one Null true", -1, ObjectUtils.compare(one, nullValue, true)); ref {one, nullValue, ObjectUtils} [375-375],
 assertEquals("one two false", -1, ObjectUtils.compare(one, two)); ref {one, two, ObjectUtils} [377-377],
 assertEquals("one two true", -1, ObjectUtils.compare(one, two, true)); ref {one, two, ObjectUtils} [378-378]
[m[m31.08.2022 - 15:15:22.705 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testMedian has 8 assertions: 
 assertEquals("foo", ObjectUtils.median("foo")); ref {ObjectUtils} [383-383],
 assertEquals("bar", ObjectUtils.median("foo", "bar")); ref {ObjectUtils} [384-384],
 assertEquals("baz", ObjectUtils.median("foo", "bar", "baz")); ref {ObjectUtils} [385-385],
 assertEquals("baz", ObjectUtils.median("foo", "bar", "baz", "blah")); ref {ObjectUtils} [386-386],
 assertEquals("blah", ObjectUtils.median("foo", "bar", "baz", "blah", "wah")); ref {ObjectUtils} [387-387],
 assertEquals(Integer.valueOf(5), ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10))); ref {Integer, ObjectUtils} [388-389],
 assertEquals(Integer.valueOf(7), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8), Integer.valueOf(9))); ref {Integer, ObjectUtils} [390-393],
 assertEquals(Integer.valueOf(6), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8))); ref {Integer, ObjectUtils} [394-395]
[m[m31.08.2022 - 15:15:22.705 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testMedian_nullItems has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.706 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testMedian_emptyItems has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.706 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testComparatorMedian has 5 assertions: 
 assertSame(foo, ObjectUtils.median(cmp, foo)); ref {foo, cmp, ObjectUtils} [416-416],
 assertSame(bar, ObjectUtils.median(cmp, foo, bar)); ref {bar, cmp, foo, ObjectUtils} [417-417],
 assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz)); ref {bar, cmp, foo, baz, ObjectUtils} [418-418],
 assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz, blah)); ref {bar, cmp, foo, baz, ObjectUtils, blah} [419-419],
 assertSame(blah, ObjectUtils.median(cmp, foo, bar, baz, blah, wah)); ref {bar, cmp, foo, baz, ObjectUtils, blah, wah} [420-420]
[m[m31.08.2022 - 15:15:22.706 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testComparatorMedian_nullComparator has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.706 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testComparatorMedian_nullItems has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.706 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testComparatorMedian_emptyItems has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.706 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testMode has 6 assertions: 
 assertNull(ObjectUtils.mode((Object[]) null)); ref {ObjectUtils} [441-441],
 assertNull(ObjectUtils.mode()); ref {ObjectUtils} [442-442],
 assertNull(ObjectUtils.mode("foo", "bar", "baz")); ref {ObjectUtils} [443-443],
 assertNull(ObjectUtils.mode("foo", "bar", "baz", "foo", "bar")); ref {ObjectUtils} [444-444],
 assertEquals("foo", ObjectUtils.mode("foo", "bar", "baz", "foo")); ref {ObjectUtils} [445-445],
 assertEquals(Integer.valueOf(9), ObjectUtils.mode("foo", "bar", "baz", Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(9))); ref {Integer, ObjectUtils} [446-447]
[m[m31.08.2022 - 15:15:22.706 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testCloneOfCloneable has 1 assertions: 
 assertEquals("apache", stringClone.getValue()); ref {stringClone} [457-457]
[m[m31.08.2022 - 15:15:22.706 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testCloneOfNotCloneable has 1 assertions: 
 assertNull(ObjectUtils.clone(string)); ref {string, ObjectUtils} [466-466]
[m[m31.08.2022 - 15:15:22.706 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testCloneOfUncloneable has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.707 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testCloneOfStringArray has 1 assertions: 
 assertTrue(Arrays.deepEquals(new String[] { "string" }, ObjectUtils.clone(new String[] { "string" }))); ref {Arrays, ObjectUtils} [490-491]
[m[m31.08.2022 - 15:15:22.707 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testCloneOfPrimitiveArray has 1 assertions: 
 assertTrue(Arrays.equals(new int[] { 1 }, ObjectUtils.clone(new int[] { 1 }))); ref {Arrays, ObjectUtils} [499-499]
[m[m31.08.2022 - 15:15:22.707 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testPossibleCloneOfCloneable has 1 assertions: 
 assertEquals("apache", stringClone.getValue()); ref {stringClone} [509-509]
[m[m31.08.2022 - 15:15:22.707 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testPossibleCloneOfNotCloneable has 1 assertions: 
 assertSame(string, ObjectUtils.cloneIfPossible(string)); ref {string, ObjectUtils} [518-518]
[m[m31.08.2022 - 15:15:22.707 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testPossibleCloneOfUncloneable has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.707 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ObjectUtilsTest::testConstMethods has 21 assertions: 
 // To truly test the CONST() method, we'd want to look in the
// bytecode to see if the literals were folded into the
// class, or if the bytecode kept the method call.
assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); ref {ObjectUtils} [544-544],
 assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); ref {ObjectUtils} [545-545],
 assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); ref {ObjectUtils} [546-546],
 assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); ref {ObjectUtils} [547-547],
 assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); ref {ObjectUtils} [548-548],
 assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); ref {ObjectUtils} [549-549],
 assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); ref {ObjectUtils} [550-550],
 assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); ref {ObjectUtils} [551-551],
 assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); ref {ObjectUtils} [552-552],
 assertTrue(MAGIC_FLAG); ref {MAGIC_FLAG} [574-574],
 assertEquals(127, MAGIC_BYTE1); ref {MAGIC_BYTE1} [575-575],
 assertEquals(127, MAGIC_BYTE2); ref {MAGIC_BYTE2} [576-576],
 assertEquals('a', MAGIC_CHAR); ref {MAGIC_CHAR} [577-577],
 assertEquals(123, MAGIC_SHORT1); ref {MAGIC_SHORT1} [578-578],
 assertEquals(127, MAGIC_SHORT2); ref {MAGIC_SHORT2} [579-579],
 assertEquals(123, MAGIC_INT); ref {MAGIC_INT} [580-580],
 assertEquals(123, MAGIC_LONG1); ref {MAGIC_LONG1} [581-581],
 assertEquals(3, MAGIC_LONG2); ref {MAGIC_LONG2} [582-582],
 assertEquals(1.0f, MAGIC_FLOAT, 0.0f); ref {MAGIC_FLOAT} [583-583],
 assertEquals(1.0, MAGIC_DOUBLE, 0.0); ref {MAGIC_DOUBLE} [584-584],
 assertEquals("abc", MAGIC_STRING); ref {MAGIC_STRING} [585-585]
[m[m31.08.2022 - 15:15:22.754 [INFO ] ParsingStrategy.parseTestSuite() - Found 90 test cases
[m[m31.08.2022 - 15:15:22.755 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testConstructors has 24 assertions: 
 assertEquals(32, sb0.capacity()); ref {sb0} [44-44],
 assertEquals(0, sb0.length()); ref {sb0} [45-45],
 assertEquals(0, sb0.size()); ref {sb0} [46-46],
 assertEquals(32, sb1.capacity()); ref {sb1} [49-49],
 assertEquals(0, sb1.length()); ref {sb1} [50-50],
 assertEquals(0, sb1.size()); ref {sb1} [51-51],
 assertEquals(32, sb2.capacity()); ref {sb2} [54-54],
 assertEquals(0, sb2.length()); ref {sb2} [55-55],
 assertEquals(0, sb2.size()); ref {sb2} [56-56],
 assertEquals(32, sb3.capacity()); ref {sb3} [59-59],
 assertEquals(0, sb3.length()); ref {sb3} [60-60],
 assertEquals(0, sb3.size()); ref {sb3} [61-61],
 assertEquals(1, sb4.capacity()); ref {sb4} [64-64],
 assertEquals(0, sb4.length()); ref {sb4} [65-65],
 assertEquals(0, sb4.size()); ref {sb4} [66-66],
 assertEquals(32, sb5.capacity()); ref {sb5} [69-69],
 assertEquals(0, sb5.length()); ref {sb5} [70-70],
 assertEquals(0, sb5.size()); ref {sb5} [71-71],
 assertEquals(32, sb6.capacity()); ref {sb6} [74-74],
 assertEquals(0, sb6.length()); ref {sb6} [75-75],
 assertEquals(0, sb6.size()); ref {sb6} [76-76],
 assertEquals(35, sb7.capacity()); ref {sb7} [79-79],
 assertEquals(3, sb7.length()); ref {sb7} [80-80],
 assertEquals(3, sb7.size()); ref {sb7} [81-81]
[m[m31.08.2022 - 15:15:22.755 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testChaining has 9 assertions: 
 assertSame(sb, sb.setNewLineText(null)); ref {sb} [88-88],
 assertSame(sb, sb.setNullText(null)); ref {sb} [89-89],
 assertSame(sb, sb.setLength(1)); ref {sb} [90-90],
 assertSame(sb, sb.setCharAt(0, 'a')); ref {sb} [91-91],
 assertSame(sb, sb.ensureCapacity(0)); ref {sb} [92-92],
 assertSame(sb, sb.minimizeCapacity()); ref {sb} [93-93],
 assertSame(sb, sb.clear()); ref {sb} [94-94],
 assertSame(sb, sb.reverse()); ref {sb} [95-95],
 assertSame(sb, sb.trim()); ref {sb} [96-96]
[m[m31.08.2022 - 15:15:22.755 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReadFromReader has 2 assertions: 
 assertEquals(s.length(), len); ref {s, len} [107-107],
 assertEquals(s, sb.toString()); ref {s, sb} [108-108]
[m[m31.08.2022 - 15:15:22.755 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReadFromReaderAppendsToEnd has 1 assertions: 
 assertEquals("Test 123", sb.toString()); ref {sb} [118-118]
[m[m31.08.2022 - 15:15:22.755 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReadFromCharBuffer has 2 assertions: 
 assertEquals(s.length(), len); ref {s, len} [128-128],
 assertEquals(s, sb.toString()); ref {s, sb} [129-129]
[m[m31.08.2022 - 15:15:22.755 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReadFromCharBufferAppendsToEnd has 1 assertions: 
 assertEquals("Test 123", sb.toString()); ref {sb} [139-139]
[m[m31.08.2022 - 15:15:22.755 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReadFromReadable has 2 assertions: 
 assertEquals(s.length(), len); ref {s, len} [149-149],
 assertEquals(s, sb.toString()); ref {s, sb} [150-150]
[m[m31.08.2022 - 15:15:22.756 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReadFromReadableAppendsToEnd has 1 assertions: 
 assertEquals("Test 123", sb.toString()); ref {sb} [160-160]
[m[m31.08.2022 - 15:15:22.756 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testGetSetNewLineText has 4 assertions: 
 assertEquals(null, sb.getNewLineText()); ref {sb} [181-181],
 assertEquals("#", sb.getNewLineText()); ref {sb} [184-184],
 assertEquals("", sb.getNewLineText()); ref {sb} [187-187],
 assertEquals(null, sb.getNewLineText()); ref {sb} [190-190]
[m[m31.08.2022 - 15:15:22.756 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testGetSetNullText has 5 assertions: 
 assertEquals(null, sb.getNullText()); ref {sb} [197-197],
 assertEquals("null", sb.getNullText()); ref {sb} [200-200],
 assertEquals(null, sb.getNullText()); ref {sb} [203-203],
 assertEquals("NULL", sb.getNullText()); ref {sb} [206-206],
 assertEquals(null, sb.getNullText()); ref {sb} [209-209]
[m[m31.08.2022 - 15:15:22.756 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testCapacityAndLength has 50 assertions: 
 assertEquals(32, sb.capacity()); ref {sb} [216-216],
 assertEquals(0, sb.length()); ref {sb} [217-217],
 assertEquals(0, sb.size()); ref {sb} [218-218],
 assertTrue(sb.isEmpty()); ref {sb} [219-219],
 assertEquals(0, sb.capacity()); ref {sb} [222-222],
 assertEquals(0, sb.length()); ref {sb} [223-223],
 assertEquals(0, sb.size()); ref {sb} [224-224],
 assertTrue(sb.isEmpty()); ref {sb} [225-225],
 assertTrue(sb.capacity() >= 32); ref {sb} [228-228],
 assertEquals(0, sb.length()); ref {sb} [229-229],
 assertEquals(0, sb.size()); ref {sb} [230-230],
 assertTrue(sb.isEmpty()); ref {sb} [231-231],
 assertTrue(sb.capacity() >= 32); ref {sb} [234-234],
 assertEquals(3, sb.length()); ref {sb} [235-235],
 assertEquals(3, sb.size()); ref {sb} [236-236],
 assertTrue(sb.isEmpty() == false); ref {sb} [237-237],
 assertTrue(sb.capacity() >= 32); ref {sb} [240-240],
 assertEquals(0, sb.length()); ref {sb} [241-241],
 assertEquals(0, sb.size()); ref {sb} [242-242],
 assertTrue(sb.isEmpty()); ref {sb} [243-243],
 assertTrue(sb.capacity() > 32); ref {sb} [246-246],
 assertEquals(33, sb.length()); ref {sb} [247-247],
 assertEquals(33, sb.size()); ref {sb} [248-248],
 assertTrue(sb.isEmpty() == false); ref {sb} [249-249],
 assertTrue(sb.capacity() > 16); ref {sb} [252-252],
 assertEquals(33, sb.length()); ref {sb} [253-253],
 assertEquals(33, sb.size()); ref {sb} [254-254],
 assertTrue(sb.isEmpty() == false); ref {sb} [255-255],
 assertEquals(33, sb.capacity()); ref {sb} [258-258],
 assertEquals(33, sb.length()); ref {sb} [259-259],
 assertEquals(33, sb.size()); ref {sb} [260-260],
 assertTrue(sb.isEmpty() == false); ref {sb} [261-261],
 assertEquals(33, sb.capacity()); ref {sb} [271-271],
 assertEquals(33, sb.length()); ref {sb} [272-272],
 assertEquals(33, sb.size()); ref {sb} [273-273],
 assertTrue(sb.isEmpty() == false); ref {sb} [274-274],
 assertTrue(sb.capacity() >= 16); ref {sb} [277-277],
 assertEquals(16, sb.length()); ref {sb} [278-278],
 assertEquals(16, sb.size()); ref {sb} [279-279],
 assertEquals("1234567890123456", sb.toString()); ref {sb} [280-280],
 assertTrue(sb.isEmpty() == false); ref {sb} [281-281],
 assertTrue(sb.capacity() >= 32); ref {sb} [284-284],
 assertEquals(32, sb.length()); ref {sb} [285-285],
 assertEquals(32, sb.size()); ref {sb} [286-286],
 assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); ref {sb} [287-287],
 assertTrue(sb.isEmpty() == false); ref {sb} [288-288],
 assertTrue(sb.capacity() >= 32); ref {sb} [291-291],
 assertEquals(0, sb.length()); ref {sb} [292-292],
 assertEquals(0, sb.size()); ref {sb} [293-293],
 assertTrue(sb.isEmpty()); ref {sb} [294-294]
[m[m31.08.2022 - 15:15:22.756 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testLength has 2 assertions: 
 assertEquals(0, sb.length()); ref {sb} [301-301],
 assertEquals(5, sb.length()); ref {sb} [304-304]
[m[m31.08.2022 - 15:15:22.756 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testSetLength has 3 assertions: 
 assertEquals("He", sb.toString()); ref {sb} [312-312],
 assertEquals("He", sb.toString()); ref {sb} [314-314],
 assertEquals("He\0", sb.toString()); ref {sb} [316-316]
[m[m31.08.2022 - 15:15:22.757 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testCapacity has 2 assertions: 
 assertEquals(sb.buffer.length, sb.capacity()); ref {sb.buffer, sb.buffer.length, sb} [330-330],
 assertEquals(sb.buffer.length, sb.capacity()); ref {sb.buffer, sb.buffer.length, sb} [333-333]
[m[m31.08.2022 - 15:15:22.757 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testEnsureCapacity has 3 assertions: 
 assertTrue(sb.capacity() >= 2); ref {sb} [340-340],
 assertTrue(sb.capacity() >= 0); ref {sb} [343-343],
 assertTrue(sb.capacity() >= 40); ref {sb} [347-347]
[m[m31.08.2022 - 15:15:22.757 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testMinimizeCapacity has 2 assertions: 
 assertEquals(0, sb.capacity()); ref {sb} [354-354],
 assertEquals(10, sb.capacity()); ref {sb} [358-358]
[m[m31.08.2022 - 15:15:22.757 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testSize has 2 assertions: 
 assertEquals(0, sb.size()); ref {sb} [365-365],
 assertEquals(5, sb.size()); ref {sb} [368-368]
[m[m31.08.2022 - 15:15:22.757 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testIsEmpty has 3 assertions: 
 assertTrue(sb.isEmpty()); ref {sb} [374-374],
 assertFalse(sb.isEmpty()); ref {sb} [377-377],
 assertTrue(sb.isEmpty()); ref {sb} [380-380]
[m[m31.08.2022 - 15:15:22.757 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testClear has 2 assertions: 
 assertEquals(0, sb.length()); ref {sb} [388-388],
 assertTrue(sb.buffer.length >= 5); ref {sb.buffer, sb.buffer.length, sb} [389-389]
[m[m31.08.2022 - 15:15:22.757 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testCharAt has 3 assertions: 
 assertEquals('f', sb.charAt(0)); ref {sb} [409-409],
 assertEquals('o', sb.charAt(1)); ref {sb} [410-410],
 assertEquals('o', sb.charAt(2)); ref {sb} [411-411]
[m[m31.08.2022 - 15:15:22.757 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testSetCharAt has 1 assertions: 
 assertEquals("bar", sb.toString()); ref {sb} [452-452]
[m[m31.08.2022 - 15:15:22.757 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testDeleteCharAt has 1 assertions: 
 assertEquals("bc", sb.toString()); ref {sb} [460-460]
[m[m31.08.2022 - 15:15:22.758 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testToCharArray has 5 assertions: 
 assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray()); ref {ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY, sb} [472-472],
 assertNotNull("toCharArray() result is null", a); ref {a} [475-475],
 assertEquals("toCharArray() result is too large", 0, a.length); ref {a, a.length} [476-476],
 assertEquals("toCharArray() result incorrect length", 5, a.length); ref {a, a.length} [480-480],
 assertTrue("toCharArray() result does not match", Arrays.equals("junit".toCharArray(), a)); ref {a, Arrays} [481-481]
[m[m31.08.2022 - 15:15:22.758 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testToCharArrayIntInt has 8 assertions: 
 assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0)); ref {ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY, sb} [487-487],
 assertEquals("toCharArray(int,int) result incorrect length", 5, a.length); ref {a, a.length} [491-491],
 assertTrue("toCharArray(int,int) result does not match", Arrays.equals("junit".toCharArray(), a)); ref {a, Arrays} [492-492],
 assertEquals("toCharArray(int,int) result incorrect length", 4, a.length); ref {a, a.length} [495-495],
 assertTrue("toCharArray(int,int) result does not match", Arrays.equals("juni".toCharArray(), a)); ref {a, Arrays} [496-496],
 assertEquals("toCharArray(int,int) result incorrect length", 4, a.length); ref {a, a.length} [499-499],
 assertTrue("toCharArray(int,int) result does not match", Arrays.equals("juni".toCharArray(), a)); ref {a, Arrays} [500-500],
 assertNotNull("toCharArray(int,int) result is null", a); ref {a} [503-503]
[m[m31.08.2022 - 15:15:22.758 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testGetChars has 9 assertions: 
 assertSame(input, a); ref {input, a} [524-524],
 assertTrue(Arrays.equals(new char[10], a)); ref {a, Arrays} [525-525],
 assertSame(input, a); ref {input, a} [529-529],
 assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't', 0, 0, 0, 0, 0 }, a)); ref {a, Arrays} [530-530],
 assertNotSame(input, a); ref {input, a} [533-533],
 assertEquals(5, a.length); ref {a, a.length} [534-534],
 assertTrue(Arrays.equals("junit".toCharArray(), a)); ref {a, Arrays} [535-535],
 assertSame(input, a); ref {input, a} [539-539],
 assertNotSame(input, a); ref {input, a} [543-543]
[m[m31.08.2022 - 15:15:22.758 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testGetCharsIntIntCharArrayInt has 2 assertions: 
 assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't' }, a)); ref {a, Arrays} [553-553],
 assertTrue(Arrays.equals(new char[] { 0, 0, 0, 'j', 'u' }, a)); ref {a, Arrays} [557-557]
[m[m31.08.2022 - 15:15:22.758 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testDeleteIntInt has 4 assertions: 
 assertEquals("bc", sb.toString()); ref {sb} [593-593],
 assertEquals("b", sb.toString()); ref {sb} [595-595],
 assertEquals("", sb.toString()); ref {sb} [597-597],
 assertEquals("", sb.toString()); ref {sb} [599-599]
[m[m31.08.2022 - 15:15:22.758 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testDeleteAll_char has 5 assertions: 
 assertEquals("abcbccba", sb.toString()); ref {sb} [622-622],
 assertEquals("bcbccb", sb.toString()); ref {sb} [624-624],
 assertEquals("bbb", sb.toString()); ref {sb} [626-626],
 assertEquals("", sb.toString()); ref {sb} [628-628],
 assertEquals("", sb.toString()); ref {sb} [632-632]
[m[m31.08.2022 - 15:15:22.759 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testDeleteFirst_char has 5 assertions: 
 assertEquals("abcba", sb.toString()); ref {sb} [639-639],
 assertEquals("bcba", sb.toString()); ref {sb} [641-641],
 assertEquals("bba", sb.toString()); ref {sb} [643-643],
 assertEquals("ba", sb.toString()); ref {sb} [645-645],
 assertEquals("", sb.toString()); ref {sb} [649-649]
[m[m31.08.2022 - 15:15:22.759 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testDeleteAll_String has 8 assertions: 
 assertEquals("abcbccba", sb.toString()); ref {sb} [657-657],
 assertEquals("abcbccba", sb.toString()); ref {sb} [659-659],
 assertEquals("abcbccba", sb.toString()); ref {sb} [662-662],
 assertEquals("bcbccb", sb.toString()); ref {sb} [664-664],
 assertEquals("bbb", sb.toString()); ref {sb} [666-666],
 assertEquals("", sb.toString()); ref {sb} [668-668],
 assertEquals("acba", sb.toString()); ref {sb} [672-672],
 assertEquals("", sb.toString()); ref {sb} [676-676]
[m[m31.08.2022 - 15:15:22.759 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testDeleteFirst_String has 8 assertions: 
 assertEquals("abcbccba", sb.toString()); ref {sb} [683-683],
 assertEquals("abcbccba", sb.toString()); ref {sb} [685-685],
 assertEquals("abcbccba", sb.toString()); ref {sb} [688-688],
 assertEquals("bcbccba", sb.toString()); ref {sb} [690-690],
 assertEquals("bbccba", sb.toString()); ref {sb} [692-692],
 assertEquals("bccba", sb.toString()); ref {sb} [694-694],
 assertEquals("abccba", sb.toString()); ref {sb} [698-698],
 assertEquals("", sb.toString()); ref {sb} [702-702]
[m[m31.08.2022 - 15:15:22.759 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testDeleteAll_StrMatcher has 4 assertions: 
 assertEquals("A0xA1A2yA3", sb.toString()); ref {sb} [710-710],
 assertEquals("xy", sb.toString()); ref {sb} [712-712],
 assertEquals("Ax1", sb.toString()); ref {sb} [716-716],
 assertEquals("", sb.toString()); ref {sb} [720-720]
[m[m31.08.2022 - 15:15:22.759 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testDeleteFirst_StrMatcher has 4 assertions: 
 assertEquals("A0xA1A2yA3", sb.toString()); ref {sb} [727-727],
 assertEquals("xA1A2yA3", sb.toString()); ref {sb} [729-729],
 assertEquals("Ax1", sb.toString()); ref {sb} [733-733],
 assertEquals("", sb.toString()); ref {sb} [737-737]
[m[m31.08.2022 - 15:15:22.759 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReplace_int_int_String has 7 assertions: 
 assertEquals("dbc", sb.toString()); ref {sb} [745-745],
 assertEquals("aaabc", sb.toString()); ref {sb} [747-747],
 assertEquals("bc", sb.toString()); ref {sb} [749-749],
 assertEquals("b", sb.toString()); ref {sb} [751-751],
 assertEquals("btext", sb.toString()); ref {sb} [753-753],
 assertEquals("text", sb.toString()); ref {sb} [755-755],
 assertEquals("anytext", sb.toString()); ref {sb} [759-759]
[m[m31.08.2022 - 15:15:22.759 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReplaceAll_char_char has 5 assertions: 
 assertEquals("abcbccba", sb.toString()); ref {sb} [781-781],
 assertEquals("dbcbccbd", sb.toString()); ref {sb} [783-783],
 assertEquals("dececced", sb.toString()); ref {sb} [785-785],
 assertEquals("defeffed", sb.toString()); ref {sb} [787-787],
 assertEquals("defeffed", sb.toString()); ref {sb} [789-789]
[m[m31.08.2022 - 15:15:22.759 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReplaceFirst_char_char has 5 assertions: 
 assertEquals("abcbccba", sb.toString()); ref {sb} [797-797],
 assertEquals("dbcbccba", sb.toString()); ref {sb} [799-799],
 assertEquals("decbccba", sb.toString()); ref {sb} [801-801],
 assertEquals("defbccba", sb.toString()); ref {sb} [803-803],
 assertEquals("defbccba", sb.toString()); ref {sb} [805-805]
[m[m31.08.2022 - 15:15:22.760 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReplaceAll_String_String has 10 assertions: 
 assertEquals("abcbccba", sb.toString()); ref {sb} [813-813],
 assertEquals("abcbccba", sb.toString()); ref {sb} [815-815],
 assertEquals("abcbccba", sb.toString()); ref {sb} [817-817],
 assertEquals("abcbccba", sb.toString()); ref {sb} [819-819],
 assertEquals("abcbccba", sb.toString()); ref {sb} [822-822],
 assertEquals("dbcbccbd", sb.toString()); ref {sb} [824-824],
 assertEquals("bcbccb", sb.toString()); ref {sb} [826-826],
 assertEquals("b-c-", sb.toString()); ref {sb} [828-828],
 assertEquals("axbxcxbxa", sb.toString()); ref {sb} [832-832],
 assertEquals("xbxxbx", sb.toString()); ref {sb} [836-836]
[m[m31.08.2022 - 15:15:22.760 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReplaceFirst_String_String has 10 assertions: 
 assertEquals("abcbccba", sb.toString()); ref {sb} [843-843],
 assertEquals("abcbccba", sb.toString()); ref {sb} [845-845],
 assertEquals("abcbccba", sb.toString()); ref {sb} [847-847],
 assertEquals("abcbccba", sb.toString()); ref {sb} [849-849],
 assertEquals("abcbccba", sb.toString()); ref {sb} [852-852],
 assertEquals("dbcbccba", sb.toString()); ref {sb} [854-854],
 assertEquals("bcbccba", sb.toString()); ref {sb} [856-856],
 assertEquals("b-ccba", sb.toString()); ref {sb} [858-858],
 assertEquals("axbxcba", sb.toString()); ref {sb} [862-862],
 assertEquals("xbxb", sb.toString()); ref {sb} [866-866]
[m[m31.08.2022 - 15:15:22.760 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReplaceAll_StrMatcher_String has 11 assertions: 
 assertEquals("abcbccba", sb.toString()); ref {sb} [874-874],
 assertEquals("abcbccba", sb.toString()); ref {sb} [876-876],
 assertEquals("abcbccba", sb.toString()); ref {sb} [878-878],
 assertEquals("abcbccba", sb.toString()); ref {sb} [880-880],
 assertEquals("abcbccba", sb.toString()); ref {sb} [883-883],
 assertEquals("dbcbccbd", sb.toString()); ref {sb} [885-885],
 assertEquals("bcbccb", sb.toString()); ref {sb} [887-887],
 assertEquals("b-c-", sb.toString()); ref {sb} [889-889],
 assertEquals("axbxcxbxa", sb.toString()); ref {sb} [893-893],
 assertEquals("xbxxbx", sb.toString()); ref {sb} [897-897],
 assertEquals("***-******-***", sb.toString()); ref {sb} [901-901]
[m[m31.08.2022 - 15:15:22.760 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReplaceFirst_StrMatcher_String has 11 assertions: 
 assertEquals("abcbccba", sb.toString()); ref {sb} [908-908],
 assertEquals("abcbccba", sb.toString()); ref {sb} [910-910],
 assertEquals("abcbccba", sb.toString()); ref {sb} [912-912],
 assertEquals("abcbccba", sb.toString()); ref {sb} [914-914],
 assertEquals("abcbccba", sb.toString()); ref {sb} [917-917],
 assertEquals("dbcbccba", sb.toString()); ref {sb} [919-919],
 assertEquals("bcbccba", sb.toString()); ref {sb} [921-921],
 assertEquals("b-ccba", sb.toString()); ref {sb} [923-923],
 assertEquals("axbxcba", sb.toString()); ref {sb} [927-927],
 assertEquals("xbxb", sb.toString()); ref {sb} [931-931],
 assertEquals("***-A2A3-A4", sb.toString()); ref {sb} [935-935]
[m[m31.08.2022 - 15:15:22.760 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReplace_StrMatcher_String_int_int_int_VaryMatcher has 5 assertions: 
 assertEquals("abcbccba", sb.toString()); ref {sb} [943-943],
 assertEquals("xbcbccbx", sb.toString()); ref {sb} [946-946],
 assertEquals("xbxcxx", sb.toString()); ref {sb} [949-949],
 assertEquals("***-******-***", sb.toString()); ref {sb} [953-953],
 assertEquals("", sb.toString()); ref {sb} [957-957]
[m[m31.08.2022 - 15:15:22.760 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReplace_StrMatcher_String_int_int_int_VaryReplace has 5 assertions: 
 assertEquals("abcbccba", sb.toString()); ref {sb} [964-964],
 assertEquals("ab-c-a", sb.toString()); ref {sb} [968-968],
 assertEquals("ab+++c+++a", sb.toString()); ref {sb} [972-972],
 assertEquals("abca", sb.toString()); ref {sb} [976-976],
 assertEquals("abca", sb.toString()); ref {sb} [980-980]
[m[m31.08.2022 - 15:15:22.761 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReplace_StrMatcher_String_int_int_int_VaryStartIndex has 13 assertions: 
 assertEquals("-x--y-", sb.toString()); ref {sb} [987-987],
 assertEquals("aax--y-", sb.toString()); ref {sb} [991-991],
 assertEquals("aax--y-", sb.toString()); ref {sb} [995-995],
 assertEquals("aax--y-", sb.toString()); ref {sb} [999-999],
 assertEquals("aaxa-ay-", sb.toString()); ref {sb} [1003-1003],
 assertEquals("aaxaa-y-", sb.toString()); ref {sb} [1007-1007],
 assertEquals("aaxaaaay-", sb.toString()); ref {sb} [1011-1011],
 assertEquals("aaxaaaay-", sb.toString()); ref {sb} [1015-1015],
 assertEquals("aaxaaaay-", sb.toString()); ref {sb} [1019-1019],
 assertEquals("aaxaaaayaa", sb.toString()); ref {sb} [1023-1023],
 assertEquals("aaxaaaayaa", sb.toString()); ref {sb} [1027-1027],
 assertEquals("aaxaaaayaa", sb.toString()); ref {sb} [1034-1034],
 assertEquals("aaxaaaayaa", sb.toString()); ref {sb} [1041-1041]
[m[m31.08.2022 - 15:15:22.761 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReplace_StrMatcher_String_int_int_int_VaryEndIndex has 12 assertions: 
 assertEquals("aaxaaaayaa", sb.toString()); ref {sb} [1048-1048],
 assertEquals("-xaaaayaa", sb.toString()); ref {sb} [1052-1052],
 assertEquals("-xaaaayaa", sb.toString()); ref {sb} [1056-1056],
 assertEquals("-xaaaayaa", sb.toString()); ref {sb} [1060-1060],
 assertEquals("-x-aayaa", sb.toString()); ref {sb} [1064-1064],
 assertEquals("-x-aayaa", sb.toString()); ref {sb} [1068-1068],
 assertEquals("-x--yaa", sb.toString()); ref {sb} [1072-1072],
 assertEquals("-x--yaa", sb.toString()); ref {sb} [1076-1076],
 assertEquals("-x--yaa", sb.toString()); ref {sb} [1080-1080],
 assertEquals("-x--y-", sb.toString()); ref {sb} [1084-1084],
 assertEquals("-x--y-", sb.toString()); ref {sb} [1088-1088],
 assertEquals("aaxaaaayaa", sb.toString()); ref {sb} [1095-1095]
[m[m31.08.2022 - 15:15:22.761 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReplace_StrMatcher_String_int_int_int_VaryCount has 7 assertions: 
 assertEquals("-x--y-", sb.toString()); ref {sb} [1102-1102],
 assertEquals("aaxaaaayaa", sb.toString()); ref {sb} [1106-1106],
 assertEquals("-xaaaayaa", sb.toString()); ref {sb} [1110-1110],
 assertEquals("-x-aayaa", sb.toString()); ref {sb} [1114-1114],
 assertEquals("-x--yaa", sb.toString()); ref {sb} [1118-1118],
 assertEquals("-x--y-", sb.toString()); ref {sb} [1122-1122],
 assertEquals("-x--y-", sb.toString()); ref {sb} [1126-1126]
[m[m31.08.2022 - 15:15:22.761 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testReverse has 3 assertions: 
 assertEquals("", sb.reverse().toString()); ref {sb} [1133-1133],
 assertEquals("eurt", sb.reverse().toString()); ref {sb} [1136-1136],
 assertEquals("true", sb.reverse().toString()); ref {sb} [1137-1137]
[m[m31.08.2022 - 15:15:22.761 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testTrim has 6 assertions: 
 assertEquals("", sb.reverse().toString()); ref {sb} [1144-1144],
 assertEquals("", sb.trim().toString()); ref {sb} [1147-1147],
 assertEquals("a b c", sb.trim().toString()); ref {sb} [1150-1150],
 assertEquals("a b c", sb.trim().toString()); ref {sb} [1153-1153],
 assertEquals("a b c", sb.trim().toString()); ref {sb} [1156-1156],
 assertEquals("a b c", sb.trim().toString()); ref {sb} [1159-1159]
[m[m31.08.2022 - 15:15:22.761 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testStartsWith has 7 assertions: 
 assertFalse(sb.startsWith("a")); ref {sb} [1166-1166],
 assertFalse(sb.startsWith(null)); ref {sb} [1167-1167],
 assertTrue(sb.startsWith("")); ref {sb} [1168-1168],
 assertTrue(sb.startsWith("a")); ref {sb} [1170-1170],
 assertTrue(sb.startsWith("ab")); ref {sb} [1171-1171],
 assertTrue(sb.startsWith("abc")); ref {sb} [1172-1172],
 assertFalse(sb.startsWith("cba")); ref {sb} [1173-1173]
[m[m31.08.2022 - 15:15:22.761 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testEndsWith has 11 assertions: 
 assertFalse(sb.endsWith("a")); ref {sb} [1179-1179],
 assertFalse(sb.endsWith("c")); ref {sb} [1180-1180],
 assertTrue(sb.endsWith("")); ref {sb} [1181-1181],
 assertFalse(sb.endsWith(null)); ref {sb} [1182-1182],
 assertTrue(sb.endsWith("c")); ref {sb} [1184-1184],
 assertTrue(sb.endsWith("bc")); ref {sb} [1185-1185],
 assertTrue(sb.endsWith("abc")); ref {sb} [1186-1186],
 assertFalse(sb.endsWith("cba")); ref {sb} [1187-1187],
 assertFalse(sb.endsWith("abcd")); ref {sb} [1188-1188],
 assertFalse(sb.endsWith(" abc")); ref {sb} [1189-1189],
 assertFalse(sb.endsWith("abc ")); ref {sb} [1190-1190]
[m[m31.08.2022 - 15:15:22.762 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testSubSequenceIntInt has 4 assertions: 
 // Normal cases
assertEquals("hello", sb.subSequence(0, 5)); ref {sb} [1222-1222],
 assertEquals("hello goodbye".subSequence(0, 6), sb.subSequence(0, 6)); ref {sb} [1223-1223],
 assertEquals("goodbye", sb.subSequence(6, 13)); ref {sb} [1224-1224],
 assertEquals("hello goodbye".subSequence(6, 13), sb.subSequence(6, 13)); ref {sb} [1225-1225]
[m[m31.08.2022 - 15:15:22.762 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testSubstringInt has 4 assertions: 
 assertEquals("goodbye", sb.substring(6)); ref {sb} [1231-1231],
 assertEquals("hello goodbye".substring(6), sb.substring(6)); ref {sb} [1232-1232],
 assertEquals("hello goodbye", sb.substring(0)); ref {sb} [1233-1233],
 assertEquals("hello goodbye".substring(0), sb.substring(0)); ref {sb} [1234-1234]
[m[m31.08.2022 - 15:15:22.762 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testSubstringIntInt has 5 assertions: 
 assertEquals("hello", sb.substring(0, 5)); ref {sb} [1250-1250],
 assertEquals("hello goodbye".substring(0, 6), sb.substring(0, 6)); ref {sb} [1251-1251],
 assertEquals("goodbye", sb.substring(6, 13)); ref {sb} [1253-1253],
 assertEquals("hello goodbye".substring(6, 13), sb.substring(6, 13)); ref {sb} [1254-1254],
 assertEquals("goodbye", sb.substring(6, 20)); ref {sb} [1256-1256]
[m[m31.08.2022 - 15:15:22.762 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testMidString has 6 assertions: 
 assertEquals("goodbye", sb.midString(6, 7)); ref {sb} [1273-1273],
 assertEquals("hello", sb.midString(0, 5)); ref {sb} [1274-1274],
 assertEquals("hello", sb.midString(-5, 5)); ref {sb} [1275-1275],
 assertEquals("", sb.midString(0, -1)); ref {sb} [1276-1276],
 assertEquals("", sb.midString(20, 2)); ref {sb} [1277-1277],
 assertEquals("hello", sb.midString(14, 22)); ref {sb} [1278-1278]
[m[m31.08.2022 - 15:15:22.762 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testRightString has 4 assertions: 
 assertEquals("right", sb.rightString(5)); ref {sb} [1284-1284],
 assertEquals("", sb.rightString(0)); ref {sb} [1285-1285],
 assertEquals("", sb.rightString(-5)); ref {sb} [1286-1286],
 assertEquals("left right", sb.rightString(15)); ref {sb} [1287-1287]
[m[m31.08.2022 - 15:15:22.762 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testLeftString has 4 assertions: 
 assertEquals("left", sb.leftString(4)); ref {sb} [1293-1293],
 assertEquals("", sb.leftString(0)); ref {sb} [1294-1294],
 assertEquals("", sb.leftString(-5)); ref {sb} [1295-1295],
 assertEquals("left right", sb.leftString(15)); ref {sb} [1296-1296]
[m[m31.08.2022 - 15:15:22.762 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testContains_char has 4 assertions: 
 assertTrue(sb.contains('a')); ref {sb} [1303-1303],
 assertTrue(sb.contains('o')); ref {sb} [1304-1304],
 assertTrue(sb.contains('z')); ref {sb} [1305-1305],
 assertFalse(sb.contains('1')); ref {sb} [1306-1306]
[m[m31.08.2022 - 15:15:22.762 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testContains_String has 5 assertions: 
 assertTrue(sb.contains("a")); ref {sb} [1312-1312],
 assertTrue(sb.contains("pq")); ref {sb} [1313-1313],
 assertTrue(sb.contains("z")); ref {sb} [1314-1314],
 assertFalse(sb.contains("zyx")); ref {sb} [1315-1315],
 assertFalse(sb.contains((String) null)); ref {sb} [1316-1316]
[m[m31.08.2022 - 15:15:22.763 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testContains_StrMatcher has 7 assertions: 
 assertTrue(sb.contains(StrMatcher.charMatcher('a'))); ref {StrMatcher, sb} [1322-1322],
 assertTrue(sb.contains(StrMatcher.stringMatcher("pq"))); ref {StrMatcher, sb} [1323-1323],
 assertTrue(sb.contains(StrMatcher.charMatcher('z'))); ref {StrMatcher, sb} [1324-1324],
 assertFalse(sb.contains(StrMatcher.stringMatcher("zy"))); ref {StrMatcher, sb} [1325-1325],
 assertFalse(sb.contains((StrMatcher) null)); ref {sb} [1326-1326],
 assertFalse(sb.contains(A_NUMBER_MATCHER)); ref {A_NUMBER_MATCHER, sb} [1329-1329],
 assertTrue(sb.contains(A_NUMBER_MATCHER)); ref {A_NUMBER_MATCHER, sb} [1331-1331]
[m[m31.08.2022 - 15:15:22.763 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testIndexOf_char has 5 assertions: 
 assertEquals(0, sb.indexOf('a')); ref {sb} [1338-1338],
 // should work like String#indexOf
assertEquals("abab".indexOf('a'), sb.indexOf('a')); ref {sb} [1341-1341],
 assertEquals(1, sb.indexOf('b')); ref {sb} [1343-1343],
 assertEquals("abab".indexOf('b'), sb.indexOf('b')); ref {sb} [1344-1344],
 assertEquals(-1, sb.indexOf('z')); ref {sb} [1346-1346]
[m[m31.08.2022 - 15:15:22.763 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testIndexOf_char_int has 11 assertions: 
 assertEquals(0, sb.indexOf('a', -1)); ref {sb} [1352-1352],
 assertEquals(0, sb.indexOf('a', 0)); ref {sb} [1353-1353],
 assertEquals(2, sb.indexOf('a', 1)); ref {sb} [1354-1354],
 assertEquals(-1, sb.indexOf('a', 4)); ref {sb} [1355-1355],
 assertEquals(-1, sb.indexOf('a', 5)); ref {sb} [1356-1356],
 // should work like String#indexOf
assertEquals("abab".indexOf('a', 1), sb.indexOf('a', 1)); ref {sb} [1359-1359],
 assertEquals(3, sb.indexOf('b', 2)); ref {sb} [1361-1361],
 assertEquals("abab".indexOf('b', 2), sb.indexOf('b', 2)); ref {sb} [1362-1362],
 assertEquals(-1, sb.indexOf('z', 2)); ref {sb} [1364-1364],
 assertEquals(2, sb.indexOf('z', 0)); ref {sb} [1367-1367],
 assertEquals(-1, sb.indexOf('z', 3)); ref {sb} [1368-1368]
[m[m31.08.2022 - 15:15:22.763 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testLastIndexOf_char has 5 assertions: 
 assertEquals(2, sb.lastIndexOf('a')); ref {sb} [1375-1375],
 // should work like String#lastIndexOf
assertEquals("abab".lastIndexOf('a'), sb.lastIndexOf('a')); ref {sb} [1377-1377],
 assertEquals(3, sb.lastIndexOf('b')); ref {sb} [1379-1379],
 assertEquals("abab".lastIndexOf('b'), sb.lastIndexOf('b')); ref {sb} [1380-1380],
 assertEquals(-1, sb.lastIndexOf('z')); ref {sb} [1382-1382]
[m[m31.08.2022 - 15:15:22.763 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testLastIndexOf_char_int has 9 assertions: 
 assertEquals(-1, sb.lastIndexOf('a', -1)); ref {sb} [1388-1388],
 assertEquals(0, sb.lastIndexOf('a', 0)); ref {sb} [1389-1389],
 assertEquals(0, sb.lastIndexOf('a', 1)); ref {sb} [1390-1390],
 // should work like String#lastIndexOf
assertEquals("abab".lastIndexOf('a', 1), sb.lastIndexOf('a', 1)); ref {sb} [1393-1393],
 assertEquals(1, sb.lastIndexOf('b', 2)); ref {sb} [1395-1395],
 assertEquals("abab".lastIndexOf('b', 2), sb.lastIndexOf('b', 2)); ref {sb} [1396-1396],
 assertEquals(-1, sb.lastIndexOf('z', 2)); ref {sb} [1398-1398],
 assertEquals(2, sb.lastIndexOf('z', sb.length())); ref {sb} [1401-1401],
 assertEquals(-1, sb.lastIndexOf('z', 1)); ref {sb} [1402-1402]
[m[m31.08.2022 - 15:15:22.763 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testIndexOf_String has 10 assertions: 
 assertEquals(0, sb.indexOf("a")); ref {sb} [1410-1410],
 // should work like String#indexOf
assertEquals("abab".indexOf("a"), sb.indexOf("a")); ref {sb} [1412-1412],
 assertEquals(0, sb.indexOf("ab")); ref {sb} [1414-1414],
 // should work like String#indexOf
assertEquals("abab".indexOf("ab"), sb.indexOf("ab")); ref {sb} [1416-1416],
 assertEquals(1, sb.indexOf("b")); ref {sb} [1418-1418],
 assertEquals("abab".indexOf("b"), sb.indexOf("b")); ref {sb} [1419-1419],
 assertEquals(1, sb.indexOf("ba")); ref {sb} [1421-1421],
 assertEquals("abab".indexOf("ba"), sb.indexOf("ba")); ref {sb} [1422-1422],
 assertEquals(-1, sb.indexOf("z")); ref {sb} [1424-1424],
 assertEquals(-1, sb.indexOf((String) null)); ref {sb} [1426-1426]
[m[m31.08.2022 - 15:15:22.763 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testIndexOf_String_int has 21 assertions: 
 assertEquals(0, sb.indexOf("a", -1)); ref {sb} [1432-1432],
 assertEquals(0, sb.indexOf("a", 0)); ref {sb} [1433-1433],
 assertEquals(2, sb.indexOf("a", 1)); ref {sb} [1434-1434],
 assertEquals(2, sb.indexOf("a", 2)); ref {sb} [1435-1435],
 assertEquals(-1, sb.indexOf("a", 3)); ref {sb} [1436-1436],
 assertEquals(-1, sb.indexOf("a", 4)); ref {sb} [1437-1437],
 assertEquals(-1, sb.indexOf("a", 5)); ref {sb} [1438-1438],
 assertEquals(-1, sb.indexOf("abcdef", 0)); ref {sb} [1440-1440],
 assertEquals(0, sb.indexOf("", 0)); ref {sb} [1441-1441],
 assertEquals(1, sb.indexOf("", 1)); ref {sb} [1442-1442],
 // should work like String#indexOf
assertEquals("abab".indexOf("a", 1), sb.indexOf("a", 1)); ref {sb} [1445-1445],
 assertEquals(2, sb.indexOf("ab", 1)); ref {sb} [1447-1447],
 // should work like String#indexOf
assertEquals("abab".indexOf("ab", 1), sb.indexOf("ab", 1)); ref {sb} [1449-1449],
 assertEquals(3, sb.indexOf("b", 2)); ref {sb} [1451-1451],
 assertEquals("abab".indexOf("b", 2), sb.indexOf("b", 2)); ref {sb} [1452-1452],
 assertEquals(1, sb.indexOf("ba", 1)); ref {sb} [1454-1454],
 assertEquals("abab".indexOf("ba", 2), sb.indexOf("ba", 2)); ref {sb} [1455-1455],
 assertEquals(-1, sb.indexOf("z", 2)); ref {sb} [1457-1457],
 assertEquals(2, sb.indexOf("za", 0)); ref {sb} [1460-1460],
 assertEquals(-1, sb.indexOf("za", 3)); ref {sb} [1461-1461],
 assertEquals(-1, sb.indexOf((String) null, 2)); ref {sb} [1463-1463]
[m[m31.08.2022 - 15:15:22.764 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testLastIndexOf_String has 10 assertions: 
 assertEquals(2, sb.lastIndexOf("a")); ref {sb} [1470-1470],
 // should work like String#lastIndexOf
assertEquals("abab".lastIndexOf("a"), sb.lastIndexOf("a")); ref {sb} [1472-1472],
 assertEquals(2, sb.lastIndexOf("ab")); ref {sb} [1474-1474],
 // should work like String#lastIndexOf
assertEquals("abab".lastIndexOf("ab"), sb.lastIndexOf("ab")); ref {sb} [1476-1476],
 assertEquals(3, sb.lastIndexOf("b")); ref {sb} [1478-1478],
 assertEquals("abab".lastIndexOf("b"), sb.lastIndexOf("b")); ref {sb} [1479-1479],
 assertEquals(1, sb.lastIndexOf("ba")); ref {sb} [1481-1481],
 assertEquals("abab".lastIndexOf("ba"), sb.lastIndexOf("ba")); ref {sb} [1482-1482],
 assertEquals(-1, sb.lastIndexOf("z")); ref {sb} [1484-1484],
 assertEquals(-1, sb.lastIndexOf((String) null)); ref {sb} [1486-1486]
[m[m31.08.2022 - 15:15:22.764 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testLastIndexOf_String_int has 21 assertions: 
 assertEquals(-1, sb.lastIndexOf("a", -1)); ref {sb} [1492-1492],
 assertEquals(0, sb.lastIndexOf("a", 0)); ref {sb} [1493-1493],
 assertEquals(0, sb.lastIndexOf("a", 1)); ref {sb} [1494-1494],
 assertEquals(2, sb.lastIndexOf("a", 2)); ref {sb} [1495-1495],
 assertEquals(2, sb.lastIndexOf("a", 3)); ref {sb} [1496-1496],
 assertEquals(2, sb.lastIndexOf("a", 4)); ref {sb} [1497-1497],
 assertEquals(2, sb.lastIndexOf("a", 5)); ref {sb} [1498-1498],
 assertEquals(-1, sb.lastIndexOf("abcdef", 3)); ref {sb} [1500-1500],
 assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); ref {sb} [1501-1501],
 assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); ref {sb} [1502-1502],
 // should work like String#lastIndexOf
assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); ref {sb} [1505-1505],
 assertEquals(0, sb.lastIndexOf("ab", 1)); ref {sb} [1507-1507],
 // should work like String#lastIndexOf
assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1)); ref {sb} [1509-1509],
 assertEquals(1, sb.lastIndexOf("b", 2)); ref {sb} [1511-1511],
 assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2)); ref {sb} [1512-1512],
 assertEquals(1, sb.lastIndexOf("ba", 2)); ref {sb} [1514-1514],
 assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2)); ref {sb} [1515-1515],
 assertEquals(-1, sb.lastIndexOf("z", 2)); ref {sb} [1517-1517],
 assertEquals(2, sb.lastIndexOf("za", sb.length())); ref {sb} [1520-1520],
 assertEquals(-1, sb.lastIndexOf("za", 1)); ref {sb} [1521-1521],
 assertEquals(-1, sb.lastIndexOf((String) null, 2)); ref {sb} [1523-1523]
[m[m31.08.2022 - 15:15:22.764 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testIndexOf_StrMatcher has 9 assertions: 
 assertEquals(-1, sb.indexOf((StrMatcher) null)); ref {sb} [1530-1530],
 assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'))); ref {StrMatcher, sb} [1531-1531],
 assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'))); ref {StrMatcher, sb} [1534-1534],
 assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'))); ref {StrMatcher, sb} [1535-1535],
 assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher())); ref {StrMatcher, sb} [1536-1536],
 assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d'))); ref {StrMatcher, sb} [1537-1537],
 assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher())); ref {StrMatcher, sb} [1538-1538],
 assertEquals(-1, sb.indexOf((StrMatcher) null)); ref {sb} [1539-1539],
 assertEquals(6, sb.indexOf(A_NUMBER_MATCHER)); ref {A_NUMBER_MATCHER, sb} [1542-1542]
[m[m31.08.2022 - 15:15:22.764 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testIndexOf_StrMatcher_int has 28 assertions: 
 assertEquals(-1, sb.indexOf((StrMatcher) null, 2)); ref {sb} [1548-1548],
 assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2)); ref {StrMatcher, sb} [1549-1549],
 assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0)); ref {StrMatcher, sb} [1550-1550],
 assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2)); ref {StrMatcher, sb} [1553-1553],
 assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0)); ref {StrMatcher, sb} [1554-1554],
 assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2)); ref {StrMatcher, sb} [1555-1555],
 assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20)); ref {StrMatcher, sb} [1556-1556],
 assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1)); ref {StrMatcher, sb} [1558-1558],
 assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0)); ref {StrMatcher, sb} [1559-1559],
 assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1)); ref {StrMatcher, sb} [1560-1560],
 assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2)); ref {StrMatcher, sb} [1561-1561],
 assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3)); ref {StrMatcher, sb} [1562-1562],
 assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4)); ref {StrMatcher, sb} [1563-1563],
 assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5)); ref {StrMatcher, sb} [1564-1564],
 assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6)); ref {StrMatcher, sb} [1565-1565],
 assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2)); ref {StrMatcher, sb} [1567-1567],
 assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0)); ref {StrMatcher, sb} [1568-1568],
 assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2)); ref {StrMatcher, sb} [1569-1569],
 assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4)); ref {StrMatcher, sb} [1570-1570],
 assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20)); ref {StrMatcher, sb} [1571-1571],
 assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0)); ref {StrMatcher, sb} [1573-1573],
 assertEquals(-1, sb.indexOf((StrMatcher) null, 0)); ref {sb} [1574-1574],
 assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5)); ref {A_NUMBER_MATCHER, sb} [1577-1577],
 assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6)); ref {A_NUMBER_MATCHER, sb} [1578-1578],
 assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7)); ref {A_NUMBER_MATCHER, sb} [1579-1579],
 assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22)); ref {A_NUMBER_MATCHER, sb} [1580-1580],
 assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23)); ref {A_NUMBER_MATCHER, sb} [1581-1581],
 assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24)); ref {A_NUMBER_MATCHER, sb} [1582-1582]
[m[m31.08.2022 - 15:15:22.765 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testLastIndexOf_StrMatcher has 9 assertions: 
 assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); ref {sb} [1588-1588],
 assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'))); ref {StrMatcher, sb} [1589-1589],
 assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'))); ref {StrMatcher, sb} [1592-1592],
 assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'))); ref {StrMatcher, sb} [1593-1593],
 assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher())); ref {StrMatcher, sb} [1594-1594],
 assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d'))); ref {StrMatcher, sb} [1595-1595],
 assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher())); ref {StrMatcher, sb} [1596-1596],
 assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); ref {sb} [1597-1597],
 assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER)); ref {A_NUMBER_MATCHER, sb} [1600-1600]
[m[m31.08.2022 - 15:15:22.765 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testLastIndexOf_StrMatcher_int has 29 assertions: 
 assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2)); ref {sb} [1606-1606],
 assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); ref {StrMatcher, sb} [1607-1607],
 assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); ref {StrMatcher, sb} [1608-1608],
 assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1)); ref {StrMatcher, sb} [1609-1609],
 assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2)); ref {StrMatcher, sb} [1612-1612],
 assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); ref {StrMatcher, sb} [1613-1613],
 assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); ref {StrMatcher, sb} [1614-1614],
 assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20)); ref {StrMatcher, sb} [1615-1615],
 assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1)); ref {StrMatcher, sb} [1617-1617],
 assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0)); ref {StrMatcher, sb} [1618-1618],
 assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1)); ref {StrMatcher, sb} [1619-1619],
 assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2)); ref {StrMatcher, sb} [1620-1620],
 assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3)); ref {StrMatcher, sb} [1621-1621],
 assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4)); ref {StrMatcher, sb} [1622-1622],
 assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5)); ref {StrMatcher, sb} [1623-1623],
 assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6)); ref {StrMatcher, sb} [1624-1624],
 assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2)); ref {StrMatcher, sb} [1626-1626],
 assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0)); ref {StrMatcher, sb} [1627-1627],
 assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2)); ref {StrMatcher, sb} [1628-1628],
 assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4)); ref {StrMatcher, sb} [1629-1629],
 assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20)); ref {StrMatcher, sb} [1630-1630],
 assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0)); ref {StrMatcher, sb} [1632-1632],
 assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0)); ref {sb} [1633-1633],
 assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5)); ref {A_NUMBER_MATCHER, sb} [1636-1636],
 // A matches, 1 is outside bounds
assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); ref {A_NUMBER_MATCHER, sb} [1637-1637],
 assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7)); ref {A_NUMBER_MATCHER, sb} [1638-1638],
 assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22)); ref {A_NUMBER_MATCHER, sb} [1639-1639],
 // A matches, 2 is outside bounds
assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); ref {A_NUMBER_MATCHER, sb} [1640-1640],
 assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24)); ref {A_NUMBER_MATCHER, sb} [1641-1641]
[m[m31.08.2022 - 15:15:22.765 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testAsTokenizer has 21 assertions: 
 assertEquals(2, tokens1.length); ref {tokens1.length, tokens1} [1666-1666],
 assertEquals("a", tokens1[0]); ref {tokens1} [1667-1667],
 assertEquals("b", tokens1[1]); ref {tokens1} [1668-1668],
 assertEquals(2, t.size()); ref {t} [1669-1669],
 assertEquals(2, tokens2.length); ref {tokens2.length, tokens2} [1673-1673],
 assertEquals("a", tokens2[0]); ref {tokens2} [1674-1674],
 assertEquals("b", tokens2[1]); ref {tokens2} [1675-1675],
 assertEquals(2, t.size()); ref {t} [1676-1676],
 assertEquals("a", t.next()); ref {t} [1677-1677],
 assertEquals("b", t.next()); ref {t} [1678-1678],
 assertEquals(4, tokens3.length); ref {tokens3.length, tokens3} [1682-1682],
 assertEquals("a", tokens3[0]); ref {tokens3} [1683-1683],
 assertEquals("b", tokens3[1]); ref {tokens3} [1684-1684],
 assertEquals("c", tokens3[2]); ref {tokens3} [1685-1685],
 assertEquals("d", tokens3[3]); ref {tokens3} [1686-1686],
 assertEquals(4, t.size()); ref {t} [1687-1687],
 assertEquals("a", t.next()); ref {t} [1688-1688],
 assertEquals("b", t.next()); ref {t} [1689-1689],
 assertEquals("c", t.next()); ref {t} [1690-1690],
 assertEquals("d", t.next()); ref {t} [1691-1691],
 assertEquals("a b c d ", t.getContent()); ref {t} [1693-1693]
[m[m31.08.2022 - 15:15:22.765 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testAsReader has 27 assertions: 
 assertTrue(reader.ready()); ref {reader} [1701-1701],
 assertEquals(9, reader.read(buf)); ref {buf, reader} [1703-1703],
 assertEquals("some text", new String(buf, 0, 9)); ref {buf} [1704-1704],
 assertEquals(-1, reader.read()); ref {reader} [1706-1706],
 assertFalse(reader.ready()); ref {reader} [1707-1707],
 assertEquals(0, reader.skip(2)); ref {reader} [1708-1708],
 assertEquals(0, reader.skip(-1)); ref {reader} [1709-1709],
 assertTrue(reader.markSupported()); ref {reader} [1711-1711],
 assertEquals('s', reader.read()); ref {reader} [1713-1713],
 assertEquals(3, reader.read(array, 0, 3)); ref {array, reader} [1716-1716],
 assertEquals('o', array[0]); ref {array} [1717-1717],
 assertEquals('m', array[1]); ref {array} [1718-1718],
 assertEquals('e', array[2]); ref {array} [1719-1719],
 assertEquals(1, reader.read(array, 1, 1)); ref {array, reader} [1721-1721],
 assertEquals('o', array[0]); ref {array} [1722-1722],
 assertEquals('o', array[1]); ref {array} [1723-1723],
 assertEquals('e', array[2]); ref {array} [1724-1724],
 assertEquals(2, reader.skip(2)); ref {reader} [1725-1725],
 assertEquals(' ', reader.read()); ref {reader} [1726-1726],
 assertTrue(reader.ready()); ref {reader} [1728-1728],
 assertTrue(reader.ready()); ref {reader} [1730-1730],
 assertEquals(0, reader.read(array, 0, 0)); ref {array, reader} [1755-1755],
 assertEquals(0, array[0]); ref {array} [1756-1756],
 assertEquals(0, array[1]); ref {array} [1757-1757],
 assertEquals(0, array[2]); ref {array} [1758-1758],
 assertEquals(-1, reader.read(array, 0, 1)); ref {array, reader} [1761-1761],
 assertEquals(9, reader.read(array, 0, 30)); ref {array, reader} [1765-1765]
[m[m31.08.2022 - 15:15:22.766 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testAsWriter has 9 assertions: 
 assertEquals("basel", sb.toString()); ref {sb} [1775-1775],
 assertEquals("baselin", sb.toString()); ref {sb} [1778-1778],
 assertEquals("baseliner", sb.toString()); ref {sb} [1781-1781],
 assertEquals("baseliner rout", sb.toString()); ref {sb} [1784-1784],
 assertEquals("baseliner routing", sb.toString()); ref {sb} [1787-1787],
 assertEquals("baseliner routing", sb.toString()); ref {sb} [1790-1790],
 assertEquals("baseliner routing", sb.toString()); ref {sb} [1793-1793],
 assertEquals("baseliner routing hi", sb.toString()); ref {sb} [1796-1796],
 assertEquals("based", sb.toString()); ref {sb} [1800-1800]
[m[m31.08.2022 - 15:15:22.766 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testEqualsIgnoreCase has 9 assertions: 
 assertTrue(sb1.equalsIgnoreCase(sb1)); ref {sb1} [1808-1808],
 assertTrue(sb1.equalsIgnoreCase(sb2)); ref {sb2, sb1} [1809-1809],
 assertTrue(sb2.equalsIgnoreCase(sb2)); ref {sb2} [1810-1810],
 assertFalse(sb1.equalsIgnoreCase(sb2)); ref {sb2, sb1} [1813-1813],
 assertTrue(sb1.equalsIgnoreCase(sb2)); ref {sb2, sb1} [1816-1816],
 assertTrue(sb1.equalsIgnoreCase(sb2)); ref {sb2, sb1} [1819-1819],
 assertTrue(sb1.equalsIgnoreCase(sb1)); ref {sb1} [1820-1820],
 assertTrue(sb2.equalsIgnoreCase(sb2)); ref {sb2} [1821-1821],
 assertTrue(sb1.equalsIgnoreCase(sb2)); ref {sb2, sb1} [1824-1824]
[m[m31.08.2022 - 15:15:22.766 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testEquals has 12 assertions: 
 assertTrue(sb1.equals(sb2)); ref {sb2, sb1} [1832-1832],
 assertTrue(sb1.equals(sb1)); ref {sb1} [1833-1833],
 assertTrue(sb2.equals(sb2)); ref {sb2} [1834-1834],
 assertTrue(sb1.equals((Object) sb2)); ref {sb2, sb1} [1835-1835],
 assertFalse(sb1.equals(sb2)); ref {sb2, sb1} [1838-1838],
 assertFalse(sb1.equals((Object) sb2)); ref {sb2, sb1} [1839-1839],
 assertFalse(sb1.equals(sb2)); ref {sb2, sb1} [1842-1842],
 assertFalse(sb1.equals((Object) sb2)); ref {sb2, sb1} [1843-1843],
 assertTrue(sb1.equals(sb2)); ref {sb2, sb1} [1846-1846],
 assertTrue(sb1.equals((Object) sb2)); ref {sb2, sb1} [1847-1847],
 assertFalse(sb1.equals(Integer.valueOf(1))); ref {Integer, sb1} [1849-1849],
 assertFalse(sb1.equals("abc")); ref {sb1} [1850-1850]
[m[m31.08.2022 - 15:15:22.766 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testHashCode has 4 assertions: 
 assertEquals(0, hc1a); ref {hc1a} [1859-1859],
 assertEquals(hc1a, hc1b); ref {hc1a, hc1b} [1860-1860],
 assertTrue(hc2a != 0); ref {hc2a} [1865-1865],
 assertEquals(hc2a, hc2b); ref {hc2a, hc2b} [1866-1866]
[m[m31.08.2022 - 15:15:22.766 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testToString has 1 assertions: 
 assertEquals("abc", sb.toString()); ref {sb} [1873-1873]
[m[m31.08.2022 - 15:15:22.766 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testToStringBuffer has 2 assertions: 
 assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString()); ref {sb} [1880-1880],
 assertEquals(new StringBuffer("junit").toString(), sb.toStringBuffer().toString()); ref {sb} [1883-1883]
[m[m31.08.2022 - 15:15:22.766 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testToStringBuilder has 2 assertions: 
 assertEquals(new StringBuilder().toString(), sb.toStringBuilder().toString()); ref {sb} [1890-1890],
 assertEquals(new StringBuilder("junit").toString(), sb.toStringBuilder().toString()); ref {sb} [1893-1893]
[m[m31.08.2022 - 15:15:22.767 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testLang294 has 1 assertions: 
 assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); ref {sb} [1901-1901]
[m[m31.08.2022 - 15:15:22.767 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testIndexOfLang294 has 1 assertions: 
 assertEquals(-1, sb.indexOf("three")); ref {sb} [1908-1908]
[m[m31.08.2022 - 15:15:22.767 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testLang295 has 2 assertions: 
 assertFalse("The contains(char) method is looking beyond the end of the string", sb.contains('h')); ref {sb} [1916-1916],
 assertEquals("The indexOf(char) method is looking beyond the end of the string", -1, sb.indexOf('h')); ref {sb} [1917-1917]
[m[m31.08.2022 - 15:15:22.767 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testLang412Right has 1 assertions: 
 assertEquals("Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); ref {sb} [1925-1925]
[m[m31.08.2022 - 15:15:22.767 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testLang412Left has 1 assertions: 
 assertEquals("Failed to invoke appendFixedWidthPadLeft correctly", "**********", sb.toString()); ref {sb} [1932-1932]
[m[m31.08.2022 - 15:15:22.767 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testAsBuilder has 1 assertions: 
 assertEquals(sb.toString(), sb.build()); ref {sb} [1938-1938]
[m[m31.08.2022 - 15:15:22.767 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testAppendCharBuffer has 2 assertions: 
 assertEquals("0123456789", sb1.toString()); ref {sb1} [1949-1949],
 assertEquals("12345678", sb2.toString()); ref {sb2} [1953-1953]
[m[m31.08.2022 - 15:15:22.767 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testAppendToWriter has 1 assertions: 
 assertEquals("Test 1234567890", writer.toString()); ref {writer} [1965-1965]
[m[m31.08.2022 - 15:15:22.767 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testAppendToStringBuilder has 1 assertions: 
 assertEquals("Test 1234567890", builder.toString()); ref {builder} [1975-1975]
[m[m31.08.2022 - 15:15:22.767 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testAppendToStringBuffer has 1 assertions: 
 assertEquals("Test 1234567890", buffer.toString()); ref {buffer} [1985-1985]
[m[m31.08.2022 - 15:15:22.767 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderTest::testAppendToCharBuffer has 1 assertions: 
 assertEquals("Test 1234567890", buffer.toString()); ref {buffer} [1998-1998]
[m[m31.08.2022 - 15:15:22.770 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m31.08.2022 - 15:15:22.770 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedExceptionTest::testContextedException has 2 assertions: 
 assertTrue(trace.indexOf("ContextedException") >= 0); ref {trace} [44-44],
 assertTrue(StringUtils.isEmpty(message)); ref {StringUtils, message} [45-45]
[m[m31.08.2022 - 15:15:22.770 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedExceptionTest::testContextedExceptionString has 2 assertions: 
 assertEquals(TEST_MESSAGE, exceptionContext.getMessage()); ref {TEST_MESSAGE, exceptionContext} [51-51],
 assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); ref {trace, TEST_MESSAGE} [54-54]
[m[m31.08.2022 - 15:15:22.770 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedExceptionTest::testContextedExceptionThrowable has 3 assertions: 
 assertTrue(trace.indexOf("ContextedException") >= 0); ref {trace} [62-62],
 assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); ref {trace, TEST_MESSAGE} [63-63],
 assertTrue(message.indexOf(TEST_MESSAGE) >= 0); ref {TEST_MESSAGE, message} [64-64]
[m[m31.08.2022 - 15:15:22.770 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedExceptionTest::testContextedExceptionStringThrowable has 4 assertions: 
 assertTrue(trace.indexOf("ContextedException") >= 0); ref {trace} [72-72],
 assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); ref {trace, TEST_MESSAGE} [73-73],
 assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); ref {trace, TEST_MESSAGE_2} [74-74],
 assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); ref {TEST_MESSAGE_2, message} [75-75]
[m[m31.08.2022 - 15:15:22.771 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedExceptionTest::testContextedExceptionStringThrowableContext has 4 assertions: 
 assertTrue(trace.indexOf("ContextedException") >= 0); ref {trace} [83-83],
 assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); ref {trace, TEST_MESSAGE} [84-84],
 assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); ref {trace, TEST_MESSAGE_2} [85-85],
 assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); ref {TEST_MESSAGE_2, message} [86-86]
[m[m31.08.2022 - 15:15:22.771 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedExceptionTest::testNullExceptionPassing has 1 assertions: 
 assertTrue(message != null); ref {message} [99-99]
[m[m31.08.2022 - 15:15:22.771 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedExceptionTest::testRawMessage has 3 assertions: 
 assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage()); ref {TEST_MESSAGE, exceptionContext} [104-104],
 assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage()); ref {exceptionContext, TEST_MESSAGE_2} [106-106],
 assertNull(exceptionContext.getRawMessage()); ref {exceptionContext} [108-108]
[m[m31.08.2022 - 15:15:22.781 [INFO ] ParsingStrategy.parseTestSuite() - Found 14 test cases
[m[m31.08.2022 - 15:15:22.782 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testSubstring_StringInt has 16 assertions: 
 assertEquals(null, StringUtils.substring(null, 0)); ref {StringUtils} [41-41],
 assertEquals("", StringUtils.substring("", 0)); ref {StringUtils} [42-42],
 assertEquals("", StringUtils.substring("", 2)); ref {StringUtils} [43-43],
 assertEquals("", StringUtils.substring(SENTENCE, 80)); ref {StringUtils, SENTENCE} [45-45],
 assertEquals(BAZ, StringUtils.substring(SENTENCE, 8)); ref {StringUtils, SENTENCE, BAZ} [46-46],
 assertEquals(BAZ, StringUtils.substring(SENTENCE, -3)); ref {StringUtils, SENTENCE, BAZ} [47-47],
 assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0)); ref {StringUtils, SENTENCE} [48-48],
 assertEquals("abc", StringUtils.substring("abc", -4)); ref {StringUtils} [49-49],
 assertEquals("abc", StringUtils.substring("abc", -3)); ref {StringUtils} [50-50],
 assertEquals("bc", StringUtils.substring("abc", -2)); ref {StringUtils} [51-51],
 assertEquals("c", StringUtils.substring("abc", -1)); ref {StringUtils} [52-52],
 assertEquals("abc", StringUtils.substring("abc", 0)); ref {StringUtils} [53-53],
 assertEquals("bc", StringUtils.substring("abc", 1)); ref {StringUtils} [54-54],
 assertEquals("c", StringUtils.substring("abc", 2)); ref {StringUtils} [55-55],
 assertEquals("", StringUtils.substring("abc", 3)); ref {StringUtils} [56-56],
 assertEquals("", StringUtils.substring("abc", 4)); ref {StringUtils} [57-57]
[m[m31.08.2022 - 15:15:22.782 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testSubstring_StringIntInt has 13 assertions: 
 assertEquals(null, StringUtils.substring(null, 0, 0)); ref {StringUtils} [62-62],
 assertEquals(null, StringUtils.substring(null, 1, 2)); ref {StringUtils} [63-63],
 assertEquals("", StringUtils.substring("", 0, 0)); ref {StringUtils} [64-64],
 assertEquals("", StringUtils.substring("", 1, 2)); ref {StringUtils} [65-65],
 assertEquals("", StringUtils.substring("", -2, -1)); ref {StringUtils} [66-66],
 assertEquals("", StringUtils.substring(SENTENCE, 8, 6)); ref {StringUtils, SENTENCE} [68-68],
 assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3)); ref {StringUtils, FOO, SENTENCE} [69-69],
 assertEquals("o", StringUtils.substring(SENTENCE, -9, 3)); ref {StringUtils, SENTENCE} [70-70],
 assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8)); ref {StringUtils, FOO, SENTENCE} [71-71],
 assertEquals("o", StringUtils.substring(SENTENCE, -9, -8)); ref {StringUtils, SENTENCE} [72-72],
 assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80)); ref {StringUtils, SENTENCE} [73-73],
 assertEquals("", StringUtils.substring(SENTENCE, 2, 2)); ref {StringUtils, SENTENCE} [74-74],
 assertEquals("b", StringUtils.substring("abc", -2, -1)); ref {StringUtils} [75-75]
[m[m31.08.2022 - 15:15:22.782 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testLeft_String has 10 assertions: 
 assertSame(null, StringUtils.left(null, -1)); ref {StringUtils} [80-80],
 assertSame(null, StringUtils.left(null, 0)); ref {StringUtils} [81-81],
 assertSame(null, StringUtils.left(null, 2)); ref {StringUtils} [82-82],
 assertEquals("", StringUtils.left("", -1)); ref {StringUtils} [84-84],
 assertEquals("", StringUtils.left("", 0)); ref {StringUtils} [85-85],
 assertEquals("", StringUtils.left("", 2)); ref {StringUtils} [86-86],
 assertEquals("", StringUtils.left(FOOBAR, -1)); ref {StringUtils, FOOBAR} [88-88],
 assertEquals("", StringUtils.left(FOOBAR, 0)); ref {StringUtils, FOOBAR} [89-89],
 assertEquals(FOO, StringUtils.left(FOOBAR, 3)); ref {StringUtils, FOO, FOOBAR} [90-90],
 assertSame(FOOBAR, StringUtils.left(FOOBAR, 80)); ref {StringUtils, FOOBAR} [91-91]
[m[m31.08.2022 - 15:15:22.782 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testRight_String has 10 assertions: 
 assertSame(null, StringUtils.right(null, -1)); ref {StringUtils} [96-96],
 assertSame(null, StringUtils.right(null, 0)); ref {StringUtils} [97-97],
 assertSame(null, StringUtils.right(null, 2)); ref {StringUtils} [98-98],
 assertEquals("", StringUtils.right("", -1)); ref {StringUtils} [100-100],
 assertEquals("", StringUtils.right("", 0)); ref {StringUtils} [101-101],
 assertEquals("", StringUtils.right("", 2)); ref {StringUtils} [102-102],
 assertEquals("", StringUtils.right(FOOBAR, -1)); ref {StringUtils, FOOBAR} [104-104],
 assertEquals("", StringUtils.right(FOOBAR, 0)); ref {StringUtils, FOOBAR} [105-105],
 assertEquals(BAR, StringUtils.right(FOOBAR, 3)); ref {BAR, StringUtils, FOOBAR} [106-106],
 assertSame(FOOBAR, StringUtils.right(FOOBAR, 80)); ref {StringUtils, FOOBAR} [107-107]
[m[m31.08.2022 - 15:15:22.783 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testMid_String has 16 assertions: 
 assertSame(null, StringUtils.mid(null, -1, 0)); ref {StringUtils} [112-112],
 assertSame(null, StringUtils.mid(null, 0, -1)); ref {StringUtils} [113-113],
 assertSame(null, StringUtils.mid(null, 3, 0)); ref {StringUtils} [114-114],
 assertSame(null, StringUtils.mid(null, 3, 2)); ref {StringUtils} [115-115],
 assertEquals("", StringUtils.mid("", 0, -1)); ref {StringUtils} [117-117],
 assertEquals("", StringUtils.mid("", 0, 0)); ref {StringUtils} [118-118],
 assertEquals("", StringUtils.mid("", 0, 2)); ref {StringUtils} [119-119],
 assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); ref {StringUtils, FOOBAR} [121-121],
 assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); ref {StringUtils, FOOBAR} [122-122],
 assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); ref {StringUtils, FOOBAR} [123-123],
 assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); ref {StringUtils, FOO, FOOBAR} [124-124],
 assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); ref {BAR, StringUtils, FOOBAR} [125-125],
 assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); ref {StringUtils, FOOBAR} [126-126],
 assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); ref {BAR, StringUtils, FOOBAR} [127-127],
 assertEquals("", StringUtils.mid(FOOBAR, 9, 3)); ref {StringUtils, FOOBAR} [128-128],
 assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3)); ref {StringUtils, FOO, FOOBAR} [129-129]
[m[m31.08.2022 - 15:15:22.783 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testSubstringBefore_StringString has 14 assertions: 
 assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); ref {StringUtils} [135-135],
 assertEquals(null, StringUtils.substringBefore(null, null)); ref {StringUtils} [137-137],
 assertEquals(null, StringUtils.substringBefore(null, "")); ref {StringUtils} [138-138],
 assertEquals(null, StringUtils.substringBefore(null, "XX")); ref {StringUtils} [139-139],
 assertEquals("", StringUtils.substringBefore("", null)); ref {StringUtils} [140-140],
 assertEquals("", StringUtils.substringBefore("", "")); ref {StringUtils} [141-141],
 assertEquals("", StringUtils.substringBefore("", "XX")); ref {StringUtils} [142-142],
 assertEquals("foo", StringUtils.substringBefore("foo", null)); ref {StringUtils} [144-144],
 assertEquals("foo", StringUtils.substringBefore("foo", "b")); ref {StringUtils} [145-145],
 assertEquals("f", StringUtils.substringBefore("foot", "o")); ref {StringUtils} [146-146],
 assertEquals("", StringUtils.substringBefore("abc", "a")); ref {StringUtils} [147-147],
 assertEquals("a", StringUtils.substringBefore("abcba", "b")); ref {StringUtils} [148-148],
 assertEquals("ab", StringUtils.substringBefore("abc", "c")); ref {StringUtils} [149-149],
 assertEquals("", StringUtils.substringBefore("abc", "")); ref {StringUtils} [150-150]
[m[m31.08.2022 - 15:15:22.783 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testSubstringAfter_StringString has 14 assertions: 
 assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); ref {StringUtils} [155-155],
 assertEquals(null, StringUtils.substringAfter(null, null)); ref {StringUtils} [157-157],
 assertEquals(null, StringUtils.substringAfter(null, "")); ref {StringUtils} [158-158],
 assertEquals(null, StringUtils.substringAfter(null, "XX")); ref {StringUtils} [159-159],
 assertEquals("", StringUtils.substringAfter("", null)); ref {StringUtils} [160-160],
 assertEquals("", StringUtils.substringAfter("", "")); ref {StringUtils} [161-161],
 assertEquals("", StringUtils.substringAfter("", "XX")); ref {StringUtils} [162-162],
 assertEquals("", StringUtils.substringAfter("foo", null)); ref {StringUtils} [164-164],
 assertEquals("ot", StringUtils.substringAfter("foot", "o")); ref {StringUtils} [165-165],
 assertEquals("bc", StringUtils.substringAfter("abc", "a")); ref {StringUtils} [166-166],
 assertEquals("cba", StringUtils.substringAfter("abcba", "b")); ref {StringUtils} [167-167],
 assertEquals("", StringUtils.substringAfter("abc", "c")); ref {StringUtils} [168-168],
 assertEquals("abc", StringUtils.substringAfter("abc", "")); ref {StringUtils} [169-169],
 assertEquals("", StringUtils.substringAfter("abc", "d")); ref {StringUtils} [170-170]
[m[m31.08.2022 - 15:15:22.783 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testSubstringBeforeLast_StringString has 18 assertions: 
 assertEquals("fooXXbar", StringUtils.substringBeforeLast("fooXXbarXXbaz", "XX")); ref {StringUtils} [175-175],
 assertEquals(null, StringUtils.substringBeforeLast(null, null)); ref {StringUtils} [177-177],
 assertEquals(null, StringUtils.substringBeforeLast(null, "")); ref {StringUtils} [178-178],
 assertEquals(null, StringUtils.substringBeforeLast(null, "XX")); ref {StringUtils} [179-179],
 assertEquals("", StringUtils.substringBeforeLast("", null)); ref {StringUtils} [180-180],
 assertEquals("", StringUtils.substringBeforeLast("", "")); ref {StringUtils} [181-181],
 assertEquals("", StringUtils.substringBeforeLast("", "XX")); ref {StringUtils} [182-182],
 assertEquals("foo", StringUtils.substringBeforeLast("foo", null)); ref {StringUtils} [184-184],
 assertEquals("foo", StringUtils.substringBeforeLast("foo", "b")); ref {StringUtils} [185-185],
 assertEquals("fo", StringUtils.substringBeforeLast("foo", "o")); ref {StringUtils} [186-186],
 assertEquals("abc\r\n", StringUtils.substringBeforeLast("abc\r\n", "d")); ref {StringUtils} [187-187],
 assertEquals("abc", StringUtils.substringBeforeLast("abcdabc", "d")); ref {StringUtils} [188-188],
 assertEquals("abcdabc", StringUtils.substringBeforeLast("abcdabcd", "d")); ref {StringUtils} [189-189],
 assertEquals("a", StringUtils.substringBeforeLast("abc", "b")); ref {StringUtils} [190-190],
 assertEquals("abc ", StringUtils.substringBeforeLast("abc \n", "\n")); ref {StringUtils} [191-191],
 assertEquals("a", StringUtils.substringBeforeLast("a", null)); ref {StringUtils} [192-192],
 assertEquals("a", StringUtils.substringBeforeLast("a", "")); ref {StringUtils} [193-193],
 assertEquals("", StringUtils.substringBeforeLast("a", "a")); ref {StringUtils} [194-194]
[m[m31.08.2022 - 15:15:22.784 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testSubstringAfterLast_StringString has 15 assertions: 
 assertEquals("baz", StringUtils.substringAfterLast("fooXXbarXXbaz", "XX")); ref {StringUtils} [199-199],
 assertEquals(null, StringUtils.substringAfterLast(null, null)); ref {StringUtils} [201-201],
 assertEquals(null, StringUtils.substringAfterLast(null, "")); ref {StringUtils} [202-202],
 assertEquals(null, StringUtils.substringAfterLast(null, "XX")); ref {StringUtils} [203-203],
 assertEquals("", StringUtils.substringAfterLast("", null)); ref {StringUtils} [204-204],
 assertEquals("", StringUtils.substringAfterLast("", "")); ref {StringUtils} [205-205],
 assertEquals("", StringUtils.substringAfterLast("", "a")); ref {StringUtils} [206-206],
 assertEquals("", StringUtils.substringAfterLast("foo", null)); ref {StringUtils} [208-208],
 assertEquals("", StringUtils.substringAfterLast("foo", "b")); ref {StringUtils} [209-209],
 assertEquals("t", StringUtils.substringAfterLast("foot", "o")); ref {StringUtils} [210-210],
 assertEquals("bc", StringUtils.substringAfterLast("abc", "a")); ref {StringUtils} [211-211],
 assertEquals("a", StringUtils.substringAfterLast("abcba", "b")); ref {StringUtils} [212-212],
 assertEquals("", StringUtils.substringAfterLast("abc", "c")); ref {StringUtils} [213-213],
 assertEquals("", StringUtils.substringAfterLast("", "d")); ref {StringUtils} [214-214],
 assertEquals("", StringUtils.substringAfterLast("abc", "")); ref {StringUtils} [215-215]
[m[m31.08.2022 - 15:15:22.784 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testSubstringBetween_StringString has 10 assertions: 
 assertEquals(null, StringUtils.substringBetween(null, "tag")); ref {StringUtils} [221-221],
 assertEquals("", StringUtils.substringBetween("", "")); ref {StringUtils} [222-222],
 assertEquals(null, StringUtils.substringBetween("", "abc")); ref {StringUtils} [223-223],
 assertEquals("", StringUtils.substringBetween("    ", " ")); ref {StringUtils} [224-224],
 assertEquals(null, StringUtils.substringBetween("abc", null)); ref {StringUtils} [225-225],
 assertEquals("", StringUtils.substringBetween("abc", "")); ref {StringUtils} [226-226],
 assertEquals(null, StringUtils.substringBetween("abc", "a")); ref {StringUtils} [227-227],
 assertEquals("bc", StringUtils.substringBetween("abca", "a")); ref {StringUtils} [228-228],
 assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); ref {StringUtils} [229-229],
 assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); ref {StringUtils} [230-230]
[m[m31.08.2022 - 15:15:22.784 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testSubstringBetween_StringStringString has 9 assertions: 
 assertEquals(null, StringUtils.substringBetween(null, "", "")); ref {StringUtils} [235-235],
 assertEquals(null, StringUtils.substringBetween("", null, "")); ref {StringUtils} [236-236],
 assertEquals(null, StringUtils.substringBetween("", "", null)); ref {StringUtils} [237-237],
 assertEquals("", StringUtils.substringBetween("", "", "")); ref {StringUtils} [238-238],
 assertEquals("", StringUtils.substringBetween("foo", "", "")); ref {StringUtils} [239-239],
 assertEquals(null, StringUtils.substringBetween("foo", "", "]")); ref {StringUtils} [240-240],
 assertEquals(null, StringUtils.substringBetween("foo", "[", "]")); ref {StringUtils} [241-241],
 assertEquals("", StringUtils.substringBetween("    ", " ", "  ")); ref {StringUtils} [242-242],
 assertEquals("bar", StringUtils.substringBetween("<foo>bar</foo>", "<foo>", "</foo>")); ref {StringUtils} [243-243]
[m[m31.08.2022 - 15:15:22.784 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testSubstringsBetween_StringStringString has 24 assertions: 
 assertEquals(3, results.length); ref {results.length, results} [253-253],
 assertEquals("one", results[0]); ref {results} [254-254],
 assertEquals("two", results[1]); ref {results} [255-255],
 assertEquals("three", results[2]); ref {results} [256-256],
 assertEquals(2, results.length); ref {results.length, results} [259-259],
 assertEquals("one", results[0]); ref {results} [260-260],
 assertEquals("two", results[1]); ref {results} [261-261],
 assertEquals(2, results.length); ref {results.length, results} [264-264],
 assertEquals("one", results[0]); ref {results} [265-265],
 assertEquals("two", results[1]); ref {results} [266-266],
 assertEquals(1, results.length); ref {results.length, results} [269-269],
 assertEquals("one", results[0]); ref {results} [270-270],
 assertEquals(1, results.length); ref {results.length, results} [273-273],
 assertEquals("three", results[0]); ref {results} [274-274],
 assertEquals(1, results.length); ref {results.length, results} [279-279],
 assertEquals("hello", results[0]); ref {results} [280-280],
 assertNull(results); ref {results} [283-283],
 assertNull(results); ref {results} [286-286],
 assertNull(results); ref {results} [289-289],
 assertNull(results); ref {results} [292-292],
 assertNull(results); ref {results} [295-295],
 assertNull(results); ref {results} [298-298],
 assertNull(results); ref {results} [301-301],
 assertEquals(0, results.length); ref {results.length, results} [304-304]
[m[m31.08.2022 - 15:15:22.784 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testCountMatches_String has 8 assertions: 
 assertEquals(0, StringUtils.countMatches(null, null)); ref {StringUtils} [310-310],
 assertEquals(0, StringUtils.countMatches("blah", null)); ref {StringUtils} [311-311],
 assertEquals(0, StringUtils.countMatches(null, "DD")); ref {StringUtils} [312-312],
 assertEquals(0, StringUtils.countMatches("x", "")); ref {StringUtils} [314-314],
 assertEquals(0, StringUtils.countMatches("", "")); ref {StringUtils} [315-315],
 assertEquals(3, StringUtils.countMatches("one long someone sentence of one", "one")); ref {StringUtils} [317-318],
 assertEquals(0, StringUtils.countMatches("one long someone sentence of one", "two")); ref {StringUtils} [319-320],
 assertEquals(4, StringUtils.countMatches("oooooooooooo", "ooo")); ref {StringUtils} [321-322]
[m[m31.08.2022 - 15:15:22.785 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsSubstringTest::testCountMatches_char has 4 assertions: 
 assertEquals(0, StringUtils.countMatches(null, 'D')); ref {StringUtils} [327-327],
 assertEquals(5, StringUtils.countMatches("one long someone sentence of one", ' ')); ref {StringUtils} [328-328],
 assertEquals(6, StringUtils.countMatches("one long someone sentence of one", 'o')); ref {StringUtils} [329-329],
 assertEquals(4, StringUtils.countMatches("oooooooooooo", "ooo")); ref {StringUtils} [330-330]
[m[m31.08.2022 - 15:15:22.801 [INFO ] ParsingStrategy.parseTestSuite() - Found 14 test cases
[m[m31.08.2022 - 15:15:22.802 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testClass has 2 assertions: 
 assertTrue(Modifier.isPublic(CharSet.class.getModifiers())); ref {Modifier} [40-40],
 assertFalse(Modifier.isFinal(CharSet.class.getModifiers())); ref {Modifier} [41-41]
[m[m31.08.2022 - 15:15:22.802 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testGetInstance has 7 assertions: 
 assertSame(CharSet.EMPTY, CharSet.getInstance((String) null)); ref {CharSet.EMPTY, CharSet} [47-47],
 assertSame(CharSet.EMPTY, CharSet.getInstance("")); ref {CharSet.EMPTY, CharSet} [48-48],
 assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("a-zA-Z")); ref {CharSet.ASCII_ALPHA, CharSet} [49-49],
 assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("A-Za-z")); ref {CharSet.ASCII_ALPHA, CharSet} [50-50],
 assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance("a-z")); ref {CharSet.ASCII_ALPHA_LOWER, CharSet} [51-51],
 assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance("A-Z")); ref {CharSet.ASCII_ALPHA_UPPER, CharSet} [52-52],
 assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance("0-9")); ref {CharSet.ASCII_NUMERIC, CharSet} [53-53]
[m[m31.08.2022 - 15:15:22.802 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testGetInstance_Stringarray has 4 assertions: 
 assertEquals(null, CharSet.getInstance((String[]) null)); ref {CharSet} [59-59],
 assertEquals("[]", CharSet.getInstance(new String[0]).toString()); ref {CharSet} [60-60],
 assertEquals("[]", CharSet.getInstance(new String[] { null }).toString()); ref {CharSet} [61-61],
 assertEquals("[a-e]", CharSet.getInstance(new String[] { "a-e" }).toString()); ref {CharSet} [62-62]
[m[m31.08.2022 - 15:15:22.802 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testConstructor_String_simple has 16 assertions: 
 assertEquals("[]", set.toString()); ref {set} [73-73],
 assertEquals(0, array.length); ref {array, array.length} [74-74],
 assertEquals("[]", set.toString()); ref {set} [78-78],
 assertEquals(0, array.length); ref {array, array.length} [79-79],
 assertEquals("[a]", set.toString()); ref {set} [83-83],
 assertEquals(1, array.length); ref {array, array.length} [84-84],
 assertEquals("a", array[0].toString()); ref {array} [85-85],
 assertEquals("[^a]", set.toString()); ref {set} [89-89],
 assertEquals(1, array.length); ref {array, array.length} [90-90],
 assertEquals("^a", array[0].toString()); ref {array} [91-91],
 assertEquals("[a-e]", set.toString()); ref {set} [95-95],
 assertEquals(1, array.length); ref {array, array.length} [96-96],
 assertEquals("a-e", array[0].toString()); ref {array} [97-97],
 assertEquals("[^a-e]", set.toString()); ref {set} [101-101],
 assertEquals(1, array.length); ref {array, array.length} [102-102],
 assertEquals("^a-e", array[0].toString()); ref {array} [103-103]
[m[m31.08.2022 - 15:15:22.803 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testConstructor_String_combo has 18 assertions: 
 assertEquals(3, array.length); ref {array, array.length} [113-113],
 assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); ref {array, ArrayUtils, CharRange} [114-114],
 assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); ref {array, ArrayUtils, CharRange} [115-115],
 assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); ref {array, ArrayUtils, CharRange} [116-116],
 assertEquals(2, array.length); ref {array, array.length} [120-120],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'c'))); ref {array, ArrayUtils, CharRange} [121-121],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f'))); ref {array, ArrayUtils, CharRange} [122-122],
 assertEquals(2, array.length); ref {array, array.length} [126-126],
 assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); ref {array, ArrayUtils, CharRange} [127-127],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f'))); ref {array, ArrayUtils, CharRange} [128-128],
 assertEquals(2, array.length); ref {array, array.length} [132-132],
 assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); ref {array, ArrayUtils, CharRange} [133-133],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f'))); ref {array, ArrayUtils, CharRange} [134-134],
 assertEquals(4, array.length); ref {array, array.length} [138-138],
 assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); ref {array, ArrayUtils, CharRange} [139-139],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f'))); ref {array, ArrayUtils, CharRange} [140-140],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('m', 'p'))); ref {array, ArrayUtils, CharRange} [141-141],
 assertTrue(ArrayUtils.contains(array, CharRange.is('z'))); ref {array, ArrayUtils, CharRange} [142-142]
[m[m31.08.2022 - 15:15:22.803 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testConstructor_String_comboNegated has 20 assertions: 
 assertEquals(3, array.length); ref {array, array.length} [152-152],
 assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); ref {array, ArrayUtils, CharRange} [153-153],
 assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); ref {array, ArrayUtils, CharRange} [154-154],
 assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); ref {array, ArrayUtils, CharRange} [155-155],
 assertEquals(3, array.length); ref {array, array.length} [159-159],
 assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); ref {array, ArrayUtils, CharRange} [160-160],
 assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); ref {array, ArrayUtils, CharRange} [161-161],
 assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); ref {array, ArrayUtils, CharRange} [162-162],
 assertEquals(4, array.length); ref {array, array.length} [166-166],
 assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); ref {array, ArrayUtils, CharRange} [167-167],
 assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); ref {array, ArrayUtils, CharRange} [168-168],
 assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); ref {array, ArrayUtils, CharRange} [169-169],
 assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); ref {array, ArrayUtils, CharRange} [170-170],
 assertEquals(2, array.length); ref {array, array.length} [174-174],
 assertTrue(ArrayUtils.contains(array, CharRange.isNot('b'))); ref {array, ArrayUtils, CharRange} [175-175],
 assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); ref {array, ArrayUtils, CharRange} [176-176],
 assertEquals(3, array.length); ref {array, array.length} [180-180],
 assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', 'c'))); ref {array, ArrayUtils, CharRange} [181-181],
 assertTrue(ArrayUtils.contains(array, CharRange.isNot('z'))); ref {array, ArrayUtils, CharRange} [182-182],
 assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); ref {array, ArrayUtils, CharRange} [183-183]
[m[m31.08.2022 - 15:15:22.803 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testConstructor_String_oddDash has 18 assertions: 
 assertEquals(1, array.length); ref {array, array.length} [193-193],
 assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); ref {array, ArrayUtils, CharRange} [194-194],
 assertEquals(1, array.length); ref {array, array.length} [198-198],
 assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); ref {array, ArrayUtils, CharRange} [199-199],
 assertEquals(1, array.length); ref {array, array.length} [203-203],
 assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); ref {array, ArrayUtils, CharRange} [204-204],
 assertEquals(1, array.length); ref {array, array.length} [208-208],
 assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); ref {array, ArrayUtils, CharRange} [209-209],
 assertEquals(2, array.length); ref {array, array.length} [213-213],
 assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); ref {array, ArrayUtils, CharRange} [214-214],
 assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); ref {array, ArrayUtils, CharRange} [215-215],
 assertEquals(2, array.length); ref {array, array.length} [219-219],
 assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); ref {array, ArrayUtils, CharRange} [220-220],
 assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); ref {array, ArrayUtils, CharRange} [221-221],
 assertEquals(1, array.length); ref {array, array.length} [225-225],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-'))); ref {array, ArrayUtils, CharRange} [226-226],
 assertEquals(1, array.length); ref {array, array.length} [230-230],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a'))); ref {array, ArrayUtils, CharRange} [231-231]
[m[m31.08.2022 - 15:15:22.803 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testConstructor_String_oddNegate has 25 assertions: 
 assertEquals(1, array.length); ref {array, array.length} [240-240],
 // "^"
assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); ref {array, ArrayUtils, CharRange} [241-241],
 assertEquals(1, array.length); ref {array, array.length} [245-245],
 // "^^"
assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); ref {array, ArrayUtils, CharRange} [246-246],
 assertEquals(2, array.length); ref {array, array.length} [250-250],
 // "^^"
assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); ref {array, ArrayUtils, CharRange} [251-251],
 // "^"
assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); ref {array, ArrayUtils, CharRange} [252-252],
 assertEquals(1, array.length); ref {array, array.length} [256-256],
 // "^^" x2
assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); ref {array, ArrayUtils, CharRange} [257-257],
 assertEquals(2, array.length); ref {array, array.length} [261-261],
 // "a"
assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); ref {array, ArrayUtils, CharRange} [262-262],
 // "^"
assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); ref {array, ArrayUtils, CharRange} [263-263],
 assertEquals(2, array.length); ref {array, array.length} [267-267],
 // "^a"
assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); ref {array, ArrayUtils, CharRange} [268-268],
 // "-"
assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); ref {array, ArrayUtils, CharRange} [269-269],
 assertEquals(1, array.length); ref {array, array.length} [273-273],
 // "^^-c"
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); ref {array, ArrayUtils, CharRange} [274-274],
 assertEquals(1, array.length); ref {array, array.length} [278-278],
 // "^c-^"
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); ref {array, ArrayUtils, CharRange} [279-279],
 assertEquals(2, array.length); ref {array, array.length} [283-283],
 // "^c-^"
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); ref {array, ArrayUtils, CharRange} [284-284],
 // "d"
assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); ref {array, ArrayUtils, CharRange} [285-285],
 assertEquals(2, array.length); ref {array, array.length} [289-289],
 // "^^"
assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); ref {array, ArrayUtils, CharRange} [290-290],
 // "-"
assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); ref {array, ArrayUtils, CharRange} [291-291]
[m[m31.08.2022 - 15:15:22.804 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testConstructor_String_oddCombinations has 28 assertions: 
 // "a-^"
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '^'))); ref {array, ArrayUtils, CharRange} [301-301],
 // "c"
assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); ref {array, ArrayUtils, CharRange} [302-302],
 assertFalse(set.contains('b')); ref {set} [303-303],
 assertTrue(set.contains('^')); ref {set} [304-304],
 // between ^ and a
assertTrue(set.contains('_')); ref {set} [305-305],
 assertTrue(set.contains('c')); ref {set} [306-306],
 // "^a-^"
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', '^'))); ref {array, ArrayUtils, CharRange} [310-310],
 // "c"
assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); ref {array, ArrayUtils, CharRange} [311-311],
 assertTrue(set.contains('b')); ref {set} [312-312],
 assertFalse(set.contains('^')); ref {set} [313-313],
 // between ^ and a
assertFalse(set.contains('_')); ref {set} [314-314],
 // "a- "
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', ' '))); ref {array, ArrayUtils, CharRange} [318-318],
 // "^-- "
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('-', ' '))); ref {array, ArrayUtils, CharRange} [319-319],
 assertTrue(set.contains('#')); ref {set} [320-320],
 assertTrue(set.contains('^')); ref {set} [321-321],
 assertTrue(set.contains('a')); ref {set} [322-322],
 assertTrue(set.contains('*')); ref {set} [323-323],
 assertTrue(set.contains('A')); ref {set} [324-324],
 // "^-b"
assertTrue(ArrayUtils.contains(array, CharRange.isIn('^', 'b'))); ref {array, ArrayUtils, CharRange} [328-328],
 assertTrue(set.contains('b')); ref {set} [329-329],
 // between ^ and a
assertTrue(set.contains('_')); ref {set} [330-330],
 assertFalse(set.contains('A')); ref {set} [331-331],
 assertTrue(set.contains('^')); ref {set} [332-332],
 // "b-^"
assertTrue(ArrayUtils.contains(array, CharRange.isIn('^', 'b'))); ref {array, ArrayUtils, CharRange} [336-336],
 assertTrue(set.contains('b')); ref {set} [337-337],
 assertTrue(set.contains('^')); ref {set} [338-338],
 // between ^ and b
assertTrue(set.contains('a')); ref {set} [339-339],
 assertFalse(set.contains('c')); ref {set} [340-340]
[m[m31.08.2022 - 15:15:22.804 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testEquals_Object has 13 assertions: 
 assertFalse(abc.equals(null)); ref {abc} [353-353],
 assertTrue(abc.equals(abc)); ref {abc} [355-355],
 assertTrue(abc.equals(abc2)); ref {abc, abc2} [356-356],
 assertFalse(abc.equals(atoc)); ref {abc, atoc} [357-357],
 assertFalse(abc.equals(notatoc)); ref {abc, notatoc} [358-358],
 assertFalse(atoc.equals(abc)); ref {abc, atoc} [360-360],
 assertTrue(atoc.equals(atoc)); ref {atoc} [361-361],
 assertTrue(atoc.equals(atoc2)); ref {atoc2, atoc} [362-362],
 assertFalse(atoc.equals(notatoc)); ref {atoc, notatoc} [363-363],
 assertFalse(notatoc.equals(abc)); ref {abc, notatoc} [365-365],
 assertFalse(notatoc.equals(atoc)); ref {atoc, notatoc} [366-366],
 assertTrue(notatoc.equals(notatoc)); ref {notatoc} [367-367],
 assertTrue(notatoc.equals(notatoc2)); ref {notatoc2, notatoc} [368-368]
[m[m31.08.2022 - 15:15:22.804 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testHashCode has 6 assertions: 
 assertEquals(abc.hashCode(), abc.hashCode()); ref {abc} [380-380],
 assertEquals(abc.hashCode(), abc2.hashCode()); ref {abc, abc2} [381-381],
 assertEquals(atoc.hashCode(), atoc.hashCode()); ref {atoc} [382-382],
 assertEquals(atoc.hashCode(), atoc2.hashCode()); ref {atoc2, atoc} [383-383],
 assertEquals(notatoc.hashCode(), notatoc.hashCode()); ref {notatoc} [384-384],
 assertEquals(notatoc.hashCode(), notatoc2.hashCode()); ref {notatoc2, notatoc} [385-385]
[m[m31.08.2022 - 15:15:22.804 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testContains_Char has 27 assertions: 
 assertFalse(btod.contains('a')); ref {btod} [397-397],
 assertTrue(btod.contains('b')); ref {btod} [398-398],
 assertTrue(btod.contains('c')); ref {btod} [399-399],
 assertTrue(btod.contains('d')); ref {btod} [400-400],
 assertFalse(btod.contains('e')); ref {btod} [401-401],
 assertFalse(bcd.contains('a')); ref {bcd} [403-403],
 assertTrue(bcd.contains('b')); ref {bcd} [404-404],
 assertTrue(bcd.contains('c')); ref {bcd} [405-405],
 assertTrue(bcd.contains('d')); ref {bcd} [406-406],
 assertFalse(bcd.contains('e')); ref {bcd} [407-407],
 assertFalse(bd.contains('a')); ref {bd} [409-409],
 assertTrue(bd.contains('b')); ref {bd} [410-410],
 assertFalse(bd.contains('c')); ref {bd} [411-411],
 assertTrue(bd.contains('d')); ref {bd} [412-412],
 assertFalse(bd.contains('e')); ref {bd} [413-413],
 assertTrue(notbtod.contains('a')); ref {notbtod} [415-415],
 assertFalse(notbtod.contains('b')); ref {notbtod} [416-416],
 assertFalse(notbtod.contains('c')); ref {notbtod} [417-417],
 assertFalse(notbtod.contains('d')); ref {notbtod} [418-418],
 assertTrue(notbtod.contains('e')); ref {notbtod} [419-419],
 assertFalse(dtob.contains('a')); ref {dtob} [421-421],
 assertTrue(dtob.contains('b')); ref {dtob} [422-422],
 assertTrue(dtob.contains('c')); ref {dtob} [423-423],
 assertTrue(dtob.contains('d')); ref {dtob} [424-424],
 assertFalse(dtob.contains('e')); ref {dtob} [425-425],
 assertEquals("[b-d]", dtob.toString()); ref {dtob} [428-428],
 assertEquals(1, array.length); ref {array, array.length} [429-429]
[m[m31.08.2022 - 15:15:22.804 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testSerialization has 3 assertions: 
 assertEquals(set, SerializationUtils.clone(set)); ref {set, SerializationUtils} [436-436],
 assertEquals(set, SerializationUtils.clone(set)); ref {set, SerializationUtils} [438-438],
 assertEquals(set, SerializationUtils.clone(set)); ref {set, SerializationUtils} [440-440]
[m[m31.08.2022 - 15:15:22.805 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetTest::testStatics has 10 assertions: 
 assertEquals(0, array.length); ref {array, array.length} [449-449],
 assertEquals(2, array.length); ref {array, array.length} [452-452],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z'))); ref {array, ArrayUtils, CharRange} [453-453],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z'))); ref {array, ArrayUtils, CharRange} [454-454],
 assertEquals(1, array.length); ref {array, array.length} [457-457],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z'))); ref {array, ArrayUtils, CharRange} [458-458],
 assertEquals(1, array.length); ref {array, array.length} [461-461],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z'))); ref {array, ArrayUtils, CharRange} [462-462],
 assertEquals(1, array.length); ref {array, array.length} [465-465],
 assertTrue(ArrayUtils.contains(array, CharRange.isIn('0', '9'))); ref {array, ArrayUtils, CharRange} [466-466]
[m[m31.08.2022 - 15:15:22.820 [INFO ] ParsingStrategy.parseTestSuite() - Found 44 test cases
[m[m31.08.2022 - 15:15:22.820 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testConstructorExZero has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.820 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testConstructorExEvenFirst has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.820 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testConstructorExEvenSecond has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.820 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testConstructorExEvenNegative has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.821 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testReflectionHashCode has 2 assertions: 
 assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); ref {HashCodeBuilder} [147-147],
 assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); ref {HashCodeBuilder} [148-148]
[m[m31.08.2022 - 15:15:22.821 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testReflectionHierarchyHashCode has 4 assertions: 
 assertEquals(17 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0))); ref {HashCodeBuilder} [153-153],
 assertEquals(17 * 37 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0), true)); ref {HashCodeBuilder} [154-154],
 assertEquals((17 * 37 + 7890) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890, 0))); ref {HashCodeBuilder} [155-156],
 assertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890, 0), true)); ref {HashCodeBuilder} [157-158]
[m[m31.08.2022 - 15:15:22.821 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testReflectionHierarchyHashCodeEx1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.821 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testReflectionHierarchyHashCodeEx2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.821 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testReflectionHashCodeEx1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.821 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testReflectionHashCodeEx2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.821 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testReflectionHashCodeEx3 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.821 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testSuper has 1 assertions: 
 assertEquals(17 * 37 + 19 * 41 + obj.hashCode(), new HashCodeBuilder(17, 37).appendSuper(new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode()); ref {obj} [189-190]
[m[m31.08.2022 - 15:15:22.822 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testObject has 2 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [196-196],
 assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [198-198]
[m[m31.08.2022 - 15:15:22.822 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testObjectBuild has 2 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).build().intValue()); ref {obj} [204-204],
 assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).build().intValue()); ref {obj} [206-206]
[m[m31.08.2022 - 15:15:22.822 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testLong has 2 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long) 0L).toHashCode()); ref {} [212-212],
 assertEquals(17 * 37 + (int) (123456789L ^ 123456789L >> 32), new HashCodeBuilder(17, 37).append((long) 123456789L).toHashCode()); ref {} [213-214]
[m[m31.08.2022 - 15:15:22.822 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testInt has 2 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int) 0).toHashCode()); ref {} [220-220],
 assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append((int) 123456).toHashCode()); ref {} [221-221]
[m[m31.08.2022 - 15:15:22.822 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testShort has 2 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode()); ref {} [226-226],
 assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode()); ref {} [227-227]
[m[m31.08.2022 - 15:15:22.822 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testChar has 2 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode()); ref {} [232-232],
 assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode()); ref {} [233-233]
[m[m31.08.2022 - 15:15:22.822 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testByte has 2 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode()); ref {} [238-238],
 assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode()); ref {} [239-239]
[m[m31.08.2022 - 15:15:22.823 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testDouble has 2 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double) 0d).toHashCode()); ref {} [245-245],
 assertEquals(17 * 37 + (int) (l ^ l >> 32), new HashCodeBuilder(17, 37).append(d).toHashCode()); ref {d, l} [248-248]
[m[m31.08.2022 - 15:15:22.823 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testFloat has 2 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode()); ref {} [254-254],
 assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode()); ref {f, i} [257-257]
[m[m31.08.2022 - 15:15:22.823 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testBoolean has 2 assertions: 
 assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode()); ref {} [262-262],
 assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode()); ref {} [263-263]
[m[m31.08.2022 - 15:15:22.823 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testObjectArray has 4 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode()); ref {} [268-268],
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [270-270],
 assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [272-272],
 assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [274-275]
[m[m31.08.2022 - 15:15:22.823 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testObjectArrayAsObject has 3 assertions: 
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [281-281],
 assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [283-283],
 assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [285-286]
[m[m31.08.2022 - 15:15:22.823 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testLongArray has 4 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode()); ref {} [291-291],
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [293-293],
 assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj, h1} [296-296],
 assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj, h1, h2} [299-299]
[m[m31.08.2022 - 15:15:22.823 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testLongArrayAsObject has 3 assertions: 
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [305-305],
 assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj, h1} [308-308],
 assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj, h1, h2} [311-311]
[m[m31.08.2022 - 15:15:22.824 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testIntArray has 4 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode()); ref {} [316-316],
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [318-318],
 assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [320-320],
 assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [322-322]
[m[m31.08.2022 - 15:15:22.824 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testIntArrayAsObject has 3 assertions: 
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [328-328],
 assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [330-330],
 assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [332-332]
[m[m31.08.2022 - 15:15:22.824 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testShortArray has 4 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); ref {} [337-337],
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [339-339],
 assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [341-341],
 assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [343-343]
[m[m31.08.2022 - 15:15:22.824 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testShortArrayAsObject has 3 assertions: 
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [349-349],
 assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [351-351],
 assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [353-353]
[m[m31.08.2022 - 15:15:22.824 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testCharArray has 4 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode()); ref {} [358-358],
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [360-360],
 assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [362-362],
 assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [364-364]
[m[m31.08.2022 - 15:15:22.824 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testCharArrayAsObject has 3 assertions: 
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [370-370],
 assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [372-372],
 assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [374-374]
[m[m31.08.2022 - 15:15:22.825 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testByteArray has 4 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode()); ref {} [379-379],
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [381-381],
 assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [383-383],
 assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [385-385]
[m[m31.08.2022 - 15:15:22.825 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testByteArrayAsObject has 3 assertions: 
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [391-391],
 assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [393-393],
 assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [395-395]
[m[m31.08.2022 - 15:15:22.825 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testDoubleArray has 4 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode()); ref {} [400-400],
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [402-402],
 assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj, h1} [406-406],
 assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj, h1, h2} [410-410]
[m[m31.08.2022 - 15:15:22.825 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testDoubleArrayAsObject has 3 assertions: 
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [416-416],
 assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj, h1} [420-420],
 assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj, h1, h2} [424-424]
[m[m31.08.2022 - 15:15:22.825 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testFloatArray has 4 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode()); ref {} [429-429],
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [431-431],
 assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj, h1} [434-434],
 assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj, h1, h2} [437-437]
[m[m31.08.2022 - 15:15:22.825 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testFloatArrayAsObject has 3 assertions: 
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [443-443],
 assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj, h1} [446-446],
 assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj, h1, h2} [449-449]
[m[m31.08.2022 - 15:15:22.825 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testBooleanArray has 4 assertions: 
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode()); ref {} [454-454],
 assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [456-456],
 assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [458-458],
 assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [460-460]
[m[m31.08.2022 - 15:15:22.826 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testBooleanArrayAsObject has 3 assertions: 
 assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [466-466],
 assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [468-468],
 assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); ref {obj} [470-470]
[m[m31.08.2022 - 15:15:22.826 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testBooleanMultiArray has 6 assertions: 
 assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [476-476],
 assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [478-478],
 assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [480-480],
 assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [482-482],
 assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [484-484],
 assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); ref {obj} [486-486]
[m[m31.08.2022 - 15:15:22.826 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testReflectionHashCodeExcludeFields has 9 assertions: 
 assertEquals(((17 * 37 + 1) * 37 + 2) * 37 + 3, HashCodeBuilder.reflectionHashCode(x)); ref {HashCodeBuilder, x} [493-493],
 assertEquals(((17 * 37 + 1) * 37 + 2) * 37 + 3, HashCodeBuilder.reflectionHashCode(x, (String[]) null)); ref {HashCodeBuilder, x} [495-495],
 assertEquals(((17 * 37 + 1) * 37 + 2) * 37 + 3, HashCodeBuilder.reflectionHashCode(x, new String[] {})); ref {HashCodeBuilder, x} [496-496],
 assertEquals(((17 * 37 + 1) * 37 + 2) * 37 + 3, HashCodeBuilder.reflectionHashCode(x, new String[] { "xxx" })); ref {HashCodeBuilder, x} [497-497],
 assertEquals((17 * 37 + 1) * 37 + 3, HashCodeBuilder.reflectionHashCode(x, new String[] { "two" })); ref {HashCodeBuilder, x} [499-499],
 assertEquals((17 * 37 + 1) * 37 + 2, HashCodeBuilder.reflectionHashCode(x, new String[] { "three" })); ref {HashCodeBuilder, x} [500-500],
 assertEquals(17 * 37 + 1, HashCodeBuilder.reflectionHashCode(x, new String[] { "two", "three" })); ref {HashCodeBuilder, x} [502-502],
 assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[] { "one", "two", "three" })); ref {HashCodeBuilder, x} [504-504],
 assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[] { "one", "two", "three", "xxx" })); ref {HashCodeBuilder, x} [505-505]
[m[m31.08.2022 - 15:15:22.826 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testReflectionObjectCycle has 2 assertions: 
 assertNull(HashCodeBuilder.getRegistry()); ref {HashCodeBuilder} [553-553],
 assertNull(HashCodeBuilder.getRegistry()); ref {HashCodeBuilder} [555-555]
[m[m31.08.2022 - 15:15:22.826 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderTest::testToHashCodeEqualsHashCode has 1 assertions: 
 assertEquals("hashCode() is no longer returning the same value as toHashCode() - see LANG-520", hcb.toHashCode(), hcb.hashCode()); ref {hcb} [564-565]
[m[m31.08.2022 - 15:15:22.827 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 15:15:22.827 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest::testLinkedList has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.827 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest::testArrayList has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.827 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest::testCopyOnWriteArrayList has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.834 [INFO ] ParsingStrategy.parseTestSuite() - Found 24 test cases
[m[m31.08.2022 - 15:15:22.834 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testComparableConstructors has 2 assertions: 
 assertEquals(true, r1.isNaturalOrdering()); ref {r1} [77-77],
 assertEquals(true, r2.isNaturalOrdering()); ref {r2} [78-78]
[m[m31.08.2022 - 15:15:22.834 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testIsWithCompare has 6 assertions: 
 assertFalse("should not contain null", ri.contains(null)); ref {ri} [90-90],
 assertTrue("should contain 10", ri.contains(10)); ref {ri} [91-91],
 assertFalse("should not contain 11", ri.contains(11)); ref {ri} [92-92],
 assertFalse("should not contain null", ri.contains(null)); ref {ri} [94-94],
 assertTrue("should contain 10", ri.contains(10)); ref {ri} [95-95],
 assertTrue("should contain 11", ri.contains(11)); ref {ri} [96-96]
[m[m31.08.2022 - 15:15:22.835 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testBetweenWithCompare has 10 assertions: 
 assertFalse("should not contain null", rb.contains(null)); ref {rb} [109-109],
 assertTrue("should contain 10", rb.contains(10)); ref {rb} [110-110],
 assertTrue("should contain -10", rb.contains(-10)); ref {rb} [111-111],
 assertFalse("should not contain 21", rb.contains(21)); ref {rb} [112-112],
 assertFalse("should not contain -11", rb.contains(-11)); ref {rb} [113-113],
 assertFalse("should not contain null", rb.contains(null)); ref {rb} [115-115],
 assertTrue("should contain 10", rb.contains(10)); ref {rb} [116-116],
 assertTrue("should contain -10", rb.contains(-10)); ref {rb} [117-117],
 assertTrue("should contain 21", rb.contains(21)); ref {rb} [118-118],
 assertTrue("should contain -11", rb.contains(-11)); ref {rb} [119-119]
[m[m31.08.2022 - 15:15:22.835 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testRangeOfChars has 2 assertions: 
 assertTrue(chars.contains('b')); ref {chars} [126-126],
 assertFalse(chars.contains('B')); ref {chars} [127-127]
[m[m31.08.2022 - 15:15:22.835 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testEqualsObject has 9 assertions: 
 assertEquals(byteRange, byteRange); ref {byteRange} [133-133],
 assertEquals(byteRange, byteRange2); ref {byteRange2, byteRange} [134-134],
 assertEquals(byteRange2, byteRange2); ref {byteRange2} [135-135],
 assertTrue(byteRange.equals(byteRange)); ref {byteRange} [136-136],
 assertTrue(byteRange2.equals(byteRange2)); ref {byteRange2} [137-137],
 assertTrue(byteRange3.equals(byteRange3)); ref {byteRange3} [138-138],
 assertFalse(byteRange2.equals(byteRange3)); ref {byteRange3, byteRange2} [139-139],
 assertFalse(byteRange2.equals(null)); ref {byteRange2} [140-140],
 assertFalse(byteRange2.equals("Ni!")); ref {byteRange2} [141-141]
[m[m31.08.2022 - 15:15:22.835 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testHashCode has 4 assertions: 
 assertEquals(byteRange.hashCode(), byteRange2.hashCode()); ref {byteRange2, byteRange} [146-146],
 assertFalse(byteRange.hashCode() == byteRange3.hashCode()); ref {byteRange3, byteRange} [147-147],
 assertEquals(intRange.hashCode(), intRange.hashCode()); ref {intRange} [149-149],
 assertTrue(intRange.hashCode() != 0); ref {intRange} [150-150]
[m[m31.08.2022 - 15:15:22.835 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testToString has 3 assertions: 
 assertNotNull(byteRange.toString()); ref {byteRange} [155-155],
 assertEquals("[10..20]", str); ref {str} [158-158],
 assertEquals("[-20..-10]", Range.between(-20, -10).toString()); ref {Range} [159-159]
[m[m31.08.2022 - 15:15:22.835 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testToStringFormat has 1 assertions: 
 assertEquals("From 10 to 20", str); ref {str} [165-165]
[m[m31.08.2022 - 15:15:22.835 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testGetMinimum has 4 assertions: 
 assertEquals(10, (int) intRange.getMinimum()); ref {intRange} [171-171],
 assertEquals(10L, (long) longRange.getMinimum()); ref {longRange} [172-172],
 assertEquals(10f, floatRange.getMinimum(), 0.00001f); ref {floatRange} [173-173],
 assertEquals(10d, doubleRange.getMinimum(), 0.00001d); ref {doubleRange} [174-174]
[m[m31.08.2022 - 15:15:22.835 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testGetMaximum has 4 assertions: 
 assertEquals(20, (int) intRange.getMaximum()); ref {intRange} [179-179],
 assertEquals(20L, (long) longRange.getMaximum()); ref {longRange} [180-180],
 assertEquals(20f, floatRange.getMaximum(), 0.00001f); ref {floatRange} [181-181],
 assertEquals(20d, doubleRange.getMaximum(), 0.00001d); ref {doubleRange} [182-182]
[m[m31.08.2022 - 15:15:22.835 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testContains has 6 assertions: 
 assertFalse(intRange.contains(null)); ref {intRange} [187-187],
 assertFalse(intRange.contains(5)); ref {intRange} [189-189],
 assertTrue(intRange.contains(10)); ref {intRange} [190-190],
 assertTrue(intRange.contains(15)); ref {intRange} [191-191],
 assertTrue(intRange.contains(20)); ref {intRange} [192-192],
 assertFalse(intRange.contains(25)); ref {intRange} [193-193]
[m[m31.08.2022 - 15:15:22.835 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testIsAfter has 6 assertions: 
 assertFalse(intRange.isAfter(null)); ref {intRange} [198-198],
 assertTrue(intRange.isAfter(5)); ref {intRange} [200-200],
 assertFalse(intRange.isAfter(10)); ref {intRange} [201-201],
 assertFalse(intRange.isAfter(15)); ref {intRange} [202-202],
 assertFalse(intRange.isAfter(20)); ref {intRange} [203-203],
 assertFalse(intRange.isAfter(25)); ref {intRange} [204-204]
[m[m31.08.2022 - 15:15:22.836 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testIsStartedBy has 6 assertions: 
 assertFalse(intRange.isStartedBy(null)); ref {intRange} [209-209],
 assertFalse(intRange.isStartedBy(5)); ref {intRange} [211-211],
 assertTrue(intRange.isStartedBy(10)); ref {intRange} [212-212],
 assertFalse(intRange.isStartedBy(15)); ref {intRange} [213-213],
 assertFalse(intRange.isStartedBy(20)); ref {intRange} [214-214],
 assertFalse(intRange.isStartedBy(25)); ref {intRange} [215-215]
[m[m31.08.2022 - 15:15:22.836 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testIsEndedBy has 6 assertions: 
 assertFalse(intRange.isEndedBy(null)); ref {intRange} [220-220],
 assertFalse(intRange.isEndedBy(5)); ref {intRange} [222-222],
 assertFalse(intRange.isEndedBy(10)); ref {intRange} [223-223],
 assertFalse(intRange.isEndedBy(15)); ref {intRange} [224-224],
 assertTrue(intRange.isEndedBy(20)); ref {intRange} [225-225],
 assertFalse(intRange.isEndedBy(25)); ref {intRange} [226-226]
[m[m31.08.2022 - 15:15:22.836 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testIsBefore has 6 assertions: 
 assertFalse(intRange.isBefore(null)); ref {intRange} [231-231],
 assertFalse(intRange.isBefore(5)); ref {intRange} [233-233],
 assertFalse(intRange.isBefore(10)); ref {intRange} [234-234],
 assertFalse(intRange.isBefore(15)); ref {intRange} [235-235],
 assertFalse(intRange.isBefore(20)); ref {intRange} [236-236],
 assertTrue(intRange.isBefore(25)); ref {intRange} [237-237]
[m[m31.08.2022 - 15:15:22.836 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testElementCompareTo has 5 assertions: 
 assertEquals(-1, intRange.elementCompareTo(5)); ref {intRange} [249-249],
 assertEquals(0, intRange.elementCompareTo(10)); ref {intRange} [250-250],
 assertEquals(0, intRange.elementCompareTo(15)); ref {intRange} [251-251],
 assertEquals(0, intRange.elementCompareTo(20)); ref {intRange} [252-252],
 assertEquals(1, intRange.elementCompareTo(25)); ref {intRange} [253-253]
[m[m31.08.2022 - 15:15:22.836 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testContainsRange has 12 assertions: 
 // null handling
assertFalse(intRange.containsRange(null)); ref {intRange} [261-261],
 // easy inside range
assertTrue(intRange.containsRange(Range.between(12, 18))); ref {intRange, Range} [264-264],
 // outside range on each side
assertFalse(intRange.containsRange(Range.between(32, 45))); ref {intRange, Range} [267-267],
 assertFalse(intRange.containsRange(Range.between(2, 8))); ref {intRange, Range} [268-268],
 // equals range
assertTrue(intRange.containsRange(Range.between(10, 20))); ref {intRange, Range} [271-271],
 // overlaps
assertFalse(intRange.containsRange(Range.between(9, 14))); ref {intRange, Range} [274-274],
 assertFalse(intRange.containsRange(Range.between(16, 21))); ref {intRange, Range} [275-275],
 // touches lower boundary
assertTrue(intRange.containsRange(Range.between(10, 19))); ref {intRange, Range} [278-278],
 assertFalse(intRange.containsRange(Range.between(10, 21))); ref {intRange, Range} [279-279],
 // touches upper boundary
assertTrue(intRange.containsRange(Range.between(11, 20))); ref {intRange, Range} [282-282],
 assertFalse(intRange.containsRange(Range.between(9, 20))); ref {intRange, Range} [283-283],
 // negative
assertFalse(intRange.containsRange(Range.between(-11, -18))); ref {intRange, Range} [286-286]
[m[m31.08.2022 - 15:15:22.836 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testIsAfterRange has 8 assertions: 
 assertFalse(intRange.isAfterRange(null)); ref {intRange} [291-291],
 assertTrue(intRange.isAfterRange(Range.between(5, 9))); ref {intRange, Range} [293-293],
 assertFalse(intRange.isAfterRange(Range.between(5, 10))); ref {intRange, Range} [295-295],
 assertFalse(intRange.isAfterRange(Range.between(5, 20))); ref {intRange, Range} [296-296],
 assertFalse(intRange.isAfterRange(Range.between(5, 25))); ref {intRange, Range} [297-297],
 assertFalse(intRange.isAfterRange(Range.between(15, 25))); ref {intRange, Range} [298-298],
 assertFalse(intRange.isAfterRange(Range.between(21, 25))); ref {intRange, Range} [300-300],
 assertFalse(intRange.isAfterRange(Range.between(10, 20))); ref {intRange, Range} [302-302]
[m[m31.08.2022 - 15:15:22.836 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testIsOverlappedBy has 12 assertions: 
 // null handling
assertFalse(intRange.isOverlappedBy(null)); ref {intRange} [309-309],
 // easy inside range
assertTrue(intRange.isOverlappedBy(Range.between(12, 18))); ref {intRange, Range} [312-312],
 // outside range on each side
assertFalse(intRange.isOverlappedBy(Range.between(32, 45))); ref {intRange, Range} [315-315],
 assertFalse(intRange.isOverlappedBy(Range.between(2, 8))); ref {intRange, Range} [316-316],
 // equals range
assertTrue(intRange.isOverlappedBy(Range.between(10, 20))); ref {intRange, Range} [319-319],
 // overlaps
assertTrue(intRange.isOverlappedBy(Range.between(9, 14))); ref {intRange, Range} [322-322],
 assertTrue(intRange.isOverlappedBy(Range.between(16, 21))); ref {intRange, Range} [323-323],
 // touches lower boundary
assertTrue(intRange.isOverlappedBy(Range.between(10, 19))); ref {intRange, Range} [326-326],
 assertTrue(intRange.isOverlappedBy(Range.between(10, 21))); ref {intRange, Range} [327-327],
 // touches upper boundary
assertTrue(intRange.isOverlappedBy(Range.between(11, 20))); ref {intRange, Range} [330-330],
 assertTrue(intRange.isOverlappedBy(Range.between(9, 20))); ref {intRange, Range} [331-331],
 // negative
assertFalse(intRange.isOverlappedBy(Range.between(-11, -18))); ref {intRange, Range} [334-334]
[m[m31.08.2022 - 15:15:22.837 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testIsBeforeRange has 8 assertions: 
 assertFalse(intRange.isBeforeRange(null)); ref {intRange} [339-339],
 assertFalse(intRange.isBeforeRange(Range.between(5, 9))); ref {intRange, Range} [341-341],
 assertFalse(intRange.isBeforeRange(Range.between(5, 10))); ref {intRange, Range} [343-343],
 assertFalse(intRange.isBeforeRange(Range.between(5, 20))); ref {intRange, Range} [344-344],
 assertFalse(intRange.isBeforeRange(Range.between(5, 25))); ref {intRange, Range} [345-345],
 assertFalse(intRange.isBeforeRange(Range.between(15, 25))); ref {intRange, Range} [346-346],
 assertTrue(intRange.isBeforeRange(Range.between(21, 25))); ref {intRange, Range} [348-348],
 assertFalse(intRange.isBeforeRange(Range.between(10, 20))); ref {intRange, Range} [350-350]
[m[m31.08.2022 - 15:15:22.837 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testIntersectionWith has 6 assertions: 
 assertSame(intRange, intRange.intersectionWith(intRange)); ref {intRange} [355-355],
 assertSame(byteRange, byteRange.intersectionWith(byteRange)); ref {byteRange} [356-356],
 assertSame(longRange, longRange.intersectionWith(longRange)); ref {longRange} [357-357],
 assertSame(floatRange, floatRange.intersectionWith(floatRange)); ref {floatRange} [358-358],
 assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); ref {doubleRange} [359-359],
 assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); ref {intRange, Range} [361-361]
[m[m31.08.2022 - 15:15:22.837 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testIntersectionWithNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.837 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testIntersectionWithNonOverlapping has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.837 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RangeTest::testSerializing has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.839 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:22.839 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutablePairTest::testBasic has 4 assertions: 
 assertEquals(0, pair.getLeft().intValue()); ref {pair} [40-40],
 assertEquals("foo", pair.getRight()); ref {pair} [41-41],
 assertNull(pair2.getLeft()); ref {pair2} [43-43],
 assertEquals("bar", pair2.getRight()); ref {pair2} [44-44]
[m[m31.08.2022 - 15:15:22.840 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutablePairTest::testDefault has 2 assertions: 
 assertNull(pair.getLeft()); ref {pair} [50-50],
 assertNull(pair.getRight()); ref {pair} [51-51]
[m[m31.08.2022 - 15:15:22.840 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutablePairTest::testMutate has 2 assertions: 
 assertEquals(42, pair.getLeft().intValue()); ref {pair} [59-59],
 assertEquals("bar", pair.getRight()); ref {pair} [60-60]
[m[m31.08.2022 - 15:15:22.840 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutablePairTest::testPairOf has 4 assertions: 
 assertEquals(0, pair.getLeft().intValue()); ref {pair} [66-66],
 assertEquals("foo", pair.getRight()); ref {pair} [67-67],
 assertNull(pair2.getLeft()); ref {pair2} [69-69],
 assertEquals("bar", pair2.getRight()); ref {pair2} [70-70]
[m[m31.08.2022 - 15:15:22.840 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutablePairTest::testEquals has 5 assertions: 
 assertEquals(MutablePair.of(null, "foo"), MutablePair.of(null, "foo")); ref {MutablePair} [75-75],
 assertFalse(MutablePair.of("foo", 0).equals(MutablePair.of("foo", null))); ref {MutablePair} [76-76],
 assertFalse(MutablePair.of("foo", "bar").equals(MutablePair.of("xyz", "bar"))); ref {MutablePair} [77-77],
 assertTrue(p.equals(p)); ref {p} [80-80],
 assertFalse(p.equals(new Object())); ref {p} [81-81]
[m[m31.08.2022 - 15:15:22.840 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutablePairTest::testHashCode has 1 assertions: 
 assertEquals(MutablePair.of(null, "foo").hashCode(), MutablePair.of(null, "foo").hashCode()); ref {MutablePair} [86-86]
[m[m31.08.2022 - 15:15:22.840 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutablePairTest::testToString has 4 assertions: 
 assertEquals("(null,null)", MutablePair.of(null, null).toString()); ref {MutablePair} [91-91],
 assertEquals("(null,two)", MutablePair.of(null, "two").toString()); ref {MutablePair} [92-92],
 assertEquals("(one,null)", MutablePair.of("one", null).toString()); ref {MutablePair} [93-93],
 assertEquals("(one,two)", MutablePair.of("one", "two").toString()); ref {MutablePair} [94-94]
[m[m31.08.2022 - 15:15:22.840 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutablePairTest::testSerialization has 2 assertions: 
 assertEquals(origPair, deserializedPair); ref {deserializedPair, origPair} [106-106],
 assertEquals(origPair.hashCode(), deserializedPair.hashCode()); ref {deserializedPair, origPair} [107-107]
[m[m31.08.2022 - 15:15:22.840 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:22.861 [INFO ] ParsingStrategy.parseTestSuite() - Found 48 test cases
[m[m31.08.2022 - 15:15:22.862 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testReflectionEquals has 7 assertions: 
 assertTrue(EqualsBuilder.reflectionEquals(o1, o1)); ref {o1, EqualsBuilder} [155-155],
 assertTrue(!EqualsBuilder.reflectionEquals(o1, o2)); ref {o1, o2, EqualsBuilder} [156-156],
 assertTrue(EqualsBuilder.reflectionEquals(o1, o2)); ref {o1, o2, EqualsBuilder} [158-158],
 assertTrue(!EqualsBuilder.reflectionEquals(o1, this)); ref {o1, EqualsBuilder} [160-160],
 assertTrue(!EqualsBuilder.reflectionEquals(o1, null)); ref {o1, EqualsBuilder} [162-162],
 assertTrue(!EqualsBuilder.reflectionEquals(null, o2)); ref {o2, EqualsBuilder} [163-163],
 assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null)); ref {EqualsBuilder} [164-164]
[m[m31.08.2022 - 15:15:22.862 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testReflectionHierarchyEquals has 5 assertions: 
 // Transients
assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true)); ref {EqualsBuilder} [172-172],
 assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false)); ref {EqualsBuilder} [173-173],
 assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true)); ref {EqualsBuilder} [174-174],
 assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true)); ref {EqualsBuilder} [175-175],
 assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true)); ref {EqualsBuilder} [176-176]
[m[m31.08.2022 - 15:15:22.862 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testSuper has 4 assertions: 
 assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); ref {o1} [298-298],
 assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); ref {o1} [299-299],
 assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); ref {o1, o2} [300-300],
 assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); ref {o1, o2} [301-301]
[m[m31.08.2022 - 15:15:22.862 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testObject has 7 assertions: 
 assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); ref {o1} [308-308],
 assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); ref {o1, o2} [309-309],
 assertTrue(new EqualsBuilder().append(o1, o2).isEquals()); ref {o1, o2} [311-311],
 assertTrue(!new EqualsBuilder().append(o1, this).isEquals()); ref {o1} [313-313],
 assertTrue(!new EqualsBuilder().append(o1, null).isEquals()); ref {o1} [315-315],
 assertTrue(!new EqualsBuilder().append(null, o2).isEquals()); ref {o2} [316-316],
 assertTrue(new EqualsBuilder().append((Object) null, (Object) null).isEquals()); ref {} [317-317]
[m[m31.08.2022 - 15:15:22.862 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testObjectBuild has 7 assertions: 
 assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o1).build()); ref {Boolean.TRUE, o1, Boolean} [324-324],
 assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, o2).build()); ref {o1, o2, Boolean.FALSE, Boolean} [325-325],
 assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o2).build()); ref {Boolean.TRUE, o1, o2, Boolean} [327-327],
 assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, this).build()); ref {o1, Boolean.FALSE, Boolean} [329-329],
 assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, null).build()); ref {o1, Boolean.FALSE, Boolean} [331-331],
 assertEquals(Boolean.FALSE, new EqualsBuilder().append(null, o2).build()); ref {o2, Boolean.FALSE, Boolean} [332-332],
 assertEquals(Boolean.TRUE, new EqualsBuilder().append((Object) null, (Object) null).build()); ref {Boolean.TRUE, Boolean} [333-333]
[m[m31.08.2022 - 15:15:22.862 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testLong has 2 assertions: 
 assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); ref {o1} [340-340],
 assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); ref {o1, o2} [341-341]
[m[m31.08.2022 - 15:15:22.862 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testInt has 2 assertions: 
 assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); ref {o1} [348-348],
 assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); ref {o1, o2} [349-349]
[m[m31.08.2022 - 15:15:22.862 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testShort has 2 assertions: 
 assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); ref {o1} [356-356],
 assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); ref {o1, o2} [357-357]
[m[m31.08.2022 - 15:15:22.862 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testChar has 2 assertions: 
 assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); ref {o1} [364-364],
 assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); ref {o1, o2} [365-365]
[m[m31.08.2022 - 15:15:22.863 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testByte has 2 assertions: 
 assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); ref {o1} [372-372],
 assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); ref {o1, o2} [373-373]
[m[m31.08.2022 - 15:15:22.863 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testDouble has 5 assertions: 
 assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); ref {o1} [380-380],
 assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); ref {o1, o2} [381-381],
 assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals()); ref {o1, Double.NaN, Double} [382-382],
 assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals()); ref {Double.NaN, Double} [383-383],
 assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals()); ref {Double.POSITIVE_INFINITY, Double} [384-384]
[m[m31.08.2022 - 15:15:22.863 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testFloat has 5 assertions: 
 assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); ref {o1} [391-391],
 assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); ref {o1, o2} [392-392],
 assertTrue(!new EqualsBuilder().append(o1, Float.NaN).isEquals()); ref {Float, o1, Float.NaN} [393-393],
 assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals()); ref {Float, Float.NaN} [394-394],
 assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals()); ref {Float, Float.POSITIVE_INFINITY} [395-395]
[m[m31.08.2022 - 15:15:22.863 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testAccessors has 3 assertions: 
 assertTrue(equalsBuilder.isEquals()); ref {equalsBuilder} [401-401],
 assertTrue(equalsBuilder.isEquals()); ref {equalsBuilder} [403-403],
 assertFalse(equalsBuilder.isEquals()); ref {equalsBuilder} [405-405]
[m[m31.08.2022 - 15:15:22.863 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testReset has 3 assertions: 
 assertTrue(equalsBuilder.isEquals()); ref {equalsBuilder} [411-411],
 assertFalse(equalsBuilder.isEquals()); ref {equalsBuilder} [413-413],
 assertTrue(equalsBuilder.isEquals()); ref {equalsBuilder} [415-415]
[m[m31.08.2022 - 15:15:22.863 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testBoolean has 2 assertions: 
 assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); ref {o1} [422-422],
 assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); ref {o1, o2} [423-423]
[m[m31.08.2022 - 15:15:22.863 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testObjectArray has 9 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [437-437],
 assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals()); ref {obj2} [438-438],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [439-439],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [441-441],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [443-443],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [445-445],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [447-447],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [450-450],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [452-452]
[m[m31.08.2022 - 15:15:22.863 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testLongArray has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [463-463],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [464-464],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [466-466],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [469-469],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [471-471]
[m[m31.08.2022 - 15:15:22.863 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testIntArray has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [482-482],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [483-483],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [485-485],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [488-488],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [490-490]
[m[m31.08.2022 - 15:15:22.863 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testShortArray has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [501-501],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [502-502],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [504-504],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [507-507],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [509-509]
[m[m31.08.2022 - 15:15:22.864 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testCharArray has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [520-520],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [521-521],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [523-523],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [526-526],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [528-528]
[m[m31.08.2022 - 15:15:22.864 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testByteArray has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [539-539],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [540-540],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [542-542],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [545-545],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [547-547]
[m[m31.08.2022 - 15:15:22.864 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testDoubleArray has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [558-558],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [559-559],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [561-561],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [564-564],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [566-566]
[m[m31.08.2022 - 15:15:22.864 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testFloatArray has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [577-577],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [578-578],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [580-580],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [583-583],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [585-585]
[m[m31.08.2022 - 15:15:22.864 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testBooleanArray has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [596-596],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [597-597],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [599-599],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [602-602],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [604-604]
[m[m31.08.2022 - 15:15:22.864 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testMultiLongArray has 3 assertions: 
 assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); ref {array1} [617-617],
 assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [618-618],
 assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [620-620]
[m[m31.08.2022 - 15:15:22.864 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testMultiIntArray has 3 assertions: 
 assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); ref {array1} [633-633],
 assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [634-634],
 assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [636-636]
[m[m31.08.2022 - 15:15:22.864 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testMultiShortArray has 3 assertions: 
 assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); ref {array1} [649-649],
 assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [650-650],
 assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [652-652]
[m[m31.08.2022 - 15:15:22.864 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testMultiCharArray has 3 assertions: 
 assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); ref {array1} [665-665],
 assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [666-666],
 assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [668-668]
[m[m31.08.2022 - 15:15:22.865 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testMultiByteArray has 3 assertions: 
 assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); ref {array1} [681-681],
 assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [682-682],
 assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [684-684]
[m[m31.08.2022 - 15:15:22.865 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testMultiFloatArray has 3 assertions: 
 assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); ref {array1} [697-697],
 assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [698-698],
 assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [700-700]
[m[m31.08.2022 - 15:15:22.865 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testMultiDoubleArray has 3 assertions: 
 assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); ref {array1} [713-713],
 assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [714-714],
 assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [716-716]
[m[m31.08.2022 - 15:15:22.865 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testMultiBooleanArray has 7 assertions: 
 assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); ref {array1} [729-729],
 assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [730-730],
 assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [732-732],
 assertFalse(new EqualsBuilder().append(array1, array3).isEquals()); ref {array1, array3} [736-736],
 assertFalse(new EqualsBuilder().append(array3, array1).isEquals()); ref {array1, array3} [737-737],
 assertFalse(new EqualsBuilder().append(array2, array3).isEquals()); ref {array2, array3} [738-738],
 assertFalse(new EqualsBuilder().append(array3, array2).isEquals()); ref {array2, array3} [739-739]
[m[m31.08.2022 - 15:15:22.865 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testRaggedArray has 3 assertions: 
 assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); ref {array1} [754-754],
 assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [755-755],
 assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [757-757]
[m[m31.08.2022 - 15:15:22.865 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testMixedArray has 3 assertions: 
 assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); ref {array1} [772-772],
 assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [773-773],
 assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); ref {array2, array1} [775-775]
[m[m31.08.2022 - 15:15:22.865 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testObjectArrayHiddenByObject has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [788-788],
 assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); ref {obj1, array1} [789-789],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [790-790],
 assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); ref {array2, obj1} [791-791],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [793-793]
[m[m31.08.2022 - 15:15:22.865 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testLongArrayHiddenByObject has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [806-806],
 assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); ref {obj1, array1} [807-807],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [808-808],
 assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); ref {array2, obj1} [809-809],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [811-811]
[m[m31.08.2022 - 15:15:22.865 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testIntArrayHiddenByObject has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [824-824],
 assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); ref {obj1, array1} [825-825],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [826-826],
 assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); ref {array2, obj1} [827-827],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [829-829]
[m[m31.08.2022 - 15:15:22.866 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testShortArrayHiddenByObject has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [842-842],
 assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); ref {obj1, array1} [843-843],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [844-844],
 assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); ref {array2, obj1} [845-845],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [847-847]
[m[m31.08.2022 - 15:15:22.866 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testCharArrayHiddenByObject has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [860-860],
 assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); ref {obj1, array1} [861-861],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [862-862],
 assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); ref {array2, obj1} [863-863],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [865-865]
[m[m31.08.2022 - 15:15:22.866 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testByteArrayHiddenByObject has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [878-878],
 assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); ref {obj1, array1} [879-879],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [880-880],
 assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); ref {array2, obj1} [881-881],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [883-883]
[m[m31.08.2022 - 15:15:22.866 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testDoubleArrayHiddenByObject has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [896-896],
 assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); ref {obj1, array1} [897-897],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [898-898],
 assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); ref {array2, obj1} [899-899],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [901-901]
[m[m31.08.2022 - 15:15:22.866 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testFloatArrayHiddenByObject has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [914-914],
 assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); ref {obj1, array1} [915-915],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [916-916],
 assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); ref {array2, obj1} [917-917],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [919-919]
[m[m31.08.2022 - 15:15:22.866 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testBooleanArrayHiddenByObject has 5 assertions: 
 assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); ref {obj1} [932-932],
 assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); ref {obj1, array1} [933-933],
 assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [934-934],
 assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); ref {array2, obj1} [935-935],
 assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); ref {obj2, obj1} [937-937]
[m[m31.08.2022 - 15:15:22.866 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testUnrelatedClasses has 12 assertions: 
 // sanity checks:
assertTrue(Arrays.equals(x, x)); ref {x, Arrays} [1013-1013],
 assertTrue(Arrays.equals(y, y)); ref {y, Arrays} [1014-1014],
 assertTrue(Arrays.equals(x, y)); ref {x, y, Arrays} [1015-1015],
 assertTrue(Arrays.equals(y, x)); ref {x, y, Arrays} [1016-1016],
 // real tests:
assertTrue(x[0].equals(x[0])); ref {x} [1018-1018],
 assertTrue(y[0].equals(y[0])); ref {y} [1019-1019],
 assertTrue(x[0].equals(y[0])); ref {x, y} [1020-1020],
 assertTrue(y[0].equals(x[0])); ref {x, y} [1021-1021],
 assertTrue(new EqualsBuilder().append(x, x).isEquals()); ref {x} [1022-1022],
 assertTrue(new EqualsBuilder().append(y, y).isEquals()); ref {y} [1023-1023],
 assertTrue(new EqualsBuilder().append(x, y).isEquals()); ref {x, y} [1024-1024],
 assertTrue(new EqualsBuilder().append(y, x).isEquals()); ref {x, y} [1025-1025]
[m[m31.08.2022 - 15:15:22.866 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testNpeForNullElement has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.866 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testReflectionEqualsExcludeFields has 9 assertions: 
 // not equal when including all fields
assertTrue(!EqualsBuilder.reflectionEquals(x1, x2)); ref {x1, EqualsBuilder, x2} [1047-1047],
 // doesn't barf on null, empty array, or non-existent field, but still tests as not equal
assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null)); ref {x1, EqualsBuilder, x2} [1050-1050],
 assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {})); ref {x1, EqualsBuilder, x2} [1051-1051],
 assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "xxx" })); ref {x1, EqualsBuilder, x2} [1052-1052],
 // not equal if only one of the differing fields excluded
assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two" })); ref {x1, EqualsBuilder, x2} [1055-1055],
 assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "three" })); ref {x1, EqualsBuilder, x2} [1056-1056],
 // equal if both differing fields excluded
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two", "three" })); ref {x1, EqualsBuilder, x2} [1059-1059],
 // still equal as long as both differing fields are among excluded
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three" })); ref {x1, EqualsBuilder, x2} [1062-1062],
 assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three", "xxx" })); ref {x1, EqualsBuilder, x2} [1063-1063]
[m[m31.08.2022 - 15:15:22.867 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testCyclicalObjectReferences has 6 assertions: 
 assertTrue(x1.equals(x2)); ref {x1, x2} [1102-1102],
 assertNull(EqualsBuilder.getRegistry()); ref {EqualsBuilder} [1103-1103],
 assertFalse(x1.equals(x3)); ref {x1, x3} [1104-1104],
 assertNull(EqualsBuilder.getRegistry()); ref {EqualsBuilder} [1105-1105],
 assertFalse(x2.equals(x3)); ref {x2, x3} [1106-1106],
 assertNull(EqualsBuilder.getRegistry()); ref {EqualsBuilder} [1107-1107]
[m[m31.08.2022 - 15:15:22.867 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.EqualsBuilderTest::testReflectionArrays has 6 assertions: 
 assertTrue(!EqualsBuilder.reflectionEquals(o1, o2)); ref {o1, o2, EqualsBuilder} [1140-1140],
 assertTrue(EqualsBuilder.reflectionEquals(o1, o1)); ref {o1, EqualsBuilder} [1141-1141],
 assertTrue(EqualsBuilder.reflectionEquals(o1, o3)); ref {o1, o3, EqualsBuilder} [1142-1142],
 assertTrue(!EqualsBuilder.reflectionEquals(d1, d2)); ref {EqualsBuilder, d1, d2} [1148-1148],
 assertTrue(EqualsBuilder.reflectionEquals(d1, d1)); ref {EqualsBuilder, d1} [1149-1149],
 assertTrue(EqualsBuilder.reflectionEquals(d1, d3)); ref {EqualsBuilder, d1, d3} [1150-1150]
[m[m31.08.2022 - 15:15:22.870 [INFO ] ParsingStrategy.parseTestSuite() - Found 18 test cases
[m[m31.08.2022 - 15:15:22.871 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testConstructors has 5 assertions: 
 assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); ref {} [33-33],
 assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); ref {} [35-35],
 assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); ref {Double} [37-37],
 assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); ref {} [38-38],
 assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); ref {} [40-40]
[m[m31.08.2022 - 15:15:22.871 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testConstructorNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.871 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testGetSet has 8 assertions: 
 assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); ref {} [52-52],
 assertEquals(Double.valueOf(0), new MutableDouble().getValue()); ref {Double} [53-53],
 assertEquals(1d, mutNum.doubleValue(), 0.0001d); ref {mutNum} [56-56],
 assertEquals(Double.valueOf(1d), mutNum.getValue()); ref {mutNum, Double} [57-57],
 assertEquals(2d, mutNum.doubleValue(), 0.0001d); ref {mutNum} [60-60],
 assertEquals(Double.valueOf(2d), mutNum.getValue()); ref {mutNum, Double} [61-61],
 assertEquals(3d, mutNum.doubleValue(), 0.0001d); ref {mutNum} [64-64],
 assertEquals(Double.valueOf(3d), mutNum.getValue()); ref {mutNum, Double} [65-65]
[m[m31.08.2022 - 15:15:22.871 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testSetNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.872 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testNanInfinite has 3 assertions: 
 assertTrue(mutNum.isNaN()); ref {mutNum} [77-77],
 assertTrue(mutNum.isInfinite()); ref {mutNum} [80-80],
 assertTrue(mutNum.isInfinite()); ref {mutNum} [83-83]
[m[m31.08.2022 - 15:15:22.872 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testEquals has 10 assertions: 
 assertTrue(mutNumA.equals(mutNumA)); ref {mutNumA} [92-92],
 assertTrue(mutNumA.equals(mutNumB)); ref {mutNumA, mutNumB} [93-93],
 assertTrue(mutNumB.equals(mutNumA)); ref {mutNumA, mutNumB} [94-94],
 assertTrue(mutNumB.equals(mutNumB)); ref {mutNumB} [95-95],
 assertFalse(mutNumA.equals(mutNumC)); ref {mutNumA, mutNumC} [96-96],
 assertFalse(mutNumB.equals(mutNumC)); ref {mutNumB, mutNumC} [97-97],
 assertTrue(mutNumC.equals(mutNumC)); ref {mutNumC} [98-98],
 assertFalse(mutNumA.equals(null)); ref {mutNumA} [99-99],
 assertFalse(mutNumA.equals(Double.valueOf(0d))); ref {mutNumA, Double} [100-100],
 assertFalse(mutNumA.equals("0")); ref {mutNumA} [101-101]
[m[m31.08.2022 - 15:15:22.872 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testHashCode has 4 assertions: 
 assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); ref {mutNumA} [110-110],
 assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); ref {mutNumA, mutNumB} [111-111],
 assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); ref {mutNumA, mutNumC} [112-112],
 assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); ref {mutNumA, Double} [113-113]
[m[m31.08.2022 - 15:15:22.872 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testCompareTo has 3 assertions: 
 assertEquals(0, mutNum.compareTo(new MutableDouble(0d))); ref {mutNum} [120-120],
 assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d))); ref {mutNum} [121-121],
 assertEquals(-1, mutNum.compareTo(new MutableDouble(1d))); ref {mutNum} [122-122]
[m[m31.08.2022 - 15:15:22.872 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testCompareToNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.873 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testPrimitiveValues has 6 assertions: 
 assertEquals(1.7F, mutNum.floatValue(), 0); ref {mutNum} [135-135],
 assertEquals(1.7, mutNum.doubleValue(), 0); ref {mutNum} [136-136],
 assertEquals((byte) 1, mutNum.byteValue()); ref {mutNum} [137-137],
 assertEquals((short) 1, mutNum.shortValue()); ref {mutNum} [138-138],
 assertEquals(1, mutNum.intValue()); ref {mutNum} [139-139],
 assertEquals(1L, mutNum.longValue()); ref {mutNum} [140-140]
[m[m31.08.2022 - 15:15:22.873 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testToDouble has 2 assertions: 
 assertEquals(Double.valueOf(0d), new MutableDouble(0d).toDouble()); ref {Double} [145-145],
 assertEquals(Double.valueOf(12.3d), new MutableDouble(12.3d).toDouble()); ref {Double} [146-146]
[m[m31.08.2022 - 15:15:22.873 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testIncrement has 2 assertions: 
 assertEquals(2, mutNum.intValue()); ref {mutNum} [154-154],
 assertEquals(2L, mutNum.longValue()); ref {mutNum} [155-155]
[m[m31.08.2022 - 15:15:22.873 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testDecrement has 2 assertions: 
 assertEquals(0, mutNum.intValue()); ref {mutNum} [163-163],
 assertEquals(0L, mutNum.longValue()); ref {mutNum} [164-164]
[m[m31.08.2022 - 15:15:22.873 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testAddValuePrimitive has 1 assertions: 
 assertEquals(2.1d, mutNum.doubleValue(), 0.01d); ref {mutNum} [172-172]
[m[m31.08.2022 - 15:15:22.873 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testAddValueObject has 1 assertions: 
 assertEquals(2.1d, mutNum.doubleValue(), 0.01d); ref {mutNum} [180-180]
[m[m31.08.2022 - 15:15:22.873 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testSubtractValuePrimitive has 1 assertions: 
 assertEquals(0.1d, mutNum.doubleValue(), 0.01d); ref {mutNum} [188-188]
[m[m31.08.2022 - 15:15:22.873 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testSubtractValueObject has 1 assertions: 
 assertEquals(0.1d, mutNum.doubleValue(), 0.01d); ref {mutNum} [196-196]
[m[m31.08.2022 - 15:15:22.873 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableDoubleTest::testToString has 3 assertions: 
 assertEquals("0.0", new MutableDouble(0d).toString()); ref {} [201-201],
 assertEquals("10.0", new MutableDouble(10d).toString()); ref {} [202-202],
 assertEquals("-123.0", new MutableDouble(-123d).toString()); ref {} [203-203]
[m[m31.08.2022 - 15:15:22.889 [INFO ] ParsingStrategy.parseTestSuite() - Found 72 test cases
[m[m31.08.2022 - 15:15:22.889 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new BooleanUtils()); ref {} [40-40],
 assertEquals(1, cons.length); ref {cons.length, cons} [42-42],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [43-43],
 assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers())); ref {Modifier} [44-44],
 assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers())); ref {Modifier} [45-45]
[m[m31.08.2022 - 15:15:22.889 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_negate_Boolean has 3 assertions: 
 assertSame(null, BooleanUtils.negate(null)); ref {BooleanUtils} [51-51],
 assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE)); ref {Boolean.TRUE, BooleanUtils, Boolean.FALSE, Boolean} [52-52],
 assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE)); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [53-53]
[m[m31.08.2022 - 15:15:22.889 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_isTrue_Boolean has 3 assertions: 
 assertTrue(BooleanUtils.isTrue(Boolean.TRUE)); ref {BooleanUtils, Boolean.TRUE, Boolean} [59-59],
 assertFalse(BooleanUtils.isTrue(Boolean.FALSE)); ref {BooleanUtils, Boolean.FALSE, Boolean} [60-60],
 assertFalse(BooleanUtils.isTrue((Boolean) null)); ref {BooleanUtils} [61-61]
[m[m31.08.2022 - 15:15:22.889 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_isNotTrue_Boolean has 3 assertions: 
 assertFalse(BooleanUtils.isNotTrue(Boolean.TRUE)); ref {BooleanUtils, Boolean.TRUE, Boolean} [66-66],
 assertTrue(BooleanUtils.isNotTrue(Boolean.FALSE)); ref {BooleanUtils, Boolean.FALSE, Boolean} [67-67],
 assertTrue(BooleanUtils.isNotTrue((Boolean) null)); ref {BooleanUtils} [68-68]
[m[m31.08.2022 - 15:15:22.890 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_isFalse_Boolean has 3 assertions: 
 assertFalse(BooleanUtils.isFalse(Boolean.TRUE)); ref {BooleanUtils, Boolean.TRUE, Boolean} [74-74],
 assertTrue(BooleanUtils.isFalse(Boolean.FALSE)); ref {BooleanUtils, Boolean.FALSE, Boolean} [75-75],
 assertFalse(BooleanUtils.isFalse((Boolean) null)); ref {BooleanUtils} [76-76]
[m[m31.08.2022 - 15:15:22.890 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_isNotFalse_Boolean has 3 assertions: 
 assertTrue(BooleanUtils.isNotFalse(Boolean.TRUE)); ref {BooleanUtils, Boolean.TRUE, Boolean} [81-81],
 assertFalse(BooleanUtils.isNotFalse(Boolean.FALSE)); ref {BooleanUtils, Boolean.FALSE, Boolean} [82-82],
 assertTrue(BooleanUtils.isNotFalse((Boolean) null)); ref {BooleanUtils} [83-83]
[m[m31.08.2022 - 15:15:22.890 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBoolean_Boolean has 3 assertions: 
 assertTrue(BooleanUtils.toBoolean(Boolean.TRUE)); ref {BooleanUtils, Boolean.TRUE, Boolean} [89-89],
 assertFalse(BooleanUtils.toBoolean(Boolean.FALSE)); ref {BooleanUtils, Boolean.FALSE, Boolean} [90-90],
 assertFalse(BooleanUtils.toBoolean((Boolean) null)); ref {BooleanUtils} [91-91]
[m[m31.08.2022 - 15:15:22.890 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBooleanDefaultIfNull_Boolean_boolean has 6 assertions: 
 assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true)); ref {BooleanUtils, Boolean.TRUE, Boolean} [96-96],
 assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false)); ref {BooleanUtils, Boolean.TRUE, Boolean} [97-97],
 assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true)); ref {BooleanUtils, Boolean.FALSE, Boolean} [98-98],
 assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false)); ref {BooleanUtils, Boolean.FALSE, Boolean} [99-99],
 assertTrue(BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true)); ref {BooleanUtils} [100-100],
 assertFalse(BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false)); ref {BooleanUtils} [101-101]
[m[m31.08.2022 - 15:15:22.890 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBoolean_int has 3 assertions: 
 assertTrue(BooleanUtils.toBoolean(1)); ref {BooleanUtils} [108-108],
 assertTrue(BooleanUtils.toBoolean(-1)); ref {BooleanUtils} [109-109],
 assertFalse(BooleanUtils.toBoolean(0)); ref {BooleanUtils} [110-110]
[m[m31.08.2022 - 15:15:22.890 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBooleanObject_int has 3 assertions: 
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1)); ref {Boolean.TRUE, BooleanUtils, Boolean} [115-115],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1)); ref {Boolean.TRUE, BooleanUtils, Boolean} [116-116],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0)); ref {BooleanUtils, Boolean.FALSE, Boolean} [117-117]
[m[m31.08.2022 - 15:15:22.890 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBooleanObject_Integer has 4 assertions: 
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(1))); ref {Boolean.TRUE, BooleanUtils, Integer, Boolean} [122-122],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(-1))); ref {Boolean.TRUE, BooleanUtils, Integer, Boolean} [123-123],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(0))); ref {BooleanUtils, Integer, Boolean.FALSE, Boolean} [124-124],
 assertEquals(null, BooleanUtils.toBooleanObject((Integer) null)); ref {BooleanUtils} [125-125]
[m[m31.08.2022 - 15:15:22.890 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBoolean_int_int_int has 2 assertions: 
 assertTrue(BooleanUtils.toBoolean(6, 6, 7)); ref {BooleanUtils} [131-131],
 assertFalse(BooleanUtils.toBoolean(7, 6, 7)); ref {BooleanUtils} [132-132]
[m[m31.08.2022 - 15:15:22.890 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBoolean_int_int_int_noMatch has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.890 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBoolean_Integer_Integer_Integer has 4 assertions: 
 assertTrue(BooleanUtils.toBoolean((Integer) null, null, seven)); ref {BooleanUtils, seven} [145-145],
 assertFalse(BooleanUtils.toBoolean((Integer) null, six, null)); ref {BooleanUtils, six} [146-146],
 assertTrue(BooleanUtils.toBoolean(Integer.valueOf(6), six, seven)); ref {BooleanUtils, Integer, six, seven} [148-148],
 assertFalse(BooleanUtils.toBoolean(Integer.valueOf(7), six, seven)); ref {BooleanUtils, Integer, six, seven} [149-149]
[m[m31.08.2022 - 15:15:22.890 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBoolean_Integer_Integer_Integer_nullValue has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.890 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBoolean_Integer_Integer_Integer_noMatch has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.891 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBooleanObject_int_int_int has 3 assertions: 
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8)); ref {Boolean.TRUE, BooleanUtils, Boolean} [165-165],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8)); ref {BooleanUtils, Boolean.FALSE, Boolean} [166-166],
 assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8)); ref {BooleanUtils} [167-167]
[m[m31.08.2022 - 15:15:22.891 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBooleanObject_int_int_int_noMatch has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.891 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBooleanObject_Integer_Integer_Integer_Integer has 6 assertions: 
 assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight)); ref {Boolean.TRUE, BooleanUtils, seven, Boolean, eight} [181-181],
 assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight)); ref {BooleanUtils, six, Boolean.FALSE, Boolean, eight} [182-182],
 assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null)); ref {BooleanUtils, six, seven} [183-183],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight)); ref {Boolean.TRUE, BooleanUtils, Integer, six, seven, Boolean, eight} [185-185],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight)); ref {BooleanUtils, Integer, six, Boolean.FALSE, seven, Boolean, eight} [186-186],
 assertEquals(null, BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight)); ref {BooleanUtils, Integer, six, seven, eight} [187-187]
[m[m31.08.2022 - 15:15:22.891 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.891 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.891 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toInteger_boolean has 2 assertions: 
 assertEquals(1, BooleanUtils.toInteger(true)); ref {BooleanUtils} [203-203],
 assertEquals(0, BooleanUtils.toInteger(false)); ref {BooleanUtils} [204-204]
[m[m31.08.2022 - 15:15:22.891 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toIntegerObject_boolean has 2 assertions: 
 assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(true)); ref {Integer, BooleanUtils} [209-209],
 assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(false)); ref {Integer, BooleanUtils} [210-210]
[m[m31.08.2022 - 15:15:22.891 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toIntegerObject_Boolean has 3 assertions: 
 assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(Boolean.TRUE)); ref {Integer, BooleanUtils, Boolean.TRUE, Boolean} [215-215],
 assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(Boolean.FALSE)); ref {Integer, BooleanUtils, Boolean.FALSE, Boolean} [216-216],
 assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null)); ref {BooleanUtils} [217-217]
[m[m31.08.2022 - 15:15:22.891 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toInteger_boolean_int_int has 2 assertions: 
 assertEquals(6, BooleanUtils.toInteger(true, 6, 7)); ref {BooleanUtils} [223-223],
 assertEquals(7, BooleanUtils.toInteger(false, 6, 7)); ref {BooleanUtils} [224-224]
[m[m31.08.2022 - 15:15:22.891 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toInteger_Boolean_int_int_int has 3 assertions: 
 assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8)); ref {BooleanUtils, Boolean.TRUE, Boolean} [229-229],
 assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8)); ref {BooleanUtils, Boolean.FALSE, Boolean} [230-230],
 assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8)); ref {BooleanUtils} [231-231]
[m[m31.08.2022 - 15:15:22.891 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toIntegerObject_boolean_Integer_Integer has 2 assertions: 
 assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven)); ref {BooleanUtils, six, seven} [238-238],
 assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven)); ref {BooleanUtils, six, seven} [239-239]
[m[m31.08.2022 - 15:15:22.892 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toIntegerObject_Boolean_Integer_Integer_Integer has 4 assertions: 
 assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight)); ref {BooleanUtils, Boolean.TRUE, six, seven, Boolean, eight} [247-247],
 assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight)); ref {BooleanUtils, six, Boolean.FALSE, seven, Boolean, eight} [248-248],
 assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight)); ref {BooleanUtils, six, seven, eight} [249-249],
 assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null)); ref {BooleanUtils, six, seven} [250-250]
[m[m31.08.2022 - 15:15:22.892 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBooleanObject_String has 30 assertions: 
 assertEquals(null, BooleanUtils.toBooleanObject((String) null)); ref {BooleanUtils} [257-257],
 assertEquals(null, BooleanUtils.toBooleanObject("")); ref {BooleanUtils} [258-258],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); ref {BooleanUtils, Boolean.FALSE, Boolean} [259-259],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); ref {BooleanUtils, Boolean.FALSE, Boolean} [260-260],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); ref {BooleanUtils, Boolean.FALSE, Boolean} [261-261],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); ref {BooleanUtils, Boolean.FALSE, Boolean} [262-262],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); ref {BooleanUtils, Boolean.FALSE, Boolean} [263-263],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); ref {BooleanUtils, Boolean.FALSE, Boolean} [264-264],
 assertEquals(null, BooleanUtils.toBooleanObject("oof")); ref {BooleanUtils} [265-265],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); ref {Boolean.TRUE, BooleanUtils, Boolean} [266-266],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); ref {Boolean.TRUE, BooleanUtils, Boolean} [267-267],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); ref {Boolean.TRUE, BooleanUtils, Boolean} [268-268],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); ref {Boolean.TRUE, BooleanUtils, Boolean} [269-269],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); ref {Boolean.TRUE, BooleanUtils, Boolean} [270-270],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); ref {Boolean.TRUE, BooleanUtils, Boolean} [271-271],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); ref {Boolean.TRUE, BooleanUtils, Boolean} [272-272],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); ref {Boolean.TRUE, BooleanUtils, Boolean} [273-273],
 // yes
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); ref {Boolean.TRUE, BooleanUtils, Boolean} [275-275],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); ref {Boolean.TRUE, BooleanUtils, Boolean} [276-276],
 // true
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); ref {Boolean.TRUE, BooleanUtils, Boolean} [277-277],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); ref {Boolean.TRUE, BooleanUtils, Boolean} [278-278],
 // false
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); ref {BooleanUtils, Boolean.FALSE, Boolean} [279-279],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); ref {BooleanUtils, Boolean.FALSE, Boolean} [280-280],
 // No
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); ref {BooleanUtils, Boolean.FALSE, Boolean} [281-281],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); ref {BooleanUtils, Boolean.FALSE, Boolean} [282-282],
 assertEquals(null, BooleanUtils.toBooleanObject("z")); ref {BooleanUtils} [283-283],
 assertEquals(null, BooleanUtils.toBooleanObject("ab")); ref {BooleanUtils} [285-285],
 assertEquals(null, BooleanUtils.toBooleanObject("yoo")); ref {BooleanUtils} [286-286],
 assertEquals(null, BooleanUtils.toBooleanObject("true ")); ref {BooleanUtils} [287-287],
 assertEquals(null, BooleanUtils.toBooleanObject("ono")); ref {BooleanUtils} [288-288]
[m[m31.08.2022 - 15:15:22.892 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBooleanObject_String_String_String_String has 6 assertions: 
 assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); ref {Boolean.TRUE, BooleanUtils, Boolean} [293-293],
 assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); ref {BooleanUtils, Boolean.FALSE, Boolean} [294-294],
 assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); ref {BooleanUtils} [295-295],
 assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); ref {Boolean.TRUE, BooleanUtils, Boolean} [297-297],
 assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); ref {BooleanUtils, Boolean.FALSE, Boolean} [298-298],
 assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); ref {BooleanUtils} [299-299]
[m[m31.08.2022 - 15:15:22.892 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBooleanObject_String_String_String_String_nullValue has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.892 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBooleanObject_String_String_String_String_noMatch has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.892 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBoolean_String has 42 assertions: 
 assertFalse(BooleanUtils.toBoolean((String) null)); ref {BooleanUtils} [315-315],
 assertFalse(BooleanUtils.toBoolean("")); ref {BooleanUtils} [316-316],
 assertFalse(BooleanUtils.toBoolean("off")); ref {BooleanUtils} [317-317],
 assertFalse(BooleanUtils.toBoolean("oof")); ref {BooleanUtils} [318-318],
 assertFalse(BooleanUtils.toBoolean("yep")); ref {BooleanUtils} [319-319],
 assertFalse(BooleanUtils.toBoolean("trux")); ref {BooleanUtils} [320-320],
 assertFalse(BooleanUtils.toBoolean("false")); ref {BooleanUtils} [321-321],
 assertFalse(BooleanUtils.toBoolean("a")); ref {BooleanUtils} [322-322],
 // interned handled differently
assertTrue(BooleanUtils.toBoolean("true")); ref {BooleanUtils} [323-323],
 assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); ref {BooleanUtils} [324-324],
 assertTrue(BooleanUtils.toBoolean("truE")); ref {BooleanUtils} [325-325],
 assertTrue(BooleanUtils.toBoolean("trUe")); ref {BooleanUtils} [326-326],
 assertTrue(BooleanUtils.toBoolean("trUE")); ref {BooleanUtils} [327-327],
 assertTrue(BooleanUtils.toBoolean("tRue")); ref {BooleanUtils} [328-328],
 assertTrue(BooleanUtils.toBoolean("tRuE")); ref {BooleanUtils} [329-329],
 assertTrue(BooleanUtils.toBoolean("tRUe")); ref {BooleanUtils} [330-330],
 assertTrue(BooleanUtils.toBoolean("tRUE")); ref {BooleanUtils} [331-331],
 assertTrue(BooleanUtils.toBoolean("TRUE")); ref {BooleanUtils} [332-332],
 assertTrue(BooleanUtils.toBoolean("TRUe")); ref {BooleanUtils} [333-333],
 assertTrue(BooleanUtils.toBoolean("TRuE")); ref {BooleanUtils} [334-334],
 assertTrue(BooleanUtils.toBoolean("TRue")); ref {BooleanUtils} [335-335],
 assertTrue(BooleanUtils.toBoolean("TrUE")); ref {BooleanUtils} [336-336],
 assertTrue(BooleanUtils.toBoolean("TrUe")); ref {BooleanUtils} [337-337],
 assertTrue(BooleanUtils.toBoolean("TruE")); ref {BooleanUtils} [338-338],
 assertTrue(BooleanUtils.toBoolean("True")); ref {BooleanUtils} [339-339],
 assertTrue(BooleanUtils.toBoolean("on")); ref {BooleanUtils} [340-340],
 assertTrue(BooleanUtils.toBoolean("oN")); ref {BooleanUtils} [341-341],
 assertTrue(BooleanUtils.toBoolean("On")); ref {BooleanUtils} [342-342],
 assertTrue(BooleanUtils.toBoolean("ON")); ref {BooleanUtils} [343-343],
 assertTrue(BooleanUtils.toBoolean("yes")); ref {BooleanUtils} [344-344],
 assertTrue(BooleanUtils.toBoolean("yeS")); ref {BooleanUtils} [345-345],
 assertTrue(BooleanUtils.toBoolean("yEs")); ref {BooleanUtils} [346-346],
 assertTrue(BooleanUtils.toBoolean("yES")); ref {BooleanUtils} [347-347],
 assertTrue(BooleanUtils.toBoolean("Yes")); ref {BooleanUtils} [348-348],
 assertTrue(BooleanUtils.toBoolean("YeS")); ref {BooleanUtils} [349-349],
 assertTrue(BooleanUtils.toBoolean("YEs")); ref {BooleanUtils} [350-350],
 assertTrue(BooleanUtils.toBoolean("YES")); ref {BooleanUtils} [351-351],
 assertFalse(BooleanUtils.toBoolean("yes?")); ref {BooleanUtils} [352-352],
 assertFalse(BooleanUtils.toBoolean("tru")); ref {BooleanUtils} [353-353],
 assertFalse(BooleanUtils.toBoolean("no")); ref {BooleanUtils} [355-355],
 assertFalse(BooleanUtils.toBoolean("off")); ref {BooleanUtils} [356-356],
 assertFalse(BooleanUtils.toBoolean("yoo")); ref {BooleanUtils} [357-357]
[m[m31.08.2022 - 15:15:22.892 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBoolean_String_String_String has 9 assertions: 
 assertTrue(BooleanUtils.toBoolean((String) null, null, "N")); ref {BooleanUtils} [362-362],
 assertFalse(BooleanUtils.toBoolean((String) null, "Y", null)); ref {BooleanUtils} [363-363],
 assertTrue(BooleanUtils.toBoolean("Y", "Y", "N")); ref {BooleanUtils} [364-364],
 assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("N"))); ref {BooleanUtils} [365-365],
 assertFalse(BooleanUtils.toBoolean("N", "Y", "N")); ref {BooleanUtils} [366-366],
 assertFalse(BooleanUtils.toBoolean("N", new String("Y"), new String("N"))); ref {BooleanUtils} [367-367],
 assertTrue(BooleanUtils.toBoolean((String) null, null, null)); ref {BooleanUtils} [368-368],
 assertTrue(BooleanUtils.toBoolean("Y", "Y", "Y")); ref {BooleanUtils} [369-369],
 assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("Y"))); ref {BooleanUtils} [370-370]
[m[m31.08.2022 - 15:15:22.893 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBoolean_String_String_String_nullValue has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.893 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toBoolean_String_String_String_noMatch has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.893 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toStringTrueFalse_Boolean has 3 assertions: 
 assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null)); ref {BooleanUtils} [386-386],
 assertEquals("true", BooleanUtils.toStringTrueFalse(Boolean.TRUE)); ref {BooleanUtils, Boolean.TRUE, Boolean} [387-387],
 assertEquals("false", BooleanUtils.toStringTrueFalse(Boolean.FALSE)); ref {BooleanUtils, Boolean.FALSE, Boolean} [388-388]
[m[m31.08.2022 - 15:15:22.893 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toStringOnOff_Boolean has 3 assertions: 
 assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null)); ref {BooleanUtils} [393-393],
 assertEquals("on", BooleanUtils.toStringOnOff(Boolean.TRUE)); ref {BooleanUtils, Boolean.TRUE, Boolean} [394-394],
 assertEquals("off", BooleanUtils.toStringOnOff(Boolean.FALSE)); ref {BooleanUtils, Boolean.FALSE, Boolean} [395-395]
[m[m31.08.2022 - 15:15:22.893 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toStringYesNo_Boolean has 3 assertions: 
 assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null)); ref {BooleanUtils} [400-400],
 assertEquals("yes", BooleanUtils.toStringYesNo(Boolean.TRUE)); ref {BooleanUtils, Boolean.TRUE, Boolean} [401-401],
 assertEquals("no", BooleanUtils.toStringYesNo(Boolean.FALSE)); ref {BooleanUtils, Boolean.FALSE, Boolean} [402-402]
[m[m31.08.2022 - 15:15:22.893 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toString_Boolean_String_String_String has 3 assertions: 
 assertEquals("U", BooleanUtils.toString((Boolean) null, "Y", "N", "U")); ref {BooleanUtils} [407-407],
 assertEquals("Y", BooleanUtils.toString(Boolean.TRUE, "Y", "N", "U")); ref {BooleanUtils, Boolean.TRUE, Boolean} [408-408],
 assertEquals("N", BooleanUtils.toString(Boolean.FALSE, "Y", "N", "U")); ref {BooleanUtils, Boolean.FALSE, Boolean} [409-409]
[m[m31.08.2022 - 15:15:22.893 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toStringTrueFalse_boolean has 2 assertions: 
 assertEquals("true", BooleanUtils.toStringTrueFalse(true)); ref {BooleanUtils} [415-415],
 assertEquals("false", BooleanUtils.toStringTrueFalse(false)); ref {BooleanUtils} [416-416]
[m[m31.08.2022 - 15:15:22.893 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toStringOnOff_boolean has 2 assertions: 
 assertEquals("on", BooleanUtils.toStringOnOff(true)); ref {BooleanUtils} [421-421],
 assertEquals("off", BooleanUtils.toStringOnOff(false)); ref {BooleanUtils} [422-422]
[m[m31.08.2022 - 15:15:22.893 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toStringYesNo_boolean has 2 assertions: 
 assertEquals("yes", BooleanUtils.toStringYesNo(true)); ref {BooleanUtils} [427-427],
 assertEquals("no", BooleanUtils.toStringYesNo(false)); ref {BooleanUtils} [428-428]
[m[m31.08.2022 - 15:15:22.893 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::test_toString_boolean_String_String_String has 2 assertions: 
 assertEquals("Y", BooleanUtils.toString(true, "Y", "N")); ref {BooleanUtils} [433-433],
 assertEquals("N", BooleanUtils.toString(false, "Y", "N")); ref {BooleanUtils} [434-434]
[m[m31.08.2022 - 15:15:22.893 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testXor_primitive_nullInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.893 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testXor_primitive_emptyInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.894 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testXor_primitive_validInput_2items has 4 assertions: 
 assertEquals("true ^ true", true ^ true, BooleanUtils.xor(new boolean[] { true, true })); ref {BooleanUtils} [451-454],
 assertEquals("false ^ false", false ^ false, BooleanUtils.xor(new boolean[] { false, false })); ref {BooleanUtils} [456-459],
 assertEquals("true ^ false", true ^ false, BooleanUtils.xor(new boolean[] { true, false })); ref {BooleanUtils} [461-464],
 assertEquals("false ^ true", false ^ true, BooleanUtils.xor(new boolean[] { false, true })); ref {BooleanUtils} [466-469]
[m[m31.08.2022 - 15:15:22.894 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testXor_primitive_validInput_3items has 8 assertions: 
 assertEquals("false ^ false ^ false", false ^ false ^ false, BooleanUtils.xor(new boolean[] { false, false, false })); ref {BooleanUtils} [474-477],
 assertEquals("false ^ false ^ true", false ^ false ^ true, BooleanUtils.xor(new boolean[] { false, false, true })); ref {BooleanUtils} [479-482],
 assertEquals("false ^ true ^ false", false ^ true ^ false, BooleanUtils.xor(new boolean[] { false, true, false })); ref {BooleanUtils} [484-487],
 assertEquals("false ^ true ^ true", false ^ true ^ true, BooleanUtils.xor(new boolean[] { false, true, true })); ref {BooleanUtils} [489-492],
 assertEquals("true ^ false ^ false", true ^ false ^ false, BooleanUtils.xor(new boolean[] { true, false, false })); ref {BooleanUtils} [494-497],
 assertEquals("true ^ false ^ true", true ^ false ^ true, BooleanUtils.xor(new boolean[] { true, false, true })); ref {BooleanUtils} [499-502],
 assertEquals("true ^ true ^ false", true ^ true ^ false, BooleanUtils.xor(new boolean[] { true, true, false })); ref {BooleanUtils} [504-507],
 assertEquals("true ^ true ^ true", true ^ true ^ true, BooleanUtils.xor(new boolean[] { true, true, true })); ref {BooleanUtils} [509-512]
[m[m31.08.2022 - 15:15:22.894 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testXor_object_nullInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.894 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testXor_object_emptyInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.894 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testXor_object_nullElementInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.894 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testXor_object_validInput_2items has 4 assertions: 
 assertEquals("false ^ false", false ^ false, BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.FALSE, Boolean} [532-537],
 assertEquals("false ^ true", false ^ true, BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [539-544],
 assertEquals("true ^ false", true ^ false, BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [546-551],
 assertEquals("true ^ true", true ^ true, BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean} [553-558]
[m[m31.08.2022 - 15:15:22.894 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testXor_object_validInput_3items has 8 assertions: 
 assertEquals("false ^ false ^ false", false ^ false ^ false, BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.FALSE, Boolean} [563-571],
 assertEquals("false ^ false ^ true", false ^ false ^ true, BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [573-582],
 assertEquals("false ^ true ^ false", false ^ true ^ false, BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [584-593],
 assertEquals("true ^ false ^ false", true ^ false ^ false, BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [595-604],
 assertEquals("true ^ false ^ true", true ^ false ^ true, BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [606-614],
 assertEquals("true ^ true ^ false", true ^ true ^ false, BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [616-624],
 assertEquals("false ^ true ^ true", false ^ true ^ true, BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [626-634],
 assertEquals("true ^ true ^ true", true ^ true ^ true, BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean} [636-641]
[m[m31.08.2022 - 15:15:22.894 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testAnd_primitive_nullInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.894 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testAnd_primitive_emptyInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.894 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testAnd_primitive_validInput_2items has 4 assertions: 
 assertTrue("False result for (true, true)", BooleanUtils.and(new boolean[] { true, true })); ref {BooleanUtils} [658-660],
 assertTrue("True result for (false, false)", !BooleanUtils.and(new boolean[] { false, false })); ref {BooleanUtils} [662-664],
 assertTrue("True result for (true, false)", !BooleanUtils.and(new boolean[] { true, false })); ref {BooleanUtils} [666-668],
 assertTrue("True result for (false, true)", !BooleanUtils.and(new boolean[] { false, true })); ref {BooleanUtils} [670-672]
[m[m31.08.2022 - 15:15:22.895 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testAnd_primitive_validInput_3items has 8 assertions: 
 assertTrue("True result for (false, false, true)", !BooleanUtils.and(new boolean[] { false, false, true })); ref {BooleanUtils} [677-679],
 assertTrue("True result for (false, true, false)", !BooleanUtils.and(new boolean[] { false, true, false })); ref {BooleanUtils} [681-683],
 assertTrue("True result for (true, false, false)", !BooleanUtils.and(new boolean[] { true, false, false })); ref {BooleanUtils} [685-687],
 assertTrue("False result for (true, true, true)", BooleanUtils.and(new boolean[] { true, true, true })); ref {BooleanUtils} [689-691],
 assertTrue("True result for (false, false)", !BooleanUtils.and(new boolean[] { false, false, false })); ref {BooleanUtils} [693-695],
 assertTrue("True result for (true, true, false)", !BooleanUtils.and(new boolean[] { true, true, false })); ref {BooleanUtils} [697-699],
 assertTrue("True result for (true, false, true)", !BooleanUtils.and(new boolean[] { true, false, true })); ref {BooleanUtils} [701-703],
 assertTrue("True result for (false, true, true)", !BooleanUtils.and(new boolean[] { false, true, true })); ref {BooleanUtils} [705-707]
[m[m31.08.2022 - 15:15:22.895 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testAnd_object_nullInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.895 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testAnd_object_emptyInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.895 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testAnd_object_nullElementInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.895 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testAnd_object_validInput_2items has 4 assertions: 
 assertTrue("False result for (true, true)", BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean} [727-731],
 assertTrue("True result for (false, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.FALSE, Boolean} [733-737],
 assertTrue("True result for (true, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [739-743],
 assertTrue("True result for (false, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [745-749]
[m[m31.08.2022 - 15:15:22.895 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testAnd_object_validInput_3items has 8 assertions: 
 assertTrue("True result for (false, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [754-762],
 assertTrue("True result for (false, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [764-772],
 assertTrue("True result for (true, false, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [774-782],
 assertTrue("False result for (true, true, true)", BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean} [784-788],
 assertTrue("True result for (false, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.FALSE, Boolean} [790-797],
 assertTrue("True result for (true, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [799-806],
 assertTrue("True result for (true, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [808-815],
 assertTrue("True result for (false, true, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [817-824]
[m[m31.08.2022 - 15:15:22.895 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testOr_primitive_nullInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.895 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testOr_primitive_emptyInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.895 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testOr_primitive_validInput_2items has 4 assertions: 
 assertTrue("False result for (true, true)", BooleanUtils.or(new boolean[] { true, true })); ref {BooleanUtils} [841-843],
 assertTrue("True result for (false, false)", !BooleanUtils.or(new boolean[] { false, false })); ref {BooleanUtils} [845-847],
 assertTrue("False result for (true, false)", BooleanUtils.or(new boolean[] { true, false })); ref {BooleanUtils} [849-851],
 assertTrue("False result for (false, true)", BooleanUtils.or(new boolean[] { false, true })); ref {BooleanUtils} [853-855]
[m[m31.08.2022 - 15:15:22.895 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testOr_primitive_validInput_3items has 8 assertions: 
 assertTrue("False result for (false, false, true)", BooleanUtils.or(new boolean[] { false, false, true })); ref {BooleanUtils} [860-862],
 assertTrue("False result for (false, true, false)", BooleanUtils.or(new boolean[] { false, true, false })); ref {BooleanUtils} [864-866],
 assertTrue("False result for (true, false, false)", BooleanUtils.or(new boolean[] { true, false, false })); ref {BooleanUtils} [868-870],
 assertTrue("False result for (true, true, true)", BooleanUtils.or(new boolean[] { true, true, true })); ref {BooleanUtils} [872-874],
 assertTrue("True result for (false, false)", !BooleanUtils.or(new boolean[] { false, false, false })); ref {BooleanUtils} [876-878],
 assertTrue("False result for (true, true, false)", BooleanUtils.or(new boolean[] { true, true, false })); ref {BooleanUtils} [880-882],
 assertTrue("False result for (true, false, true)", BooleanUtils.or(new boolean[] { true, false, true })); ref {BooleanUtils} [884-886],
 assertTrue("False result for (false, true, true)", BooleanUtils.or(new boolean[] { false, true, true })); ref {BooleanUtils} [888-890]
[m[m31.08.2022 - 15:15:22.895 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testOr_object_nullInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.896 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testOr_object_emptyInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.896 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testOr_object_nullElementInput has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.896 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testOr_object_validInput_2items has 4 assertions: 
 assertTrue("False result for (true, true)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean} [910-914],
 assertTrue("True result for (false, false)", !BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.FALSE, Boolean} [916-920],
 assertTrue("False result for (true, false)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [922-926],
 assertTrue("False result for (false, true)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [928-932]
[m[m31.08.2022 - 15:15:22.896 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testOr_object_validInput_3items has 8 assertions: 
 assertTrue("False result for (false, false, true)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [937-945],
 assertTrue("False result for (false, true, false)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [947-955],
 assertTrue("False result for (true, false, false)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [957-965],
 assertTrue("False result for (true, true, true)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean} [967-971],
 assertTrue("True result for (false, false)", !BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.FALSE, Boolean} [973-980],
 assertTrue("False result for (true, true, false)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [982-989],
 assertTrue("False result for (true, false, true)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [991-998],
 assertTrue("False result for (false, true, true)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); ref {BooleanUtils, Boolean.TRUE, Boolean.FALSE, Boolean} [1000-1007]
[m[m31.08.2022 - 15:15:22.896 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BooleanUtilsTest::testCompare has 4 assertions: 
 assertTrue(BooleanUtils.compare(true, false) > 0); ref {BooleanUtils} [1012-1012],
 assertTrue(BooleanUtils.compare(true, true) == 0); ref {BooleanUtils} [1013-1013],
 assertTrue(BooleanUtils.compare(false, false) == 0); ref {BooleanUtils} [1014-1014],
 assertTrue(BooleanUtils.compare(false, true) < 0); ref {BooleanUtils} [1015-1015]
[m[m31.08.2022 - 15:15:22.910 [INFO ] ParsingStrategy.parseTestSuite() - Found 12 test cases
[m[m31.08.2022 - 15:15:22.910 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SystemUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new SystemUtils()); ref {} [48-48],
 assertEquals(1, cons.length); ref {cons.length, cons} [50-50],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [51-51],
 assertTrue(Modifier.isPublic(SystemUtils.class.getModifiers())); ref {Modifier} [52-52],
 assertFalse(Modifier.isFinal(SystemUtils.class.getModifiers())); ref {Modifier} [53-53]
[m[m31.08.2022 - 15:15:22.910 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SystemUtilsTest::testGetJavaHome has 2 assertions: 
 Assert.assertNotNull(dir); ref {Assert, dir} [62-62],
 Assert.assertTrue(dir.exists()); ref {Assert, dir} [63-63]
[m[m31.08.2022 - 15:15:22.910 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SystemUtilsTest::testGetJavaIoTmpDir has 2 assertions: 
 Assert.assertNotNull(dir); ref {Assert, dir} [72-72],
 Assert.assertTrue(dir.exists()); ref {Assert, dir} [73-73]
[m[m31.08.2022 - 15:15:22.910 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SystemUtilsTest::testGetUserDir has 2 assertions: 
 Assert.assertNotNull(dir); ref {Assert, dir} [82-82],
 Assert.assertTrue(dir.exists()); ref {Assert, dir} [83-83]
[m[m31.08.2022 - 15:15:22.910 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SystemUtilsTest::testGetUserHome has 2 assertions: 
 Assert.assertNotNull(dir); ref {Assert, dir} [92-92],
 Assert.assertTrue(dir.exists()); ref {Assert, dir} [93-93]
[m[m31.08.2022 - 15:15:22.911 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SystemUtilsTest::testIS_JAVA has 90 assertions: 
 assertFalse(SystemUtils.IS_JAVA_1_1); ref {SystemUtils.IS_JAVA_1_1, SystemUtils} [100-100],
 assertFalse(SystemUtils.IS_JAVA_1_2); ref {SystemUtils.IS_JAVA_1_2, SystemUtils} [101-101],
 assertFalse(SystemUtils.IS_JAVA_1_3); ref {SystemUtils.IS_JAVA_1_3, SystemUtils} [102-102],
 assertFalse(SystemUtils.IS_JAVA_1_4); ref {SystemUtils.IS_JAVA_1_4, SystemUtils} [103-103],
 assertFalse(SystemUtils.IS_JAVA_1_5); ref {SystemUtils.IS_JAVA_1_5, SystemUtils} [104-104],
 assertFalse(SystemUtils.IS_JAVA_1_6); ref {SystemUtils.IS_JAVA_1_6, SystemUtils} [105-105],
 assertFalse(SystemUtils.IS_JAVA_1_7); ref {SystemUtils, SystemUtils.IS_JAVA_1_7} [106-106],
 assertFalse(SystemUtils.IS_JAVA_1_8); ref {SystemUtils.IS_JAVA_1_8, SystemUtils} [107-107],
 assertFalse(SystemUtils.IS_JAVA_1_9); ref {SystemUtils.IS_JAVA_1_9, SystemUtils} [108-108],
 assertTrue(SystemUtils.IS_JAVA_1_1); ref {SystemUtils.IS_JAVA_1_1, SystemUtils} [110-110],
 assertFalse(SystemUtils.IS_JAVA_1_2); ref {SystemUtils.IS_JAVA_1_2, SystemUtils} [111-111],
 assertFalse(SystemUtils.IS_JAVA_1_3); ref {SystemUtils.IS_JAVA_1_3, SystemUtils} [112-112],
 assertFalse(SystemUtils.IS_JAVA_1_4); ref {SystemUtils.IS_JAVA_1_4, SystemUtils} [113-113],
 assertFalse(SystemUtils.IS_JAVA_1_5); ref {SystemUtils.IS_JAVA_1_5, SystemUtils} [114-114],
 assertFalse(SystemUtils.IS_JAVA_1_6); ref {SystemUtils.IS_JAVA_1_6, SystemUtils} [115-115],
 assertFalse(SystemUtils.IS_JAVA_1_7); ref {SystemUtils, SystemUtils.IS_JAVA_1_7} [116-116],
 assertFalse(SystemUtils.IS_JAVA_1_8); ref {SystemUtils.IS_JAVA_1_8, SystemUtils} [117-117],
 assertFalse(SystemUtils.IS_JAVA_1_9); ref {SystemUtils.IS_JAVA_1_9, SystemUtils} [118-118],
 assertFalse(SystemUtils.IS_JAVA_1_1); ref {SystemUtils.IS_JAVA_1_1, SystemUtils} [120-120],
 assertTrue(SystemUtils.IS_JAVA_1_2); ref {SystemUtils.IS_JAVA_1_2, SystemUtils} [121-121],
 assertFalse(SystemUtils.IS_JAVA_1_3); ref {SystemUtils.IS_JAVA_1_3, SystemUtils} [122-122],
 assertFalse(SystemUtils.IS_JAVA_1_4); ref {SystemUtils.IS_JAVA_1_4, SystemUtils} [123-123],
 assertFalse(SystemUtils.IS_JAVA_1_5); ref {SystemUtils.IS_JAVA_1_5, SystemUtils} [124-124],
 assertFalse(SystemUtils.IS_JAVA_1_6); ref {SystemUtils.IS_JAVA_1_6, SystemUtils} [125-125],
 assertFalse(SystemUtils.IS_JAVA_1_7); ref {SystemUtils, SystemUtils.IS_JAVA_1_7} [126-126],
 assertFalse(SystemUtils.IS_JAVA_1_8); ref {SystemUtils.IS_JAVA_1_8, SystemUtils} [127-127],
 assertFalse(SystemUtils.IS_JAVA_1_9); ref {SystemUtils.IS_JAVA_1_9, SystemUtils} [128-128],
 assertFalse(SystemUtils.IS_JAVA_1_1); ref {SystemUtils.IS_JAVA_1_1, SystemUtils} [130-130],
 assertFalse(SystemUtils.IS_JAVA_1_2); ref {SystemUtils.IS_JAVA_1_2, SystemUtils} [131-131],
 assertTrue(SystemUtils.IS_JAVA_1_3); ref {SystemUtils.IS_JAVA_1_3, SystemUtils} [132-132],
 assertFalse(SystemUtils.IS_JAVA_1_4); ref {SystemUtils.IS_JAVA_1_4, SystemUtils} [133-133],
 assertFalse(SystemUtils.IS_JAVA_1_5); ref {SystemUtils.IS_JAVA_1_5, SystemUtils} [134-134],
 assertFalse(SystemUtils.IS_JAVA_1_6); ref {SystemUtils.IS_JAVA_1_6, SystemUtils} [135-135],
 assertFalse(SystemUtils.IS_JAVA_1_7); ref {SystemUtils, SystemUtils.IS_JAVA_1_7} [136-136],
 assertFalse(SystemUtils.IS_JAVA_1_8); ref {SystemUtils.IS_JAVA_1_8, SystemUtils} [137-137],
 assertFalse(SystemUtils.IS_JAVA_1_9); ref {SystemUtils.IS_JAVA_1_9, SystemUtils} [138-138],
 assertFalse(SystemUtils.IS_JAVA_1_1); ref {SystemUtils.IS_JAVA_1_1, SystemUtils} [140-140],
 assertFalse(SystemUtils.IS_JAVA_1_2); ref {SystemUtils.IS_JAVA_1_2, SystemUtils} [141-141],
 assertFalse(SystemUtils.IS_JAVA_1_3); ref {SystemUtils.IS_JAVA_1_3, SystemUtils} [142-142],
 assertTrue(SystemUtils.IS_JAVA_1_4); ref {SystemUtils.IS_JAVA_1_4, SystemUtils} [143-143],
 assertFalse(SystemUtils.IS_JAVA_1_5); ref {SystemUtils.IS_JAVA_1_5, SystemUtils} [144-144],
 assertFalse(SystemUtils.IS_JAVA_1_6); ref {SystemUtils.IS_JAVA_1_6, SystemUtils} [145-145],
 assertFalse(SystemUtils.IS_JAVA_1_7); ref {SystemUtils, SystemUtils.IS_JAVA_1_7} [146-146],
 assertFalse(SystemUtils.IS_JAVA_1_8); ref {SystemUtils.IS_JAVA_1_8, SystemUtils} [147-147],
 assertFalse(SystemUtils.IS_JAVA_1_9); ref {SystemUtils.IS_JAVA_1_9, SystemUtils} [148-148],
 assertFalse(SystemUtils.IS_JAVA_1_1); ref {SystemUtils.IS_JAVA_1_1, SystemUtils} [150-150],
 assertFalse(SystemUtils.IS_JAVA_1_2); ref {SystemUtils.IS_JAVA_1_2, SystemUtils} [151-151],
 assertFalse(SystemUtils.IS_JAVA_1_3); ref {SystemUtils.IS_JAVA_1_3, SystemUtils} [152-152],
 assertFalse(SystemUtils.IS_JAVA_1_4); ref {SystemUtils.IS_JAVA_1_4, SystemUtils} [153-153],
 assertTrue(SystemUtils.IS_JAVA_1_5); ref {SystemUtils.IS_JAVA_1_5, SystemUtils} [154-154],
 assertFalse(SystemUtils.IS_JAVA_1_6); ref {SystemUtils.IS_JAVA_1_6, SystemUtils} [155-155],
 assertFalse(SystemUtils.IS_JAVA_1_7); ref {SystemUtils, SystemUtils.IS_JAVA_1_7} [156-156],
 assertFalse(SystemUtils.IS_JAVA_1_8); ref {SystemUtils.IS_JAVA_1_8, SystemUtils} [157-157],
 assertFalse(SystemUtils.IS_JAVA_1_9); ref {SystemUtils.IS_JAVA_1_9, SystemUtils} [158-158],
 assertFalse(SystemUtils.IS_JAVA_1_1); ref {SystemUtils.IS_JAVA_1_1, SystemUtils} [160-160],
 assertFalse(SystemUtils.IS_JAVA_1_2); ref {SystemUtils.IS_JAVA_1_2, SystemUtils} [161-161],
 assertFalse(SystemUtils.IS_JAVA_1_3); ref {SystemUtils.IS_JAVA_1_3, SystemUtils} [162-162],
 assertFalse(SystemUtils.IS_JAVA_1_4); ref {SystemUtils.IS_JAVA_1_4, SystemUtils} [163-163],
 assertFalse(SystemUtils.IS_JAVA_1_5); ref {SystemUtils.IS_JAVA_1_5, SystemUtils} [164-164],
 assertTrue(SystemUtils.IS_JAVA_1_6); ref {SystemUtils.IS_JAVA_1_6, SystemUtils} [165-165],
 assertFalse(SystemUtils.IS_JAVA_1_7); ref {SystemUtils, SystemUtils.IS_JAVA_1_7} [166-166],
 assertFalse(SystemUtils.IS_JAVA_1_8); ref {SystemUtils.IS_JAVA_1_8, SystemUtils} [167-167],
 assertFalse(SystemUtils.IS_JAVA_1_9); ref {SystemUtils.IS_JAVA_1_9, SystemUtils} [168-168],
 assertFalse(SystemUtils.IS_JAVA_1_1); ref {SystemUtils.IS_JAVA_1_1, SystemUtils} [170-170],
 assertFalse(SystemUtils.IS_JAVA_1_2); ref {SystemUtils.IS_JAVA_1_2, SystemUtils} [171-171],
 assertFalse(SystemUtils.IS_JAVA_1_3); ref {SystemUtils.IS_JAVA_1_3, SystemUtils} [172-172],
 assertFalse(SystemUtils.IS_JAVA_1_4); ref {SystemUtils.IS_JAVA_1_4, SystemUtils} [173-173],
 assertFalse(SystemUtils.IS_JAVA_1_5); ref {SystemUtils.IS_JAVA_1_5, SystemUtils} [174-174],
 assertFalse(SystemUtils.IS_JAVA_1_6); ref {SystemUtils.IS_JAVA_1_6, SystemUtils} [175-175],
 assertTrue(SystemUtils.IS_JAVA_1_7); ref {SystemUtils, SystemUtils.IS_JAVA_1_7} [176-176],
 assertFalse(SystemUtils.IS_JAVA_1_8); ref {SystemUtils.IS_JAVA_1_8, SystemUtils} [177-177],
 assertFalse(SystemUtils.IS_JAVA_1_9); ref {SystemUtils.IS_JAVA_1_9, SystemUtils} [178-178],
 assertFalse(SystemUtils.IS_JAVA_1_1); ref {SystemUtils.IS_JAVA_1_1, SystemUtils} [180-180],
 assertFalse(SystemUtils.IS_JAVA_1_2); ref {SystemUtils.IS_JAVA_1_2, SystemUtils} [181-181],
 assertFalse(SystemUtils.IS_JAVA_1_3); ref {SystemUtils.IS_JAVA_1_3, SystemUtils} [182-182],
 assertFalse(SystemUtils.IS_JAVA_1_4); ref {SystemUtils.IS_JAVA_1_4, SystemUtils} [183-183],
 assertFalse(SystemUtils.IS_JAVA_1_5); ref {SystemUtils.IS_JAVA_1_5, SystemUtils} [184-184],
 assertFalse(SystemUtils.IS_JAVA_1_6); ref {SystemUtils.IS_JAVA_1_6, SystemUtils} [185-185],
 assertFalse(SystemUtils.IS_JAVA_1_7); ref {SystemUtils, SystemUtils.IS_JAVA_1_7} [186-186],
 assertTrue(SystemUtils.IS_JAVA_1_8); ref {SystemUtils.IS_JAVA_1_8, SystemUtils} [187-187],
 assertFalse(SystemUtils.IS_JAVA_1_9); ref {SystemUtils.IS_JAVA_1_9, SystemUtils} [188-188],
 assertFalse(SystemUtils.IS_JAVA_1_1); ref {SystemUtils.IS_JAVA_1_1, SystemUtils} [190-190],
 assertFalse(SystemUtils.IS_JAVA_1_2); ref {SystemUtils.IS_JAVA_1_2, SystemUtils} [191-191],
 assertFalse(SystemUtils.IS_JAVA_1_3); ref {SystemUtils.IS_JAVA_1_3, SystemUtils} [192-192],
 assertFalse(SystemUtils.IS_JAVA_1_4); ref {SystemUtils.IS_JAVA_1_4, SystemUtils} [193-193],
 assertFalse(SystemUtils.IS_JAVA_1_5); ref {SystemUtils.IS_JAVA_1_5, SystemUtils} [194-194],
 assertFalse(SystemUtils.IS_JAVA_1_6); ref {SystemUtils.IS_JAVA_1_6, SystemUtils} [195-195],
 assertFalse(SystemUtils.IS_JAVA_1_7); ref {SystemUtils, SystemUtils.IS_JAVA_1_7} [196-196],
 assertFalse(SystemUtils.IS_JAVA_1_8); ref {SystemUtils.IS_JAVA_1_8, SystemUtils} [197-197],
 assertTrue(SystemUtils.IS_JAVA_1_9); ref {SystemUtils.IS_JAVA_1_9, SystemUtils} [198-198]
[m[m31.08.2022 - 15:15:22.911 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SystemUtilsTest::testIS_OS has 25 assertions: 
 assertFalse(SystemUtils.IS_OS_WINDOWS); ref {SystemUtils.IS_OS_WINDOWS, SystemUtils} [208-208],
 assertFalse(SystemUtils.IS_OS_UNIX); ref {SystemUtils.IS_OS_UNIX, SystemUtils} [209-209],
 assertFalse(SystemUtils.IS_OS_SOLARIS); ref {SystemUtils.IS_OS_SOLARIS, SystemUtils} [210-210],
 assertFalse(SystemUtils.IS_OS_LINUX); ref {SystemUtils, SystemUtils.IS_OS_LINUX} [211-211],
 assertFalse(SystemUtils.IS_OS_MAC_OSX); ref {SystemUtils.IS_OS_MAC_OSX, SystemUtils} [212-212],
 assertFalse(SystemUtils.IS_OS_UNIX); ref {SystemUtils.IS_OS_UNIX, SystemUtils} [214-214],
 assertTrue(SystemUtils.IS_OS_WINDOWS); ref {SystemUtils.IS_OS_WINDOWS, SystemUtils} [215-215],
 assertTrue(SystemUtils.IS_OS_SOLARIS); ref {SystemUtils.IS_OS_SOLARIS, SystemUtils} [217-217],
 assertTrue(SystemUtils.IS_OS_UNIX); ref {SystemUtils.IS_OS_UNIX, SystemUtils} [218-218],
 assertFalse(SystemUtils.IS_OS_WINDOWS); ref {SystemUtils.IS_OS_WINDOWS, SystemUtils} [219-219],
 assertTrue(SystemUtils.IS_OS_LINUX); ref {SystemUtils, SystemUtils.IS_OS_LINUX} [221-221],
 assertTrue(SystemUtils.IS_OS_UNIX); ref {SystemUtils.IS_OS_UNIX, SystemUtils} [222-222],
 assertFalse(SystemUtils.IS_OS_WINDOWS); ref {SystemUtils.IS_OS_WINDOWS, SystemUtils} [223-223],
 assertTrue(SystemUtils.IS_OS_MAC_OSX); ref {SystemUtils.IS_OS_MAC_OSX, SystemUtils} [225-225],
 assertTrue(SystemUtils.IS_OS_UNIX); ref {SystemUtils.IS_OS_UNIX, SystemUtils} [226-226],
 assertFalse(SystemUtils.IS_OS_WINDOWS); ref {SystemUtils.IS_OS_WINDOWS, SystemUtils} [227-227],
 assertTrue(SystemUtils.IS_OS_OS2); ref {SystemUtils.IS_OS_OS2, SystemUtils} [229-229],
 assertFalse(SystemUtils.IS_OS_UNIX); ref {SystemUtils.IS_OS_UNIX, SystemUtils} [230-230],
 assertFalse(SystemUtils.IS_OS_WINDOWS); ref {SystemUtils.IS_OS_WINDOWS, SystemUtils} [231-231],
 assertTrue(SystemUtils.IS_OS_SUN_OS); ref {SystemUtils.IS_OS_SUN_OS, SystemUtils} [233-233],
 assertTrue(SystemUtils.IS_OS_UNIX); ref {SystemUtils.IS_OS_UNIX, SystemUtils} [234-234],
 assertFalse(SystemUtils.IS_OS_WINDOWS); ref {SystemUtils.IS_OS_WINDOWS, SystemUtils} [235-235],
 assertTrue(SystemUtils.IS_OS_FREE_BSD); ref {SystemUtils.IS_OS_FREE_BSD, SystemUtils} [237-237],
 assertTrue(SystemUtils.IS_OS_UNIX); ref {SystemUtils.IS_OS_UNIX, SystemUtils} [238-238],
 assertFalse(SystemUtils.IS_OS_WINDOWS); ref {SystemUtils.IS_OS_WINDOWS, SystemUtils} [239-239]
[m[m31.08.2022 - 15:15:22.912 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SystemUtilsTest::testJavaVersionMatches has 104 assertions: 
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [248-248],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [249-249],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [250-250],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [251-251],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [252-252],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [253-253],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [254-254],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [255-255],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [257-257],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [258-258],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [259-259],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [260-260],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [261-261],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [262-262],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [263-263],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [264-264],
 assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [266-266],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [267-267],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [268-268],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [269-269],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [270-270],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [271-271],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [272-272],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [273-273],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [275-275],
 assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [276-276],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [277-277],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [278-278],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [279-279],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [280-280],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [281-281],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [282-282],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [284-284],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [285-285],
 assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [286-286],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [287-287],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [288-288],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [289-289],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [290-290],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [291-291],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [293-293],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [294-294],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [295-295],
 assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [296-296],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [297-297],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [298-298],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [299-299],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [300-300],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [302-302],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [303-303],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [304-304],
 assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [305-305],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [306-306],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [307-307],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [308-308],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [309-309],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [311-311],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [312-312],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [313-313],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [314-314],
 assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [315-315],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [316-316],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [317-317],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [318-318],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [320-320],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [321-321],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [322-322],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [323-323],
 assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [324-324],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [325-325],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [326-326],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [327-327],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [329-329],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [330-330],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [331-331],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [332-332],
 assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [333-333],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [334-334],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [335-335],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [336-336],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [338-338],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [339-339],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [340-340],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [341-341],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [342-342],
 assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [343-343],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [344-344],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [345-345],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [347-347],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [348-348],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [349-349],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [350-350],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [351-351],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [352-352],
 assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [353-353],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [354-354],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); ref {javaVersion, SystemUtils} [356-356],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); ref {javaVersion, SystemUtils} [357-357],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); ref {javaVersion, SystemUtils} [358-358],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); ref {javaVersion, SystemUtils} [359-359],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); ref {javaVersion, SystemUtils} [360-360],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); ref {javaVersion, SystemUtils} [361-361],
 assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); ref {javaVersion, SystemUtils} [362-362],
 assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); ref {javaVersion, SystemUtils} [363-363]
[m[m31.08.2022 - 15:15:22.912 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SystemUtilsTest::testOSMatchesName has 5 assertions: 
 assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); ref {osName, SystemUtils} [369-369],
 assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); ref {osName, SystemUtils} [371-371],
 assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); ref {osName, SystemUtils} [373-373],
 assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); ref {osName, SystemUtils} [375-375],
 assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); ref {osName, SystemUtils} [377-377]
[m[m31.08.2022 - 15:15:22.912 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SystemUtilsTest::testOSMatchesNameAndVersion has 7 assertions: 
 assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); ref {osVersion, osName, SystemUtils} [384-384],
 assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); ref {osVersion, osName, SystemUtils} [387-387],
 assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); ref {osVersion, osName, SystemUtils} [390-390],
 assertTrue(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); ref {osVersion, osName, SystemUtils} [393-393],
 assertTrue(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); ref {osVersion, osName, SystemUtils} [396-396],
 assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); ref {osVersion, osName, SystemUtils} [399-399],
 assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); ref {osVersion, osName, SystemUtils} [402-402]
[m[m31.08.2022 - 15:15:22.912 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SystemUtilsTest::testOsVersionMatches has 22 assertions: 
 assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1")); ref {osVersion, SystemUtils} [408-408],
 assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1")); ref {osVersion, SystemUtils} [411-411],
 assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1")); ref {osVersion, SystemUtils} [414-414],
 assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1.1")); ref {osVersion, SystemUtils} [415-415],
 assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10")); ref {osVersion, SystemUtils} [416-416],
 assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10.1")); ref {osVersion, SystemUtils} [417-417],
 assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1")); ref {osVersion, SystemUtils} [420-420],
 assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1.1")); ref {osVersion, SystemUtils} [421-421],
 assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.10")); ref {osVersion, SystemUtils} [422-422],
 assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.10.1")); ref {osVersion, SystemUtils} [423-423],
 assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1")); ref {osVersion, SystemUtils} [426-426],
 assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1.1")); ref {osVersion, SystemUtils} [427-427],
 assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.10")); ref {osVersion, SystemUtils} [428-428],
 assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.10.1")); ref {osVersion, SystemUtils} [429-429],
 assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1")); ref {osVersion, SystemUtils} [432-432],
 assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1.1")); ref {osVersion, SystemUtils} [433-433],
 assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10")); ref {osVersion, SystemUtils} [434-434],
 assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10.1")); ref {osVersion, SystemUtils} [435-435],
 assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1")); ref {osVersion, SystemUtils} [438-438],
 assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1.1")); ref {osVersion, SystemUtils} [439-439],
 assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10")); ref {osVersion, SystemUtils} [440-440],
 assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10.1")); ref {osVersion, SystemUtils} [441-441]
[m[m31.08.2022 - 15:15:22.912 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.SystemUtilsTest::testJavaAwtHeadless has 7 assertions: 
 assertNotNull(expectedStringValueWithDefault); ref {expectedStringValueWithDefault} [449-449],
 assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS); ref {SystemUtils.JAVA_AWT_HEADLESS, expectedStringValue, SystemUtils} [453-453],
 assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless()); ref {expectedValue, SystemUtils} [455-455],
 assertNull(expectedStringValue); ref {expectedStringValue} [457-457],
 assertNull(SystemUtils.JAVA_AWT_HEADLESS); ref {SystemUtils.JAVA_AWT_HEADLESS, SystemUtils} [458-458],
 assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); ref {expectedStringValueWithDefault, SystemUtils} [459-459],
 assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); ref {expectedStringValueWithDefault, SystemUtils} [461-461]
[m[m31.08.2022 - 15:15:22.918 [INFO ] ParsingStrategy.parseTestSuite() - Found 14 test cases
[m[m31.08.2022 - 15:15:22.918 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::test_getInstance has 1 assertions: 
 assertSame(format1, format2); ref {format2, format1} [56-56]
[m[m31.08.2022 - 15:15:22.918 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::test_getInstance_String has 5 assertions: 
 // -- junit 3.8 version -- assertFalse(format1 == format2);
assertTrue(format1 != format2); ref {format2, format1} [65-65],
 assertSame(format2, format3); ref {format3, format2} [66-66],
 assertEquals("MM/DD/yyyy", format1.getPattern()); ref {format1} [67-67],
 assertEquals(TimeZone.getDefault(), format1.getTimeZone()); ref {TimeZone, format1} [68-68],
 assertEquals(TimeZone.getDefault(), format2.getTimeZone()); ref {TimeZone, format2} [69-69]
[m[m31.08.2022 - 15:15:22.918 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::test_getInstance_String_TimeZone has 6 assertions: 
 // -- junit 3.8 version -- assertFalse(format1 == format2);
assertTrue(format1 != format2); ref {format2, format1} [88-88],
 assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); ref {TimeZone, format1} [89-89],
 assertEquals(TimeZone.getDefault(), format2.getTimeZone()); ref {TimeZone, format2} [90-90],
 assertSame(format3, format4); ref {format4, format3} [91-91],
 // -- junit 3.8 version -- assertFalse(format3 == format5);
assertTrue(format3 != format5); ref {format5, format3} [92-92],
 // -- junit 3.8 version -- assertFalse(format3 == format5);
assertTrue(format4 != format6); ref {format6, format4} [93-93]
[m[m31.08.2022 - 15:15:22.919 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::test_getInstance_String_Locale has 3 assertions: 
 // -- junit 3.8 version -- assertFalse(format1 == format2);
assertTrue(format1 != format2); ref {format2, format1} [110-110],
 assertSame(format1, format3); ref {format3, format1} [111-111],
 assertEquals(Locale.GERMANY, format1.getLocale()); ref {Locale, format1, Locale.GERMANY} [112-112]
[m[m31.08.2022 - 15:15:22.919 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance has 5 assertions: 
 assertSame(Locale.GERMANY, format1.getLocale()); ref {Locale, format1, Locale.GERMANY} [129-129],
 assertSame(Locale.US, format2.getLocale()); ref {Locale.US, Locale, format2} [130-130],
 assertSame(Locale.GERMANY, format3.getLocale()); ref {Locale, format3, Locale.GERMANY} [131-131],
 // -- junit 3.8 version -- assertFalse(format1 == format2);
assertTrue(format1 != format2); ref {format2, format1} [132-132],
 assertTrue(format2 != format3); ref {format3, format2} [133-133]
[m[m31.08.2022 - 15:15:22.919 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::test_changeDefault_Locale_DateTimeInstance has 5 assertions: 
 assertSame(Locale.GERMANY, format1.getLocale()); ref {Locale, format1, Locale.GERMANY} [150-150],
 assertSame(Locale.US, format2.getLocale()); ref {Locale.US, Locale, format2} [151-151],
 assertSame(Locale.GERMANY, format3.getLocale()); ref {Locale, format3, Locale.GERMANY} [152-152],
 // -- junit 3.8 version -- assertFalse(format1 == format2);
assertTrue(format1 != format2); ref {format2, format1} [153-153],
 assertTrue(format2 != format3); ref {format3, format2} [154-154]
[m[m31.08.2022 - 15:15:22.919 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::test_getInstance_String_TimeZone_Locale has 7 assertions: 
 // -- junit 3.8 version -- assertNotSame(format1, format2);
assertTrue(format1 != format2); ref {format2, format1} [175-175],
 assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); ref {TimeZone, format1} [176-176],
 assertEquals(TimeZone.getDefault(), format2.getTimeZone()); ref {TimeZone, format2} [177-177],
 assertEquals(TimeZone.getDefault(), format3.getTimeZone()); ref {TimeZone, format3} [178-178],
 assertEquals(Locale.GERMANY, format1.getLocale()); ref {Locale, format1, Locale.GERMANY} [179-179],
 assertEquals(Locale.GERMANY, format2.getLocale()); ref {Locale, format2, Locale.GERMANY} [180-180],
 assertEquals(Locale.GERMANY, format3.getLocale()); ref {Locale, format3, Locale.GERMANY} [181-181]
[m[m31.08.2022 - 15:15:22.919 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::testCheckDefaults has 4 assertions: 
 assertEquals(medium, format); ref {format, medium} [193-193],
 assertEquals(sdf.toPattern(), format.getPattern()); ref {sdf, format} [196-196],
 assertEquals(Locale.getDefault(), format.getLocale()); ref {Locale, format} [198-198],
 assertEquals(TimeZone.getDefault(), format.getTimeZone()); ref {TimeZone, format} [199-199]
[m[m31.08.2022 - 15:15:22.919 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::testCheckDifferingStyles has 6 assertions: 
 assertFalse(shortShort.equals(shortLong)); ref {shortLong, shortShort} [209-209],
 assertFalse(shortShort.equals(longShort)); ref {longShort, shortShort} [210-210],
 assertFalse(shortShort.equals(longLong)); ref {shortShort, longLong} [211-211],
 assertFalse(shortLong.equals(longShort)); ref {shortLong, longShort} [212-212],
 assertFalse(shortLong.equals(longLong)); ref {shortLong, longLong} [213-213],
 assertFalse(longShort.equals(longLong)); ref {longShort, longLong} [214-214]
[m[m31.08.2022 - 15:15:22.919 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::testDateDefaults has 3 assertions: 
 assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); ref {Locale.CANADA, Locale, TimeZone, FastDateFormat.LONG, FastDateFormat} [219-220],
 assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); ref {Locale, TimeZone, FastDateFormat.LONG, FastDateFormat} [222-223],
 assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); ref {Locale, TimeZone, FastDateFormat.LONG, FastDateFormat} [225-226]
[m[m31.08.2022 - 15:15:22.919 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::testTimeDefaults has 3 assertions: 
 assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); ref {Locale.CANADA, Locale, TimeZone, FastDateFormat.LONG, FastDateFormat} [231-232],
 assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); ref {Locale, TimeZone, FastDateFormat.LONG, FastDateFormat} [234-235],
 assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); ref {Locale, TimeZone, FastDateFormat.LONG, FastDateFormat} [237-238]
[m[m31.08.2022 - 15:15:22.919 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::testTimeDateDefaults has 3 assertions: 
 assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); ref {Locale.CANADA, Locale, TimeZone, FastDateFormat.LONG, FastDateFormat, FastDateFormat.MEDIUM} [243-244],
 assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); ref {Locale, TimeZone, FastDateFormat.LONG, FastDateFormat, FastDateFormat.MEDIUM} [246-247],
 assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); ref {Locale, TimeZone, FastDateFormat.LONG, FastDateFormat, FastDateFormat.MEDIUM} [249-250]
[m[m31.08.2022 - 15:15:22.919 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::testLang954 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.919 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateFormatTest::testParseSync has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.920 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 15:15:22.921 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.EntityArraysTest::testConstructorExists has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.921 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.EntityArraysTest::testHTML40_EXTENDED_ESCAPE has 2 assertions: 
 assertTrue("Already added entry 0: " + i + " " + sa[i][0], col0.add(sa[i][0])); ref {i, sa, col0} [45-45],
 assertTrue("Already added entry 1: " + i + " " + sa[i][1], col1.add(sa[i][1])); ref {i, sa, col1} [46-46]
[m[m31.08.2022 - 15:15:22.921 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.EntityArraysTest::testISO8859_1_ESCAPE has 1 assertions: 
 assertTrue("One or more errors detected", success); ref {success} [69-69]
[m[m31.08.2022 - 15:15:22.925 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:22.925 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultiLineToStringStyleTest::testBlank has 1 assertions: 
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [54-54]
[m[m31.08.2022 - 15:15:22.926 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultiLineToStringStyleTest::testAppendSuper has 5 assertions: 
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [59-59],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [60-60],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [62-62],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [63-63],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [64-64]
[m[m31.08.2022 - 15:15:22.926 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultiLineToStringStyleTest::testObject has 12 assertions: 
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) null).toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [71-71],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  3" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(i3).toString()); ref {i3, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [72-72],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", (Object) null).toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [73-73],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=3" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", i3).toString()); ref {i3, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [74-74],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=3" + SystemUtils.LINE_SEPARATOR + "  b=4" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); ref {i3, i4, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [75-75],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<Integer>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", i3, false).toString()); ref {i3, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [76-76],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<size=0>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [77-77],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=[]" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [78-78],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<size=0>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [79-79],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a={}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [80-80],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<size=0>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [81-81],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a={}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [82-82]
[m[m31.08.2022 - 15:15:22.926 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultiLineToStringStyleTest::testPerson has 1 assertions: 
 assertEquals(pBaseStr + "[" + SystemUtils.LINE_SEPARATOR + "  name=Jane Doe" + SystemUtils.LINE_SEPARATOR + "  age=25" + SystemUtils.LINE_SEPARATOR + "  smoker=true" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); ref {p, p.age, p.smoker, p.name, pBaseStr, SystemUtils.LINE_SEPARATOR, SystemUtils} [92-92]
[m[m31.08.2022 - 15:15:22.926 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultiLineToStringStyleTest::testLong has 3 assertions: 
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  3" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(3L).toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [97-97],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=3" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", 3L).toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [98-98],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=3" + SystemUtils.LINE_SEPARATOR + "  b=4" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); ref {baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [99-99]
[m[m31.08.2022 - 15:15:22.926 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultiLineToStringStyleTest::testObjectArray has 4 assertions: 
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [105-105],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [106-106],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [108-108],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [109-109]
[m[m31.08.2022 - 15:15:22.926 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultiLineToStringStyleTest::testLongArray has 4 assertions: 
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [115-115],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [116-116],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [118-118],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [119-119]
[m[m31.08.2022 - 15:15:22.926 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultiLineToStringStyleTest::testLongArrayArray has 4 assertions: 
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {{1,2},<null>,{5}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [125-125],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {{1,2},<null>,{5}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [126-126],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [128-128],
 assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, SystemUtils.LINE_SEPARATOR, SystemUtils, base} [129-129]
[m[m31.08.2022 - 15:15:22.929 [INFO ] ParsingStrategy.parseTestSuite() - Found 6 test cases
[m[m31.08.2022 - 15:15:22.929 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.ImmutableTripleTest::testBasic has 12 assertions: 
 assertEquals(0, triple.left.intValue()); ref {triple, triple.left} [40-40],
 assertEquals(0, triple.getLeft().intValue()); ref {triple} [41-41],
 assertEquals("foo", triple.middle); ref {triple.middle, triple} [42-42],
 assertEquals("foo", triple.getMiddle()); ref {triple} [43-43],
 assertEquals(Boolean.TRUE, triple.right); ref {Boolean.TRUE, triple, Boolean, triple.right} [44-44],
 assertEquals(Boolean.TRUE, triple.getRight()); ref {Boolean.TRUE, triple, Boolean} [45-45],
 assertNull(triple2.left); ref {triple2, triple2.left} [47-47],
 assertNull(triple2.getLeft()); ref {triple2} [48-48],
 assertEquals("bar", triple2.middle); ref {triple2.middle, triple2} [49-49],
 assertEquals("bar", triple2.getMiddle()); ref {triple2} [50-50],
 assertEquals(new Integer(42), triple2.right); ref {triple2, triple2.right} [51-51],
 assertEquals(new Integer(42), triple2.getRight()); ref {triple2} [52-52]
[m[m31.08.2022 - 15:15:22.929 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.ImmutableTripleTest::testTripleOf has 12 assertions: 
 assertEquals(0, triple.left.intValue()); ref {triple, triple.left} [58-58],
 assertEquals(0, triple.getLeft().intValue()); ref {triple} [59-59],
 assertEquals("foo", triple.middle); ref {triple.middle, triple} [60-60],
 assertEquals("foo", triple.getMiddle()); ref {triple} [61-61],
 assertEquals(Boolean.FALSE, triple.right); ref {triple, Boolean.FALSE, Boolean, triple.right} [62-62],
 assertEquals(Boolean.FALSE, triple.getRight()); ref {triple, Boolean.FALSE, Boolean} [63-63],
 assertNull(triple2.left); ref {triple2, triple2.left} [65-65],
 assertNull(triple2.getLeft()); ref {triple2} [66-66],
 assertEquals("bar", triple2.middle); ref {triple2.middle, triple2} [67-67],
 assertEquals("bar", triple2.getMiddle()); ref {triple2} [68-68],
 assertEquals(Boolean.TRUE, triple2.right); ref {Boolean.TRUE, triple2, Boolean, triple2.right} [69-69],
 assertEquals(Boolean.TRUE, triple2.getRight()); ref {Boolean.TRUE, triple2, Boolean} [70-70]
[m[m31.08.2022 - 15:15:22.929 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.ImmutableTripleTest::testEquals has 5 assertions: 
 assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); ref {ImmutableTriple} [75-75],
 assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); ref {Boolean.TRUE, ImmutableTriple, Boolean} [76-76],
 assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); ref {ImmutableTriple} [77-77],
 assertTrue(p.equals(p)); ref {p} [80-80],
 assertFalse(p.equals(new Object())); ref {p} [81-81]
[m[m31.08.2022 - 15:15:22.929 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.ImmutableTripleTest::testHashCode has 1 assertions: 
 assertEquals(ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode(), ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode()); ref {Boolean.TRUE, ImmutableTriple, Boolean} [86-86]
[m[m31.08.2022 - 15:15:22.929 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.ImmutableTripleTest::testToString has 7 assertions: 
 assertEquals("(null,null,null)", ImmutableTriple.of(null, null, null).toString()); ref {ImmutableTriple} [91-91],
 assertEquals("(null,two,null)", ImmutableTriple.of(null, "two", null).toString()); ref {ImmutableTriple} [92-92],
 assertEquals("(one,null,null)", ImmutableTriple.of("one", null, null).toString()); ref {ImmutableTriple} [93-93],
 assertEquals("(one,two,null)", ImmutableTriple.of("one", "two", null).toString()); ref {ImmutableTriple} [94-94],
 assertEquals("(null,two,three)", ImmutableTriple.of(null, "two", "three").toString()); ref {ImmutableTriple} [95-95],
 assertEquals("(one,null,three)", ImmutableTriple.of("one", null, "three").toString()); ref {ImmutableTriple} [96-96],
 assertEquals("(one,two,three)", MutableTriple.of("one", "two", "three").toString()); ref {MutableTriple} [97-97]
[m[m31.08.2022 - 15:15:22.929 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.ImmutableTripleTest::testSerialization has 2 assertions: 
 assertEquals(origTriple, deserializedTriple); ref {origTriple, deserializedTriple} [109-109],
 assertEquals(origTriple.hashCode(), deserializedTriple.hashCode()); ref {origTriple, deserializedTriple} [110-110]
[m[m31.08.2022 - 15:15:22.931 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 15:15:22.931 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.IEEE754rUtilsTest::testLang381 has 14 assertions: 
 assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); ref {Double.NaN, IEEE754rUtils, Double} [34-34],
 assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); ref {Double.NaN, IEEE754rUtils, Double} [35-35],
 assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); ref {Double.NaN, IEEE754rUtils, Double} [36-36],
 assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); ref {Float, IEEE754rUtils, Float.NaN} [37-37],
 assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); ref {Float, IEEE754rUtils, Float.NaN} [38-38],
 assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); ref {Float, IEEE754rUtils, Float.NaN} [39-39],
 assertEquals(42.0, IEEE754rUtils.max(a), 0.01); ref {a, IEEE754rUtils} [42-42],
 assertEquals(1.2, IEEE754rUtils.min(a), 0.01); ref {a, IEEE754rUtils} [43-43],
 assertEquals(42.0, IEEE754rUtils.max(b), 0.01); ref {b, IEEE754rUtils} [46-46],
 assertEquals(1.2, IEEE754rUtils.min(b), 0.01); ref {b, IEEE754rUtils} [47-47],
 assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); ref {aF, IEEE754rUtils} [50-50],
 assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); ref {aF, IEEE754rUtils} [51-51],
 assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); ref {bF, IEEE754rUtils} [54-54],
 assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); ref {bF, IEEE754rUtils} [55-55]
[m[m31.08.2022 - 15:15:22.931 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.IEEE754rUtilsTest::testEnforceExceptions has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.931 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.IEEE754rUtilsTest::testConstructorExists has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.931 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:22.932 [INFO ] ParsingStrategy.parseTestSuite() - Found 9 test cases
[m[m31.08.2022 - 15:15:22.932 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.InheritanceUtilsTest::testConstructor has 1 assertions: 
 assertNotNull(InheritanceUtils.class.newInstance()); ref {} [34-34]
[m[m31.08.2022 - 15:15:22.932 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.InheritanceUtilsTest::testDistanceGreaterThanZero has 4 assertions: 
 assertEquals(1, InheritanceUtils.distance(AnotherChild.class, AnotherParent.class)); ref {InheritanceUtils} [39-39],
 assertEquals(1, InheritanceUtils.distance(Grandchild.class, AnotherChild.class)); ref {InheritanceUtils} [40-40],
 assertEquals(2, InheritanceUtils.distance(Grandchild.class, AnotherParent.class)); ref {InheritanceUtils} [41-41],
 assertEquals(3, InheritanceUtils.distance(Grandchild.class, Object.class)); ref {InheritanceUtils} [42-42]
[m[m31.08.2022 - 15:15:22.932 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.InheritanceUtilsTest::testDistanceEqual has 1 assertions: 
 assertEquals(0, InheritanceUtils.distance(AnotherChild.class, AnotherChild.class)); ref {InheritanceUtils} [47-47]
[m[m31.08.2022 - 15:15:22.932 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.InheritanceUtilsTest::testDistanceEqualObject has 1 assertions: 
 assertEquals(0, InheritanceUtils.distance(Object.class, Object.class)); ref {InheritanceUtils} [52-52]
[m[m31.08.2022 - 15:15:22.932 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.InheritanceUtilsTest::testDistanceNullChild has 1 assertions: 
 assertEquals(-1, InheritanceUtils.distance(null, Object.class)); ref {InheritanceUtils} [57-57]
[m[m31.08.2022 - 15:15:22.932 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.InheritanceUtilsTest::testDistanceNullParent has 1 assertions: 
 assertEquals(-1, InheritanceUtils.distance(Object.class, null)); ref {InheritanceUtils} [62-62]
[m[m31.08.2022 - 15:15:22.933 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.InheritanceUtilsTest::testDistanceNullParentNullChild has 1 assertions: 
 assertEquals(-1, InheritanceUtils.distance(null, null)); ref {InheritanceUtils} [67-67]
[m[m31.08.2022 - 15:15:22.933 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.InheritanceUtilsTest::testDistanceDisjoint has 1 assertions: 
 assertEquals(-1, InheritanceUtils.distance(Boolean.class, String.class)); ref {InheritanceUtils} [72-72]
[m[m31.08.2022 - 15:15:22.933 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.InheritanceUtilsTest::testDistanceReverseParentChild has 1 assertions: 
 assertEquals(-1, InheritanceUtils.distance(Object.class, Grandchild.class)); ref {InheritanceUtils} [77-77]
[m[m31.08.2022 - 15:15:22.940 [INFO ] ParsingStrategy.parseTestSuite() - Found 28 test cases
[m[m31.08.2022 - 15:15:22.941 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new StringEscapeUtils()); ref {} [47-47],
 assertEquals(1, cons.length); ref {cons.length, cons} [49-49],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [50-50],
 assertTrue(Modifier.isPublic(StringEscapeUtils.class.getModifiers())); ref {Modifier} [51-51],
 assertFalse(Modifier.isFinal(StringEscapeUtils.class.getModifiers())); ref {Modifier} [52-52]
[m[m31.08.2022 - 15:15:22.941 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeJava has 15 assertions: 
 assertEquals(null, StringEscapeUtils.escapeJava(null)); ref {StringEscapeUtils} [57-57],
 assertEscapeJava("empty string", "", ""); ref {} [73-73],
 assertEscapeJava(FOO, FOO); ref {FOO} [74-74],
 assertEscapeJava("tab", "\\t", "\t"); ref {} [75-75],
 assertEscapeJava("backslash", "\\\\", "\\"); ref {} [76-76],
 assertEscapeJava("single quote should not be escaped", "'", "'"); ref {} [77-77],
 assertEscapeJava("\\\\\\b\\t\\r", "\\\b\t\r"); ref {} [78-78],
 assertEscapeJava("\\u1234", "\u1234"); ref {} [79-79],
 assertEscapeJava("\\u0234", "\u0234"); ref {} [80-80],
 assertEscapeJava("\\u00EF", "\u00ef"); ref {} [81-81],
 assertEscapeJava("\\u0001", "\u0001"); ref {} [82-82],
 assertEscapeJava("Should use capitalized Unicode hex", "\\uABCD", "\uabcd"); ref {} [83-83],
 assertEscapeJava("He didn't say, \\\"stop!\\\"", "He didn't say, \"stop!\""); ref {} [85-86],
 assertEscapeJava("non-breaking space", "This space is non-breaking:" + "\\u00A0", "This space is non-breaking:\u00a0"); ref {} [87-88],
 assertEscapeJava("\\uABCD\\u1234\\u012C", "\uABCD\u1234\u012C"); ref {} [89-90]
[m[m31.08.2022 - 15:15:22.941 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeJavaWithSlash has 1 assertions: 
 /**
 * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape
 * in a Java string.
 */
assertEquals(expected, actual); ref {actual, expected} [107-107]
[m[m31.08.2022 - 15:15:22.941 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeJava has 10 assertions: 
 assertEquals(null, StringEscapeUtils.unescapeJava(null)); ref {StringEscapeUtils} [126-126],
 assertUnescapeJava("", ""); ref {} [147-147],
 assertUnescapeJava("test", "test"); ref {} [148-148],
 assertUnescapeJava("\ntest\b", "\\ntest\\b"); ref {} [149-149],
 assertUnescapeJava("\u123425foo\ntest\b", "\\u123425foo\\ntest\\b"); ref {} [150-150],
 assertUnescapeJava("'\foo\teste\r", "\\'\\foo\\teste\\r"); ref {} [151-151],
 assertUnescapeJava("", "\\"); ref {} [152-152],
 // foo
assertUnescapeJava("lowercase Unicode", "\uABCDx", "\\uabcdx"); ref {} [154-154],
 assertUnescapeJava("uppercase Unicode", "\uABCDx", "\\uABCDx"); ref {} [155-155],
 assertUnescapeJava("Unicode as final character", "\uABCD", "\\uabcd"); ref {} [156-156]
[m[m31.08.2022 - 15:15:22.941 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeEcmaScript has 3 assertions: 
 assertEquals(null, StringEscapeUtils.escapeEcmaScript(null)); ref {StringEscapeUtils} [182-182],
 assertEquals("He didn\\'t say, \\\"stop!\\\"", StringEscapeUtils.escapeEcmaScript("He didn't say, \"stop!\"")); ref {StringEscapeUtils} [198-198],
 assertEquals("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';", StringEscapeUtils.escapeEcmaScript("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';")); ref {StringEscapeUtils} [199-200]
[m[m31.08.2022 - 15:15:22.941 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeHtml has 2 assertions: 
 assertEquals(message, expected, StringEscapeUtils.escapeHtml4(original)); ref {original, expected, message, StringEscapeUtils} [227-227],
 assertEquals(message, expected, actual); ref {actual, expected, message} [234-234]
[m[m31.08.2022 - 15:15:22.941 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeHtml4 has 7 assertions: 
 assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); ref {original, expected, message, StringEscapeUtils} [244-244],
 assertEquals(message, expected, actual); ref {actual, expected, message} [252-252],
 // \u00E7 is a cedilla (c with wiggle under)
// note that the test string must be 7-bit-clean (Unicode escaped) or else it will compile incorrectly
// on some locales
assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); ref {StringEscapeUtils} [257-257],
 assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); ref {StringEscapeUtils} [259-259],
 assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); ref {StringEscapeUtils} [260-260],
 assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); ref {StringEscapeUtils} [261-261],
 assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); ref {StringEscapeUtils} [262-262]
[m[m31.08.2022 - 15:15:22.941 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeHexCharsHtml has 3 assertions: 
 // Simple easy to grok test
assertEquals("hex number unescape", "\u0080\u009F", StringEscapeUtils.unescapeHtml4("&#x80;&#x9F;")); ref {StringEscapeUtils} [268-268],
 assertEquals("hex number unescape", "\u0080\u009F", StringEscapeUtils.unescapeHtml4("&#X80;&#X9F;")); ref {StringEscapeUtils} [269-269],
 assertEquals("hex number unescape index " + (int) i, expected, StringEscapeUtils.unescapeHtml4(escapedC1 + escapedC2)); ref {expected, i, escapedC2, StringEscapeUtils, escapedC1} [277-277]
[m[m31.08.2022 - 15:15:22.941 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeUnknownEntity has 1 assertions: 
 assertEquals("&zzzz;", StringEscapeUtils.unescapeHtml4("&zzzz;")); ref {StringEscapeUtils} [283-283]
[m[m31.08.2022 - 15:15:22.941 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeHtmlVersions has 2 assertions: 
 assertEquals("&Beta;", StringEscapeUtils.escapeHtml4("\u0392")); ref {StringEscapeUtils} [288-288],
 assertEquals("\u0392", StringEscapeUtils.unescapeHtml4("&Beta;")); ref {StringEscapeUtils} [289-289]
[m[m31.08.2022 - 15:15:22.942 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXml has 14 assertions: 
 assertEquals("&lt;abc&gt;", StringEscapeUtils.escapeXml("<abc>")); ref {StringEscapeUtils} [297-297],
 assertEquals("<abc>", StringEscapeUtils.unescapeXml("&lt;abc&gt;")); ref {StringEscapeUtils} [298-298],
 assertEquals("XML should not escape >0x7f values", "\u00A1", StringEscapeUtils.escapeXml("\u00A1")); ref {StringEscapeUtils} [300-301],
 assertEquals("XML should be able to unescape >0x7f values", "\u00A0", StringEscapeUtils.unescapeXml("&#160;")); ref {StringEscapeUtils} [302-303],
 assertEquals("XML should be able to unescape >0x7f values with one leading 0", "\u00A0", StringEscapeUtils.unescapeXml("&#0160;")); ref {StringEscapeUtils} [304-305],
 assertEquals("XML should be able to unescape >0x7f values with two leading 0s", "\u00A0", StringEscapeUtils.unescapeXml("&#00160;")); ref {StringEscapeUtils} [306-307],
 assertEquals("XML should be able to unescape >0x7f values with three leading 0s", "\u00A0", StringEscapeUtils.unescapeXml("&#000160;")); ref {StringEscapeUtils} [308-309],
 assertEquals("ain't", StringEscapeUtils.unescapeXml("ain&apos;t")); ref {StringEscapeUtils} [311-311],
 assertEquals("ain&apos;t", StringEscapeUtils.escapeXml("ain't")); ref {StringEscapeUtils} [312-312],
 assertEquals("", StringEscapeUtils.escapeXml("")); ref {StringEscapeUtils} [313-313],
 assertEquals(null, StringEscapeUtils.escapeXml(null)); ref {StringEscapeUtils} [314-314],
 assertEquals(null, StringEscapeUtils.unescapeXml(null)); ref {StringEscapeUtils} [315-315],
 assertEquals("XML was escaped incorrectly", "&lt;abc&gt;", sw.toString()); ref {sw} [322-322],
 assertEquals("XML was unescaped incorrectly", "<abc>", sw.toString()); ref {sw} [329-329]
[m[m31.08.2022 - 15:15:22.942 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXml10 has 6 assertions: 
 assertEquals("a&lt;b&gt;c&quot;d&apos;e&amp;f", StringEscapeUtils.escapeXml10("a<b>c\"d'e&f")); ref {StringEscapeUtils} [334-334],
 assertEquals("XML 1.0 should not escape \t \n \r", "a\tb\rc\nd", StringEscapeUtils.escapeXml10("a\tb\rc\nd")); ref {StringEscapeUtils} [335-336],
 assertEquals("XML 1.0 should omit most #x0-x8 | #xb | #xc | #xe-#x19", "ab", StringEscapeUtils.escapeXml10("a\u0000\u0001\u0008\u000b\u000c\u000e\u001fb")); ref {StringEscapeUtils} [337-338],
 assertEquals("XML 1.0 should omit #xd800-#xdfff", "a\ud7ff  \ue000b", StringEscapeUtils.escapeXml10("a\ud7ff\ud800 \udfff \ue000b")); ref {StringEscapeUtils} [339-340],
 assertEquals("XML 1.0 should omit #xfffe | #xffff", "a\ufffdb", StringEscapeUtils.escapeXml10("a\ufffd\ufffe\uffffb")); ref {StringEscapeUtils} [341-342],
 assertEquals("XML 1.0 should escape #x7f-#x84 | #x86 - #x9f, for XML 1.1 compatibility", "a\u007e&#127;&#132;\u0085&#134;&#159;\u00a0b", StringEscapeUtils.escapeXml10("a\u007e\u007f\u0084\u0085\u0086\u009f\u00a0b")); ref {StringEscapeUtils} [343-344]
[m[m31.08.2022 - 15:15:22.942 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXml11 has 7 assertions: 
 assertEquals("a&lt;b&gt;c&quot;d&apos;e&amp;f", StringEscapeUtils.escapeXml11("a<b>c\"d'e&f")); ref {StringEscapeUtils} [349-349],
 assertEquals("XML 1.1 should not escape \t \n \r", "a\tb\rc\nd", StringEscapeUtils.escapeXml11("a\tb\rc\nd")); ref {StringEscapeUtils} [350-351],
 assertEquals("XML 1.1 should omit #x0", "ab", StringEscapeUtils.escapeXml11("a\u0000b")); ref {StringEscapeUtils} [352-353],
 assertEquals("XML 1.1 should escape #x1-x8 | #xb | #xc | #xe-#x19", "a&#1;&#8;&#11;&#12;&#14;&#31;b", StringEscapeUtils.escapeXml11("a\u0001\u0008\u000b\u000c\u000e\u001fb")); ref {StringEscapeUtils} [354-355],
 assertEquals("XML 1.1 should escape #x7F-#x84 | #x86-#x9F", "a\u007e&#127;&#132;\u0085&#134;&#159;\u00a0b", StringEscapeUtils.escapeXml11("a\u007e\u007f\u0084\u0085\u0086\u009f\u00a0b")); ref {StringEscapeUtils} [356-357],
 assertEquals("XML 1.1 should omit #xd800-#xdfff", "a\ud7ff  \ue000b", StringEscapeUtils.escapeXml11("a\ud7ff\ud800 \udfff \ue000b")); ref {StringEscapeUtils} [358-359],
 assertEquals("XML 1.1 should omit #xfffe | #xffff", "a\ufffdb", StringEscapeUtils.escapeXml11("a\ufffd\ufffe\uffffb")); ref {StringEscapeUtils} [360-361]
[m[m31.08.2022 - 15:15:22.942 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXmlSupplementaryCharacters has 2 assertions: 
 assertEquals("Supplementary character must be represented using a single escape", "&#144308;", escapeXml.translate("\uD84C\uDFB4")); ref {escapeXml} [385-386],
 assertEquals("Supplementary characters mixed with basic characters should be encoded correctly", "a b c &#144308;", escapeXml.translate("a b c \uD84C\uDFB4")); ref {escapeXml} [388-389]
[m[m31.08.2022 - 15:15:22.942 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXmlAllCharacters has 7 assertions: 
 assertEquals("&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;", escapeXml.translate("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008")); ref {escapeXml} [402-402],
 // 0x9
assertEquals("\t", escapeXml.translate("\t")); ref {escapeXml} [403-403],
 // 0xA
assertEquals("\n", escapeXml.translate("\n")); ref {escapeXml} [404-404],
 assertEquals("&#11;&#12;", escapeXml.translate("\u000B\u000C")); ref {escapeXml} [405-405],
 // 0xD
assertEquals("\r", escapeXml.translate("\r")); ref {escapeXml} [406-406],
 assertEquals("Hello World! Ain&apos;t this great?", escapeXml.translate("Hello World! Ain't this great?")); ref {escapeXml} [407-407],
 assertEquals("&#14;&#15;&#24;&#25;", escapeXml.translate("\u000E\u000F\u0018\u0019")); ref {escapeXml} [408-408]
[m[m31.08.2022 - 15:15:22.942 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeXmlSupplementaryCharacters has 2 assertions: 
 assertEquals("Supplementary character must be represented using a single escape", "\uD84C\uDFB4", StringEscapeUtils.unescapeXml("&#144308;")); ref {StringEscapeUtils} [418-419],
 assertEquals("Supplementary characters mixed with basic characters should be decoded correctly", "a b c \uD84C\uDFB4", StringEscapeUtils.unescapeXml("a b c &#144308;")); ref {StringEscapeUtils} [421-422]
[m[m31.08.2022 - 15:15:22.942 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testStandaloneAmphersand has 4 assertions: 
 assertEquals("<P&O>", StringEscapeUtils.unescapeHtml4("&lt;P&O&gt;")); ref {StringEscapeUtils} [429-429],
 assertEquals("test & <", StringEscapeUtils.unescapeHtml4("test & &lt;")); ref {StringEscapeUtils} [430-430],
 assertEquals("<P&O>", StringEscapeUtils.unescapeXml("&lt;P&O&gt;")); ref {StringEscapeUtils} [431-431],
 assertEquals("test & <", StringEscapeUtils.unescapeXml("test & &lt;")); ref {StringEscapeUtils} [432-432]
[m[m31.08.2022 - 15:15:22.942 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testLang313 has 1 assertions: 
 assertEquals("& &", StringEscapeUtils.unescapeHtml4("& &amp;")); ref {StringEscapeUtils} [437-437]
[m[m31.08.2022 - 15:15:22.942 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeCsvString has 8 assertions: 
 assertEquals("foo.bar", StringEscapeUtils.escapeCsv("foo.bar")); ref {StringEscapeUtils} [442-442],
 assertEquals("\"foo,bar\"", StringEscapeUtils.escapeCsv("foo,bar")); ref {StringEscapeUtils} [443-443],
 assertEquals("\"foo\nbar\"", StringEscapeUtils.escapeCsv("foo\nbar")); ref {StringEscapeUtils} [444-444],
 assertEquals("\"foo\rbar\"", StringEscapeUtils.escapeCsv("foo\rbar")); ref {StringEscapeUtils} [445-445],
 assertEquals("\"foo\"\"bar\"", StringEscapeUtils.escapeCsv("foo\"bar")); ref {StringEscapeUtils} [446-446],
 assertEquals("foo\uD84C\uDFB4bar", StringEscapeUtils.escapeCsv("foo\uD84C\uDFB4bar")); ref {StringEscapeUtils} [447-447],
 assertEquals("", StringEscapeUtils.escapeCsv("")); ref {StringEscapeUtils} [448-448],
 assertEquals(null, StringEscapeUtils.escapeCsv(null)); ref {StringEscapeUtils} [449-449]
[m[m31.08.2022 - 15:15:22.942 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeCsvWriter has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.943 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeCsvString has 9 assertions: 
 assertEquals("foo.bar", StringEscapeUtils.unescapeCsv("foo.bar")); ref {StringEscapeUtils} [476-476],
 assertEquals("foo,bar", StringEscapeUtils.unescapeCsv("\"foo,bar\"")); ref {StringEscapeUtils} [477-477],
 assertEquals("foo\nbar", StringEscapeUtils.unescapeCsv("\"foo\nbar\"")); ref {StringEscapeUtils} [478-478],
 assertEquals("foo\rbar", StringEscapeUtils.unescapeCsv("\"foo\rbar\"")); ref {StringEscapeUtils} [479-479],
 assertEquals("foo\"bar", StringEscapeUtils.unescapeCsv("\"foo\"\"bar\"")); ref {StringEscapeUtils} [480-480],
 assertEquals("foo\uD84C\uDFB4bar", StringEscapeUtils.unescapeCsv("foo\uD84C\uDFB4bar")); ref {StringEscapeUtils} [481-481],
 assertEquals("", StringEscapeUtils.unescapeCsv("")); ref {StringEscapeUtils} [482-482],
 assertEquals(null, StringEscapeUtils.unescapeCsv(null)); ref {StringEscapeUtils} [483-483],
 assertEquals("\"foo.bar\"", StringEscapeUtils.unescapeCsv("\"foo.bar\"")); ref {StringEscapeUtils} [485-485]
[m[m31.08.2022 - 15:15:22.943 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeCsvWriter has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.943 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeHtmlHighUnicode has 2 assertions: 
 assertEquals("High Unicode should not have been escaped", original, escaped); ref {escaped, original} [526-526],
 assertEquals("High Unicode should have been unchanged", original, unescaped); ref {unescaped, original} [529-529]
[m[m31.08.2022 - 15:15:22.943 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeHiragana has 2 assertions: 
 assertEquals("Hiragana character Unicode behaviour should not be being escaped by escapeHtml4", original, escaped); ref {escaped, original} [544-545],
 assertEquals("Hiragana character Unicode behaviour has changed - expected no unescaping", escaped, unescaped); ref {escaped, unescaped} [549-549]
[m[m31.08.2022 - 15:15:22.943 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testLang708 has 2 assertions: 
 // just the end:
assertTrue(escaped, escaped.endsWith("}]")); ref {escaped} [564-564],
 // a little more:
assertTrue(escaped, escaped.endsWith("\"valueCode\\\":\\\"\\\"}]")); ref {escaped} [566-566]
[m[m31.08.2022 - 15:15:22.943 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testLang720 has 1 assertions: 
 assertEquals(input, escaped); ref {escaped, input} [578-578]
[m[m31.08.2022 - 15:15:22.943 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testLang911 has 1 assertions: 
 assertEquals(bellsTest, valueTest); ref {bellsTest, valueTest} [589-589]
[m[m31.08.2022 - 15:15:22.943 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeJson has 3 assertions: 
 assertEquals(null, StringEscapeUtils.escapeJson(null)); ref {StringEscapeUtils} [594-594],
 assertEquals("He didn't say, \\\"stop!\\\"", StringEscapeUtils.escapeJson("He didn't say, \"stop!\"")); ref {StringEscapeUtils} [610-610],
 assertEquals(expected, StringEscapeUtils.escapeJson(input)); ref {input, expected, StringEscapeUtils} [615-615]
[m[m31.08.2022 - 15:15:22.944 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 15:15:22.944 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testSupplementaryUnescaping has 1 assertions: 
 assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); ref {result, expected} [38-38]
[m[m31.08.2022 - 15:15:22.944 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds has 4 assertions: 
 assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &")); ref {neu} [45-45],
 assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#")); ref {neu} [46-46],
 assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x")); ref {neu} [47-47],
 assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X")); ref {neu} [48-48]
[m[m31.08.2022 - 15:15:22.944 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity has 2 assertions: 
 assertEquals("Failed to support unfinished entities (i.e. missing semi-colon)", expected, result); ref {result, expected} [59-59],
 assertEquals("Failed to ignore unfinished entities (i.e. missing semi-colon)", expected, result); ref {result, expected} [67-67]
[m[m31.08.2022 - 15:15:22.946 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 15:15:22.946 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.CompositeFormatTest::testCompositeFormat has 2 assertions: 
 assertEquals("Parser get method incorrectly implemented", parser, composite.getParser()); ref {parser, composite} [71-71],
 assertEquals("Formatter get method incorrectly implemented", formatter, composite.getFormatter()); ref {formatter, composite} [72-72]
[m[m31.08.2022 - 15:15:22.946 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.CompositeFormatTest::testUsage has 2 assertions: 
 assertEquals(testString, c.format(c.parseObject("01032005"))); ref {c, testString} [81-81],
 assertEquals(testString, c.reformat("01032005")); ref {c, testString} [82-82]
[m[m31.08.2022 - 15:15:22.946 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:22.955 [INFO ] ParsingStrategy.parseTestSuite() - Found 63 test cases
[m[m31.08.2022 - 15:15:22.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testIsTrue1 has 1 assertions: 
 assertEquals("The validated expression is false", ex.getMessage()); ref {ex} [55-55]
[m[m31.08.2022 - 15:15:22.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testIsTrue2 has 1 assertions: 
 assertEquals("MSG", ex.getMessage()); ref {ex} [67-67]
[m[m31.08.2022 - 15:15:22.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testIsTrue3 has 1 assertions: 
 assertEquals("MSG", ex.getMessage()); ref {ex} [79-79]
[m[m31.08.2022 - 15:15:22.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testIsTrue4 has 1 assertions: 
 assertEquals("MSG", ex.getMessage()); ref {ex} [91-91]
[m[m31.08.2022 - 15:15:22.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testIsTrue5 has 1 assertions: 
 assertEquals("MSG", ex.getMessage()); ref {ex} [103-103]
[m[m31.08.2022 - 15:15:22.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotNull1 has 2 assertions: 
 assertEquals("The validated object is null", ex.getMessage()); ref {ex} [117-117],
 assertSame(str, testStr); ref {str, testStr} [122-122]
[m[m31.08.2022 - 15:15:22.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotNull2 has 2 assertions: 
 assertEquals("MSG", ex.getMessage()); ref {ex} [134-134],
 assertSame(str, testStr); ref {str, testStr} [139-139]
[m[m31.08.2022 - 15:15:22.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotEmptyArray1 has 3 assertions: 
 assertEquals("The validated array is empty", ex.getMessage()); ref {ex} [151-151],
 assertEquals("The validated array is empty", ex.getMessage()); ref {ex} [157-157],
 assertSame(array, test); ref {test, array} [162-162]
[m[m31.08.2022 - 15:15:22.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotEmptyArray2 has 3 assertions: 
 assertEquals("MSG", ex.getMessage()); ref {ex} [173-173],
 assertEquals("MSG", ex.getMessage()); ref {ex} [179-179],
 assertSame(array, test); ref {test, array} [184-184]
[m[m31.08.2022 - 15:15:22.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotEmptyCollection1 has 3 assertions: 
 assertEquals("The validated collection is empty", ex.getMessage()); ref {ex} [196-196],
 assertEquals("The validated collection is empty", ex.getMessage()); ref {ex} [202-202],
 assertSame(coll, test); ref {coll, test} [208-208]
[m[m31.08.2022 - 15:15:22.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotEmptyCollection2 has 3 assertions: 
 assertEquals("MSG", ex.getMessage()); ref {ex} [219-219],
 assertEquals("MSG", ex.getMessage()); ref {ex} [225-225],
 assertSame(coll, test); ref {coll, test} [231-231]
[m[m31.08.2022 - 15:15:22.956 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotEmptyMap1 has 3 assertions: 
 assertEquals("The validated map is empty", ex.getMessage()); ref {ex} [243-243],
 assertEquals("The validated map is empty", ex.getMessage()); ref {ex} [249-249],
 assertSame(map, test); ref {test, map} [255-255]
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotEmptyMap2 has 3 assertions: 
 assertEquals("MSG", ex.getMessage()); ref {ex} [266-266],
 assertEquals("MSG", ex.getMessage()); ref {ex} [272-272],
 assertSame(map, test); ref {test, map} [278-278]
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotEmptyString1 has 3 assertions: 
 assertEquals("The validated character sequence is empty", ex.getMessage()); ref {ex} [290-290],
 assertEquals("The validated character sequence is empty", ex.getMessage()); ref {ex} [296-296],
 assertSame(str, testStr); ref {str, testStr} [301-301]
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotEmptyString2 has 3 assertions: 
 assertEquals("MSG", ex.getMessage()); ref {ex} [312-312],
 assertEquals("MSG", ex.getMessage()); ref {ex} [318-318],
 assertSame(str, testStr); ref {str, testStr} [323-323]
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankNullStringShouldThrow has 1 assertions: 
 // then
assertEquals("The validated character sequence is blank", e.getMessage()); ref {e} [339-339]
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankMsgNullStringShouldThrow has 1 assertions: 
 // then
assertEquals("Message", e.getMessage()); ref {e} [355-355]
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankEmptyStringShouldThrow has 1 assertions: 
 // then
assertEquals("The validated character sequence is blank", e.getMessage()); ref {e} [371-371]
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankBlankStringWithWhitespacesShouldThrow has 1 assertions: 
 // then
assertEquals("The validated character sequence is blank", e.getMessage()); ref {e} [387-387]
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankBlankStringWithNewlinesShouldThrow has 1 assertions: 
 // then
assertEquals("The validated character sequence is blank", e.getMessage()); ref {e} [403-403]
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankMsgBlankStringShouldThrow has 1 assertions: 
 // then
assertEquals("Message", e.getMessage()); ref {e} [419-419]
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankMsgBlankStringWithWhitespacesShouldThrow has 1 assertions: 
 // then
assertEquals("Message", e.getMessage()); ref {e} [435-435]
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankMsgEmptyStringShouldThrow has 1 assertions: 
 // then
assertEquals("Message", e.getMessage()); ref {e} [451-451]
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankNotBlankStringShouldNotThrow has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankNotBlankStringWithWhitespacesShouldNotThrow has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankNotBlankStringWithNewlinesShouldNotThrow has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankMsgNotBlankStringShouldNotThrow has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.957 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankReturnValues1 has 1 assertions: 
 assertSame(str, test); ref {str, test} [532-532]
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNotBlankReturnValues2 has 1 assertions: 
 assertSame(str, test); ref {str, test} [539-539]
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNoNullElementsArray1 has 3 assertions: 
 assertEquals("The validated object is null", ex.getMessage()); ref {ex} [552-552],
 assertEquals("The validated array contains null element at index: 1", ex.getMessage()); ref {ex} [559-559],
 assertSame(array, test); ref {test, array} [564-564]
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNoNullElementsArray2 has 3 assertions: 
 assertEquals("The validated object is null", ex.getMessage()); ref {ex} [576-576],
 assertEquals("MSG", ex.getMessage()); ref {ex} [583-583],
 assertSame(array, test); ref {test, array} [588-588]
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNoNullElementsCollection1 has 3 assertions: 
 assertEquals("The validated object is null", ex.getMessage()); ref {ex} [603-603],
 assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); ref {ex} [610-610],
 assertSame(coll, test); ref {coll, test} [615-615]
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testNoNullElementsCollection2 has 3 assertions: 
 assertEquals("The validated object is null", ex.getMessage()); ref {ex} [629-629],
 assertEquals("MSG", ex.getMessage()); ref {ex} [636-636],
 assertSame(coll, test); ref {coll, test} [641-641]
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testConstructor has 5 assertions: 
 assertNotNull(new Validate()); ref {} [648-648],
 assertEquals(1, cons.length); ref {cons.length, cons} [650-650],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [651-651],
 assertTrue(Modifier.isPublic(Validate.class.getModifiers())); ref {Modifier} [652-652],
 assertFalse(Modifier.isFinal(Validate.class.getModifiers())); ref {Modifier} [653-653]
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testValidIndex_withMessage_array has 3 assertions: 
 assertEquals("Broken: ", ex.getMessage()); ref {ex} [667-667],
 assertEquals("Broken: ", ex.getMessage()); ref {ex} [673-673],
 assertSame(strArray, test); ref {strArray, test} [678-678]
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testValidIndex_array has 3 assertions: 
 assertEquals("The validated array index is invalid: -1", ex.getMessage()); ref {ex} [690-690],
 assertEquals("The validated array index is invalid: 2", ex.getMessage()); ref {ex} [696-696],
 assertSame(strArray, test); ref {strArray, test} [701-701]
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testValidIndex_withMessage_collection has 3 assertions: 
 assertEquals("Broken: ", ex.getMessage()); ref {ex} [717-717],
 assertEquals("Broken: ", ex.getMessage()); ref {ex} [723-723],
 assertSame(strColl, test); ref {test, strColl} [728-728]
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testValidIndex_collection has 3 assertions: 
 assertEquals("The validated collection index is invalid: -1", ex.getMessage()); ref {ex} [742-742],
 assertEquals("The validated collection index is invalid: 2", ex.getMessage()); ref {ex} [748-748],
 assertSame(strColl, test); ref {test, strColl} [753-753]
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testValidIndex_withMessage_charSequence has 3 assertions: 
 assertEquals("Broken: ", ex.getMessage()); ref {ex} [767-767],
 assertEquals("Broken: ", ex.getMessage()); ref {ex} [773-773],
 assertSame(input, test); ref {input, test} [778-778]
[m[m31.08.2022 - 15:15:22.958 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testValidIndex_charSequence has 3 assertions: 
 assertEquals("The validated character sequence index is invalid: -1", ex.getMessage()); ref {ex} [790-790],
 assertEquals("The validated character sequence index is invalid: 2", ex.getMessage()); ref {ex} [796-796],
 assertSame(input, test); ref {input, test} [801-801]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testMatchesPattern has 1 assertions: 
 assertEquals("The string hi does not match the pattern [0-9]*", e.getMessage()); ref {e} [816-816]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testMatchesPattern_withMessage has 1 assertions: 
 assertEquals("Does not match", e.getMessage()); ref {e} [832-832]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testInclusiveBetween has 1 assertions: 
 assertEquals("The value 6 is not in the specified inclusive range of 0 to 5", e.getMessage()); ref {e} [844-844]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testInclusiveBetween_withMessage has 1 assertions: 
 assertEquals("Error", e.getMessage()); ref {e} [856-856]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testInclusiveBetweenLong has 1 assertions: 
 assertEquals("The value 6 is not in the specified inclusive range of 0 to 5", e.getMessage()); ref {e} [869-869]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testInclusiveBetweenLong_withMessage has 1 assertions: 
 assertEquals("Error", e.getMessage()); ref {e} [882-882]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testInclusiveBetweenDouble has 1 assertions: 
 assertEquals("The value 6.1 is not in the specified inclusive range of 0.1 to 5.1", e.getMessage()); ref {e} [895-895]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testInclusiveBetweenDouble_withMessage has 1 assertions: 
 assertEquals("Error", e.getMessage()); ref {e} [908-908]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testExclusiveBetween has 2 assertions: 
 assertEquals("The value 6 is not in the specified exclusive range of 0 to 5", e.getMessage()); ref {e} [920-920],
 assertEquals("The value 5 is not in the specified exclusive range of 0 to 5", e.getMessage()); ref {e} [926-926]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testExclusiveBetween_withMessage has 2 assertions: 
 assertEquals("Error", e.getMessage()); ref {e} [938-938],
 assertEquals("Error", e.getMessage()); ref {e} [944-944]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testExclusiveBetweenLong has 2 assertions: 
 assertEquals("The value 6 is not in the specified exclusive range of 0 to 5", e.getMessage()); ref {e} [956-956],
 assertEquals("The value 5 is not in the specified exclusive range of 0 to 5", e.getMessage()); ref {e} [962-962]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testExclusiveBetweenLong_withMessage has 2 assertions: 
 assertEquals("Error", e.getMessage()); ref {e} [974-974],
 assertEquals("Error", e.getMessage()); ref {e} [980-980]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testExclusiveBetweenDouble has 2 assertions: 
 assertEquals("The value 6.1 is not in the specified exclusive range of 0.1 to 5.1", e.getMessage()); ref {e} [992-992],
 assertEquals("The value 5.1 is not in the specified exclusive range of 0.1 to 5.1", e.getMessage()); ref {e} [998-998]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testExclusiveBetweenDouble_withMessage has 2 assertions: 
 assertEquals("Error", e.getMessage()); ref {e} [1010-1010],
 assertEquals("Error", e.getMessage()); ref {e} [1016-1016]
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testIsInstanceOf has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.959 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testIsInstanceOfExceptionMessage has 1 assertions: 
 assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); ref {e} [1032-1032]
[m[m31.08.2022 - 15:15:22.960 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testIsInstanceOf_withMessage has 1 assertions: 
 assertEquals("Error", e.getMessage()); ref {e} [1044-1044]
[m[m31.08.2022 - 15:15:22.960 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testIsInstanceOf_withMessageArgs has 3 assertions: 
 assertEquals("Error Name=Value", e.getMessage()); ref {e} [1056-1056],
 assertEquals("Error interface java.util.List=Value", e.getMessage()); ref {e} [1062-1062],
 assertEquals("Error interface java.util.List=null", e.getMessage()); ref {e} [1068-1068]
[m[m31.08.2022 - 15:15:22.960 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testIsAssignable has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.960 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testIsAssignableExceptionMessage has 1 assertions: 
 assertEquals("Cannot assign a java.lang.String to a java.util.List", e.getMessage()); ref {e} [1084-1084]
[m[m31.08.2022 - 15:15:22.960 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ValidateTest::testIsAssignable_withMessage has 1 assertions: 
 assertEquals("Error", e.getMessage()); ref {e} [1096-1096]
[m[m31.08.2022 - 15:15:22.965 [INFO ] ParsingStrategy.parseTestSuite() - Found 6 test cases
[m[m31.08.2022 - 15:15:22.965 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsStartsEndsWithTest::testStartsWith has 14 assertions: 
 assertTrue("startsWith(null, null)", StringUtils.startsWith(null, (String) null)); ref {StringUtils} [43-43],
 assertFalse("startsWith(FOOBAR, null)", StringUtils.startsWith(FOOBAR, (String) null)); ref {StringUtils, FOOBAR} [44-44],
 assertFalse("startsWith(null, FOO)", StringUtils.startsWith(null, FOO)); ref {StringUtils, FOO} [45-45],
 assertTrue("startsWith(FOOBAR, \"\")", StringUtils.startsWith(FOOBAR, "")); ref {StringUtils, FOOBAR} [46-46],
 assertTrue("startsWith(foobar, foo)", StringUtils.startsWith(foobar, foo)); ref {foobar, StringUtils, foo} [48-48],
 assertTrue("startsWith(FOOBAR, FOO)", StringUtils.startsWith(FOOBAR, FOO)); ref {StringUtils, FOO, FOOBAR} [49-49],
 assertFalse("startsWith(foobar, FOO)", StringUtils.startsWith(foobar, FOO)); ref {foobar, StringUtils, FOO} [50-50],
 assertFalse("startsWith(FOOBAR, foo)", StringUtils.startsWith(FOOBAR, foo)); ref {StringUtils, foo, FOOBAR} [51-51],
 assertFalse("startsWith(foo, foobar)", StringUtils.startsWith(foo, foobar)); ref {foobar, StringUtils, foo} [53-53],
 assertFalse("startsWith(foo, foobar)", StringUtils.startsWith(bar, foobar)); ref {bar, foobar, StringUtils} [54-54],
 assertFalse("startsWith(foobar, bar)", StringUtils.startsWith(foobar, bar)); ref {bar, foobar, StringUtils} [56-56],
 assertFalse("startsWith(FOOBAR, BAR)", StringUtils.startsWith(FOOBAR, BAR)); ref {BAR, StringUtils, FOOBAR} [57-57],
 assertFalse("startsWith(foobar, BAR)", StringUtils.startsWith(foobar, BAR)); ref {foobar, BAR, StringUtils} [58-58],
 assertFalse("startsWith(FOOBAR, bar)", StringUtils.startsWith(FOOBAR, bar)); ref {bar, StringUtils, FOOBAR} [59-59]
[m[m31.08.2022 - 15:15:22.965 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsStartsEndsWithTest::testStartsWithIgnoreCase has 14 assertions: 
 assertTrue("startsWithIgnoreCase(null, null)", StringUtils.startsWithIgnoreCase(null, (String) null)); ref {StringUtils} [67-67],
 assertFalse("startsWithIgnoreCase(FOOBAR, null)", StringUtils.startsWithIgnoreCase(FOOBAR, (String) null)); ref {StringUtils, FOOBAR} [68-68],
 assertFalse("startsWithIgnoreCase(null, FOO)", StringUtils.startsWithIgnoreCase(null, FOO)); ref {StringUtils, FOO} [69-69],
 assertTrue("startsWithIgnoreCase(FOOBAR, \"\")", StringUtils.startsWithIgnoreCase(FOOBAR, "")); ref {StringUtils, FOOBAR} [70-70],
 assertTrue("startsWithIgnoreCase(foobar, foo)", StringUtils.startsWithIgnoreCase(foobar, foo)); ref {foobar, StringUtils, foo} [72-72],
 assertTrue("startsWithIgnoreCase(FOOBAR, FOO)", StringUtils.startsWithIgnoreCase(FOOBAR, FOO)); ref {StringUtils, FOO, FOOBAR} [73-73],
 assertTrue("startsWithIgnoreCase(foobar, FOO)", StringUtils.startsWithIgnoreCase(foobar, FOO)); ref {foobar, StringUtils, FOO} [74-74],
 assertTrue("startsWithIgnoreCase(FOOBAR, foo)", StringUtils.startsWithIgnoreCase(FOOBAR, foo)); ref {StringUtils, foo, FOOBAR} [75-75],
 assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(foo, foobar)); ref {foobar, StringUtils, foo} [77-77],
 assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(bar, foobar)); ref {bar, foobar, StringUtils} [78-78],
 assertFalse("startsWithIgnoreCase(foobar, bar)", StringUtils.startsWithIgnoreCase(foobar, bar)); ref {bar, foobar, StringUtils} [80-80],
 assertFalse("startsWithIgnoreCase(FOOBAR, BAR)", StringUtils.startsWithIgnoreCase(FOOBAR, BAR)); ref {BAR, StringUtils, FOOBAR} [81-81],
 assertFalse("startsWithIgnoreCase(foobar, BAR)", StringUtils.startsWithIgnoreCase(foobar, BAR)); ref {foobar, BAR, StringUtils} [82-82],
 assertFalse("startsWithIgnoreCase(FOOBAR, bar)", StringUtils.startsWithIgnoreCase(FOOBAR, bar)); ref {bar, StringUtils, FOOBAR} [83-83]
[m[m31.08.2022 - 15:15:22.965 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsStartsEndsWithTest::testStartsWithAny has 9 assertions: 
 assertFalse(StringUtils.startsWithAny(null, (String[]) null)); ref {StringUtils} [88-88],
 assertFalse(StringUtils.startsWithAny(null, "abc")); ref {StringUtils} [89-89],
 assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); ref {StringUtils} [90-90],
 assertFalse(StringUtils.startsWithAny("abcxyz")); ref {StringUtils} [91-91],
 assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); ref {StringUtils} [92-92],
 assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); ref {StringUtils} [93-93],
 assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); ref {StringUtils} [94-94],
 assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); ref {StringUtils} [96-96],
 assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); ref {StringUtils} [97-97]
[m[m31.08.2022 - 15:15:22.965 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsStartsEndsWithTest::testEndsWith has 16 assertions: 
 assertTrue("endsWith(null, null)", StringUtils.endsWith(null, (String) null)); ref {StringUtils} [106-106],
 assertFalse("endsWith(FOOBAR, null)", StringUtils.endsWith(FOOBAR, (String) null)); ref {StringUtils, FOOBAR} [107-107],
 assertFalse("endsWith(null, FOO)", StringUtils.endsWith(null, FOO)); ref {StringUtils, FOO} [108-108],
 assertTrue("endsWith(FOOBAR, \"\")", StringUtils.endsWith(FOOBAR, "")); ref {StringUtils, FOOBAR} [109-109],
 assertFalse("endsWith(foobar, foo)", StringUtils.endsWith(foobar, foo)); ref {foobar, StringUtils, foo} [111-111],
 assertFalse("endsWith(FOOBAR, FOO)", StringUtils.endsWith(FOOBAR, FOO)); ref {StringUtils, FOO, FOOBAR} [112-112],
 assertFalse("endsWith(foobar, FOO)", StringUtils.endsWith(foobar, FOO)); ref {foobar, StringUtils, FOO} [113-113],
 assertFalse("endsWith(FOOBAR, foo)", StringUtils.endsWith(FOOBAR, foo)); ref {StringUtils, foo, FOOBAR} [114-114],
 assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(foo, foobar)); ref {foobar, StringUtils, foo} [116-116],
 assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(bar, foobar)); ref {bar, foobar, StringUtils} [117-117],
 assertTrue("endsWith(foobar, bar)", StringUtils.endsWith(foobar, bar)); ref {bar, foobar, StringUtils} [119-119],
 assertTrue("endsWith(FOOBAR, BAR)", StringUtils.endsWith(FOOBAR, BAR)); ref {BAR, StringUtils, FOOBAR} [120-120],
 assertFalse("endsWith(foobar, BAR)", StringUtils.endsWith(foobar, BAR)); ref {foobar, BAR, StringUtils} [121-121],
 assertFalse("endsWith(FOOBAR, bar)", StringUtils.endsWith(FOOBAR, bar)); ref {bar, StringUtils, FOOBAR} [122-122],
 // "alpha,beta,gamma,delta".endsWith("delta")
assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B4")); ref {StringUtils} [125-126],
 // "alpha,beta,gamma,delta".endsWith("gamma,DELTA")
assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B3\u0394")); ref {StringUtils} [128-129]
[m[m31.08.2022 - 15:15:22.965 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsStartsEndsWithTest::testEndsWithIgnoreCase has 19 assertions: 
 assertTrue("endsWithIgnoreCase(null, null)", StringUtils.endsWithIgnoreCase(null, (String) null)); ref {StringUtils} [137-137],
 assertFalse("endsWithIgnoreCase(FOOBAR, null)", StringUtils.endsWithIgnoreCase(FOOBAR, (String) null)); ref {StringUtils, FOOBAR} [138-138],
 assertFalse("endsWithIgnoreCase(null, FOO)", StringUtils.endsWithIgnoreCase(null, FOO)); ref {StringUtils, FOO} [139-139],
 assertTrue("endsWithIgnoreCase(FOOBAR, \"\")", StringUtils.endsWithIgnoreCase(FOOBAR, "")); ref {StringUtils, FOOBAR} [140-140],
 assertFalse("endsWithIgnoreCase(foobar, foo)", StringUtils.endsWithIgnoreCase(foobar, foo)); ref {foobar, StringUtils, foo} [142-142],
 assertFalse("endsWithIgnoreCase(FOOBAR, FOO)", StringUtils.endsWithIgnoreCase(FOOBAR, FOO)); ref {StringUtils, FOO, FOOBAR} [143-143],
 assertFalse("endsWithIgnoreCase(foobar, FOO)", StringUtils.endsWithIgnoreCase(foobar, FOO)); ref {foobar, StringUtils, FOO} [144-144],
 assertFalse("endsWithIgnoreCase(FOOBAR, foo)", StringUtils.endsWithIgnoreCase(FOOBAR, foo)); ref {StringUtils, foo, FOOBAR} [145-145],
 assertFalse("endsWithIgnoreCase(foo, foobar)", StringUtils.endsWithIgnoreCase(foo, foobar)); ref {foobar, StringUtils, foo} [147-147],
 assertFalse("endsWithIgnoreCase(foo, foobar)", StringUtils.endsWithIgnoreCase(bar, foobar)); ref {bar, foobar, StringUtils} [148-148],
 assertTrue("endsWithIgnoreCase(foobar, bar)", StringUtils.endsWithIgnoreCase(foobar, bar)); ref {bar, foobar, StringUtils} [150-150],
 assertTrue("endsWithIgnoreCase(FOOBAR, BAR)", StringUtils.endsWithIgnoreCase(FOOBAR, BAR)); ref {BAR, StringUtils, FOOBAR} [151-151],
 assertTrue("endsWithIgnoreCase(foobar, BAR)", StringUtils.endsWithIgnoreCase(foobar, BAR)); ref {foobar, BAR, StringUtils} [152-152],
 assertTrue("endsWithIgnoreCase(FOOBAR, bar)", StringUtils.endsWithIgnoreCase(FOOBAR, bar)); ref {bar, StringUtils, FOOBAR} [153-153],
 // javadoc
assertTrue(StringUtils.endsWithIgnoreCase("abcdef", "def")); ref {StringUtils} [156-156],
 assertTrue(StringUtils.endsWithIgnoreCase("ABCDEF", "def")); ref {StringUtils} [157-157],
 assertFalse(StringUtils.endsWithIgnoreCase("ABCDEF", "cde")); ref {StringUtils} [158-158],
 // "alpha,beta,gamma,delta".endsWith("DELTA")
assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u0394)", StringUtils.endsWithIgnoreCase("\u03B1\u03B2\u03B3\u03B4", "\u0394")); ref {StringUtils} [161-162],
 // "alpha,beta,gamma,delta".endsWith("GAMMA")
assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u0393)", StringUtils.endsWithIgnoreCase("\u03B1\u03B2\u03B3\u03B4", "\u0393")); ref {StringUtils} [164-165]
[m[m31.08.2022 - 15:15:22.966 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsStartsEndsWithTest::testEndsWithAny has 9 assertions: 
 assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String) null)); ref {StringUtils} [170-170],
 assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] { "abc" })); ref {StringUtils} [171-171],
 assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abcxyz", (String) null)); ref {StringUtils} [172-172],
 assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", StringUtils.endsWithAny("abcxyz", new String[] { "" })); ref {StringUtils} [173-173],
 assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", StringUtils.endsWithAny("abcxyz", new String[] { "xyz" })); ref {StringUtils} [174-174],
 assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", StringUtils.endsWithAny("abcxyz", new String[] { null, "xyz", "abc" })); ref {StringUtils} [175-175],
 assertFalse("StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})", StringUtils.endsWithAny("defg", new String[] { null, "xyz", "abc" })); ref {StringUtils} [176-176],
 assertTrue("StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz"))); ref {StringUtils} [178-178],
 assertTrue("StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny(new StrBuilder("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz"))); ref {StringUtils} [179-179]
[m[m31.08.2022 - 15:15:22.966 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:22.969 [INFO ] ParsingStrategy.parseTestSuite() - Found 17 test cases
[m[m31.08.2022 - 15:15:22.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testConstructors has 5 assertions: 
 assertEquals((byte) 0, new MutableByte().byteValue()); ref {} [33-33],
 assertEquals((byte) 1, new MutableByte((byte) 1).byteValue()); ref {} [35-35],
 assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue()); ref {Byte} [37-37],
 assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue()); ref {} [38-38],
 assertEquals((byte) 2, new MutableByte("2").byteValue()); ref {} [40-40]
[m[m31.08.2022 - 15:15:22.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testConstructorNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testGetSet has 8 assertions: 
 assertEquals((byte) 0, new MutableByte().byteValue()); ref {} [52-52],
 assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); ref {Byte} [53-53],
 assertEquals((byte) 1, mutNum.byteValue()); ref {mutNum} [56-56],
 assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); ref {Byte, mutNum} [57-57],
 assertEquals((byte) 2, mutNum.byteValue()); ref {mutNum} [60-60],
 assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); ref {Byte, mutNum} [61-61],
 assertEquals((byte) 3, mutNum.byteValue()); ref {mutNum} [64-64],
 assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); ref {Byte, mutNum} [65-65]
[m[m31.08.2022 - 15:15:22.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testSetNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testEquals has 10 assertions: 
 assertTrue(mutNumA.equals(mutNumA)); ref {mutNumA} [80-80],
 assertTrue(mutNumA.equals(mutNumB)); ref {mutNumA, mutNumB} [81-81],
 assertTrue(mutNumB.equals(mutNumA)); ref {mutNumA, mutNumB} [82-82],
 assertTrue(mutNumB.equals(mutNumB)); ref {mutNumB} [83-83],
 assertFalse(mutNumA.equals(mutNumC)); ref {mutNumA, mutNumC} [84-84],
 assertFalse(mutNumB.equals(mutNumC)); ref {mutNumB, mutNumC} [85-85],
 assertTrue(mutNumC.equals(mutNumC)); ref {mutNumC} [86-86],
 assertFalse(mutNumA.equals(null)); ref {mutNumA} [87-87],
 assertFalse(mutNumA.equals(Byte.valueOf((byte) 0))); ref {mutNumA, Byte} [88-88],
 assertFalse(mutNumA.equals("0")); ref {mutNumA} [89-89]
[m[m31.08.2022 - 15:15:22.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testHashCode has 4 assertions: 
 assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); ref {mutNumA} [98-98],
 assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); ref {mutNumA, mutNumB} [99-99],
 assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); ref {mutNumA, mutNumC} [100-100],
 assertTrue(mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode()); ref {mutNumA, Byte} [101-101]
[m[m31.08.2022 - 15:15:22.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testCompareTo has 3 assertions: 
 assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0))); ref {mutNum} [108-108],
 assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1))); ref {mutNum} [109-109],
 assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1))); ref {mutNum} [110-110]
[m[m31.08.2022 - 15:15:22.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testCompareToNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:22.969 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testPrimitiveValues has 6 assertions: 
 assertEquals(1.0F, mutNum.floatValue(), 0); ref {mutNum} [123-123],
 assertEquals(1.0, mutNum.doubleValue(), 0); ref {mutNum} [124-124],
 assertEquals((byte) 1, mutNum.byteValue()); ref {mutNum} [125-125],
 assertEquals((short) 1, mutNum.shortValue()); ref {mutNum} [126-126],
 assertEquals(1, mutNum.intValue()); ref {mutNum} [127-127],
 assertEquals(1L, mutNum.longValue()); ref {mutNum} [128-128]
[m[m31.08.2022 - 15:15:22.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testToByte has 2 assertions: 
 assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte()); ref {Byte} [133-133],
 assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte()); ref {Byte} [134-134]
[m[m31.08.2022 - 15:15:22.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testIncrement has 2 assertions: 
 assertEquals(2, mutNum.intValue()); ref {mutNum} [142-142],
 assertEquals(2L, mutNum.longValue()); ref {mutNum} [143-143]
[m[m31.08.2022 - 15:15:22.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testDecrement has 2 assertions: 
 assertEquals(0, mutNum.intValue()); ref {mutNum} [151-151],
 assertEquals(0L, mutNum.longValue()); ref {mutNum} [152-152]
[m[m31.08.2022 - 15:15:22.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testAddValuePrimitive has 1 assertions: 
 assertEquals((byte) 2, mutNum.byteValue()); ref {mutNum} [160-160]
[m[m31.08.2022 - 15:15:22.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testAddValueObject has 1 assertions: 
 assertEquals((byte) 2, mutNum.byteValue()); ref {mutNum} [168-168]
[m[m31.08.2022 - 15:15:22.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testSubtractValuePrimitive has 1 assertions: 
 assertEquals((byte) 0, mutNum.byteValue()); ref {mutNum} [176-176]
[m[m31.08.2022 - 15:15:22.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testSubtractValueObject has 1 assertions: 
 assertEquals((byte) 0, mutNum.byteValue()); ref {mutNum} [184-184]
[m[m31.08.2022 - 15:15:22.970 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableByteTest::testToString has 3 assertions: 
 assertEquals("0", new MutableByte((byte) 0).toString()); ref {} [189-189],
 assertEquals("10", new MutableByte((byte) 10).toString()); ref {} [190-190],
 assertEquals("-123", new MutableByte((byte) -123).toString()); ref {} [191-191]
[m[m31.08.2022 - 15:15:22.970 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 15:15:22.971 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.UnicodeUnescaperTest::testUPlus has 1 assertions: 
 assertEquals("Failed to unescape Unicode characters with 'u+' notation", "G", uu.translate(input)); ref {uu, input} [37-37]
[m[m31.08.2022 - 15:15:22.971 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.UnicodeUnescaperTest::testUuuuu has 1 assertions: 
 assertEquals("Failed to unescape Unicode characters with many 'u' characters", "G", result); ref {result} [46-46]
[m[m31.08.2022 - 15:15:22.971 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.UnicodeUnescaperTest::testLessThanFour has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.030 [INFO ] ParsingStrategy.parseTestSuite() - Found 42 test cases
[m[m31.08.2022 - 15:15:23.030 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testHexDigitToInt has 22 assertions: 
 assertEquals(0, Conversion.hexDigitToInt('0')); ref {Conversion} [42-42],
 assertEquals(1, Conversion.hexDigitToInt('1')); ref {Conversion} [43-43],
 assertEquals(2, Conversion.hexDigitToInt('2')); ref {Conversion} [44-44],
 assertEquals(3, Conversion.hexDigitToInt('3')); ref {Conversion} [45-45],
 assertEquals(4, Conversion.hexDigitToInt('4')); ref {Conversion} [46-46],
 assertEquals(5, Conversion.hexDigitToInt('5')); ref {Conversion} [47-47],
 assertEquals(6, Conversion.hexDigitToInt('6')); ref {Conversion} [48-48],
 assertEquals(7, Conversion.hexDigitToInt('7')); ref {Conversion} [49-49],
 assertEquals(8, Conversion.hexDigitToInt('8')); ref {Conversion} [50-50],
 assertEquals(9, Conversion.hexDigitToInt('9')); ref {Conversion} [51-51],
 assertEquals(10, Conversion.hexDigitToInt('A')); ref {Conversion} [52-52],
 assertEquals(10, Conversion.hexDigitToInt('a')); ref {Conversion} [53-53],
 assertEquals(11, Conversion.hexDigitToInt('B')); ref {Conversion} [54-54],
 assertEquals(11, Conversion.hexDigitToInt('b')); ref {Conversion} [55-55],
 assertEquals(12, Conversion.hexDigitToInt('C')); ref {Conversion} [56-56],
 assertEquals(12, Conversion.hexDigitToInt('c')); ref {Conversion} [57-57],
 assertEquals(13, Conversion.hexDigitToInt('D')); ref {Conversion} [58-58],
 assertEquals(13, Conversion.hexDigitToInt('d')); ref {Conversion} [59-59],
 assertEquals(14, Conversion.hexDigitToInt('E')); ref {Conversion} [60-60],
 assertEquals(14, Conversion.hexDigitToInt('e')); ref {Conversion} [61-61],
 assertEquals(15, Conversion.hexDigitToInt('F')); ref {Conversion} [62-62],
 assertEquals(15, Conversion.hexDigitToInt('f')); ref {Conversion} [63-63]
[m[m31.08.2022 - 15:15:23.030 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testHexDigitMsb0ToInt has 22 assertions: 
 assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); ref {Conversion} [77-77],
 assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); ref {Conversion} [78-78],
 assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); ref {Conversion} [79-79],
 assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); ref {Conversion} [80-80],
 assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); ref {Conversion} [81-81],
 assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); ref {Conversion} [82-82],
 assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); ref {Conversion} [83-83],
 assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); ref {Conversion} [84-84],
 assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); ref {Conversion} [85-85],
 assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); ref {Conversion} [86-86],
 assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); ref {Conversion} [87-87],
 assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); ref {Conversion} [88-88],
 assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); ref {Conversion} [89-89],
 assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); ref {Conversion} [90-90],
 assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); ref {Conversion} [91-91],
 assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); ref {Conversion} [92-92],
 assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); ref {Conversion} [93-93],
 assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); ref {Conversion} [94-94],
 assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); ref {Conversion} [95-95],
 assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); ref {Conversion} [96-96],
 assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); ref {Conversion} [97-97],
 assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); ref {Conversion} [98-98]
[m[m31.08.2022 - 15:15:23.031 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testHexDigitToBinary has 22 assertions: 
 assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); ref {Conversion} [112-113],
 assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); ref {Conversion} [114-115],
 assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); ref {Conversion} [116-117],
 assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); ref {Conversion} [118-119],
 assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); ref {Conversion} [120-121],
 assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); ref {Conversion} [122-123],
 assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); ref {Conversion} [124-125],
 assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); ref {Conversion} [126-127],
 assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); ref {Conversion} [128-129],
 assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); ref {Conversion} [130-131],
 assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); ref {Conversion} [132-133],
 assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); ref {Conversion} [134-135],
 assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); ref {Conversion} [136-137],
 assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); ref {Conversion} [138-139],
 assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); ref {Conversion} [140-141],
 assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); ref {Conversion} [142-143],
 assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); ref {Conversion} [144-145],
 assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); ref {Conversion} [146-147],
 assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); ref {Conversion} [148-149],
 assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); ref {Conversion} [150-151],
 assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); ref {Conversion} [152-153],
 assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); ref {Conversion} [154-155]
[m[m31.08.2022 - 15:15:23.031 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testHexDigitMsb0ToBinary has 22 assertions: 
 assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); ref {Conversion} [169-170],
 assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); ref {Conversion} [171-172],
 assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); ref {Conversion} [173-174],
 assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); ref {Conversion} [175-176],
 assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); ref {Conversion} [177-178],
 assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); ref {Conversion} [179-180],
 assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); ref {Conversion} [181-182],
 assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); ref {Conversion} [183-184],
 assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); ref {Conversion} [185-186],
 assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); ref {Conversion} [187-188],
 assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); ref {Conversion} [189-190],
 assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); ref {Conversion} [191-192],
 assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); ref {Conversion} [193-194],
 assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); ref {Conversion} [195-196],
 assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); ref {Conversion} [197-198],
 assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); ref {Conversion} [199-200],
 assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); ref {Conversion} [201-202],
 assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); ref {Conversion} [203-204],
 assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); ref {Conversion} [205-206],
 assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); ref {Conversion} [207-208],
 assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); ref {Conversion} [209-210],
 assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); ref {Conversion} [211-212]
[m[m31.08.2022 - 15:15:23.031 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testBinaryToHexDigit has 18 assertions: 
 assertEquals('0', Conversion.binaryToHexDigit(new boolean[] { false, false, false, false })); ref {Conversion} [226-227],
 assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true, false, false, false })); ref {Conversion} [228-228],
 assertEquals('2', Conversion.binaryToHexDigit(new boolean[] { false, true, false, false })); ref {Conversion} [229-229],
 assertEquals('3', Conversion.binaryToHexDigit(new boolean[] { true, true, false, false })); ref {Conversion} [230-230],
 assertEquals('4', Conversion.binaryToHexDigit(new boolean[] { false, false, true, false })); ref {Conversion} [231-231],
 assertEquals('5', Conversion.binaryToHexDigit(new boolean[] { true, false, true, false })); ref {Conversion} [232-232],
 assertEquals('6', Conversion.binaryToHexDigit(new boolean[] { false, true, true, false })); ref {Conversion} [233-233],
 assertEquals('7', Conversion.binaryToHexDigit(new boolean[] { true, true, true, false })); ref {Conversion} [234-234],
 assertEquals('8', Conversion.binaryToHexDigit(new boolean[] { false, false, false, true })); ref {Conversion} [235-235],
 assertEquals('9', Conversion.binaryToHexDigit(new boolean[] { true, false, false, true })); ref {Conversion} [236-236],
 assertEquals('a', Conversion.binaryToHexDigit(new boolean[] { false, true, false, true })); ref {Conversion} [237-237],
 assertEquals('b', Conversion.binaryToHexDigit(new boolean[] { true, true, false, true })); ref {Conversion} [238-238],
 assertEquals('c', Conversion.binaryToHexDigit(new boolean[] { false, false, true, true })); ref {Conversion} [239-239],
 assertEquals('d', Conversion.binaryToHexDigit(new boolean[] { true, false, true, true })); ref {Conversion} [240-240],
 assertEquals('e', Conversion.binaryToHexDigit(new boolean[] { false, true, true, true })); ref {Conversion} [241-241],
 assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true })); ref {Conversion} [242-242],
 assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true })); ref {Conversion} [243-243],
 assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true, true })); ref {Conversion} [244-245]
[m[m31.08.2022 - 15:15:23.031 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testBinaryToHexDigit_2args has 10 assertions: 
 assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); ref {shortArray, Conversion} [260-260],
 assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); ref {shortArray, Conversion} [261-261],
 assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); ref {shortArray, Conversion} [262-262],
 assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); ref {longArray, Conversion} [264-264],
 assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); ref {longArray, Conversion} [265-265],
 assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); ref {longArray, Conversion} [266-266],
 assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); ref {longArray, Conversion} [267-267],
 assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); ref {longArray, Conversion} [268-268],
 assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); ref {longArray, Conversion} [269-269],
 assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); ref {longArray, Conversion} [270-270]
[m[m31.08.2022 - 15:15:23.031 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testBinaryToHexDigitMsb0_bits has 16 assertions: 
 assertEquals('0', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, false })); ref {Conversion} [278-280],
 assertEquals('1', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, true })); ref {Conversion} [281-283],
 assertEquals('2', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, false })); ref {Conversion} [284-286],
 assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, true })); ref {Conversion} [287-288],
 assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, false })); ref {Conversion} [289-291],
 assertEquals('5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, true })); ref {Conversion} [292-293],
 assertEquals('6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, false })); ref {Conversion} [294-295],
 assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, true })); ref {Conversion} [296-297],
 assertEquals('8', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, false })); ref {Conversion} [298-300],
 assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, true })); ref {Conversion} [301-302],
 assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, false })); ref {Conversion} [303-304],
 assertEquals('b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, true })); ref {Conversion} [305-306],
 assertEquals('c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, false })); ref {Conversion} [307-308],
 assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, true })); ref {Conversion} [309-310],
 assertEquals('e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, false })); ref {Conversion} [311-312],
 assertEquals('f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, true })); ref {Conversion} [313-314]
[m[m31.08.2022 - 15:15:23.031 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testBinaryToHexDigitMsb0_4bits_2args has 14 assertions: 
 // boolean[] shortArray = new boolean[]{true,true,false};
// assertEquals('6', Conversion.BinaryToHexDigitMsb0(shortArray,0));
// assertEquals('3', Conversion.BinaryToHexDigitMsb0(shortArray,1));
// assertEquals('1', Conversion.BinaryToHexDigitMsb0(shortArray,2));
final boolean[] shortArray = new boolean[] { true, true, false, true }; ref {} [332-332],
 assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(shortArray, 0)); ref {shortArray, Conversion} [333-333],
 assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(longArray, 0)); ref {longArray, Conversion} [335-335],
 assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(longArray, 1)); ref {longArray, Conversion} [336-336],
 assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(longArray, 2)); ref {longArray, Conversion} [337-337],
 assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(longArray, 3)); ref {longArray, Conversion} [338-338],
 // assertEquals('6', Conversion.BinaryToHexDigitMsb0(longArray,4));
// assertEquals('3', Conversion.BinaryToHexDigitMsb0(longArray,5));
// assertEquals('1', Conversion.BinaryToHexDigitMsb0(longArray,6));
final boolean[] maxLengthArray = new boolean[] { true, false, true, false, false, true, true, true }; ref {} [342-343],
 assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 0)); ref {maxLengthArray, Conversion} [344-344],
 assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 1)); ref {maxLengthArray, Conversion} [345-345],
 assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 2)); ref {maxLengthArray, Conversion} [346-346],
 assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 3)); ref {maxLengthArray, Conversion} [347-347],
 assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 4)); ref {maxLengthArray, Conversion} [348-348],
 // assertEquals('7', Conversion.BinaryToHexDigitMsb0(longArray,5));
// assertEquals('3', Conversion.BinaryToHexDigitMsb0(longArray,6));
// assertEquals('1', Conversion.BinaryToHexDigitMsb0(longArray,7));
final boolean[] javaDocCheck = new boolean[] { true, false, false, true, true, false, true, false }; ref {} [352-353],
 assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(javaDocCheck, 3)); ref {javaDocCheck, Conversion} [354-354]
[m[m31.08.2022 - 15:15:23.031 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testBinaryBeMsb0ToHexDigit has 17 assertions: 
 assertEquals('0', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, false })); ref {Conversion} [363-364],
 assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, true })); ref {Conversion} [365-366],
 assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, false })); ref {Conversion} [367-368],
 assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, true })); ref {Conversion} [369-370],
 assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, false })); ref {Conversion} [371-372],
 assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, true })); ref {Conversion} [373-374],
 assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, false })); ref {Conversion} [375-376],
 assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, true })); ref {Conversion} [377-378],
 assertEquals('8', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false })); ref {Conversion} [379-380],
 assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, true })); ref {Conversion} [381-382],
 assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, false })); ref {Conversion} [383-384],
 assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, true })); ref {Conversion} [385-386],
 assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, false })); ref {Conversion} [387-388],
 assertEquals('d', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, true })); ref {Conversion} [389-390],
 assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, false })); ref {Conversion} [391-392],
 assertEquals('f', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, true })); ref {Conversion} [393-394],
 assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false })); ref {Conversion} [395-399]
[m[m31.08.2022 - 15:15:23.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testBinaryBeMsb0ToHexDigit_2args has 28 assertions: 
 assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false }, 2)); ref {Conversion} [413-417],
 assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); ref {shortArray, Conversion} [420-420],
 assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); ref {shortArray, Conversion} [421-421],
 assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); ref {shortArray, Conversion} [422-422],
 assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); ref {shortArray2, Conversion} [424-424],
 assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); ref {shortArray2, Conversion} [425-425],
 assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); ref {shortArray2, Conversion} [426-426],
 assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3)); ref {shortArray2, Conversion} [427-427],
 assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4)); ref {shortArray2, Conversion} [428-428],
 assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5)); ref {shortArray2, Conversion} [429-429],
 assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6)); ref {shortArray2, Conversion} [430-430],
 assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7)); ref {shortArray2, Conversion} [431-431],
 assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0)); ref {Conversion, multiBytesArray} [435-435],
 assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1)); ref {Conversion, multiBytesArray} [436-436],
 assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2)); ref {Conversion, multiBytesArray} [437-437],
 assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3)); ref {Conversion, multiBytesArray} [438-438],
 assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4)); ref {Conversion, multiBytesArray} [439-439],
 assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5)); ref {Conversion, multiBytesArray} [440-440],
 assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6)); ref {Conversion, multiBytesArray} [441-441],
 assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7)); ref {Conversion, multiBytesArray} [442-442],
 assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8)); ref {Conversion, multiBytesArray} [444-444],
 assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9)); ref {Conversion, multiBytesArray} [445-445],
 assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10)); ref {Conversion, multiBytesArray} [446-446],
 assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11)); ref {Conversion, multiBytesArray} [447-447],
 assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12)); ref {Conversion, multiBytesArray} [448-448],
 assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13)); ref {Conversion, multiBytesArray} [449-449],
 assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14)); ref {Conversion, multiBytesArray} [450-450],
 assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15)); ref {Conversion, multiBytesArray} [451-451]
[m[m31.08.2022 - 15:15:23.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testIntToHexDigit has 16 assertions: 
 assertEquals('0', Conversion.intToHexDigit(0)); ref {Conversion} [460-460],
 assertEquals('1', Conversion.intToHexDigit(1)); ref {Conversion} [461-461],
 assertEquals('2', Conversion.intToHexDigit(2)); ref {Conversion} [462-462],
 assertEquals('3', Conversion.intToHexDigit(3)); ref {Conversion} [463-463],
 assertEquals('4', Conversion.intToHexDigit(4)); ref {Conversion} [464-464],
 assertEquals('5', Conversion.intToHexDigit(5)); ref {Conversion} [465-465],
 assertEquals('6', Conversion.intToHexDigit(6)); ref {Conversion} [466-466],
 assertEquals('7', Conversion.intToHexDigit(7)); ref {Conversion} [467-467],
 assertEquals('8', Conversion.intToHexDigit(8)); ref {Conversion} [468-468],
 assertEquals('9', Conversion.intToHexDigit(9)); ref {Conversion} [469-469],
 assertEquals('a', Conversion.intToHexDigit(10)); ref {Conversion} [470-470],
 assertEquals('b', Conversion.intToHexDigit(11)); ref {Conversion} [471-471],
 assertEquals('c', Conversion.intToHexDigit(12)); ref {Conversion} [472-472],
 assertEquals('d', Conversion.intToHexDigit(13)); ref {Conversion} [473-473],
 assertEquals('e', Conversion.intToHexDigit(14)); ref {Conversion} [474-474],
 assertEquals('f', Conversion.intToHexDigit(15)); ref {Conversion} [475-475]
[m[m31.08.2022 - 15:15:23.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testIntToHexDigitMsb0 has 16 assertions: 
 assertEquals('0', Conversion.intToHexDigitMsb0(0)); ref {Conversion} [489-489],
 assertEquals('8', Conversion.intToHexDigitMsb0(1)); ref {Conversion} [490-490],
 assertEquals('4', Conversion.intToHexDigitMsb0(2)); ref {Conversion} [491-491],
 assertEquals('c', Conversion.intToHexDigitMsb0(3)); ref {Conversion} [492-492],
 assertEquals('2', Conversion.intToHexDigitMsb0(4)); ref {Conversion} [493-493],
 assertEquals('a', Conversion.intToHexDigitMsb0(5)); ref {Conversion} [494-494],
 assertEquals('6', Conversion.intToHexDigitMsb0(6)); ref {Conversion} [495-495],
 assertEquals('e', Conversion.intToHexDigitMsb0(7)); ref {Conversion} [496-496],
 assertEquals('1', Conversion.intToHexDigitMsb0(8)); ref {Conversion} [497-497],
 assertEquals('9', Conversion.intToHexDigitMsb0(9)); ref {Conversion} [498-498],
 assertEquals('5', Conversion.intToHexDigitMsb0(10)); ref {Conversion} [499-499],
 assertEquals('d', Conversion.intToHexDigitMsb0(11)); ref {Conversion} [500-500],
 assertEquals('3', Conversion.intToHexDigitMsb0(12)); ref {Conversion} [501-501],
 assertEquals('b', Conversion.intToHexDigitMsb0(13)); ref {Conversion} [502-502],
 assertEquals('7', Conversion.intToHexDigitMsb0(14)); ref {Conversion} [503-503],
 assertEquals('f', Conversion.intToHexDigitMsb0(15)); ref {Conversion} [504-504]
[m[m31.08.2022 - 15:15:23.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testIntArrayToLong has 7 assertions: 
 assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0)); ref {src, Conversion} [550-550],
 assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0)); ref {src, Conversion} [551-551],
 assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1)); ref {src, Conversion} [552-552],
 assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2)); ref {src, Conversion} [553-553],
 assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1)); ref {src, Conversion} [554-554],
 assertEquals(0x123456789ABCDEF0L, Conversion.intArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); ref {src, Conversion} [555-556],
 assertEquals(0x1234567878000000L, Conversion.intArrayToLong(src, 2, 0x123456789ABCDEF0L, 0, 1)); ref {src, Conversion} [557-558]
[m[m31.08.2022 - 15:15:23.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testShortArrayToLong has 7 assertions: 
 assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0)); ref {src, Conversion} [569-569],
 assertEquals(0x000000000000CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 1)); ref {src, Conversion} [570-570],
 assertEquals(0x00000000F0C1CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 2)); ref {src, Conversion} [571-571],
 assertEquals(0x780034560F12F0C1L, Conversion.shortArrayToLong(src, 1, 0L, 0, 4)); ref {src, Conversion} [572-572],
 assertEquals(0x123456789ABCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); ref {src, Conversion} [573-574],
 assertEquals(0x123456CDF1BCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1)); ref {src, Conversion} [575-577],
 assertEquals(0x123478003456DEF0L, Conversion.shortArrayToLong(src, 3, 0x123456789ABCDEF0L, 16, 2)); ref {src, Conversion} [578-580]
[m[m31.08.2022 - 15:15:23.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testByteArrayToLong has 7 assertions: 
 assertEquals(0x0000000000000000L, Conversion.byteArrayToLong(src, 0, 0L, 0, 0)); ref {src, Conversion} [591-591],
 assertEquals(0x00000000000000CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 1)); ref {src, Conversion} [592-592],
 assertEquals(0x00000000C1F0F1CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 4)); ref {src, Conversion} [593-593],
 assertEquals(0x000000000FC1F0F1L, Conversion.byteArrayToLong(src, 1, 0L, 0, 4)); ref {src, Conversion} [594-594],
 assertEquals(0x123456789ABCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); ref {src, Conversion} [595-596],
 assertEquals(0x12345678CDBCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1)); ref {src, Conversion} [597-598],
 assertEquals(0x123456789A7856F0L, Conversion.byteArrayToLong(src, 7, 0x123456789ABCDEF0L, 8, 2)); ref {src, Conversion} [599-600]
[m[m31.08.2022 - 15:15:23.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testShortArrayToInt has 6 assertions: 
 assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); ref {src, Conversion} [610-610],
 assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1)); ref {src, Conversion} [611-611],
 assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2)); ref {src, Conversion} [612-612],
 assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2)); ref {src, Conversion} [613-613],
 assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0)); ref {src, Conversion} [614-614],
 assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1)); ref {src, Conversion} [615-615]
[m[m31.08.2022 - 15:15:23.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testByteArrayToInt has 6 assertions: 
 assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0)); ref {src, Conversion} [627-627],
 assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1)); ref {src, Conversion} [628-628],
 assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4)); ref {src, Conversion} [629-629],
 assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4)); ref {src, Conversion} [630-630],
 assertEquals(0x12345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 0, 0)); ref {src, Conversion} [631-631],
 assertEquals(0xCD345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 24, 1)); ref {src, Conversion} [632-632]
[m[m31.08.2022 - 15:15:23.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testByteArrayToShort has 6 assertions: 
 assertEquals((short) 0x0000, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 0)); ref {src, Conversion} [644-644],
 assertEquals((short) 0x00CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 1)); ref {src, Conversion} [645-645],
 assertEquals((short) 0xF1CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 2)); ref {src, Conversion} [646-646],
 assertEquals((short) 0xF0F1, Conversion.byteArrayToShort(src, 1, (short) 0, 0, 2)); ref {src, Conversion} [647-647],
 assertEquals((short) 0x1234, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 0, 0)); ref {src, Conversion} [648-648],
 assertEquals((short) 0xCD34, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 8, 1)); ref {src, Conversion} [649-649]
[m[m31.08.2022 - 15:15:23.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testHexToLong has 6 assertions: 
 assertEquals(0x0000000000000000L, Conversion.hexToLong(src, 0, 0L, 0, 0)); ref {src, Conversion} [660-660],
 assertEquals(0x000000000000000CL, Conversion.hexToLong(src, 0, 0L, 0, 1)); ref {src, Conversion} [661-661],
 assertEquals(0x000000001C0F1FDCL, Conversion.hexToLong(src, 0, 0L, 0, 8)); ref {src, Conversion} [662-662],
 assertEquals(0x0000000001C0F1FDL, Conversion.hexToLong(src, 1, 0L, 0, 8)); ref {src, Conversion} [663-663],
 assertEquals(0x123456798ABCDEF0L, Conversion.hexToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); ref {src, Conversion} [664-665],
 assertEquals(0x1234567876BCDEF0L, Conversion.hexToLong(src, 15, 0x123456798ABCDEF0L, 24, 3)); ref {src, Conversion} [666-667]
[m[m31.08.2022 - 15:15:23.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testHexToInt has 6 assertions: 
 assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0)); ref {src, Conversion} [676-676],
 assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1)); ref {src, Conversion} [677-677],
 assertEquals(0x1C0F1FDC, Conversion.hexToInt(src, 0, 0, 0, 8)); ref {src, Conversion} [678-678],
 assertEquals(0x01C0F1FD, Conversion.hexToInt(src, 1, 0, 0, 8)); ref {src, Conversion} [679-679],
 assertEquals(0x12345679, Conversion.hexToInt(src, 0, 0x12345679, 0, 0)); ref {src, Conversion} [680-680],
 assertEquals(0x87645679, Conversion.hexToInt(src, 15, 0x12345679, 20, 3)); ref {src, Conversion} [681-681]
[m[m31.08.2022 - 15:15:23.032 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testHexToShort has 6 assertions: 
 assertEquals((short) 0x0000, Conversion.hexToShort(src, 0, (short) 0, 0, 0)); ref {src, Conversion} [690-690],
 assertEquals((short) 0x000C, Conversion.hexToShort(src, 0, (short) 0, 0, 1)); ref {src, Conversion} [691-691],
 assertEquals((short) 0x1FDC, Conversion.hexToShort(src, 0, (short) 0, 0, 4)); ref {src, Conversion} [692-692],
 assertEquals((short) 0xF1FD, Conversion.hexToShort(src, 1, (short) 0, 0, 4)); ref {src, Conversion} [693-693],
 assertEquals((short) 0x1234, Conversion.hexToShort(src, 0, (short) 0x1234, 0, 0)); ref {src, Conversion} [694-694],
 assertEquals((short) 0x8764, Conversion.hexToShort(src, 15, (short) 0x1234, 4, 3)); ref {src, Conversion} [695-695]
[m[m31.08.2022 - 15:15:23.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testHexToByte has 6 assertions: 
 assertEquals((byte) 0x00, Conversion.hexToByte(src, 0, (byte) 0, 0, 0)); ref {src, Conversion} [704-704],
 assertEquals((byte) 0x0C, Conversion.hexToByte(src, 0, (byte) 0, 0, 1)); ref {src, Conversion} [705-705],
 assertEquals((byte) 0xDC, Conversion.hexToByte(src, 0, (byte) 0, 0, 2)); ref {src, Conversion} [706-706],
 assertEquals((byte) 0xFD, Conversion.hexToByte(src, 1, (byte) 0, 0, 2)); ref {src, Conversion} [707-707],
 assertEquals((byte) 0x34, Conversion.hexToByte(src, 0, (byte) 0x34, 0, 0)); ref {src, Conversion} [708-708],
 assertEquals((byte) 0x84, Conversion.hexToByte(src, 17, (byte) 0x34, 4, 1)); ref {src, Conversion} [709-709]
[m[m31.08.2022 - 15:15:23.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testBinaryToLong has 6 assertions: 
 // conversion of "CDF1F0C10F12345678" by HexToBinary
assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); ref {src, Conversion} [725-725],
 assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); ref {src, Conversion} [726-726],
 assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); ref {src, Conversion} [727-727],
 assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); ref {src, Conversion} [728-728],
 assertEquals(0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); ref {src, Conversion} [729-730],
 assertEquals(0x1234567876BCDEF0L, Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4)); ref {src, Conversion} [731-733]
[m[m31.08.2022 - 15:15:23.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testBinaryToInt has 6 assertions: 
 // conversion of "CDF1F0C10F12345678" by HexToBinary
assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4)); ref {src, Conversion} [749-749],
 assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4)); ref {src, Conversion} [750-750],
 assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4)); ref {src, Conversion} [751-751],
 assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4)); ref {src, Conversion} [752-752],
 assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4)); ref {src, Conversion} [753-753],
 assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4)); ref {src, Conversion} [754-754]
[m[m31.08.2022 - 15:15:23.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testBinaryToShort has 6 assertions: 
 // conversion of "CDF1F0C10F12345678" by HexToBinary
assertEquals((short) 0x0000, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 0 * 4)); ref {src, Conversion} [770-770],
 assertEquals((short) 0x000C, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 1 * 4)); ref {src, Conversion} [771-771],
 assertEquals((short) 0x1FDC, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 4 * 4)); ref {src, Conversion} [772-772],
 assertEquals((short) 0xF1FD, Conversion.binaryToShort(src, 1 * 4, (short) 0, 0, 4 * 4)); ref {src, Conversion} [773-773],
 assertEquals((short) 0x1234, Conversion.binaryToShort(src, 0 * 4, (short) 0x1234, 0, 0 * 4)); ref {src, Conversion} [774-775],
 assertEquals((short) 0x8764, Conversion.binaryToShort(src, 15 * 4, (short) 0x1234, 4, 3 * 4)); ref {src, Conversion} [776-777]
[m[m31.08.2022 - 15:15:23.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testBinaryToByte has 6 assertions: 
 // conversion of "CDF1F0C10F12345678" by HexToBinary
assertEquals((byte) 0x00, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 0 * 4)); ref {src, Conversion} [793-793],
 assertEquals((byte) 0x0C, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 1 * 4)); ref {src, Conversion} [794-794],
 assertEquals((byte) 0xDC, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 2 * 4)); ref {src, Conversion} [795-795],
 assertEquals((byte) 0xFD, Conversion.binaryToByte(src, 1 * 4, (byte) 0, 0, 2 * 4)); ref {src, Conversion} [796-796],
 assertEquals((byte) 0x34, Conversion.binaryToByte(src, 0 * 4, (byte) 0x34, 0, 0 * 4)); ref {src, Conversion} [797-797],
 assertEquals((byte) 0x84, Conversion.binaryToByte(src, 17 * 4, (byte) 0x34, 4, 1 * 4)); ref {src, Conversion} [798-798]
[m[m31.08.2022 - 15:15:23.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testLongToIntArray has 14 assertions: 
 assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[] {}, 0, 0)); ref {Conversion} [806-807],
 assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 100, new int[] {}, 0, 0)); ref {Conversion} [808-809],
 assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[] {}, 100, 0)); ref {Conversion} [810-811],
 assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 0)); ref {Conversion} [812-814],
 assertArrayEquals(new int[] { 0x90ABCDEF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 1)); ref {Conversion} [815-817],
 assertArrayEquals(new int[] { 0x90ABCDEF, 0x12345678, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 2)); ref {Conversion} [818-820],
 // assertArrayEquals(new
// int[]{0x90ABCDEF,0x12345678,0x90ABCDEF,0x12345678},Conversion.longToIntArray(0x1234567890ABCDEFL,
// 0,new int[]{-1,-1,-1,-1},0,4));//rejected by assertion
// assertArrayEquals(new
// int[]{0xFFFFFFFF,0x90ABCDEF,0x12345678,0x90ABCDEF},Conversion.longToIntArray(0x1234567890ABCDEFL,
// 0,new int[]{-1,-1,-1,-1},1,3));
assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0x12345678 }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 2, 2)); ref {Conversion} [827-829],
 assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [830-832],
 assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 3, 1)); ref {Conversion} [833-835],
 assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x4855E6F7, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 1, new int[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [836-838],
 assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x242AF37B, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 2, new int[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [839-841],
 assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x121579BD, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 3, new int[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [842-844],
 assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x890ABCDE, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 4, new int[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [845-847],
 // assertArrayEquals(new
// int[]{0x4855E6F7,0x091A2B3C,0x4855E6F7,0x091A2B3C},Conversion.longToIntArray(0x1234567890ABCDEFL,
// 1,new int[]{-1,-1,-1,-1},0,4));//rejected by assertion
assertArrayEquals(new int[] { 0x091A2B3C }, Conversion.longToIntArray(0x1234567890ABCDEFL, 33, new int[] { 0 }, 0, 1)); ref {Conversion} [851-853]
[m[m31.08.2022 - 15:15:23.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testLongToShortArray has 18 assertions: 
 assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 0, new short[] {}, 0, 0)); ref {Conversion} [861-863],
 assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 100, new short[] {}, 0, 0)); ref {Conversion} [864-866],
 assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 0, new short[] {}, 100, 0)); ref {Conversion} [867-869],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 0)); ref {Conversion} [870-873],
 assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 1)); ref {Conversion} [874-877],
 assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 2)); ref {Conversion} [878-881],
 assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 3)); ref {Conversion} [882-885],
 assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0x1234 }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 4)); ref {Conversion} [886-889],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB, (short) 0x5678 }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 1, 3)); ref {Conversion} [890-893],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 2, 2)); ref {Conversion} [894-897],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [898-901],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 3, 1)); ref {Conversion} [902-905],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xE6F7, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [906-909],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xF37B, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 2, new short[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [910-913],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x79BD, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 3, new short[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [914-917],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xBCDE, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 4, new short[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [918-921],
 assertArrayEquals(new short[] { (short) 0xE6F7, (short) 0x4855, (short) 0x2B3C, (short) 0x091A }, Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[] { -1, -1, -1, -1 }, 0, 4)); ref {Conversion} [922-925],
 assertArrayEquals(new short[] { (short) 0x2B3C }, Conversion.longToShortArray(0x1234567890ABCDEFL, 33, new short[] { 0 }, 0, 1)); ref {Conversion} [926-928]
[m[m31.08.2022 - 15:15:23.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testIntToShortArray has 14 assertions: 
 assertArrayEquals(new short[] {}, Conversion.intToShortArray(0x00000000, 0, new short[] {}, 0, 0)); ref {Conversion} [936-937],
 assertArrayEquals(new short[] {}, Conversion.intToShortArray(0x00000000, 100, new short[] {}, 0, 0)); ref {Conversion} [938-939],
 assertArrayEquals(new short[] {}, Conversion.intToShortArray(0x00000000, 0, new short[] {}, 100, 0)); ref {Conversion} [940-941],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 0, 0)); ref {Conversion} [942-944],
 assertArrayEquals(new short[] { (short) 0x5678, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 0, 1)); ref {Conversion} [945-947],
 assertArrayEquals(new short[] { (short) 0x5678, (short) 0x1234, (short) 0xFFFF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 0, 2)); ref {Conversion} [948-950],
 // assertArrayEquals(new
// short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0xFFFF},Conversion.intToShortArray(0x12345678,
// 0,new short[]{-1,-1,-1,-1},0,3));//rejected by assertion
// assertArrayEquals(new
// short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0x1234},Conversion.intToShortArray(0x12345678,
// 0,new short[]{-1,-1,-1,-1},0,4));
// assertArrayEquals(new
// short[]{(short)0xFFFF,(short)0x5678,(short)0x1234,(short)0x5678},Conversion.intToShortArray(0x12345678,
// 0,new short[]{-1,-1,-1,-1},1,3));
assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678, (short) 0x1234 }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 2, 2)); ref {Conversion} [960-962],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [963-965],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678 }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 3, 1)); ref {Conversion} [966-968],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x2B3C, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 1, new short[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [969-971],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x159E, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 2, new short[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [972-974],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x8ACF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 3, new short[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [975-977],
 assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x4567, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 4, new short[] { -1, -1, -1, -1 }, 2, 1)); ref {Conversion} [978-980],
 // assertArrayEquals(new
// short[]{(short)0xE6F7,(short)0x4855,(short)0x2B3C,(short)0x091A},Conversion.intToShortArray(0x12345678,
// 1,new short[]{-1,-1,-1,-1},0,4));//rejected by assertion
// assertArrayEquals(new
// short[]{(short)0x2B3C},Conversion.intToShortArray(0x12345678,33,new
// short[]{0},0,1));//rejected by assertion
assertArrayEquals(new short[] { (short) 0x091A }, Conversion.intToShortArray(0x12345678, 17, new short[] { 0 }, 0, 1)); ref {Conversion} [987-989]
[m[m31.08.2022 - 15:15:23.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testLongToByteArray has 18 assertions: 
 assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 0, new byte[] {}, 0, 0)); ref {Conversion} [997-999],
 assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 100, new byte[] {}, 0, 0)); ref {Conversion} [1000-1002],
 assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 0, new byte[] {}, 100, 0)); ref {Conversion} [1003-1005],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); ref {Conversion} [1006-1011],
 assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); ref {Conversion} [1012-1017],
 assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); ref {Conversion} [1018-1023],
 assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 4)); ref {Conversion} [1024-1029],
 assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 7)); ref {Conversion} [1030-1035],
 assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 8)); ref {Conversion} [1036-1041],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); ref {Conversion} [1042-1047],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); ref {Conversion} [1048-1053],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); ref {Conversion} [1054-1059],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 7)); ref {Conversion} [1060-1065],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12 }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 8)); ref {Conversion} [1066-1071],
 assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); ref {Conversion} [1072-1077],
 assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); ref {Conversion} [1078-1083],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00 }, Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 8)); ref {Conversion} [1084-1089],
 // assertArrayEquals(new
// byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xC4,(byte)0xB3,(byte)0xA2,(byte)0x91,(byte)0x00,(byte)0x00},Conversion.longToByteArray(0x1234567890ABCDEFL,13,new
// byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,8));//rejected by assertion
assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 7)); ref {Conversion} [1093-1098]
[m[m31.08.2022 - 15:15:23.033 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testIntToByteArray has 14 assertions: 
 assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 0, new byte[] {}, 0, 0)); ref {Conversion} [1106-1107],
 assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 100, new byte[] {}, 0, 0)); ref {Conversion} [1108-1109],
 assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 0, new byte[] {}, 100, 0)); ref {Conversion} [1110-1111],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); ref {Conversion} [1112-1117],
 assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); ref {Conversion} [1118-1123],
 assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); ref {Conversion} [1124-1129],
 assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 4)); ref {Conversion} [1130-1135],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); ref {Conversion} [1136-1141],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); ref {Conversion} [1142-1147],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); ref {Conversion} [1148-1153],
 assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); ref {Conversion} [1154-1159],
 assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); ref {Conversion} [1160-1165],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); ref {Conversion} [1166-1171],
 // assertArrayEquals(new
// byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xFC,(byte)0x00,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.intToByteArray(0x90ABCDEF,13,new
// byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,4));//rejected by assertion
assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 3)); ref {Conversion} [1175-1180]
[m[m31.08.2022 - 15:15:23.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testShortToByteArray has 12 assertions: 
 assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[] {}, 0, 0)); ref {Conversion} [1188-1189],
 assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 100, new byte[] {}, 0, 0)); ref {Conversion} [1190-1191],
 assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[] {}, 100, 0)); ref {Conversion} [1192-1193],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); ref {Conversion} [1194-1198],
 assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); ref {Conversion} [1199-1203],
 assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); ref {Conversion} [1204-1208],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); ref {Conversion} [1209-1213],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); ref {Conversion} [1214-1218],
 assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); ref {Conversion} [1219-1223],
 assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); ref {Conversion} [1224-1228],
 assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0xFE, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1 }, 3, 2)); ref {Conversion} [1229-1233],
 // assertArrayEquals(new
// byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.shortToByteArray((short)0xCDEF,13,new
// byte[]{-1, 0,-1,-1,-1,-1,-1},3,2));//rejected by assertion
assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0xFE, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1 }, 3, 1)); ref {Conversion} [1237-1241]
[m[m31.08.2022 - 15:15:23.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testLongToHex has 19 assertions: 
 assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0)); ref {Conversion} [1249-1249],
 assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0)); ref {Conversion} [1250-1250],
 assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0)); ref {Conversion} [1251-1251],
 assertEquals("ffffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 0)); ref {Conversion} [1252-1254],
 assertEquals("3fffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 0, 1)); ref {Conversion} [1255-1257],
 assertEquals("feffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 2)); ref {Conversion} [1258-1260],
 assertEquals("fedcffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 4)); ref {Conversion} [1261-1263],
 assertEquals("fedcba098765432fffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 15)); ref {Conversion} [1264-1266],
 assertEquals("fedcba0987654321ffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 16)); ref {Conversion} [1267-1269],
 assertEquals("fff3ffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 3, 1)); ref {Conversion} [1270-1272],
 assertEquals("ffffefffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 2)); ref {Conversion} [1273-1275],
 assertEquals("ffffedcfffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 4)); ref {Conversion} [1276-1278],
 assertEquals("ffffedcba098765432ffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 15)); ref {Conversion} [1279-1281],
 assertEquals("ffffedcba0987654321fffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 16)); ref {Conversion} [1282-1284],
 assertEquals("7fffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 1, "ffffffffffffffffffffffff", 0, 1)); ref {Conversion} [1285-1287],
 assertEquals("bfffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 2, "ffffffffffffffffffffffff", 0, 1)); ref {Conversion} [1288-1290],
 assertEquals("fffdb975121fca86420fffff", Conversion.longToHex(0x1234567890ABCDEFL, 3, "ffffffffffffffffffffffff", 3, 16)); ref {Conversion} [1291-1293],
 // assertEquals("ffffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL,4,"ffffffffffffffffffffffff",3,16));//rejected
// by assertion
assertEquals("fffedcba0987654321ffffff", Conversion.longToHex(0x1234567890ABCDEFL, 4, "ffffffffffffffffffffffff", 3, 15)); ref {Conversion} [1296-1298],
 assertEquals("fedcba0987654321", Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 0, 16)); ref {Conversion} [1299-1300]
[m[m31.08.2022 - 15:15:23.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testIntToHex has 19 assertions: 
 assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0)); ref {Conversion} [1314-1314],
 assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0)); ref {Conversion} [1315-1315],
 assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0)); ref {Conversion} [1316-1316],
 assertEquals("ffffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); ref {Conversion} [1317-1319],
 assertEquals("3fffffffffffffffffffffff", Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); ref {Conversion} [1320-1322],
 assertEquals("feffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); ref {Conversion} [1323-1325],
 assertEquals("fedcffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 4)); ref {Conversion} [1326-1328],
 assertEquals("fedcba0fffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 7)); ref {Conversion} [1329-1331],
 assertEquals("fedcba09ffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 8)); ref {Conversion} [1332-1334],
 assertEquals("fff3ffffffffffffffffffff", Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 3, 1)); ref {Conversion} [1335-1337],
 assertEquals("ffffefffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 2)); ref {Conversion} [1338-1340],
 assertEquals("ffffedcfffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 4)); ref {Conversion} [1341-1343],
 assertEquals("ffffedcba0ffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 7)); ref {Conversion} [1344-1346],
 assertEquals("ffffedcba09fffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 8)); ref {Conversion} [1347-1349],
 assertEquals("7fffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 1, "ffffffffffffffffffffffff", 0, 1)); ref {Conversion} [1350-1352],
 assertEquals("bfffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 2, "ffffffffffffffffffffffff", 0, 1)); ref {Conversion} [1353-1355],
 assertEquals("fffdb97512ffffffffffffff", Conversion.intToHex(0x90ABCDEF, 3, "ffffffffffffffffffffffff", 3, 8)); ref {Conversion} [1356-1358],
 // assertEquals("ffffffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF,
// 4,"ffffffffffffffffffffffff",3,8));//rejected by assertion
assertEquals("fffedcba09ffffffffffffff", Conversion.intToHex(0x90ABCDEF, 4, "ffffffffffffffffffffffff", 3, 7)); ref {Conversion} [1361-1363],
 assertEquals("fedcba09", Conversion.intToHex(0x90ABCDEF, 0, "", 0, 8)); ref {Conversion} [1364-1364]
[m[m31.08.2022 - 15:15:23.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testShortToHex has 15 assertions: 
 assertEquals("", Conversion.shortToHex((short) 0x0000, 0, "", 0, 0)); ref {Conversion} [1378-1378],
 assertEquals("", Conversion.shortToHex((short) 0x0000, 100, "", 0, 0)); ref {Conversion} [1379-1379],
 assertEquals("", Conversion.shortToHex((short) 0x0000, 0, "", 100, 0)); ref {Conversion} [1380-1380],
 assertEquals("ffffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); ref {Conversion} [1381-1383],
 assertEquals("3fffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); ref {Conversion} [1384-1386],
 assertEquals("feffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); ref {Conversion} [1387-1389],
 assertEquals("fedfffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 3)); ref {Conversion} [1390-1392],
 assertEquals("fedcffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 4)); ref {Conversion} [1393-1395],
 assertEquals("fff3ffffffffffffffffffff", Conversion.shortToHex((short) 0xCDE3, 0, "ffffffffffffffffffffffff", 3, 1)); ref {Conversion} [1396-1398],
 assertEquals("ffffefffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 3, 2)); ref {Conversion} [1399-1401],
 assertEquals("7fffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 1, "ffffffffffffffffffffffff", 0, 1)); ref {Conversion} [1402-1404],
 assertEquals("bfffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 2, "ffffffffffffffffffffffff", 0, 1)); ref {Conversion} [1405-1407],
 assertEquals("fffdb9ffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 3, "ffffffffffffffffffffffff", 3, 4)); ref {Conversion} [1408-1410],
 // assertEquals("ffffffffffffffffffffffff",Conversion.shortToHex((short)0xCDEF,
// 4,"ffffffffffffffffffffffff",3,4));//rejected by assertion
assertEquals("fffedcffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 4, "ffffffffffffffffffffffff", 3, 3)); ref {Conversion} [1413-1415],
 assertEquals("fedc", Conversion.shortToHex((short) 0xCDEF, 0, "", 0, 4)); ref {Conversion} [1416-1416]
[m[m31.08.2022 - 15:15:23.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testByteToHex has 13 assertions: 
 assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 0, 0)); ref {Conversion} [1430-1430],
 assertEquals("", Conversion.byteToHex((byte) 0x00, 100, "", 0, 0)); ref {Conversion} [1431-1431],
 assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 100, 0)); ref {Conversion} [1432-1432],
 assertEquals("00000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 0)); ref {Conversion} [1433-1433],
 assertEquals("f0000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 1)); ref {Conversion} [1434-1434],
 assertEquals("fe000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 2)); ref {Conversion} [1435-1435],
 assertEquals("000f0", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 1)); ref {Conversion} [1436-1436],
 assertEquals("000fe", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 2)); ref {Conversion} [1437-1437],
 assertEquals("70000", Conversion.byteToHex((byte) 0xEF, 1, "00000", 0, 1)); ref {Conversion} [1438-1438],
 assertEquals("b0000", Conversion.byteToHex((byte) 0xEF, 2, "00000", 0, 1)); ref {Conversion} [1439-1439],
 assertEquals("000df", Conversion.byteToHex((byte) 0xEF, 3, "00000", 3, 2)); ref {Conversion} [1440-1440],
 // assertEquals("00000",Conversion.byteToHex((byte)0xEF, 4,"00000",3,2));//rejected by
// assertion
assertEquals("000e0", Conversion.byteToHex((byte) 0xEF, 4, "00000", 3, 1)); ref {Conversion} [1443-1443],
 assertEquals("fe", Conversion.byteToHex((byte) 0xEF, 0, "", 0, 2)); ref {Conversion} [1444-1444]
[m[m31.08.2022 - 15:15:23.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testLongToBinary has 14 assertions: 
 assertBinaryEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 0, new boolean[] {}, 0, 0)); ref {Conversion} [1458-1460],
 assertBinaryEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 100, new boolean[] {}, 0, 0)); ref {Conversion} [1461-1463],
 assertBinaryEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 0, new boolean[] {}, 100, 0)); ref {Conversion} [1464-1466],
 assertBinaryEquals(new boolean[69], Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0)); ref {Conversion} [1467-1469],
 assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1)); ref {Conversion} [1471-1480],
 assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2)); ref {Conversion} [1481-1490],
 assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3)); ref {Conversion} [1491-1500],
 assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63)); ref {Conversion} [1501-1509],
 assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64)); ref {Conversion} [1510-1518],
 assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1)); ref {Conversion} [1519-1528],
 assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64)); ref {Conversion} [1529-1537],
 assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63)); ref {Conversion} [1538-1546],
 assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62)); ref {Conversion} [1547-1555],
 // assertBinaryEquals(new boolean[]{false,false,false, true, true, false, true, true,
// true, true, false, true, true, false, false, true, true, true, true, false, true,
// false, true, false, true, false, false, false, false, true, false, false, true,
// false, false, false, true, true, true, true, false, false, true, true, false, true,
// false, true, false, false, false, true, false, true, true, false, false, false, true,
// false, false, true, false, false, false
// ,false,false,false,false},Conversion.longToBinary(0x1234567890ABCDEFL, 2,new
// boolean[69], 3, 63));//rejected by assertion
assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62)); ref {Conversion} [1565-1573]
[m[m31.08.2022 - 15:15:23.034 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testIntToBinary has 14 assertions: 
 assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 0, new boolean[] {}, 0, 0)); ref {Conversion} [1581-1582],
 assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 100, new boolean[] {}, 0, 0)); ref {Conversion} [1583-1584],
 assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 0, new boolean[] {}, 100, 0)); ref {Conversion} [1585-1586],
 assertBinaryEquals(new boolean[69], Conversion.intToBinary(0x90ABCDEF, 0, new boolean[69], 0, 0)); ref {Conversion} [1587-1588],
 assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 1)); ref {Conversion} [1589-1593],
 assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 2)); ref {Conversion} [1594-1598],
 assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 3)); ref {Conversion} [1599-1603],
 assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 31)); ref {Conversion} [1604-1609],
 assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 32)); ref {Conversion} [1610-1615],
 assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 1)); ref {Conversion} [1616-1620],
 assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 32)); ref {Conversion} [1621-1626],
 assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 1, new boolean[37], 0, 31)); ref {Conversion} [1627-1632],
 assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 0, 30)); ref {Conversion} [1633-1638],
 // assertBinaryEquals(new boolean[]{false, false, false, true, true, false, true,
// true,
// true, true, false, true, true, false, false, true, true, true, true, false, true,
// false, true, false, true, false, false, false, false, true, false, false, false,
// false, false, false, false},Conversion.intToBinary(0x90ABCDEF, 2,new boolean[37],
// 3,31));//rejected by assertion
assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 3, 30)); ref {Conversion} [1645-1650]
[m[m31.08.2022 - 15:15:23.035 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testShortToBinary has 14 assertions: 
 assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[] {}, 0, 0)); ref {Conversion} [1658-1659],
 assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 100, new boolean[] {}, 0, 0)); ref {Conversion} [1660-1662],
 assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[] {}, 100, 0)); ref {Conversion} [1663-1665],
 assertBinaryEquals(new boolean[69], Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[69], 0, 0)); ref {Conversion} [1666-1667],
 assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 1)); ref {Conversion} [1668-1672],
 assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 2)); ref {Conversion} [1673-1677],
 assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 3)); ref {Conversion} [1678-1682],
 assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 15)); ref {Conversion} [1683-1687],
 assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 16)); ref {Conversion} [1688-1692],
 assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 1)); ref {Conversion} [1693-1697],
 assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 16)); ref {Conversion} [1698-1702],
 assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 1, new boolean[21], 0, 15)); ref {Conversion} [1703-1707],
 assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 0, 14)); ref {Conversion} [1708-1712],
 // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,
// true, true, false, true, true, false, false, true, false, false, false, false,
// false},Conversion.shortToBinary((short)0xCDEF, 2,new boolean[21],
// 3,15));//rejected by
// assertion
assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 3, 14)); ref {Conversion} [1718-1722]
[m[m31.08.2022 - 15:15:23.035 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testByteToBinary has 14 assertions: 
 assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[] {}, 0, 0)); ref {Conversion} [1730-1731],
 assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 100, new boolean[] {}, 0, 0)); ref {Conversion} [1732-1733],
 assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[] {}, 100, 0)); ref {Conversion} [1734-1735],
 assertBinaryEquals(new boolean[69], Conversion.byteToBinary((byte) 0xEF, 0, new boolean[69], 0, 0)); ref {Conversion} [1736-1737],
 assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 1)); ref {Conversion} [1738-1740],
 assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 2)); ref {Conversion} [1741-1743],
 assertBinaryEquals(new boolean[] { true, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 3)); ref {Conversion} [1744-1746],
 assertBinaryEquals(new boolean[] { true, false, true, false, true, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 7)); ref {Conversion} [1747-1749],
 assertBinaryEquals(new boolean[] { true, false, true, false, true, false, false, true, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 8)); ref {Conversion} [1750-1752],
 assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 1)); ref {Conversion} [1753-1755],
 assertBinaryEquals(new boolean[] { false, false, true, false, true, false, true, false, false, true, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 8)); ref {Conversion} [1756-1758],
 assertBinaryEquals(new boolean[] { false, true, false, true, false, false, true, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 1, new boolean[13], 0, 7)); ref {Conversion} [1759-1761],
 assertBinaryEquals(new boolean[] { true, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 0, 6)); ref {Conversion} [1762-1764],
 // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,
// false, false, false, false, false},Conversion.byteToBinary((byte)0x95, 2,new
// boolean[13], 3, 7));//rejected by assertion
assertBinaryEquals(new boolean[] { false, false, false, true, false, true, false, false, true, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 3, 6)); ref {Conversion} [1768-1770]
[m[m31.08.2022 - 15:15:23.035 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testUuidToByteArray has 4 assertions: 
 assertArrayEquals(new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff }, Conversion.uuidToByteArray(new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), new byte[16], 0, 16)); ref {Conversion} [1778-1782],
 assertArrayEquals(new byte[] { (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77 }, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 0, 16)); ref {Conversion} [1783-1787],
 assertArrayEquals(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 }, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 4, 8)); ref {Conversion} [1788-1792],
 assertArrayEquals(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x00, (byte) 0x00 }, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 2, 12)); ref {Conversion} [1793-1797]
[m[m31.08.2022 - 15:15:23.035 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ConversionTest::testByteArrayToUuid has 3 assertions: 
 assertEquals(new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), Conversion.byteArrayToUuid(new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff }, 0)); ref {Conversion} [1805-1810],
 assertEquals(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), Conversion.byteArrayToUuid(new byte[] { (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77 }, 0)); ref {Conversion} [1811-1816],
 assertEquals(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), Conversion.byteArrayToUuid(new byte[] { 0, 0, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77 }, 2)); ref {Conversion} [1817-1822]
[m[m31.08.2022 - 15:15:23.037 [INFO ] ParsingStrategy.parseTestSuite() - Found 15 test cases
[m[m31.08.2022 - 15:15:23.037 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testInitialize has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.037 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testGetActiveExecutorBeforeStart has 1 assertions: 
 assertNull("Got an executor", init.getActiveExecutor()); ref {init} [64-64]
[m[m31.08.2022 - 15:15:23.037 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testGetActiveExecutorExternal has 1 assertions: 
 assertSame("Wrong executor", exec, init.getActiveExecutor()); ref {init, exec} [77-77]
[m[m31.08.2022 - 15:15:23.037 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testGetActiveExecutorTemp has 1 assertions: 
 assertNotNull("No active executor", init.getActiveExecutor()); ref {init} [92-92]
[m[m31.08.2022 - 15:15:23.038 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testInitializeTempExecutor has 2 assertions: 
 assertTrue("Wrong result of start()", init.start()); ref {init} [103-103],
 assertTrue("Executor not shutdown", init.getActiveExecutor().isShutdown()); ref {init} [105-106]
[m[m31.08.2022 - 15:15:23.038 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testSetExternalExecutor has 4 assertions: 
 assertEquals("Wrong executor service", exec, init.getExternalExecutor()); ref {init, exec} [119-120],
 assertTrue("Wrong result of start()", init.start()); ref {init} [121-121],
 assertSame("Wrong active executor", exec, init.getActiveExecutor()); ref {init, exec} [122-122],
 assertFalse("Executor was shutdown", exec.isShutdown()); ref {exec} [124-124]
[m[m31.08.2022 - 15:15:23.038 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testSetExternalExecutorAfterStart has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.038 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testStartMultipleTimes has 2 assertions: 
 assertTrue("Wrong result for start()", init.start()); ref {init} [158-158],
 assertFalse("Could start again", init.start()); ref {init} [160-160]
[m[m31.08.2022 - 15:15:23.038 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testGetBeforeStart has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.038 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testGetRuntimeException has 1 assertions: 
 assertEquals("Runtime exception not thrown", rex, ex); ref {ex, rex} [190-190]
[m[m31.08.2022 - 15:15:23.038 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testGetCheckedException has 1 assertions: 
 assertEquals("Exception not thrown", ex, cex.getCause()); ref {ex, cex} [208-208]
[m[m31.08.2022 - 15:15:23.038 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testGetInterruptedException has 3 assertions: 
 final Thread getThread = new Thread() {

    @Override
    public void run() {
        try {
            init.get();
        } catch (final ConcurrentException cex) {
            if (cex.getCause() instanceof InterruptedException) {
                iex.set((InterruptedException) cex.getCause());
            }
        } finally {
            assertTrue("Thread not interrupted", isInterrupted());
            latch1.countDown();
        }
    }
}; ref {init, latch1, cex, iex} [226-240],
 assertTrue("Thread not interrupted", isInterrupted()); ref {} [236-236],
 assertNotNull("No interrupted exception", iex.get()); ref {iex} [246-246]
[m[m31.08.2022 - 15:15:23.038 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testIsStartedFalse has 1 assertions: 
 assertFalse("Already started", init.isStarted()); ref {init} [255-255]
[m[m31.08.2022 - 15:15:23.038 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testIsStartedTrue has 1 assertions: 
 assertTrue("Not started", init.isStarted()); ref {init} [265-265]
[m[m31.08.2022 - 15:15:23.038 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BackgroundInitializerTest::testIsStartedAfterGet has 1 assertions: 
 assertTrue("Not started", init.isStarted()); ref {init} [276-276]
[m[m31.08.2022 - 15:15:23.038 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.043 [INFO ] ParsingStrategy.parseTestSuite() - Found 15 test cases
[m[m31.08.2022 - 15:15:23.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testIsEmpty has 5 assertions: 
 assertTrue(StringUtils.isEmpty(null)); ref {StringUtils} [38-38],
 assertTrue(StringUtils.isEmpty("")); ref {StringUtils} [39-39],
 assertFalse(StringUtils.isEmpty(" ")); ref {StringUtils} [40-40],
 assertFalse(StringUtils.isEmpty("foo")); ref {StringUtils} [41-41],
 assertFalse(StringUtils.isEmpty("  foo  ")); ref {StringUtils} [42-42]
[m[m31.08.2022 - 15:15:23.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testIsNotEmpty has 5 assertions: 
 assertFalse(StringUtils.isNotEmpty(null)); ref {StringUtils} [47-47],
 assertFalse(StringUtils.isNotEmpty("")); ref {StringUtils} [48-48],
 assertTrue(StringUtils.isNotEmpty(" ")); ref {StringUtils} [49-49],
 assertTrue(StringUtils.isNotEmpty("foo")); ref {StringUtils} [50-50],
 assertTrue(StringUtils.isNotEmpty("  foo  ")); ref {StringUtils} [51-51]
[m[m31.08.2022 - 15:15:23.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testIsBlank has 5 assertions: 
 assertTrue(StringUtils.isBlank(null)); ref {StringUtils} [56-56],
 assertTrue(StringUtils.isBlank("")); ref {StringUtils} [57-57],
 assertTrue(StringUtils.isBlank(StringUtilsTest.WHITESPACE)); ref {StringUtilsTest, StringUtils, StringUtilsTest.WHITESPACE} [58-58],
 assertFalse(StringUtils.isBlank("foo")); ref {StringUtils} [59-59],
 assertFalse(StringUtils.isBlank("  foo  ")); ref {StringUtils} [60-60]
[m[m31.08.2022 - 15:15:23.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testIsNotBlank has 5 assertions: 
 assertFalse(StringUtils.isNotBlank(null)); ref {StringUtils} [65-65],
 assertFalse(StringUtils.isNotBlank("")); ref {StringUtils} [66-66],
 assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); ref {StringUtilsTest, StringUtils, StringUtilsTest.WHITESPACE} [67-67],
 assertTrue(StringUtils.isNotBlank("foo")); ref {StringUtils} [68-68],
 assertTrue(StringUtils.isNotBlank("  foo  ")); ref {StringUtils} [69-69]
[m[m31.08.2022 - 15:15:23.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testTrim has 9 assertions: 
 assertEquals(FOO, StringUtils.trim(FOO + "  ")); ref {StringUtils, FOO} [75-75],
 assertEquals(FOO, StringUtils.trim(" " + FOO + "  ")); ref {StringUtils, FOO} [76-76],
 assertEquals(FOO, StringUtils.trim(" " + FOO)); ref {StringUtils, FOO} [77-77],
 assertEquals(FOO, StringUtils.trim(FOO + "")); ref {StringUtils, FOO} [78-78],
 assertEquals("", StringUtils.trim(" \t\r\n\b ")); ref {StringUtils} [79-79],
 assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE)); ref {StringUtilsTest, StringUtilsTest.TRIMMABLE, StringUtils} [80-80],
 assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE)); ref {StringUtilsTest, StringUtilsTest.NON_TRIMMABLE, StringUtils} [81-81],
 assertEquals("", StringUtils.trim("")); ref {StringUtils} [82-82],
 assertEquals(null, StringUtils.trim(null)); ref {StringUtils} [83-83]
[m[m31.08.2022 - 15:15:23.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testTrimToNull has 9 assertions: 
 assertEquals(FOO, StringUtils.trimToNull(FOO + "  ")); ref {StringUtils, FOO} [88-88],
 assertEquals(FOO, StringUtils.trimToNull(" " + FOO + "  ")); ref {StringUtils, FOO} [89-89],
 assertEquals(FOO, StringUtils.trimToNull(" " + FOO)); ref {StringUtils, FOO} [90-90],
 assertEquals(FOO, StringUtils.trimToNull(FOO + "")); ref {StringUtils, FOO} [91-91],
 assertEquals(null, StringUtils.trimToNull(" \t\r\n\b ")); ref {StringUtils} [92-92],
 assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE)); ref {StringUtilsTest, StringUtilsTest.TRIMMABLE, StringUtils} [93-93],
 assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE)); ref {StringUtilsTest, StringUtilsTest.NON_TRIMMABLE, StringUtils} [94-94],
 assertEquals(null, StringUtils.trimToNull("")); ref {StringUtils} [95-95],
 assertEquals(null, StringUtils.trimToNull(null)); ref {StringUtils} [96-96]
[m[m31.08.2022 - 15:15:23.043 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testTrimToEmpty has 9 assertions: 
 assertEquals(FOO, StringUtils.trimToEmpty(FOO + "  ")); ref {StringUtils, FOO} [101-101],
 assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + "  ")); ref {StringUtils, FOO} [102-102],
 assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO)); ref {StringUtils, FOO} [103-103],
 assertEquals(FOO, StringUtils.trimToEmpty(FOO + "")); ref {StringUtils, FOO} [104-104],
 assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b ")); ref {StringUtils} [105-105],
 assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE)); ref {StringUtilsTest, StringUtilsTest.TRIMMABLE, StringUtils} [106-106],
 assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE)); ref {StringUtilsTest, StringUtilsTest.NON_TRIMMABLE, StringUtils} [107-107],
 assertEquals("", StringUtils.trimToEmpty("")); ref {StringUtils} [108-108],
 assertEquals("", StringUtils.trimToEmpty(null)); ref {StringUtils} [109-109]
[m[m31.08.2022 - 15:15:23.044 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testStrip_String has 5 assertions: 
 assertEquals(null, StringUtils.strip(null)); ref {StringUtils} [115-115],
 assertEquals("", StringUtils.strip("")); ref {StringUtils} [116-116],
 assertEquals("", StringUtils.strip("        ")); ref {StringUtils} [117-117],
 assertEquals("abc", StringUtils.strip("  abc  ")); ref {StringUtils} [118-118],
 assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); ref {StringUtilsTest, StringUtilsTest.NON_WHITESPACE, StringUtils, StringUtilsTest.WHITESPACE} [119-120]
[m[m31.08.2022 - 15:15:23.044 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testStripToNull_String has 6 assertions: 
 assertEquals(null, StringUtils.stripToNull(null)); ref {StringUtils} [125-125],
 assertEquals(null, StringUtils.stripToNull("")); ref {StringUtils} [126-126],
 assertEquals(null, StringUtils.stripToNull("        ")); ref {StringUtils} [127-127],
 assertEquals(null, StringUtils.stripToNull(StringUtilsTest.WHITESPACE)); ref {StringUtilsTest, StringUtils, StringUtilsTest.WHITESPACE} [128-128],
 assertEquals("ab c", StringUtils.stripToNull("  ab c  ")); ref {StringUtils} [129-129],
 assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); ref {StringUtilsTest, StringUtilsTest.NON_WHITESPACE, StringUtils, StringUtilsTest.WHITESPACE} [130-131]
[m[m31.08.2022 - 15:15:23.044 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testStripToEmpty_String has 6 assertions: 
 assertEquals("", StringUtils.stripToEmpty(null)); ref {StringUtils} [136-136],
 assertEquals("", StringUtils.stripToEmpty("")); ref {StringUtils} [137-137],
 assertEquals("", StringUtils.stripToEmpty("        ")); ref {StringUtils} [138-138],
 assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE)); ref {StringUtilsTest, StringUtils, StringUtilsTest.WHITESPACE} [139-139],
 assertEquals("ab c", StringUtils.stripToEmpty("  ab c  ")); ref {StringUtils} [140-140],
 assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); ref {StringUtilsTest, StringUtilsTest.NON_WHITESPACE, StringUtils, StringUtilsTest.WHITESPACE} [141-142]
[m[m31.08.2022 - 15:15:23.044 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testStrip_StringString has 20 assertions: 
 // null strip
assertEquals(null, StringUtils.strip(null, null)); ref {StringUtils} [148-148],
 assertEquals("", StringUtils.strip("", null)); ref {StringUtils} [149-149],
 assertEquals("", StringUtils.strip("        ", null)); ref {StringUtils} [150-150],
 assertEquals("abc", StringUtils.strip("  abc  ", null)); ref {StringUtils} [151-151],
 assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); ref {StringUtilsTest, StringUtilsTest.NON_WHITESPACE, StringUtils, StringUtilsTest.WHITESPACE} [152-153],
 // "" strip
assertEquals(null, StringUtils.strip(null, "")); ref {StringUtils} [156-156],
 assertEquals("", StringUtils.strip("", "")); ref {StringUtils} [157-157],
 assertEquals("        ", StringUtils.strip("        ", "")); ref {StringUtils} [158-158],
 assertEquals("  abc  ", StringUtils.strip("  abc  ", "")); ref {StringUtils} [159-159],
 assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, "")); ref {StringUtilsTest, StringUtils, StringUtilsTest.WHITESPACE} [160-160],
 // " " strip
assertEquals(null, StringUtils.strip(null, " ")); ref {StringUtils} [163-163],
 assertEquals("", StringUtils.strip("", " ")); ref {StringUtils} [164-164],
 assertEquals("", StringUtils.strip("        ", " ")); ref {StringUtils} [165-165],
 assertEquals("abc", StringUtils.strip("  abc  ", " ")); ref {StringUtils} [166-166],
 // "ab" strip
assertEquals(null, StringUtils.strip(null, "ab")); ref {StringUtils} [169-169],
 assertEquals("", StringUtils.strip("", "ab")); ref {StringUtils} [170-170],
 assertEquals("        ", StringUtils.strip("        ", "ab")); ref {StringUtils} [171-171],
 assertEquals("  abc  ", StringUtils.strip("  abc  ", "ab")); ref {StringUtils} [172-172],
 assertEquals("c", StringUtils.strip("abcabab", "ab")); ref {StringUtils} [173-173],
 assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, "")); ref {StringUtilsTest, StringUtils, StringUtilsTest.WHITESPACE} [174-174]
[m[m31.08.2022 - 15:15:23.044 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testStripStart_StringString has 20 assertions: 
 // null stripStart
assertEquals(null, StringUtils.stripStart(null, null)); ref {StringUtils} [180-180],
 assertEquals("", StringUtils.stripStart("", null)); ref {StringUtils} [181-181],
 assertEquals("", StringUtils.stripStart("        ", null)); ref {StringUtils} [182-182],
 assertEquals("abc  ", StringUtils.stripStart("  abc  ", null)); ref {StringUtils} [183-183],
 assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); ref {StringUtilsTest, StringUtilsTest.NON_WHITESPACE, StringUtils, StringUtilsTest.WHITESPACE} [184-185],
 // "" stripStart
assertEquals(null, StringUtils.stripStart(null, "")); ref {StringUtils} [188-188],
 assertEquals("", StringUtils.stripStart("", "")); ref {StringUtils} [189-189],
 assertEquals("        ", StringUtils.stripStart("        ", "")); ref {StringUtils} [190-190],
 assertEquals("  abc  ", StringUtils.stripStart("  abc  ", "")); ref {StringUtils} [191-191],
 assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, "")); ref {StringUtilsTest, StringUtils, StringUtilsTest.WHITESPACE} [192-192],
 // " " stripStart
assertEquals(null, StringUtils.stripStart(null, " ")); ref {StringUtils} [195-195],
 assertEquals("", StringUtils.stripStart("", " ")); ref {StringUtils} [196-196],
 assertEquals("", StringUtils.stripStart("        ", " ")); ref {StringUtils} [197-197],
 assertEquals("abc  ", StringUtils.stripStart("  abc  ", " ")); ref {StringUtils} [198-198],
 // "ab" stripStart
assertEquals(null, StringUtils.stripStart(null, "ab")); ref {StringUtils} [201-201],
 assertEquals("", StringUtils.stripStart("", "ab")); ref {StringUtils} [202-202],
 assertEquals("        ", StringUtils.stripStart("        ", "ab")); ref {StringUtils} [203-203],
 assertEquals("  abc  ", StringUtils.stripStart("  abc  ", "ab")); ref {StringUtils} [204-204],
 assertEquals("cabab", StringUtils.stripStart("abcabab", "ab")); ref {StringUtils} [205-205],
 assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, "")); ref {StringUtilsTest, StringUtils, StringUtilsTest.WHITESPACE} [206-206]
[m[m31.08.2022 - 15:15:23.044 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testStripEnd_StringString has 20 assertions: 
 // null stripEnd
assertEquals(null, StringUtils.stripEnd(null, null)); ref {StringUtils} [212-212],
 assertEquals("", StringUtils.stripEnd("", null)); ref {StringUtils} [213-213],
 assertEquals("", StringUtils.stripEnd("        ", null)); ref {StringUtils} [214-214],
 assertEquals("  abc", StringUtils.stripEnd("  abc  ", null)); ref {StringUtils} [215-215],
 assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); ref {StringUtilsTest, StringUtilsTest.NON_WHITESPACE, StringUtils, StringUtilsTest.WHITESPACE} [216-217],
 // "" stripEnd
assertEquals(null, StringUtils.stripEnd(null, "")); ref {StringUtils} [220-220],
 assertEquals("", StringUtils.stripEnd("", "")); ref {StringUtils} [221-221],
 assertEquals("        ", StringUtils.stripEnd("        ", "")); ref {StringUtils} [222-222],
 assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", "")); ref {StringUtils} [223-223],
 assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, "")); ref {StringUtilsTest, StringUtils, StringUtilsTest.WHITESPACE} [224-224],
 // " " stripEnd
assertEquals(null, StringUtils.stripEnd(null, " ")); ref {StringUtils} [227-227],
 assertEquals("", StringUtils.stripEnd("", " ")); ref {StringUtils} [228-228],
 assertEquals("", StringUtils.stripEnd("        ", " ")); ref {StringUtils} [229-229],
 assertEquals("  abc", StringUtils.stripEnd("  abc  ", " ")); ref {StringUtils} [230-230],
 // "ab" stripEnd
assertEquals(null, StringUtils.stripEnd(null, "ab")); ref {StringUtils} [233-233],
 assertEquals("", StringUtils.stripEnd("", "ab")); ref {StringUtils} [234-234],
 assertEquals("        ", StringUtils.stripEnd("        ", "ab")); ref {StringUtils} [235-235],
 assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", "ab")); ref {StringUtils} [236-236],
 assertEquals("abc", StringUtils.stripEnd("abcabab", "ab")); ref {StringUtils} [237-237],
 assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, "")); ref {StringUtilsTest, StringUtils, StringUtilsTest.WHITESPACE} [238-238]
[m[m31.08.2022 - 15:15:23.044 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testStripAll has 8 assertions: 
 assertNull(StringUtils.stripAll((String[]) null)); ref {StringUtils} [249-249],
 // Additional varargs tests
// empty array
assertArrayEquals(empty, StringUtils.stripAll()); ref {StringUtils, empty} [251-251],
 // == new String[]{null}
assertArrayEquals(new String[] { null }, StringUtils.stripAll((String) null)); ref {StringUtils} [252-252],
 assertArrayEquals(empty, StringUtils.stripAll(empty)); ref {StringUtils, empty} [254-254],
 assertArrayEquals(foo, StringUtils.stripAll(fooSpace)); ref {StringUtils, foo, fooSpace} [255-255],
 assertNull(StringUtils.stripAll(null, null)); ref {StringUtils} [257-257],
 assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null)); ref {StringUtils, foo, fooSpace} [258-258],
 assertArrayEquals(foo, StringUtils.stripAll(fooDots, ".")); ref {fooDots, StringUtils, foo} [259-259]
[m[m31.08.2022 - 15:15:23.044 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTrimEmptyTest::testStripAccents has 6 assertions: 
 assertEquals("Failed to strip accents from " + cue, "Cue", StringUtils.stripAccents(cue)); ref {cue, StringUtils} [265-265],
 assertEquals("Failed to strip accents from " + lots, "AAAAAACEEEEIIIINOOOOOUUUUY", StringUtils.stripAccents(lots)); ref {lots, StringUtils} [270-272],
 assertNull("Failed null safety", StringUtils.stripAccents(null)); ref {StringUtils} [274-274],
 assertEquals("Failed empty String", "", StringUtils.stripAccents("")); ref {StringUtils} [275-275],
 assertEquals("Failed to handle non-accented text", "control", StringUtils.stripAccents("control")); ref {StringUtils} [276-276],
 assertEquals("Failed to handle easy example", "eclair", StringUtils.stripAccents("\u00E9clair")); ref {StringUtils} [277-277]
[m[m31.08.2022 - 15:15:23.052 [INFO ] ParsingStrategy.parseTestSuite() - Found 19 test cases
[m[m31.08.2022 - 15:15:23.052 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveObjectArray has 8 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, array, ArrayUtils, Arrays} [40-40],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [41-41],
 assertTrue(Arrays.equals(new Object[] { "b" }, array)); ref {array, Arrays} [43-43],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [44-44],
 assertTrue(Arrays.equals(new Object[] { "a" }, array)); ref {array, Arrays} [46-46],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [47-47],
 assertTrue(Arrays.equals(new Object[] { "a", "c" }, array)); ref {array, Arrays} [49-49],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [50-50]
[m[m31.08.2022 - 15:15:23.053 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveNumberArray has 7 assertions: 
 assertEquals(3, inarray.length); ref {inarray.length, inarray} [68-68],
 assertEquals(2, outarray.length); ref {outarray, outarray.length} [71-71],
 assertEquals(Number.class, outarray.getClass().getComponentType()); ref {outarray} [72-72],
 assertEquals(1, outarray.length); ref {outarray, outarray.length} [74-74],
 assertEquals(Number.class, outarray.getClass().getComponentType()); ref {outarray} [75-75],
 assertEquals(0, outarray.length); ref {outarray, outarray.length} [77-77],
 assertEquals(Number.class, outarray.getClass().getComponentType()); ref {outarray} [78-78]
[m[m31.08.2022 - 15:15:23.053 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveBooleanArray has 8 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [85-85],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [86-86],
 assertTrue(Arrays.equals(new boolean[] { false }, array)); ref {array, Arrays} [88-88],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [89-89],
 assertTrue(Arrays.equals(new boolean[] { true }, array)); ref {array, Arrays} [91-91],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [92-92],
 assertTrue(Arrays.equals(new boolean[] { true, true }, array)); ref {array, Arrays} [94-94],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [95-95]
[m[m31.08.2022 - 15:15:23.053 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveByteArray has 8 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils, Arrays} [114-114],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [115-115],
 assertTrue(Arrays.equals(new byte[] { 2 }, array)); ref {array, Arrays} [117-117],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [118-118],
 assertTrue(Arrays.equals(new byte[] { 1 }, array)); ref {array, Arrays} [120-120],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [121-121],
 assertTrue(Arrays.equals(new byte[] { 1, 1 }, array)); ref {array, Arrays} [123-123],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [124-124]
[m[m31.08.2022 - 15:15:23.053 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveCharArray has 8 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_CHAR_ARRAY} [143-143],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [144-144],
 assertTrue(Arrays.equals(new char[] { 'b' }, array)); ref {array, Arrays} [146-146],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [147-147],
 assertTrue(Arrays.equals(new char[] { 'a' }, array)); ref {array, Arrays} [149-149],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [150-150],
 assertTrue(Arrays.equals(new char[] { 'a', 'c' }, array)); ref {array, Arrays} [152-152],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [153-153]
[m[m31.08.2022 - 15:15:23.053 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveDoubleArray has 8 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils, Arrays} [172-172],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [173-173],
 assertTrue(Arrays.equals(new double[] { 2 }, array)); ref {array, Arrays} [175-175],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [176-176],
 assertTrue(Arrays.equals(new double[] { 1 }, array)); ref {array, Arrays} [178-178],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [179-179],
 assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); ref {array, Arrays} [181-181],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [182-182]
[m[m31.08.2022 - 15:15:23.053 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveFloatArray has 8 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils, Arrays} [201-201],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [202-202],
 assertTrue(Arrays.equals(new float[] { 2 }, array)); ref {array, Arrays} [204-204],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [205-205],
 assertTrue(Arrays.equals(new float[] { 1 }, array)); ref {array, Arrays} [207-207],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [208-208],
 assertTrue(Arrays.equals(new float[] { 1, 1 }, array)); ref {array, Arrays} [210-210],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [211-211]
[m[m31.08.2022 - 15:15:23.053 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveIntArray has 8 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_INT_ARRAY} [230-230],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [231-231],
 assertTrue(Arrays.equals(new int[] { 2 }, array)); ref {array, Arrays} [233-233],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [234-234],
 assertTrue(Arrays.equals(new int[] { 1 }, array)); ref {array, Arrays} [236-236],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [237-237],
 assertTrue(Arrays.equals(new int[] { 1, 1 }, array)); ref {array, Arrays} [239-239],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [240-240]
[m[m31.08.2022 - 15:15:23.053 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveLongArray has 8 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY, Arrays} [259-259],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [260-260],
 assertTrue(Arrays.equals(new long[] { 2 }, array)); ref {array, Arrays} [262-262],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [263-263],
 assertTrue(Arrays.equals(new long[] { 1 }, array)); ref {array, Arrays} [265-265],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [266-266],
 assertTrue(Arrays.equals(new long[] { 1, 1 }, array)); ref {array, Arrays} [268-268],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [269-269]
[m[m31.08.2022 - 15:15:23.053 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveShortArray has 8 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils, Arrays} [288-288],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [289-289],
 assertTrue(Arrays.equals(new short[] { 2 }, array)); ref {array, Arrays} [291-291],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [292-292],
 assertTrue(Arrays.equals(new short[] { 1 }, array)); ref {array, Arrays} [294-294],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [295-295],
 assertTrue(Arrays.equals(new short[] { 1, 1 }, array)); ref {array, Arrays} [297-297],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [298-298]
[m[m31.08.2022 - 15:15:23.053 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveElementObjectArray has 9 assertions: 
 assertNull(array); ref {array} [317-317],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, array, ArrayUtils, Arrays} [319-319],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [320-320],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, array, ArrayUtils, Arrays} [322-322],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [323-323],
 assertTrue(Arrays.equals(new Object[] { "b" }, array)); ref {array, Arrays} [325-325],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [326-326],
 assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); ref {array, Arrays} [328-328],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [329-329]
[m[m31.08.2022 - 15:15:23.053 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveElementBooleanArray has 9 assertions: 
 assertNull(array); ref {array} [336-336],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [338-338],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [339-339],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [341-341],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [342-342],
 assertTrue(Arrays.equals(new boolean[] { false }, array)); ref {array, Arrays} [344-344],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [345-345],
 assertTrue(Arrays.equals(new boolean[] { false, true }, array)); ref {array, Arrays} [347-347],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [348-348]
[m[m31.08.2022 - 15:15:23.053 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveElementByteArray has 9 assertions: 
 assertNull(array); ref {array} [355-355],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils, Arrays} [357-357],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [358-358],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils, Arrays} [360-360],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [361-361],
 assertTrue(Arrays.equals(new byte[] { 2 }, array)); ref {array, Arrays} [363-363],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [364-364],
 assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); ref {array, Arrays} [366-366],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [367-367]
[m[m31.08.2022 - 15:15:23.054 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveElementCharArray has 9 assertions: 
 assertNull(array); ref {array} [374-374],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_CHAR_ARRAY} [376-376],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [377-377],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_CHAR_ARRAY} [379-379],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [380-380],
 assertTrue(Arrays.equals(new char[] { 'b' }, array)); ref {array, Arrays} [382-382],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [383-383],
 assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); ref {array, Arrays} [385-385],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [386-386]
[m[m31.08.2022 - 15:15:23.054 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveElementDoubleArray has 9 assertions: 
 assertNull(array); ref {array} [394-394],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils, Arrays} [396-396],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [397-397],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils, Arrays} [399-399],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [400-400],
 assertTrue(Arrays.equals(new double[] { 2 }, array)); ref {array, Arrays} [402-402],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [403-403],
 assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); ref {array, Arrays} [405-405],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [406-406]
[m[m31.08.2022 - 15:15:23.054 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveElementFloatArray has 9 assertions: 
 assertNull(array); ref {array} [414-414],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils, Arrays} [416-416],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [417-417],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils, Arrays} [419-419],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [420-420],
 assertTrue(Arrays.equals(new float[] { 2 }, array)); ref {array, Arrays} [422-422],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [423-423],
 assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); ref {array, Arrays} [425-425],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [426-426]
[m[m31.08.2022 - 15:15:23.054 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveElementIntArray has 9 assertions: 
 assertNull(array); ref {array} [433-433],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_INT_ARRAY} [435-435],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [436-436],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_INT_ARRAY} [438-438],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [439-439],
 assertTrue(Arrays.equals(new int[] { 2 }, array)); ref {array, Arrays} [441-441],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [442-442],
 assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); ref {array, Arrays} [444-444],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [445-445]
[m[m31.08.2022 - 15:15:23.054 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveElementLongArray has 9 assertions: 
 assertNull(array); ref {array} [453-453],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY, Arrays} [455-455],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [456-456],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY, Arrays} [458-458],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [459-459],
 assertTrue(Arrays.equals(new long[] { 2 }, array)); ref {array, Arrays} [461-461],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [462-462],
 assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); ref {array, Arrays} [464-464],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [465-465]
[m[m31.08.2022 - 15:15:23.054 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveTest::testRemoveElementShortArray has 9 assertions: 
 assertNull(array); ref {array} [472-472],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils, Arrays} [474-474],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [475-475],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils, Arrays} [477-477],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [478-478],
 assertTrue(Arrays.equals(new short[] { 2 }, array)); ref {array, Arrays} [480-480],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [481-481],
 assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); ref {array, Arrays} [483-483],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [484-484]
[m[m31.08.2022 - 15:15:23.068 [INFO ] ParsingStrategy.parseTestSuite() - Found 25 test cases
[m[m31.08.2022 - 15:15:23.068 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testConstants has 24 assertions: 
 assertEquals(0, Fraction.ZERO.getNumerator()); ref {Fraction.ZERO, Fraction} [41-41],
 assertEquals(1, Fraction.ZERO.getDenominator()); ref {Fraction.ZERO, Fraction} [42-42],
 assertEquals(1, Fraction.ONE.getNumerator()); ref {Fraction.ONE, Fraction} [44-44],
 assertEquals(1, Fraction.ONE.getDenominator()); ref {Fraction.ONE, Fraction} [45-45],
 assertEquals(1, Fraction.ONE_HALF.getNumerator()); ref {Fraction.ONE_HALF, Fraction} [47-47],
 assertEquals(2, Fraction.ONE_HALF.getDenominator()); ref {Fraction.ONE_HALF, Fraction} [48-48],
 assertEquals(1, Fraction.ONE_THIRD.getNumerator()); ref {Fraction.ONE_THIRD, Fraction} [50-50],
 assertEquals(3, Fraction.ONE_THIRD.getDenominator()); ref {Fraction.ONE_THIRD, Fraction} [51-51],
 assertEquals(2, Fraction.TWO_THIRDS.getNumerator()); ref {Fraction.TWO_THIRDS, Fraction} [53-53],
 assertEquals(3, Fraction.TWO_THIRDS.getDenominator()); ref {Fraction.TWO_THIRDS, Fraction} [54-54],
 assertEquals(1, Fraction.ONE_QUARTER.getNumerator()); ref {Fraction.ONE_QUARTER, Fraction} [56-56],
 assertEquals(4, Fraction.ONE_QUARTER.getDenominator()); ref {Fraction.ONE_QUARTER, Fraction} [57-57],
 assertEquals(2, Fraction.TWO_QUARTERS.getNumerator()); ref {Fraction.TWO_QUARTERS, Fraction} [59-59],
 assertEquals(4, Fraction.TWO_QUARTERS.getDenominator()); ref {Fraction.TWO_QUARTERS, Fraction} [60-60],
 assertEquals(3, Fraction.THREE_QUARTERS.getNumerator()); ref {Fraction.THREE_QUARTERS, Fraction} [62-62],
 assertEquals(4, Fraction.THREE_QUARTERS.getDenominator()); ref {Fraction.THREE_QUARTERS, Fraction} [63-63],
 assertEquals(1, Fraction.ONE_FIFTH.getNumerator()); ref {Fraction.ONE_FIFTH, Fraction} [65-65],
 assertEquals(5, Fraction.ONE_FIFTH.getDenominator()); ref {Fraction.ONE_FIFTH, Fraction} [66-66],
 assertEquals(2, Fraction.TWO_FIFTHS.getNumerator()); ref {Fraction, Fraction.TWO_FIFTHS} [68-68],
 assertEquals(5, Fraction.TWO_FIFTHS.getDenominator()); ref {Fraction, Fraction.TWO_FIFTHS} [69-69],
 assertEquals(3, Fraction.THREE_FIFTHS.getNumerator()); ref {Fraction, Fraction.THREE_FIFTHS} [71-71],
 assertEquals(5, Fraction.THREE_FIFTHS.getDenominator()); ref {Fraction, Fraction.THREE_FIFTHS} [72-72],
 assertEquals(4, Fraction.FOUR_FIFTHS.getNumerator()); ref {Fraction, Fraction.FOUR_FIFTHS} [74-74],
 assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator()); ref {Fraction, Fraction.FOUR_FIFTHS} [75-75]
[m[m31.08.2022 - 15:15:23.068 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testFactory_int_int has 18 assertions: 
 assertEquals(0, f.getNumerator()); ref {f} [84-84],
 assertEquals(1, f.getDenominator()); ref {f} [85-85],
 assertEquals(0, f.getNumerator()); ref {f} [88-88],
 assertEquals(2, f.getDenominator()); ref {f} [89-89],
 assertEquals(1, f.getNumerator()); ref {f} [93-93],
 assertEquals(1, f.getDenominator()); ref {f} [94-94],
 assertEquals(2, f.getNumerator()); ref {f} [97-97],
 assertEquals(1, f.getDenominator()); ref {f} [98-98],
 assertEquals(23, f.getNumerator()); ref {f} [101-101],
 assertEquals(345, f.getDenominator()); ref {f} [102-102],
 assertEquals(22, f.getNumerator()); ref {f} [106-106],
 assertEquals(7, f.getDenominator()); ref {f} [107-107],
 assertEquals(-6, f.getNumerator()); ref {f} [111-111],
 assertEquals(10, f.getDenominator()); ref {f} [112-112],
 assertEquals(-6, f.getNumerator()); ref {f} [115-115],
 assertEquals(10, f.getDenominator()); ref {f} [116-116],
 assertEquals(6, f.getNumerator()); ref {f} [119-119],
 assertEquals(10, f.getDenominator()); ref {f} [120-120]
[m[m31.08.2022 - 15:15:23.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testFactory_int_int_int has 12 assertions: 
 assertEquals(0, f.getNumerator()); ref {f} [155-155],
 assertEquals(2, f.getDenominator()); ref {f} [156-156],
 assertEquals(4, f.getNumerator()); ref {f} [159-159],
 assertEquals(2, f.getDenominator()); ref {f} [160-160],
 assertEquals(1, f.getNumerator()); ref {f} [163-163],
 assertEquals(2, f.getDenominator()); ref {f} [164-164],
 assertEquals(3, f.getNumerator()); ref {f} [168-168],
 assertEquals(2, f.getDenominator()); ref {f} [169-169],
 assertEquals(-16, f.getNumerator()); ref {f} [189-189],
 assertEquals(10, f.getDenominator()); ref {f} [190-190],
 assertEquals(-Integer.MAX_VALUE, f.getNumerator()); ref {Integer, f, Integer.MAX_VALUE} [235-235],
 assertEquals(Integer.MAX_VALUE, f.getDenominator()); ref {Integer, f, Integer.MAX_VALUE} [236-236]
[m[m31.08.2022 - 15:15:23.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int has 28 assertions: 
 assertEquals(0, f.getNumerator()); ref {f} [258-258],
 assertEquals(1, f.getDenominator()); ref {f} [259-259],
 assertEquals(1, f.getNumerator()); ref {f} [263-263],
 assertEquals(1, f.getDenominator()); ref {f} [264-264],
 assertEquals(2, f.getNumerator()); ref {f} [267-267],
 assertEquals(1, f.getDenominator()); ref {f} [268-268],
 assertEquals(22, f.getNumerator()); ref {f} [272-272],
 assertEquals(7, f.getDenominator()); ref {f} [273-273],
 assertEquals(-3, f.getNumerator()); ref {f} [277-277],
 assertEquals(5, f.getDenominator()); ref {f} [278-278],
 assertEquals(-3, f.getNumerator()); ref {f} [281-281],
 assertEquals(5, f.getDenominator()); ref {f} [282-282],
 assertEquals(3, f.getNumerator()); ref {f} [285-285],
 assertEquals(5, f.getDenominator()); ref {f} [286-286],
 assertEquals(0, f.getNumerator()); ref {f} [306-306],
 assertEquals(1, f.getDenominator()); ref {f} [307-307],
 assertEquals(1, f.getNumerator()); ref {f} [310-310],
 assertEquals(1, f.getDenominator()); ref {f} [311-311],
 assertEquals(1, f.getNumerator()); ref {f} [314-314],
 assertEquals(2, f.getDenominator()); ref {f} [315-315],
 assertEquals(3, f.getNumerator()); ref {f} [318-318],
 assertEquals(2, f.getDenominator()); ref {f} [319-319],
 assertEquals(11, f.getNumerator()); ref {f} [322-322],
 assertEquals(2, f.getDenominator()); ref {f} [323-323],
 assertEquals(1, f.getNumerator()); ref {f} [328-328],
 assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); ref {Integer, f, Integer.MIN_VALUE} [329-329],
 assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); ref {Integer, f, Integer.MIN_VALUE} [339-339],
 assertEquals(1, f.getDenominator()); ref {f} [340-340]
[m[m31.08.2022 - 15:15:23.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testFactory_double has 18 assertions: 
 assertEquals(0, f.getNumerator()); ref {f} [369-369],
 assertEquals(1, f.getDenominator()); ref {f} [370-370],
 assertEquals(1, f.getNumerator()); ref {f} [374-374],
 assertEquals(1, f.getDenominator()); ref {f} [375-375],
 assertEquals(1, f.getNumerator()); ref {f} [379-379],
 assertEquals(2, f.getDenominator()); ref {f} [380-380],
 assertEquals(-7, f.getNumerator()); ref {f} [384-384],
 assertEquals(8, f.getDenominator()); ref {f} [385-385],
 assertEquals(5, f.getNumerator()); ref {f} [389-389],
 assertEquals(4, f.getDenominator()); ref {f} [390-390],
 assertEquals(2, f.getNumerator()); ref {f} [394-394],
 assertEquals(3, f.getDenominator()); ref {f} [395-395],
 assertEquals(0, f.getNumerator()); ref {f} [399-399],
 assertEquals(1, f.getDenominator()); ref {f} [400-400],
 assertEquals(f2.getNumerator(), f.getNumerator()); ref {f, f2} [413-413],
 assertEquals(f2.getDenominator(), f.getDenominator()); ref {f, f2} [414-414],
 assertEquals(f2.getNumerator(), f.getNumerator()); ref {f, f2} [427-427],
 assertEquals(f2.getDenominator(), f.getDenominator()); ref {f, f2} [428-428]
[m[m31.08.2022 - 15:15:23.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testFactory_String has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testFactory_String_double has 8 assertions: 
 assertEquals(0, f.getNumerator()); ref {f} [444-444],
 assertEquals(1, f.getDenominator()); ref {f} [445-445],
 assertEquals(1, f.getNumerator()); ref {f} [448-448],
 assertEquals(5, f.getDenominator()); ref {f} [449-449],
 assertEquals(1, f.getNumerator()); ref {f} [452-452],
 assertEquals(2, f.getDenominator()); ref {f} [453-453],
 assertEquals(2, f.getNumerator()); ref {f} [456-456],
 assertEquals(3, f.getDenominator()); ref {f} [457-457]
[m[m31.08.2022 - 15:15:23.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testFactory_String_proper has 12 assertions: 
 assertEquals(0, f.getNumerator()); ref {f} [480-480],
 assertEquals(1, f.getDenominator()); ref {f} [481-481],
 assertEquals(6, f.getNumerator()); ref {f} [484-484],
 assertEquals(5, f.getDenominator()); ref {f} [485-485],
 assertEquals(15, f.getNumerator()); ref {f} [488-488],
 assertEquals(2, f.getDenominator()); ref {f} [489-489],
 assertEquals(6, f.getNumerator()); ref {f} [492-492],
 assertEquals(4, f.getDenominator()); ref {f} [493-493],
 assertEquals(-15, f.getNumerator()); ref {f} [496-496],
 assertEquals(2, f.getDenominator()); ref {f} [497-497],
 assertEquals(-6, f.getNumerator()); ref {f} [500-500],
 assertEquals(4, f.getDenominator()); ref {f} [501-501]
[m[m31.08.2022 - 15:15:23.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testFactory_String_improper has 12 assertions: 
 assertEquals(0, f.getNumerator()); ref {f} [539-539],
 assertEquals(1, f.getDenominator()); ref {f} [540-540],
 assertEquals(1, f.getNumerator()); ref {f} [543-543],
 assertEquals(5, f.getDenominator()); ref {f} [544-544],
 assertEquals(1, f.getNumerator()); ref {f} [547-547],
 assertEquals(2, f.getDenominator()); ref {f} [548-548],
 assertEquals(2, f.getNumerator()); ref {f} [551-551],
 assertEquals(3, f.getDenominator()); ref {f} [552-552],
 assertEquals(7, f.getNumerator()); ref {f} [555-555],
 assertEquals(3, f.getDenominator()); ref {f} [556-556],
 assertEquals(2, f.getNumerator()); ref {f} [559-559],
 assertEquals(4, f.getDenominator()); ref {f} [560-560]
[m[m31.08.2022 - 15:15:23.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testGets has 12 assertions: 
 assertEquals(23, f.getNumerator()); ref {f} [588-588],
 assertEquals(3, f.getProperWhole()); ref {f} [589-589],
 assertEquals(5, f.getProperNumerator()); ref {f} [590-590],
 assertEquals(6, f.getDenominator()); ref {f} [591-591],
 assertEquals(-23, f.getNumerator()); ref {f} [594-594],
 assertEquals(-3, f.getProperWhole()); ref {f} [595-595],
 assertEquals(5, f.getProperNumerator()); ref {f} [596-596],
 assertEquals(6, f.getDenominator()); ref {f} [597-597],
 assertEquals(Integer.MIN_VALUE, f.getNumerator()); ref {Integer, f, Integer.MIN_VALUE} [600-600],
 assertEquals(Integer.MIN_VALUE, f.getProperWhole()); ref {Integer, f, Integer.MIN_VALUE} [601-601],
 assertEquals(0, f.getProperNumerator()); ref {f} [602-602],
 assertEquals(1, f.getDenominator()); ref {f} [603-603]
[m[m31.08.2022 - 15:15:23.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testConversions has 4 assertions: 
 assertEquals(3, f.intValue()); ref {f} [611-611],
 assertEquals(3L, f.longValue()); ref {f} [612-612],
 assertEquals(3.875f, f.floatValue(), 0.00001f); ref {f} [613-613],
 assertEquals(3.875d, f.doubleValue(), 0.00001d); ref {f} [614-614]
[m[m31.08.2022 - 15:15:23.069 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testReduce has 20 assertions: 
 assertEquals(2, result.getNumerator()); ref {result} [623-623],
 assertEquals(3, result.getDenominator()); ref {result} [624-624],
 assertEquals(2, result.getNumerator()); ref {result} [628-628],
 assertEquals(3, result.getDenominator()); ref {result} [629-629],
 assertEquals(-2, result.getNumerator()); ref {result} [633-633],
 assertEquals(3, result.getDenominator()); ref {result} [634-634],
 assertEquals(-2, result.getNumerator()); ref {result} [638-638],
 assertEquals(3, result.getDenominator()); ref {result} [639-639],
 assertSame(f, result); ref {result, f} [640-640],
 assertEquals(2, result.getNumerator()); ref {result} [644-644],
 assertEquals(3, result.getDenominator()); ref {result} [645-645],
 assertSame(f, result); ref {result, f} [646-646],
 assertEquals(0, result.getNumerator()); ref {result} [650-650],
 assertEquals(1, result.getDenominator()); ref {result} [651-651],
 assertSame(f, result); ref {result, f} [652-652],
 assertEquals(0, result.getNumerator()); ref {result} [656-656],
 assertEquals(1, result.getDenominator()); ref {result} [657-657],
 assertSame(result, Fraction.ZERO); ref {result, Fraction.ZERO, Fraction} [658-658],
 assertEquals(Integer.MIN_VALUE / 2, result.getNumerator()); ref {Integer, result, Integer.MIN_VALUE} [662-662],
 assertEquals(1, result.getDenominator()); ref {result} [663-663]
[m[m31.08.2022 - 15:15:23.070 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testInvert has 8 assertions: 
 assertEquals(75, f.getNumerator()); ref {f} [672-672],
 assertEquals(50, f.getDenominator()); ref {f} [673-673],
 assertEquals(3, f.getNumerator()); ref {f} [677-677],
 assertEquals(4, f.getDenominator()); ref {f} [678-678],
 assertEquals(-47, f.getNumerator()); ref {f} [682-682],
 assertEquals(15, f.getDenominator()); ref {f} [683-683],
 assertEquals(1, f.getNumerator()); ref {f} [700-700],
 assertEquals(Integer.MAX_VALUE, f.getDenominator()); ref {Integer, f, Integer.MAX_VALUE} [701-701]
[m[m31.08.2022 - 15:15:23.070 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testNegate has 6 assertions: 
 assertEquals(-50, f.getNumerator()); ref {f} [710-710],
 assertEquals(75, f.getDenominator()); ref {f} [711-711],
 assertEquals(50, f.getNumerator()); ref {f} [715-715],
 assertEquals(75, f.getDenominator()); ref {f} [716-716],
 assertEquals(Integer.MIN_VALUE + 2, f.getNumerator()); ref {Integer, f, Integer.MIN_VALUE} [721-721],
 assertEquals(Integer.MAX_VALUE, f.getDenominator()); ref {Integer, f, Integer.MAX_VALUE} [722-722]
[m[m31.08.2022 - 15:15:23.070 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testAbs has 8 assertions: 
 assertEquals(50, f.getNumerator()); ref {f} [737-737],
 assertEquals(75, f.getDenominator()); ref {f} [738-738],
 assertEquals(50, f.getNumerator()); ref {f} [742-742],
 assertEquals(75, f.getDenominator()); ref {f} [743-743],
 assertEquals(Integer.MAX_VALUE, f.getNumerator()); ref {Integer, f, Integer.MAX_VALUE} [747-747],
 assertEquals(1, f.getDenominator()); ref {f} [748-748],
 assertEquals(Integer.MAX_VALUE, f.getNumerator()); ref {Integer, f, Integer.MAX_VALUE} [752-752],
 assertEquals(1, f.getDenominator()); ref {f} [753-753]
[m[m31.08.2022 - 15:15:23.070 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testPow has 33 assertions: 
 assertEquals(Fraction.ONE, f.pow(0)); ref {Fraction.ONE, f, Fraction} [767-767],
 assertSame(f, f.pow(1)); ref {f} [770-770],
 assertEquals(f, f.pow(1)); ref {f} [771-771],
 assertEquals(9, f.getNumerator()); ref {f} [775-775],
 assertEquals(25, f.getDenominator()); ref {f} [776-776],
 assertEquals(27, f.getNumerator()); ref {f} [780-780],
 assertEquals(125, f.getDenominator()); ref {f} [781-781],
 assertEquals(5, f.getNumerator()); ref {f} [785-785],
 assertEquals(3, f.getDenominator()); ref {f} [786-786],
 assertEquals(25, f.getNumerator()); ref {f} [790-790],
 assertEquals(9, f.getDenominator()); ref {f} [791-791],
 assertEquals(Fraction.ONE, f.pow(0)); ref {Fraction.ONE, f, Fraction} [795-795],
 assertEquals(f, f.pow(1)); ref {f} [798-798],
 assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); ref {f, Fraction} [799-799],
 assertEquals(9, f.getNumerator()); ref {f} [803-803],
 assertEquals(25, f.getDenominator()); ref {f} [804-804],
 assertEquals(27, f.getNumerator()); ref {f} [808-808],
 assertEquals(125, f.getDenominator()); ref {f} [809-809],
 assertEquals(10, f.getNumerator()); ref {f} [813-813],
 assertEquals(6, f.getDenominator()); ref {f} [814-814],
 assertEquals(25, f.getNumerator()); ref {f} [818-818],
 assertEquals(9, f.getDenominator()); ref {f} [819-819],
 assertTrue(0 == f.compareTo(Fraction.ZERO)); ref {Fraction.ZERO, f, Fraction} [824-824],
 assertEquals(0, f.getNumerator()); ref {f} [825-825],
 assertEquals(1231, f.getDenominator()); ref {f} [826-826],
 assertTrue(0 == f.compareTo(Fraction.ZERO)); ref {Fraction.ZERO, f, Fraction} [828-828],
 assertEquals(0, f.getNumerator()); ref {f} [829-829],
 assertEquals(1, f.getDenominator()); ref {f} [830-830],
 assertEquals(f, Fraction.ONE); ref {Fraction.ONE, f, Fraction} [845-845],
 assertEquals(f, Fraction.ONE); ref {Fraction.ONE, f, Fraction} [847-847],
 assertEquals(f, Fraction.ONE); ref {Fraction.ONE, f, Fraction} [849-849],
 assertEquals(f, Fraction.ONE); ref {Fraction.ONE, f, Fraction} [851-851],
 assertEquals(f, Fraction.ONE); ref {Fraction.ONE, f, Fraction} [853-853]
[m[m31.08.2022 - 15:15:23.070 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testAdd has 24 assertions: 
 assertEquals(4, f.getNumerator()); ref {f} [884-884],
 assertEquals(5, f.getDenominator()); ref {f} [885-885],
 assertEquals(1, f.getNumerator()); ref {f} [890-890],
 assertEquals(1, f.getDenominator()); ref {f} [891-891],
 assertEquals(6, f.getNumerator()); ref {f} [896-896],
 assertEquals(5, f.getDenominator()); ref {f} [897-897],
 assertEquals(-1, f.getNumerator()); ref {f} [902-902],
 assertEquals(5, f.getDenominator()); ref {f} [903-903],
 assertEquals(Integer.MAX_VALUE, f.getNumerator()); ref {Integer, f, Integer.MAX_VALUE} [908-908],
 assertEquals(1, f.getDenominator()); ref {f} [909-909],
 assertEquals(11, f.getNumerator()); ref {f} [914-914],
 assertEquals(10, f.getDenominator()); ref {f} [915-915],
 assertEquals(13, f.getNumerator()); ref {f} [920-920],
 assertEquals(24, f.getDenominator()); ref {f} [921-921],
 assertSame(f2, f); ref {f, f2} [926-926],
 assertSame(f2, f); ref {f, f2} [928-928],
 assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominator()); ref {f} [933-933],
 assertEquals(-17 - 2 * 13 * 2, f.getNumerator()); ref {f} [934-934],
 assertEquals(52451, f.getNumerator()); ref {f} [946-946],
 assertEquals(1934917632, f.getDenominator()); ref {f} [947-947],
 assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); ref {Integer, f, Integer.MIN_VALUE} [952-952],
 assertEquals(3, f.getDenominator()); ref {f} [953-953],
 assertEquals(Integer.MAX_VALUE, f.getNumerator()); ref {Integer, f, Integer.MAX_VALUE} [958-958],
 assertEquals(1, f.getDenominator()); ref {f} [959-959]
[m[m31.08.2022 - 15:15:23.070 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testSubtract has 21 assertions: 
 assertEquals(2, f.getNumerator()); ref {f} [1003-1003],
 assertEquals(5, f.getDenominator()); ref {f} [1004-1004],
 assertEquals(1, f.getNumerator()); ref {f} [1009-1009],
 assertEquals(1, f.getDenominator()); ref {f} [1010-1010],
 assertEquals(0, f.getNumerator()); ref {f} [1015-1015],
 assertEquals(1, f.getDenominator()); ref {f} [1016-1016],
 assertEquals(7, f.getNumerator()); ref {f} [1021-1021],
 assertEquals(5, f.getDenominator()); ref {f} [1022-1022],
 assertEquals(-4, f.getNumerator()); ref {f} [1027-1027],
 assertEquals(5, f.getDenominator()); ref {f} [1028-1028],
 assertEquals(4, f.getNumerator()); ref {f} [1033-1033],
 assertEquals(5, f.getDenominator()); ref {f} [1034-1034],
 assertEquals(1, f.getNumerator()); ref {f} [1039-1039],
 assertEquals(10, f.getDenominator()); ref {f} [1040-1040],
 assertSame(f2, f); ref {f, f2} [1045-1045],
 assertEquals(-13085, f.getNumerator()); ref {f} [1057-1057],
 assertEquals(1934917632, f.getDenominator()); ref {f} [1058-1058],
 assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); ref {Integer, f, Integer.MIN_VALUE} [1063-1063],
 assertEquals(3, f.getDenominator()); ref {f} [1064-1064],
 assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); ref {Integer, f, Integer.MAX_VALUE} [1069-1069],
 assertEquals(1, f.getDenominator()); ref {f} [1070-1070]
[m[m31.08.2022 - 15:15:23.070 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testMultiply has 15 assertions: 
 assertEquals(6, f.getNumerator()); ref {f} [1116-1116],
 assertEquals(25, f.getDenominator()); ref {f} [1117-1117],
 assertEquals(9, f.getNumerator()); ref {f} [1122-1122],
 assertEquals(25, f.getDenominator()); ref {f} [1123-1123],
 assertEquals(27, f.getNumerator()); ref {f} [1125-1125],
 assertEquals(125, f.getDenominator()); ref {f} [1126-1126],
 assertEquals(-6, f.getNumerator()); ref {f} [1131-1131],
 assertEquals(25, f.getDenominator()); ref {f} [1132-1132],
 assertEquals(6, f.getNumerator()); ref {f} [1137-1137],
 assertEquals(25, f.getDenominator()); ref {f} [1138-1138],
 assertSame(Fraction.ZERO, f); ref {Fraction.ZERO, f, Fraction} [1144-1144],
 assertEquals(2, f.getNumerator()); ref {f} [1149-1149],
 assertEquals(7, f.getDenominator()); ref {f} [1150-1150],
 assertEquals(Integer.MIN_VALUE, f.getNumerator()); ref {Integer, f, Integer.MIN_VALUE} [1155-1155],
 assertEquals(1, f.getDenominator()); ref {f} [1156-1156]
[m[m31.08.2022 - 15:15:23.070 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testDivide has 9 assertions: 
 assertEquals(3, f.getNumerator()); ref {f} [1185-1185],
 assertEquals(2, f.getDenominator()); ref {f} [1186-1186],
 assertSame(Fraction.ZERO, f); ref {Fraction.ZERO, f, Fraction} [1198-1198],
 assertEquals(2, f.getNumerator()); ref {f} [1203-1203],
 assertEquals(7, f.getDenominator()); ref {f} [1204-1204],
 assertEquals(1, f.getNumerator()); ref {f} [1208-1208],
 assertEquals(1, f.getDenominator()); ref {f} [1209-1209],
 assertEquals(Integer.MIN_VALUE, f.getNumerator()); ref {Integer, f, Integer.MIN_VALUE} [1214-1214],
 assertEquals(1, f.getDenominator()); ref {f} [1215-1215]
[m[m31.08.2022 - 15:15:23.070 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testEquals has 8 assertions: 
 assertFalse(f1.equals(null)); ref {f1} [1240-1240],
 assertFalse(f1.equals(new Object())); ref {f1} [1241-1241],
 assertFalse(f1.equals(Integer.valueOf(6))); ref {Integer, f1} [1242-1242],
 assertFalse(f1.equals(f2)); ref {f1, f2} [1246-1246],
 assertTrue(f1.equals(f1)); ref {f1} [1247-1247],
 assertTrue(f2.equals(f2)); ref {f2} [1248-1248],
 assertTrue(f1.equals(f2)); ref {f1, f2} [1251-1251],
 assertFalse(f1.equals(f2)); ref {f1, f2} [1254-1254]
[m[m31.08.2022 - 15:15:23.071 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testHashCode has 3 assertions: 
 assertTrue(f1.hashCode() == f2.hashCode()); ref {f1, f2} [1262-1262],
 assertTrue(f1.hashCode() != f2.hashCode()); ref {f1, f2} [1265-1265],
 assertTrue(f1.hashCode() != f2.hashCode()); ref {f1, f2} [1268-1268]
[m[m31.08.2022 - 15:15:23.071 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testCompareTo has 11 assertions: 
 assertTrue(f1.compareTo(f1) == 0); ref {f1} [1277-1277],
 assertTrue(f1.compareTo(f2) > 0); ref {f1, f2} [1285-1285],
 assertTrue(f2.compareTo(f2) == 0); ref {f2} [1286-1286],
 assertTrue(f1.compareTo(f2) < 0); ref {f1, f2} [1289-1289],
 assertTrue(f2.compareTo(f2) == 0); ref {f2} [1290-1290],
 assertTrue(f1.compareTo(f2) == 0); ref {f1, f2} [1293-1293],
 assertTrue(f2.compareTo(f2) == 0); ref {f2} [1294-1294],
 assertTrue(f1.compareTo(f2) == 0); ref {f1, f2} [1297-1297],
 assertTrue(f2.compareTo(f2) == 0); ref {f2} [1298-1298],
 assertTrue(f1.compareTo(f2) > 0); ref {f1, f2} [1301-1301],
 assertTrue(f2.compareTo(f2) == 0); ref {f2} [1302-1302]
[m[m31.08.2022 - 15:15:23.071 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testToString has 8 assertions: 
 assertEquals("3/5", str); ref {str} [1312-1312],
 assertSame(str, f.toString()); ref {str, f} [1313-1313],
 assertEquals("7/5", f.toString()); ref {f} [1316-1316],
 assertEquals("4/2", f.toString()); ref {f} [1319-1319],
 assertEquals("0/2", f.toString()); ref {f} [1322-1322],
 assertEquals("2/2", f.toString()); ref {f} [1325-1325],
 assertEquals("-2147483648/1", f.toString()); ref {f} [1328-1328],
 assertEquals("-2147483648/2147483647", f.toString()); ref {f} [1331-1331]
[m[m31.08.2022 - 15:15:23.071 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.FractionTest::testToProperString has 11 assertions: 
 assertEquals("3/5", str); ref {str} [1340-1340],
 assertSame(str, f.toProperString()); ref {str, f} [1341-1341],
 assertEquals("1 2/5", f.toProperString()); ref {f} [1344-1344],
 assertEquals("1 4/10", f.toProperString()); ref {f} [1347-1347],
 assertEquals("2", f.toProperString()); ref {f} [1350-1350],
 assertEquals("0", f.toProperString()); ref {f} [1353-1353],
 assertEquals("1", f.toProperString()); ref {f} [1356-1356],
 assertEquals("-1 2/5", f.toProperString()); ref {f} [1359-1359],
 assertEquals("-2147483648", f.toProperString()); ref {f} [1362-1362],
 assertEquals("-1 1/2147483647", f.toProperString()); ref {f} [1365-1365],
 assertEquals("-1", Fraction.getFraction(-1).toProperString()); ref {Fraction} [1367-1367]
[m[m31.08.2022 - 15:15:23.076 [INFO ] ParsingStrategy.parseTestSuite() - Found 28 test cases
[m[m31.08.2022 - 15:15:23.076 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new ExceptionUtils()); ref {} [108-108],
 assertEquals(1, cons.length); ref {cons.length, cons} [110-110],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [111-111],
 assertTrue(Modifier.isPublic(ExceptionUtils.class.getModifiers())); ref {Modifier} [112-112],
 assertFalse(Modifier.isFinal(ExceptionUtils.class.getModifiers())); ref {Modifier} [113-113]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetCause_Throwable has 8 assertions: 
 assertSame(null, ExceptionUtils.getCause(null)); ref {ExceptionUtils} [120-120],
 assertSame(null, ExceptionUtils.getCause(withoutCause)); ref {withoutCause, ExceptionUtils} [121-121],
 assertSame(withoutCause, ExceptionUtils.getCause(nested)); ref {withoutCause, ExceptionUtils, nested} [122-122],
 assertSame(nested, ExceptionUtils.getCause(withCause)); ref {withCause, ExceptionUtils, nested} [123-123],
 assertSame(null, ExceptionUtils.getCause(jdkNoCause)); ref {jdkNoCause, ExceptionUtils} [124-124],
 assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause)); ref {cyclicCause, ExceptionUtils} [125-125],
 assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause())); ref {cyclicCause, ExceptionUtils} [126-126],
 assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause())); ref {cyclicCause, ExceptionUtils} [127-127]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetCause_ThrowableArray has 11 assertions: 
 assertSame(null, ExceptionUtils.getCause(null, null)); ref {ExceptionUtils} [133-133],
 assertSame(null, ExceptionUtils.getCause(null, new String[0])); ref {ExceptionUtils} [134-134],
 // not known type, so match on supplied method names
// default names
assertSame(nested, ExceptionUtils.getCause(withCause, null)); ref {withCause, ExceptionUtils, nested} [137-137],
 assertSame(null, ExceptionUtils.getCause(withCause, new String[0])); ref {withCause, ExceptionUtils} [138-138],
 assertSame(null, ExceptionUtils.getCause(withCause, new String[] { null })); ref {withCause, ExceptionUtils} [139-139],
 assertSame(nested, ExceptionUtils.getCause(withCause, new String[] { "getCause" })); ref {withCause, ExceptionUtils, nested} [140-140],
 // not known type, so match on supplied method names
assertSame(null, ExceptionUtils.getCause(withoutCause, null)); ref {withoutCause, ExceptionUtils} [143-143],
 assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0])); ref {withoutCause, ExceptionUtils} [144-144],
 assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { null })); ref {withoutCause, ExceptionUtils} [145-145],
 assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getCause" })); ref {withoutCause, ExceptionUtils} [146-146],
 assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getTargetException" })); ref {withoutCause, ExceptionUtils} [147-147]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetRootCause_Throwable has 6 assertions: 
 assertSame(null, ExceptionUtils.getRootCause(null)); ref {ExceptionUtils} [152-152],
 assertSame(null, ExceptionUtils.getRootCause(withoutCause)); ref {withoutCause, ExceptionUtils} [153-153],
 assertSame(withoutCause, ExceptionUtils.getRootCause(nested)); ref {withoutCause, ExceptionUtils, nested} [154-154],
 assertSame(withoutCause, ExceptionUtils.getRootCause(withCause)); ref {withoutCause, withCause, ExceptionUtils} [155-155],
 assertSame(null, ExceptionUtils.getRootCause(jdkNoCause)); ref {jdkNoCause, ExceptionUtils} [156-156],
 assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getRootCause(cyclicCause)); ref {cyclicCause, ExceptionUtils} [157-157]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowableCount_Throwable has 6 assertions: 
 assertEquals(0, ExceptionUtils.getThrowableCount(null)); ref {ExceptionUtils} [163-163],
 assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause)); ref {withoutCause, ExceptionUtils} [164-164],
 assertEquals(2, ExceptionUtils.getThrowableCount(nested)); ref {ExceptionUtils, nested} [165-165],
 assertEquals(3, ExceptionUtils.getThrowableCount(withCause)); ref {withCause, ExceptionUtils} [166-166],
 assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause)); ref {jdkNoCause, ExceptionUtils} [167-167],
 assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause)); ref {ExceptionUtils, cyclicCause} [168-168]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowables_Throwable_null has 1 assertions: 
 assertEquals(0, ExceptionUtils.getThrowables(null).length); ref {ExceptionUtils.getThrowables(null).length, ExceptionUtils} [174-174]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowables_Throwable_withoutCause has 2 assertions: 
 assertEquals(1, throwables.length); ref {throwables, throwables.length} [180-180],
 assertSame(withoutCause, throwables[0]); ref {withoutCause, throwables} [181-181]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowables_Throwable_nested has 3 assertions: 
 assertEquals(2, throwables.length); ref {throwables, throwables.length} [187-187],
 assertSame(nested, throwables[0]); ref {throwables, nested} [188-188],
 assertSame(withoutCause, throwables[1]); ref {withoutCause, throwables} [189-189]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowables_Throwable_withCause has 4 assertions: 
 assertEquals(3, throwables.length); ref {throwables, throwables.length} [195-195],
 assertSame(withCause, throwables[0]); ref {withCause, throwables} [196-196],
 assertSame(nested, throwables[1]); ref {throwables, nested} [197-197],
 assertSame(withoutCause, throwables[2]); ref {withoutCause, throwables} [198-198]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowables_Throwable_jdkNoCause has 2 assertions: 
 assertEquals(1, throwables.length); ref {throwables, throwables.length} [204-204],
 assertSame(jdkNoCause, throwables[0]); ref {throwables, jdkNoCause} [205-205]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowables_Throwable_recursiveCause has 4 assertions: 
 assertEquals(3, throwables.length); ref {throwables, throwables.length} [211-211],
 assertSame(cyclicCause, throwables[0]); ref {throwables, cyclicCause} [212-212],
 assertSame(cyclicCause.getCause(), throwables[1]); ref {throwables, cyclicCause} [213-213],
 assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables[2]); ref {throwables, cyclicCause} [214-214]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowableList_Throwable_null has 1 assertions: 
 assertEquals(0, throwables.size()); ref {throwables} [221-221]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowableList_Throwable_withoutCause has 2 assertions: 
 assertEquals(1, throwables.size()); ref {throwables} [227-227],
 assertSame(withoutCause, throwables.get(0)); ref {withoutCause, throwables} [228-228]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowableList_Throwable_nested has 3 assertions: 
 assertEquals(2, throwables.size()); ref {throwables} [234-234],
 assertSame(nested, throwables.get(0)); ref {throwables, nested} [235-235],
 assertSame(withoutCause, throwables.get(1)); ref {withoutCause, throwables} [236-236]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowableList_Throwable_withCause has 4 assertions: 
 assertEquals(3, throwables.size()); ref {throwables} [242-242],
 assertSame(withCause, throwables.get(0)); ref {withCause, throwables} [243-243],
 assertSame(nested, throwables.get(1)); ref {throwables, nested} [244-244],
 assertSame(withoutCause, throwables.get(2)); ref {withoutCause, throwables} [245-245]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowableList_Throwable_jdkNoCause has 2 assertions: 
 assertEquals(1, throwables.size()); ref {throwables} [251-251],
 assertSame(jdkNoCause, throwables.get(0)); ref {throwables, jdkNoCause} [252-252]
[m[m31.08.2022 - 15:15:23.077 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetThrowableList_Throwable_recursiveCause has 4 assertions: 
 assertEquals(3, throwables.size()); ref {throwables} [258-258],
 assertSame(cyclicCause, throwables.get(0)); ref {throwables, cyclicCause} [259-259],
 assertSame(cyclicCause.getCause(), throwables.get(1)); ref {throwables, cyclicCause} [260-260],
 assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2)); ref {throwables, cyclicCause} [261-261]
[m[m31.08.2022 - 15:15:23.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testIndexOf_ThrowableClass has 15 assertions: 
 assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null)); ref {ExceptionUtils} [267-267],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class)); ref {ExceptionUtils} [268-268],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); ref {withoutCause, ExceptionUtils} [270-270],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class)); ref {withoutCause, ExceptionUtils} [271-271],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class)); ref {withoutCause, ExceptionUtils} [272-272],
 assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class)); ref {withoutCause, ExceptionUtils} [273-273],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null)); ref {ExceptionUtils, nested} [275-275],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class)); ref {ExceptionUtils, nested} [276-276],
 assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class)); ref {ExceptionUtils, nested} [277-277],
 assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class)); ref {ExceptionUtils, nested} [278-278],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); ref {withCause, ExceptionUtils} [280-280],
 assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class)); ref {withCause, ExceptionUtils} [281-281],
 assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class)); ref {withCause, ExceptionUtils} [282-282],
 assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class)); ref {withCause, ExceptionUtils} [283-283],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class)); ref {withCause, ExceptionUtils} [285-285]
[m[m31.08.2022 - 15:15:23.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testIndexOf_ThrowableClassInt has 19 assertions: 
 assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); ref {ExceptionUtils} [290-290],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); ref {ExceptionUtils} [291-291],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); ref {withoutCause, ExceptionUtils} [293-293],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); ref {withoutCause, ExceptionUtils} [294-294],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); ref {withoutCause, ExceptionUtils} [295-295],
 assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); ref {withoutCause, ExceptionUtils} [296-296],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); ref {ExceptionUtils, nested} [298-298],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); ref {ExceptionUtils, nested} [299-299],
 assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); ref {ExceptionUtils, nested} [300-300],
 assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); ref {ExceptionUtils, nested} [301-301],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); ref {withCause, ExceptionUtils} [303-303],
 assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); ref {withCause, ExceptionUtils} [304-304],
 assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); ref {withCause, ExceptionUtils} [305-305],
 assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); ref {withCause, ExceptionUtils} [306-306],
 assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); ref {withCause, ExceptionUtils} [308-308],
 assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); ref {withCause, ExceptionUtils} [309-309],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); ref {withCause, ExceptionUtils} [310-310],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); ref {withCause, ExceptionUtils} [311-311],
 assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); ref {withCause, ExceptionUtils} [313-313]
[m[m31.08.2022 - 15:15:23.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testIndexOfType_ThrowableClass has 15 assertions: 
 assertEquals(-1, ExceptionUtils.indexOfType(null, null)); ref {ExceptionUtils} [319-319],
 assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class)); ref {ExceptionUtils} [320-320],
 assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); ref {withoutCause, ExceptionUtils} [322-322],
 assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class)); ref {withoutCause, ExceptionUtils} [323-323],
 assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class)); ref {withoutCause, ExceptionUtils} [324-324],
 assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class)); ref {withoutCause, ExceptionUtils} [325-325],
 assertEquals(-1, ExceptionUtils.indexOfType(nested, null)); ref {ExceptionUtils, nested} [327-327],
 assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class)); ref {ExceptionUtils, nested} [328-328],
 assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class)); ref {ExceptionUtils, nested} [329-329],
 assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class)); ref {ExceptionUtils, nested} [330-330],
 assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); ref {withCause, ExceptionUtils} [332-332],
 assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class)); ref {withCause, ExceptionUtils} [333-333],
 assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class)); ref {withCause, ExceptionUtils} [334-334],
 assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class)); ref {withCause, ExceptionUtils} [335-335],
 assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class)); ref {withCause, ExceptionUtils} [337-337]
[m[m31.08.2022 - 15:15:23.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testIndexOfType_ThrowableClassInt has 19 assertions: 
 assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); ref {ExceptionUtils} [342-342],
 assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); ref {ExceptionUtils} [343-343],
 assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); ref {withoutCause, ExceptionUtils} [345-345],
 assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); ref {withoutCause, ExceptionUtils} [346-346],
 assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); ref {withoutCause, ExceptionUtils} [347-347],
 assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); ref {withoutCause, ExceptionUtils} [348-348],
 assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); ref {ExceptionUtils, nested} [350-350],
 assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); ref {ExceptionUtils, nested} [351-351],
 assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); ref {ExceptionUtils, nested} [352-352],
 assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); ref {ExceptionUtils, nested} [353-353],
 assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); ref {withCause, ExceptionUtils} [355-355],
 assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); ref {withCause, ExceptionUtils} [356-356],
 assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); ref {withCause, ExceptionUtils} [357-357],
 assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); ref {withCause, ExceptionUtils} [358-358],
 assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); ref {withCause, ExceptionUtils} [360-360],
 assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); ref {withCause, ExceptionUtils} [361-361],
 assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); ref {withCause, ExceptionUtils} [362-362],
 assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); ref {withCause, ExceptionUtils} [363-363],
 assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); ref {withCause, ExceptionUtils} [365-365]
[m[m31.08.2022 - 15:15:23.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testPrintRootCauseStackTrace_Throwable has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testPrintRootCauseStackTrace_ThrowableStream has 3 assertions: 
 assertEquals(0, out.toString().length()); ref {out} [381-381],
 assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); ref {ExceptionUtils.WRAPPED_MARKER, ExceptionUtils, stackTrace} [394-394],
 assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); ref {ExceptionUtils.WRAPPED_MARKER, ExceptionUtils, stackTrace} [399-399]
[m[m31.08.2022 - 15:15:23.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testPrintRootCauseStackTrace_ThrowableWriter has 3 assertions: 
 assertEquals(0, writer.getBuffer().length()); ref {writer} [407-407],
 assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); ref {ExceptionUtils.WRAPPED_MARKER, ExceptionUtils, stackTrace} [420-420],
 assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); ref {ExceptionUtils.WRAPPED_MARKER, ExceptionUtils, stackTrace} [425-425]
[m[m31.08.2022 - 15:15:23.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testGetRootCauseStackTrace_Throwable has 3 assertions: 
 assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); ref {ExceptionUtils.getRootCauseStackTrace(null).length, ExceptionUtils} [431-431],
 assertTrue(match); ref {match} [442-442],
 assertFalse(match); ref {match} [452-452]
[m[m31.08.2022 - 15:15:23.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::testRemoveCommonFrames_ListList has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::test_getMessage_Throwable has 3 assertions: 
 assertEquals("", ExceptionUtils.getMessage(th)); ref {th, ExceptionUtils} [463-463],
 assertEquals("IllegalArgumentException: Base", ExceptionUtils.getMessage(th)); ref {th, ExceptionUtils} [466-466],
 assertEquals("ExceptionUtilsTest.ExceptionWithCause: Wrapper", ExceptionUtils.getMessage(th)); ref {th, ExceptionUtils} [469-469]
[m[m31.08.2022 - 15:15:23.078 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ExceptionUtilsTest::test_getRootCauseMessage_Throwable has 3 assertions: 
 assertEquals("", ExceptionUtils.getRootCauseMessage(th)); ref {th, ExceptionUtils} [475-475],
 assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); ref {th, ExceptionUtils} [478-478],
 assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); ref {th, ExceptionUtils} [481-481]
[m[m31.08.2022 - 15:15:23.079 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.079 [INFO ] ParsingStrategy.parseTestSuite() - Found 4 test cases
[m[m31.08.2022 - 15:15:23.079 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest::testInitNullCallable has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.079 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest::testInitExecutor has 1 assertions: 
 assertEquals("Executor not set", exec, init.getExternalExecutor()); ref {init, exec} [55-55]
[m[m31.08.2022 - 15:15:23.079 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest::testInitExecutorNullCallable has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.079 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest::testInitialize has 2 assertions: 
 assertEquals("Wrong result", RESULT, init.initialize()); ref {init, RESULT} [86-86],
 assertEquals("Wrong number of invocations", 1, call.callCount); ref {call, call.callCount} [87-87]
[m[m31.08.2022 - 15:15:23.098 [INFO ] ParsingStrategy.parseTestSuite() - Found 91 test cases
[m[m31.08.2022 - 15:15:23.098 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new NumberUtils()); ref {} [42-42],
 assertEquals(1, cons.length); ref {cons.length, cons} [44-44],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [45-45],
 assertTrue(Modifier.isPublic(NumberUtils.class.getModifiers())); ref {Modifier} [46-46],
 assertFalse(Modifier.isFinal(NumberUtils.class.getModifiers())); ref {Modifier} [47-47]
[m[m31.08.2022 - 15:15:23.098 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testToIntString has 4 assertions: 
 assertTrue("toInt(String) 1 failed", NumberUtils.toInt("12345") == 12345); ref {NumberUtils} [57-57],
 assertTrue("toInt(String) 2 failed", NumberUtils.toInt("abc") == 0); ref {NumberUtils} [58-58],
 assertTrue("toInt(empty) failed", NumberUtils.toInt("") == 0); ref {NumberUtils} [59-59],
 assertTrue("toInt(null) failed", NumberUtils.toInt(null) == 0); ref {NumberUtils} [60-60]
[m[m31.08.2022 - 15:15:23.098 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testToIntStringI has 2 assertions: 
 assertTrue("toInt(String,int) 1 failed", NumberUtils.toInt("12345", 5) == 12345); ref {NumberUtils} [68-68],
 assertTrue("toInt(String,int) 2 failed", NumberUtils.toInt("1234.5", 5) == 5); ref {NumberUtils} [69-69]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testToLongString has 8 assertions: 
 assertTrue("toLong(String) 1 failed", NumberUtils.toLong("12345") == 12345l); ref {NumberUtils} [77-77],
 assertTrue("toLong(String) 2 failed", NumberUtils.toLong("abc") == 0l); ref {NumberUtils} [78-78],
 assertTrue("toLong(String) 3 failed", NumberUtils.toLong("1L") == 0l); ref {NumberUtils} [79-79],
 assertTrue("toLong(String) 4 failed", NumberUtils.toLong("1l") == 0l); ref {NumberUtils} [80-80],
 assertTrue("toLong(Long.MAX_VALUE) failed", NumberUtils.toLong(Long.MAX_VALUE + "") == Long.MAX_VALUE); ref {Long.MAX_VALUE, Long, NumberUtils} [81-81],
 assertTrue("toLong(Long.MIN_VALUE) failed", NumberUtils.toLong(Long.MIN_VALUE + "") == Long.MIN_VALUE); ref {Long, Long.MIN_VALUE, NumberUtils} [82-82],
 assertTrue("toLong(empty) failed", NumberUtils.toLong("") == 0l); ref {NumberUtils} [83-83],
 assertTrue("toLong(null) failed", NumberUtils.toLong(null) == 0l); ref {NumberUtils} [84-84]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testToLongStringL has 2 assertions: 
 assertTrue("toLong(String,long) 1 failed", NumberUtils.toLong("12345", 5l) == 12345l); ref {NumberUtils} [92-92],
 assertTrue("toLong(String,long) 2 failed", NumberUtils.toLong("1234.5", 5l) == 5l); ref {NumberUtils} [93-93]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testToFloatString has 7 assertions: 
 assertTrue("toFloat(String) 1 failed", NumberUtils.toFloat("-1.2345") == -1.2345f); ref {NumberUtils} [101-101],
 assertTrue("toFloat(String) 2 failed", NumberUtils.toFloat("1.2345") == 1.2345f); ref {NumberUtils} [102-102],
 assertTrue("toFloat(String) 3 failed", NumberUtils.toFloat("abc") == 0.0f); ref {NumberUtils} [103-103],
 assertTrue("toFloat(Float.MAX_VALUE) failed", NumberUtils.toFloat(Float.MAX_VALUE + "") == Float.MAX_VALUE); ref {Float, Float.MAX_VALUE, NumberUtils} [104-104],
 assertTrue("toFloat(Float.MIN_VALUE) failed", NumberUtils.toFloat(Float.MIN_VALUE + "") == Float.MIN_VALUE); ref {Float, Float.MIN_VALUE, NumberUtils} [105-105],
 assertTrue("toFloat(empty) failed", NumberUtils.toFloat("") == 0.0f); ref {NumberUtils} [106-106],
 assertTrue("toFloat(null) failed", NumberUtils.toFloat(null) == 0.0f); ref {NumberUtils} [107-107]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testToFloatStringF has 2 assertions: 
 assertTrue("toFloat(String,int) 1 failed", NumberUtils.toFloat("1.2345", 5.1f) == 1.2345f); ref {NumberUtils} [115-115],
 assertTrue("toFloat(String,int) 2 failed", NumberUtils.toFloat("a", 5.0f) == 5.0f); ref {NumberUtils} [116-116]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testStringCreateNumberEnsureNoPrecisionLoss has 3 assertions: 
 assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float); ref {shouldBeFloat, NumberUtils} [128-128],
 assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double); ref {shouldBeDouble, NumberUtils} [129-129],
 assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal); ref {shouldBeBigDecimal, NumberUtils} [130-130]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testStringToDoubleString has 7 assertions: 
 assertTrue("toDouble(String) 1 failed", NumberUtils.toDouble("-1.2345") == -1.2345d); ref {NumberUtils} [137-137],
 assertTrue("toDouble(String) 2 failed", NumberUtils.toDouble("1.2345") == 1.2345d); ref {NumberUtils} [138-138],
 assertTrue("toDouble(String) 3 failed", NumberUtils.toDouble("abc") == 0.0d); ref {NumberUtils} [139-139],
 assertTrue("toDouble(Double.MAX_VALUE) failed", NumberUtils.toDouble(Double.MAX_VALUE + "") == Double.MAX_VALUE); ref {Double.MAX_VALUE, Double, NumberUtils} [140-140],
 assertTrue("toDouble(Double.MIN_VALUE) failed", NumberUtils.toDouble(Double.MIN_VALUE + "") == Double.MIN_VALUE); ref {Double.MIN_VALUE, Double, NumberUtils} [141-141],
 assertTrue("toDouble(empty) failed", NumberUtils.toDouble("") == 0.0d); ref {NumberUtils} [142-142],
 assertTrue("toDouble(null) failed", NumberUtils.toDouble(null) == 0.0d); ref {NumberUtils} [143-143]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testStringToDoubleStringD has 2 assertions: 
 assertTrue("toDouble(String,int) 1 failed", NumberUtils.toDouble("1.2345", 5.1d) == 1.2345d); ref {NumberUtils} [151-151],
 assertTrue("toDouble(String,int) 2 failed", NumberUtils.toDouble("a", 5.0d) == 5.0d); ref {NumberUtils} [152-152]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testToByteString has 4 assertions: 
 assertTrue("toByte(String) 1 failed", NumberUtils.toByte("123") == 123); ref {NumberUtils} [160-160],
 assertTrue("toByte(String) 2 failed", NumberUtils.toByte("abc") == 0); ref {NumberUtils} [161-161],
 assertTrue("toByte(empty) failed", NumberUtils.toByte("") == 0); ref {NumberUtils} [162-162],
 assertTrue("toByte(null) failed", NumberUtils.toByte(null) == 0); ref {NumberUtils} [163-163]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testToByteStringI has 2 assertions: 
 assertTrue("toByte(String,byte) 1 failed", NumberUtils.toByte("123", (byte) 5) == 123); ref {NumberUtils} [171-171],
 assertTrue("toByte(String,byte) 2 failed", NumberUtils.toByte("12.3", (byte) 5) == 5); ref {NumberUtils} [172-172]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testToShortString has 4 assertions: 
 assertTrue("toShort(String) 1 failed", NumberUtils.toShort("12345") == 12345); ref {NumberUtils} [180-180],
 assertTrue("toShort(String) 2 failed", NumberUtils.toShort("abc") == 0); ref {NumberUtils} [181-181],
 assertTrue("toShort(empty) failed", NumberUtils.toShort("") == 0); ref {NumberUtils} [182-182],
 assertTrue("toShort(null) failed", NumberUtils.toShort(null) == 0); ref {NumberUtils} [183-183]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testToShortStringI has 2 assertions: 
 assertTrue("toShort(String,short) 1 failed", NumberUtils.toShort("12345", (short) 5) == 12345); ref {NumberUtils} [191-191],
 assertTrue("toShort(String,short) 2 failed", NumberUtils.toShort("1234.5", (short) 5) == 5); ref {NumberUtils} [192-192]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber has 30 assertions: 
 // a lot of things can go wrong
assertEquals("createNumber(String) 1 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5")); ref {Float, NumberUtils} [198-198],
 assertEquals("createNumber(String) 2 failed", Integer.valueOf("12345"), NumberUtils.createNumber("12345")); ref {Integer, NumberUtils} [199-199],
 assertEquals("createNumber(String) 3 failed", Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5D")); ref {Double, NumberUtils} [200-200],
 assertEquals("createNumber(String) 3 failed", Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5d")); ref {Double, NumberUtils} [201-201],
 assertEquals("createNumber(String) 4 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5F")); ref {Float, NumberUtils} [202-202],
 assertEquals("createNumber(String) 4 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5f")); ref {Float, NumberUtils} [203-203],
 assertEquals("createNumber(String) 5 failed", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber("" + (Integer.MAX_VALUE + 1L))); ref {Integer, Long, Integer.MAX_VALUE, NumberUtils} [204-205],
 assertEquals("createNumber(String) 6 failed", Long.valueOf(12345), NumberUtils.createNumber("12345L")); ref {Long, NumberUtils} [206-206],
 assertEquals("createNumber(String) 6 failed", Long.valueOf(12345), NumberUtils.createNumber("12345l")); ref {Long, NumberUtils} [207-207],
 assertEquals("createNumber(String) 7 failed", Float.valueOf("-1234.5"), NumberUtils.createNumber("-1234.5")); ref {Float, NumberUtils} [208-208],
 assertEquals("createNumber(String) 8 failed", Integer.valueOf("-12345"), NumberUtils.createNumber("-12345")); ref {Integer, NumberUtils} [209-209],
 assertTrue("createNumber(String) 9a failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue()); ref {NumberUtils} [210-210],
 assertTrue("createNumber(String) 9b failed", 0xFADE == NumberUtils.createNumber("0Xfade").intValue()); ref {NumberUtils} [211-211],
 assertTrue("createNumber(String) 10a failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue()); ref {NumberUtils} [212-212],
 assertTrue("createNumber(String) 10b failed", -0xFADE == NumberUtils.createNumber("-0Xfade").intValue()); ref {NumberUtils} [213-213],
 assertEquals("createNumber(String) 11 failed", Double.valueOf("1.1E200"), NumberUtils.createNumber("1.1E200")); ref {Double, NumberUtils} [214-214],
 assertEquals("createNumber(String) 12 failed", Float.valueOf("1.1E20"), NumberUtils.createNumber("1.1E20")); ref {Float, NumberUtils} [215-215],
 assertEquals("createNumber(String) 13 failed", Double.valueOf("-1.1E200"), NumberUtils.createNumber("-1.1E200")); ref {Double, NumberUtils} [216-216],
 assertEquals("createNumber(String) 14 failed", Double.valueOf("1.1E-200"), NumberUtils.createNumber("1.1E-200")); ref {Double, NumberUtils} [217-217],
 assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null)); ref {NumberUtils} [218-218],
 assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils.createNumber("12345678901234567890L")); ref {NumberUtils} [219-220],
 assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils.createNumber("1.1E-700F")); ref {NumberUtils} [222-223],
 assertEquals("createNumber(String) 16 failed", Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE + "L")); ref {Integer, Long, Integer.MAX_VALUE, NumberUtils} [225-226],
 assertEquals("createNumber(String) 17 failed", Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE)); ref {Integer, Long, Integer.MAX_VALUE, NumberUtils} [227-228],
 assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils.createNumber("10" + Long.MAX_VALUE)); ref {Long.MAX_VALUE, Long, NumberUtils} [229-230],
 // LANG-521
assertEquals("createNumber(String) LANG-521 failed", Float.valueOf("2."), NumberUtils.createNumber("2.")); ref {Float, NumberUtils} [233-233],
 // LANG-638
assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE")); ref {} [236-236],
 // LANG-693
assertEquals("createNumber(String) LANG-693 failed", Double.valueOf(Double.MAX_VALUE), NumberUtils.createNumber("" + Double.MAX_VALUE)); ref {Double.MAX_VALUE, Double, NumberUtils} [239-240],
 assertNotNull(bigNum); ref {bigNum} [245-245],
 assertEquals(BigDecimal.class, bigNum.getClass()); ref {bigNum} [246-246]
[m[m31.08.2022 - 15:15:23.099 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testLang1087 has 6 assertions: 
 // no sign cases
assertEquals(Float.class, NumberUtils.createNumber("0.0").getClass()); ref {NumberUtils} [252-252],
 assertEquals(Float.valueOf("0.0"), NumberUtils.createNumber("0.0")); ref {Float, NumberUtils} [253-253],
 // explicit positive sign cases
assertEquals(Float.class, NumberUtils.createNumber("+0.0").getClass()); ref {NumberUtils} [255-255],
 assertEquals(Float.valueOf("+0.0"), NumberUtils.createNumber("+0.0")); ref {Float, NumberUtils} [256-256],
 // negative sign cases
assertEquals(Float.class, NumberUtils.createNumber("-0.0").getClass()); ref {NumberUtils} [258-258],
 assertEquals(Float.valueOf("-0.0"), NumberUtils.createNumber("-0.0")); ref {Float, NumberUtils} [259-259]
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::TestLang747 has 26 assertions: 
 assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); ref {Integer, NumberUtils} [264-264],
 assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); ref {Integer, NumberUtils} [265-265],
 assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); ref {Integer, NumberUtils} [266-266],
 assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); ref {Integer, NumberUtils} [267-267],
 assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); ref {Integer, NumberUtils} [268-268],
 assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); ref {Long, NumberUtils} [269-269],
 assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); ref {Long, NumberUtils} [270-270],
 // Leading zero tests
assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); ref {Integer, NumberUtils} [273-273],
 assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); ref {Integer, NumberUtils} [274-274],
 assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); ref {Long, NumberUtils} [275-275],
 assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); ref {Long, NumberUtils} [276-276],
 assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); ref {Long, NumberUtils} [278-278],
 assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); ref {Long, NumberUtils} [279-279],
 assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); ref {Long, NumberUtils} [280-280],
 assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); ref {Long, NumberUtils} [281-281],
 assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); ref {Long, NumberUtils} [282-282],
 assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); ref {Long, NumberUtils} [283-283],
 assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); ref {Long, NumberUtils} [284-284],
 assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); ref {Long, NumberUtils} [285-285],
 // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long
assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); ref {NumberUtils} [287-287],
 assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); ref {NumberUtils} [288-288],
 // Leading zero tests
assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); ref {Long, NumberUtils} [291-291],
 assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); ref {Long, NumberUtils} [292-292],
 assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); ref {Long, NumberUtils} [293-293],
 // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long
assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); ref {NumberUtils} [295-295],
 assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); ref {NumberUtils} [296-296]
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFailure_1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFailure_2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFailure_3 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFailure_4 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberMagnitude has 14 assertions: 
 // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type
assertEquals(Float.valueOf(Float.MAX_VALUE), NumberUtils.createNumber("3.4028235e+38")); ref {Float, Float.MAX_VALUE, NumberUtils} [328-328],
 assertEquals(Double.valueOf(3.4028236e+38), NumberUtils.createNumber("3.4028236e+38")); ref {Double, NumberUtils} [329-329],
 // Test Double.MAX_VALUE
assertEquals(Double.valueOf(Double.MAX_VALUE), NumberUtils.createNumber("1.7976931348623157e+308")); ref {Double.MAX_VALUE, Double, NumberUtils} [332-332],
 // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal)
assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); ref {NumberUtils} [334-334],
 assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); ref {Integer, NumberUtils} [336-336],
 assertEquals(Long.valueOf(0x123456789L), NumberUtils.createNumber("0x123456789")); ref {Long, NumberUtils} [337-337],
 assertEquals(Long.valueOf(0x7fffffffffffffffL), NumberUtils.createNumber("0x7fffffffffffffff")); ref {Long, NumberUtils} [339-339],
 // Does not appear to be a way to create a literal BigInteger of this magnitude
assertEquals(new BigInteger("7fffffffffffffff0", 16), NumberUtils.createNumber("0x7fffffffffffffff0")); ref {NumberUtils} [341-341],
 assertEquals(Long.valueOf(0x7fffffffffffffffL), NumberUtils.createNumber("#7fffffffffffffff")); ref {Long, NumberUtils} [343-343],
 assertEquals(new BigInteger("7fffffffffffffff0", 16), NumberUtils.createNumber("#7fffffffffffffff0")); ref {NumberUtils} [344-344],
 // 31 bits
assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); ref {Integer, NumberUtils} [346-346],
 // 32 bits
assertEquals(Long.valueOf(037777777777L), NumberUtils.createNumber("037777777777")); ref {Long, NumberUtils} [347-347],
 // 63 bits
assertEquals(Long.valueOf(0777777777777777777777L), NumberUtils.createNumber("0777777777777777777777")); ref {Long, NumberUtils} [349-349],
 // 64 bits
assertEquals(new BigInteger("1777777777777777777777", 8), NumberUtils.createNumber("01777777777777777777777")); ref {NumberUtils} [350-350]
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCreateFloat has 2 assertions: 
 assertEquals("createFloat(String) failed", Float.valueOf("1234.5"), NumberUtils.createFloat("1234.5")); ref {Float, NumberUtils} [355-355],
 assertEquals("createFloat(null) failed", null, NumberUtils.createFloat(null)); ref {NumberUtils} [356-356]
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCreateDouble has 2 assertions: 
 assertEquals("createDouble(String) failed", Double.valueOf("1234.5"), NumberUtils.createDouble("1234.5")); ref {Double, NumberUtils} [375-375],
 assertEquals("createDouble(null) failed", null, NumberUtils.createDouble(null)); ref {NumberUtils} [376-376]
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCreateInteger has 2 assertions: 
 assertEquals("createInteger(String) failed", Integer.valueOf("12345"), NumberUtils.createInteger("12345")); ref {Integer, NumberUtils} [395-395],
 assertEquals("createInteger(null) failed", null, NumberUtils.createInteger(null)); ref {NumberUtils} [396-396]
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCreateLong has 2 assertions: 
 assertEquals("createLong(String) failed", Long.valueOf("12345"), NumberUtils.createLong("12345")); ref {Long, NumberUtils} [415-415],
 assertEquals("createLong(null) failed", null, NumberUtils.createLong(null)); ref {NumberUtils} [416-416]
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCreateBigInteger has 11 assertions: 
 assertEquals("createBigInteger(String) failed", new BigInteger("12345"), NumberUtils.createBigInteger("12345")); ref {NumberUtils} [435-435],
 assertEquals("createBigInteger(null) failed", null, NumberUtils.createBigInteger(null)); ref {NumberUtils} [436-436],
 assertEquals("createBigInteger(String) failed", new BigInteger("255"), NumberUtils.createBigInteger("0xff")); ref {NumberUtils} [442-442],
 assertEquals("createBigInteger(String) failed", new BigInteger("255"), NumberUtils.createBigInteger("0Xff")); ref {NumberUtils} [443-443],
 assertEquals("createBigInteger(String) failed", new BigInteger("255"), NumberUtils.createBigInteger("#ff")); ref {NumberUtils} [444-444],
 assertEquals("createBigInteger(String) failed", new BigInteger("-255"), NumberUtils.createBigInteger("-0xff")); ref {NumberUtils} [445-445],
 assertEquals("createBigInteger(String) failed", new BigInteger("255"), NumberUtils.createBigInteger("0377")); ref {NumberUtils} [446-446],
 assertEquals("createBigInteger(String) failed", new BigInteger("-255"), NumberUtils.createBigInteger("-0377")); ref {NumberUtils} [447-447],
 assertEquals("createBigInteger(String) failed", new BigInteger("-255"), NumberUtils.createBigInteger("-0377")); ref {NumberUtils} [448-448],
 assertEquals("createBigInteger(String) failed", new BigInteger("-0"), NumberUtils.createBigInteger("-0")); ref {NumberUtils} [449-449],
 assertEquals("createBigInteger(String) failed", new BigInteger("0"), NumberUtils.createBigInteger("0")); ref {NumberUtils} [450-450]
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCreateBigDecimal has 2 assertions: 
 assertEquals("createBigDecimal(String) failed", new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5")); ref {NumberUtils} [468-468],
 assertEquals("createBigDecimal(null) failed", null, NumberUtils.createBigDecimal(null)); ref {NumberUtils} [469-469]
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinLong_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinLong_emptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinLong has 4 assertions: 
 assertEquals("min(long[]) failed for array length 1", 5, NumberUtils.min(new long[] { 5 })); ref {NumberUtils} [506-509],
 assertEquals("min(long[]) failed for array length 2", 6, NumberUtils.min(new long[] { 6, 9 })); ref {NumberUtils} [511-514],
 assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 })); ref {NumberUtils} [516-516],
 assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 })); ref {NumberUtils} [517-517]
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinInt_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinInt_emptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinInt has 4 assertions: 
 assertEquals("min(int[]) failed for array length 1", 5, NumberUtils.min(new int[] { 5 })); ref {NumberUtils} [532-535],
 assertEquals("min(int[]) failed for array length 2", 6, NumberUtils.min(new int[] { 6, 9 })); ref {NumberUtils} [537-540],
 assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 })); ref {NumberUtils} [542-542],
 assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 })); ref {NumberUtils} [543-543]
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinShort_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.100 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinShort_emptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinShort has 4 assertions: 
 assertEquals("min(short[]) failed for array length 1", 5, NumberUtils.min(new short[] { 5 })); ref {NumberUtils} [558-561],
 assertEquals("min(short[]) failed for array length 2", 6, NumberUtils.min(new short[] { 6, 9 })); ref {NumberUtils} [563-566],
 assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 })); ref {NumberUtils} [568-568],
 assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 })); ref {NumberUtils} [569-569]
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinByte_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinByte_emptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinByte has 4 assertions: 
 assertEquals("min(byte[]) failed for array length 1", 5, NumberUtils.min(new byte[] { 5 })); ref {NumberUtils} [584-587],
 assertEquals("min(byte[]) failed for array length 2", 6, NumberUtils.min(new byte[] { 6, 9 })); ref {NumberUtils} [589-592],
 assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 })); ref {NumberUtils} [594-594],
 assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 })); ref {NumberUtils} [595-595]
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinDouble_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinDouble_emptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinDouble has 5 assertions: 
 assertEquals("min(double[]) failed for array length 1", 5.12, NumberUtils.min(new double[] { 5.12 }), 0); ref {NumberUtils} [610-614],
 assertEquals("min(double[]) failed for array length 2", 6.23, NumberUtils.min(new double[] { 6.23, 9.34 }), 0); ref {NumberUtils} [616-620],
 assertEquals("min(double[]) failed for array length 5", -10.45, NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }), 0); ref {NumberUtils} [622-626],
 assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001); ref {NumberUtils} [627-627],
 assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001); ref {NumberUtils} [628-628]
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinFloat_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinFloat_emptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinFloat has 5 assertions: 
 assertEquals("min(float[]) failed for array length 1", 5.9f, NumberUtils.min(new float[] { 5.9f }), 0); ref {NumberUtils} [643-647],
 assertEquals("min(float[]) failed for array length 2", 6.8f, NumberUtils.min(new float[] { 6.8f, 9.7f }), 0); ref {NumberUtils} [649-653],
 assertEquals("min(float[]) failed for array length 5", -10.6f, NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }), 0); ref {NumberUtils} [655-659],
 assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); ref {NumberUtils} [660-660],
 assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f); ref {NumberUtils} [661-661]
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxLong_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxLong_emptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxLong has 5 assertions: 
 assertEquals("max(long[]) failed for array length 1", 5, NumberUtils.max(new long[] { 5 })); ref {NumberUtils} [676-679],
 assertEquals("max(long[]) failed for array length 2", 9, NumberUtils.max(new long[] { 6, 9 })); ref {NumberUtils} [681-684],
 assertEquals("max(long[]) failed for array length 5", 10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); ref {NumberUtils} [686-689],
 assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); ref {NumberUtils} [690-690],
 assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 })); ref {NumberUtils} [691-691]
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxInt_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxInt_emptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxInt has 5 assertions: 
 assertEquals("max(int[]) failed for array length 1", 5, NumberUtils.max(new int[] { 5 })); ref {NumberUtils} [706-709],
 assertEquals("max(int[]) failed for array length 2", 9, NumberUtils.max(new int[] { 6, 9 })); ref {NumberUtils} [711-714],
 assertEquals("max(int[]) failed for array length 5", 10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); ref {NumberUtils} [716-719],
 assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); ref {NumberUtils} [720-720],
 assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 })); ref {NumberUtils} [721-721]
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxShort_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxShort_emptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxShort has 5 assertions: 
 assertEquals("max(short[]) failed for array length 1", 5, NumberUtils.max(new short[] { 5 })); ref {NumberUtils} [736-739],
 assertEquals("max(short[]) failed for array length 2", 9, NumberUtils.max(new short[] { 6, 9 })); ref {NumberUtils} [741-744],
 assertEquals("max(short[]) failed for array length 5", 10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); ref {NumberUtils} [746-749],
 assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); ref {NumberUtils} [750-750],
 assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 })); ref {NumberUtils} [751-751]
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxByte_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxByte_emptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.101 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxByte has 5 assertions: 
 assertEquals("max(byte[]) failed for array length 1", 5, NumberUtils.max(new byte[] { 5 })); ref {NumberUtils} [766-769],
 assertEquals("max(byte[]) failed for array length 2", 9, NumberUtils.max(new byte[] { 6, 9 })); ref {NumberUtils} [771-774],
 assertEquals("max(byte[]) failed for array length 5", 10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); ref {NumberUtils} [776-779],
 assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); ref {NumberUtils} [780-780],
 assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 })); ref {NumberUtils} [781-781]
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxDouble_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxDouble_emptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxDouble has 5 assertions: 
 assertEquals("max(double[]) failed for array length 1", 5.1f, NumberUtils.max(new double[] { 5.1f }), 0); ref {NumberUtils} [807-811],
 assertEquals("max(double[]) failed for array length 2", 9.2f, NumberUtils.max(new double[] { 6.3f, 9.2f }), 0); ref {NumberUtils} [813-817],
 assertEquals("max(double[]) failed for float length 5", 10.4f, NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); ref {NumberUtils} [819-823],
 assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001); ref {NumberUtils} [824-824],
 assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001); ref {NumberUtils} [825-825]
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxFloat_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxFloat_emptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaxFloat has 5 assertions: 
 assertEquals("max(float[]) failed for array length 1", 5.1f, NumberUtils.max(new float[] { 5.1f }), 0); ref {NumberUtils} [840-844],
 assertEquals("max(float[]) failed for array length 2", 9.2f, NumberUtils.max(new float[] { 6.3f, 9.2f }), 0); ref {NumberUtils} [846-850],
 assertEquals("max(float[]) failed for float length 5", 10.4f, NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); ref {NumberUtils} [852-856],
 assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); ref {NumberUtils} [857-857],
 assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f); ref {NumberUtils} [858-858]
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinimumLong has 5 assertions: 
 assertEquals("minimum(long,long,long) 1 failed", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L)); ref {NumberUtils} [863-863],
 assertEquals("minimum(long,long,long) 2 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L)); ref {NumberUtils} [864-864],
 assertEquals("minimum(long,long,long) 3 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L)); ref {NumberUtils} [865-865],
 assertEquals("minimum(long,long,long) 4 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L)); ref {NumberUtils} [866-866],
 assertEquals("minimum(long,long,long) 5 failed", 12345L, NumberUtils.min(12345L, 12345L, 12345L)); ref {NumberUtils} [867-867]
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinimumInt has 5 assertions: 
 assertEquals("minimum(int,int,int) 1 failed", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2)); ref {NumberUtils} [872-872],
 assertEquals("minimum(int,int,int) 2 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2)); ref {NumberUtils} [873-873],
 assertEquals("minimum(int,int,int) 3 failed", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345)); ref {NumberUtils} [874-874],
 assertEquals("minimum(int,int,int) 4 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345)); ref {NumberUtils} [875-875],
 assertEquals("minimum(int,int,int) 5 failed", 12345, NumberUtils.min(12345, 12345, 12345)); ref {NumberUtils} [876-876]
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinimumShort has 4 assertions: 
 assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(low, mid, high)); ref {high, low, mid, NumberUtils} [884-884],
 assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(mid, low, high)); ref {high, low, mid, NumberUtils} [885-885],
 assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(mid, high, low)); ref {high, low, mid, NumberUtils} [886-886],
 assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(low, mid, low)); ref {low, mid, NumberUtils} [887-887]
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinimumByte has 4 assertions: 
 assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, high)); ref {high, low, mid, NumberUtils} [895-895],
 assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, low, high)); ref {high, low, mid, NumberUtils} [896-896],
 assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, high, low)); ref {high, low, mid, NumberUtils} [897-897],
 assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, low)); ref {low, mid, NumberUtils} [898-898]
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinimumDouble has 5 assertions: 
 assertEquals(low, NumberUtils.min(low, mid, high), 0.0001); ref {high, low, mid, NumberUtils} [906-906],
 assertEquals(low, NumberUtils.min(mid, low, high), 0.0001); ref {high, low, mid, NumberUtils} [907-907],
 assertEquals(low, NumberUtils.min(mid, high, low), 0.0001); ref {high, low, mid, NumberUtils} [908-908],
 assertEquals(low, NumberUtils.min(low, mid, low), 0.0001); ref {low, mid, NumberUtils} [909-909],
 assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001); ref {high, mid, NumberUtils} [910-910]
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMinimumFloat has 5 assertions: 
 assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f); ref {high, low, mid, NumberUtils} [918-918],
 assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f); ref {high, low, mid, NumberUtils} [919-919],
 assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f); ref {high, low, mid, NumberUtils} [920-920],
 assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f); ref {low, mid, NumberUtils} [921-921],
 assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f); ref {high, mid, NumberUtils} [922-922]
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaximumLong has 5 assertions: 
 assertEquals("maximum(long,long,long) 1 failed", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L)); ref {NumberUtils} [927-927],
 assertEquals("maximum(long,long,long) 2 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L)); ref {NumberUtils} [928-928],
 assertEquals("maximum(long,long,long) 3 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L)); ref {NumberUtils} [929-929],
 assertEquals("maximum(long,long,long) 4 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L)); ref {NumberUtils} [930-930],
 assertEquals("maximum(long,long,long) 5 failed", 12345L, NumberUtils.max(12345L, 12345L, 12345L)); ref {NumberUtils} [931-931]
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaximumInt has 5 assertions: 
 assertEquals("maximum(int,int,int) 1 failed", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2)); ref {NumberUtils} [936-936],
 assertEquals("maximum(int,int,int) 2 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2)); ref {NumberUtils} [937-937],
 assertEquals("maximum(int,int,int) 3 failed", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345)); ref {NumberUtils} [938-938],
 assertEquals("maximum(int,int,int) 4 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345)); ref {NumberUtils} [939-939],
 assertEquals("maximum(int,int,int) 5 failed", 12345, NumberUtils.max(12345, 12345, 12345)); ref {NumberUtils} [940-940]
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaximumShort has 4 assertions: 
 assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(low, mid, high)); ref {high, low, mid, NumberUtils} [948-948],
 assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, low, high)); ref {high, low, mid, NumberUtils} [949-949],
 assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, high, low)); ref {high, low, mid, NumberUtils} [950-950],
 assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(high, mid, high)); ref {high, mid, NumberUtils} [951-951]
[m[m31.08.2022 - 15:15:23.102 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaximumByte has 4 assertions: 
 assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(low, mid, high)); ref {high, low, mid, NumberUtils} [959-959],
 assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(mid, low, high)); ref {high, low, mid, NumberUtils} [960-960],
 assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(mid, high, low)); ref {high, low, mid, NumberUtils} [961-961],
 assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(high, mid, high)); ref {high, mid, NumberUtils} [962-962]
[m[m31.08.2022 - 15:15:23.103 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaximumDouble has 5 assertions: 
 assertEquals(high, NumberUtils.max(low, mid, high), 0.0001); ref {high, low, mid, NumberUtils} [970-970],
 assertEquals(high, NumberUtils.max(mid, low, high), 0.0001); ref {high, low, mid, NumberUtils} [971-971],
 assertEquals(high, NumberUtils.max(mid, high, low), 0.0001); ref {high, low, mid, NumberUtils} [972-972],
 assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001); ref {low, mid, NumberUtils} [973-973],
 assertEquals(high, NumberUtils.max(high, mid, high), 0.0001); ref {high, mid, NumberUtils} [974-974]
[m[m31.08.2022 - 15:15:23.103 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testMaximumFloat has 5 assertions: 
 assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f); ref {high, low, mid, NumberUtils} [982-982],
 assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f); ref {high, low, mid, NumberUtils} [983-983],
 assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f); ref {high, low, mid, NumberUtils} [984-984],
 assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f); ref {low, mid, NumberUtils} [985-985],
 assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f); ref {high, mid, NumberUtils} [986-986]
[m[m31.08.2022 - 15:15:23.103 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCompareDouble has 81 assertions: 
 assertTrue(Double.compare(Double.NaN, Double.NaN) == 0); ref {Double.NaN, Double} [992-992],
 assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1); ref {Double.NaN, Double.POSITIVE_INFINITY, Double} [993-993],
 assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1); ref {Double.NaN, Double.MAX_VALUE, Double} [994-994],
 assertTrue(Double.compare(Double.NaN, 1.2d) == +1); ref {Double.NaN, Double} [995-995],
 assertTrue(Double.compare(Double.NaN, 0.0d) == +1); ref {Double.NaN, Double} [996-996],
 assertTrue(Double.compare(Double.NaN, -0.0d) == +1); ref {Double.NaN, Double} [997-997],
 assertTrue(Double.compare(Double.NaN, -1.2d) == +1); ref {Double.NaN, Double} [998-998],
 assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1); ref {Double.NaN, Double.MAX_VALUE, Double} [999-999],
 assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1); ref {Double.NaN, Double.NEGATIVE_INFINITY, Double} [1000-1000],
 assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1); ref {Double.NaN, Double.POSITIVE_INFINITY, Double} [1002-1002],
 assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0); ref {Double.POSITIVE_INFINITY, Double} [1003-1003],
 assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1); ref {Double.POSITIVE_INFINITY, Double.MAX_VALUE, Double} [1004-1004],
 assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1); ref {Double.POSITIVE_INFINITY, Double} [1005-1005],
 assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1); ref {Double.POSITIVE_INFINITY, Double} [1006-1006],
 assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1); ref {Double.POSITIVE_INFINITY, Double} [1007-1007],
 assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1); ref {Double.POSITIVE_INFINITY, Double} [1008-1008],
 assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1); ref {Double.POSITIVE_INFINITY, Double.MAX_VALUE, Double} [1009-1009],
 assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1); ref {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double} [1010-1010],
 assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1); ref {Double.NaN, Double.MAX_VALUE, Double} [1012-1012],
 assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1); ref {Double.MAX_VALUE, Double.POSITIVE_INFINITY, Double} [1013-1013],
 assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0); ref {Double.MAX_VALUE, Double} [1014-1014],
 assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1); ref {Double.MAX_VALUE, Double} [1015-1015],
 assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1); ref {Double.MAX_VALUE, Double} [1016-1016],
 assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1); ref {Double.MAX_VALUE, Double} [1017-1017],
 assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1); ref {Double.MAX_VALUE, Double} [1018-1018],
 assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1); ref {Double.MAX_VALUE, Double} [1019-1019],
 assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1); ref {Double.NEGATIVE_INFINITY, Double.MAX_VALUE, Double} [1020-1020],
 assertTrue(Double.compare(1.2d, Double.NaN) == -1); ref {Double.NaN, Double} [1022-1022],
 assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1); ref {Double.POSITIVE_INFINITY, Double} [1023-1023],
 assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1); ref {Double.MAX_VALUE, Double} [1024-1024],
 assertTrue(Double.compare(1.2d, 1.2d) == 0); ref {Double} [1025-1025],
 assertTrue(Double.compare(1.2d, 0.0d) == +1); ref {Double} [1026-1026],
 assertTrue(Double.compare(1.2d, -0.0d) == +1); ref {Double} [1027-1027],
 assertTrue(Double.compare(1.2d, -1.2d) == +1); ref {Double} [1028-1028],
 assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1); ref {Double.MAX_VALUE, Double} [1029-1029],
 assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1); ref {Double.NEGATIVE_INFINITY, Double} [1030-1030],
 assertTrue(Double.compare(0.0d, Double.NaN) == -1); ref {Double.NaN, Double} [1032-1032],
 assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1); ref {Double.POSITIVE_INFINITY, Double} [1033-1033],
 assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1); ref {Double.MAX_VALUE, Double} [1034-1034],
 assertTrue(Double.compare(0.0d, 1.2d) == -1); ref {Double} [1035-1035],
 assertTrue(Double.compare(0.0d, 0.0d) == 0); ref {Double} [1036-1036],
 assertTrue(Double.compare(0.0d, -0.0d) == +1); ref {Double} [1037-1037],
 assertTrue(Double.compare(0.0d, -1.2d) == +1); ref {Double} [1038-1038],
 assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1); ref {Double.MAX_VALUE, Double} [1039-1039],
 assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1); ref {Double.NEGATIVE_INFINITY, Double} [1040-1040],
 assertTrue(Double.compare(-0.0d, Double.NaN) == -1); ref {Double.NaN, Double} [1042-1042],
 assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1); ref {Double.POSITIVE_INFINITY, Double} [1043-1043],
 assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1); ref {Double.MAX_VALUE, Double} [1044-1044],
 assertTrue(Double.compare(-0.0d, 1.2d) == -1); ref {Double} [1045-1045],
 assertTrue(Double.compare(-0.0d, 0.0d) == -1); ref {Double} [1046-1046],
 assertTrue(Double.compare(-0.0d, -0.0d) == 0); ref {Double} [1047-1047],
 assertTrue(Double.compare(-0.0d, -1.2d) == +1); ref {Double} [1048-1048],
 assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1); ref {Double.MAX_VALUE, Double} [1049-1049],
 assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1); ref {Double.NEGATIVE_INFINITY, Double} [1050-1050],
 assertTrue(Double.compare(-1.2d, Double.NaN) == -1); ref {Double.NaN, Double} [1052-1052],
 assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1); ref {Double.POSITIVE_INFINITY, Double} [1053-1053],
 assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1); ref {Double.MAX_VALUE, Double} [1054-1054],
 assertTrue(Double.compare(-1.2d, 1.2d) == -1); ref {Double} [1055-1055],
 assertTrue(Double.compare(-1.2d, 0.0d) == -1); ref {Double} [1056-1056],
 assertTrue(Double.compare(-1.2d, -0.0d) == -1); ref {Double} [1057-1057],
 assertTrue(Double.compare(-1.2d, -1.2d) == 0); ref {Double} [1058-1058],
 assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1); ref {Double.MAX_VALUE, Double} [1059-1059],
 assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1); ref {Double.NEGATIVE_INFINITY, Double} [1060-1060],
 assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1); ref {Double.NaN, Double.MAX_VALUE, Double} [1062-1062],
 assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1); ref {Double.MAX_VALUE, Double.POSITIVE_INFINITY, Double} [1063-1063],
 assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1); ref {Double.MAX_VALUE, Double} [1064-1064],
 assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1); ref {Double.MAX_VALUE, Double} [1065-1065],
 assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1); ref {Double.MAX_VALUE, Double} [1066-1066],
 assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1); ref {Double.MAX_VALUE, Double} [1067-1067],
 assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1); ref {Double.MAX_VALUE, Double} [1068-1068],
 assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0); ref {Double.MAX_VALUE, Double} [1069-1069],
 assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1); ref {Double.NEGATIVE_INFINITY, Double.MAX_VALUE, Double} [1070-1070],
 assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1); ref {Double.NaN, Double.NEGATIVE_INFINITY, Double} [1072-1072],
 assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1); ref {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double} [1073-1073],
 assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1); ref {Double.NEGATIVE_INFINITY, Double.MAX_VALUE, Double} [1074-1074],
 assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1); ref {Double.NEGATIVE_INFINITY, Double} [1075-1075],
 assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1); ref {Double.NEGATIVE_INFINITY, Double} [1076-1076],
 assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1); ref {Double.NEGATIVE_INFINITY, Double} [1077-1077],
 assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1); ref {Double.NEGATIVE_INFINITY, Double} [1078-1078],
 assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1); ref {Double.NEGATIVE_INFINITY, Double.MAX_VALUE, Double} [1079-1079],
 assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0); ref {Double.NEGATIVE_INFINITY, Double} [1080-1080]
[m[m31.08.2022 - 15:15:23.103 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testCompareFloat has 81 assertions: 
 assertTrue(Float.compare(Float.NaN, Float.NaN) == 0); ref {Float, Float.NaN} [1085-1085],
 assertTrue(Float.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1); ref {Float, Float.POSITIVE_INFINITY, Float.NaN} [1086-1086],
 assertTrue(Float.compare(Float.NaN, Float.MAX_VALUE) == +1); ref {Float, Float.MAX_VALUE, Float.NaN} [1087-1087],
 assertTrue(Float.compare(Float.NaN, 1.2f) == +1); ref {Float, Float.NaN} [1088-1088],
 assertTrue(Float.compare(Float.NaN, 0.0f) == +1); ref {Float, Float.NaN} [1089-1089],
 assertTrue(Float.compare(Float.NaN, -0.0f) == +1); ref {Float, Float.NaN} [1090-1090],
 assertTrue(Float.compare(Float.NaN, -1.2f) == +1); ref {Float, Float.NaN} [1091-1091],
 assertTrue(Float.compare(Float.NaN, -Float.MAX_VALUE) == +1); ref {Float, Float.MAX_VALUE, Float.NaN} [1092-1092],
 assertTrue(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1); ref {Float, Float.NEGATIVE_INFINITY, Float.NaN} [1093-1093],
 assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1); ref {Float, Float.POSITIVE_INFINITY, Float.NaN} [1095-1095],
 assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0); ref {Float, Float.POSITIVE_INFINITY} [1096-1096],
 assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1); ref {Float, Float.POSITIVE_INFINITY, Float.MAX_VALUE} [1097-1097],
 assertTrue(Float.compare(Float.POSITIVE_INFINITY, 1.2f) == +1); ref {Float, Float.POSITIVE_INFINITY} [1098-1098],
 assertTrue(Float.compare(Float.POSITIVE_INFINITY, 0.0f) == +1); ref {Float, Float.POSITIVE_INFINITY} [1099-1099],
 assertTrue(Float.compare(Float.POSITIVE_INFINITY, -0.0f) == +1); ref {Float, Float.POSITIVE_INFINITY} [1100-1100],
 assertTrue(Float.compare(Float.POSITIVE_INFINITY, -1.2f) == +1); ref {Float, Float.POSITIVE_INFINITY} [1101-1101],
 assertTrue(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1); ref {Float, Float.POSITIVE_INFINITY, Float.MAX_VALUE} [1102-1102],
 assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1); ref {Float, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY} [1103-1103],
 assertTrue(Float.compare(Float.MAX_VALUE, Float.NaN) == -1); ref {Float, Float.MAX_VALUE, Float.NaN} [1105-1105],
 assertTrue(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1); ref {Float, Float.MAX_VALUE, Float.POSITIVE_INFINITY} [1106-1106],
 assertTrue(Float.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0); ref {Float, Float.MAX_VALUE} [1107-1107],
 assertTrue(Float.compare(Float.MAX_VALUE, 1.2f) == +1); ref {Float, Float.MAX_VALUE} [1108-1108],
 assertTrue(Float.compare(Float.MAX_VALUE, 0.0f) == +1); ref {Float, Float.MAX_VALUE} [1109-1109],
 assertTrue(Float.compare(Float.MAX_VALUE, -0.0f) == +1); ref {Float, Float.MAX_VALUE} [1110-1110],
 assertTrue(Float.compare(Float.MAX_VALUE, -1.2f) == +1); ref {Float, Float.MAX_VALUE} [1111-1111],
 assertTrue(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1); ref {Float, Float.MAX_VALUE} [1112-1112],
 assertTrue(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1); ref {Float, Float.MAX_VALUE, Float.NEGATIVE_INFINITY} [1113-1113],
 assertTrue(Float.compare(1.2f, Float.NaN) == -1); ref {Float, Float.NaN} [1115-1115],
 assertTrue(Float.compare(1.2f, Float.POSITIVE_INFINITY) == -1); ref {Float, Float.POSITIVE_INFINITY} [1116-1116],
 assertTrue(Float.compare(1.2f, Float.MAX_VALUE) == -1); ref {Float, Float.MAX_VALUE} [1117-1117],
 assertTrue(Float.compare(1.2f, 1.2f) == 0); ref {Float} [1118-1118],
 assertTrue(Float.compare(1.2f, 0.0f) == +1); ref {Float} [1119-1119],
 assertTrue(Float.compare(1.2f, -0.0f) == +1); ref {Float} [1120-1120],
 assertTrue(Float.compare(1.2f, -1.2f) == +1); ref {Float} [1121-1121],
 assertTrue(Float.compare(1.2f, -Float.MAX_VALUE) == +1); ref {Float, Float.MAX_VALUE} [1122-1122],
 assertTrue(Float.compare(1.2f, Float.NEGATIVE_INFINITY) == +1); ref {Float, Float.NEGATIVE_INFINITY} [1123-1123],
 assertTrue(Float.compare(0.0f, Float.NaN) == -1); ref {Float, Float.NaN} [1125-1125],
 assertTrue(Float.compare(0.0f, Float.POSITIVE_INFINITY) == -1); ref {Float, Float.POSITIVE_INFINITY} [1126-1126],
 assertTrue(Float.compare(0.0f, Float.MAX_VALUE) == -1); ref {Float, Float.MAX_VALUE} [1127-1127],
 assertTrue(Float.compare(0.0f, 1.2f) == -1); ref {Float} [1128-1128],
 assertTrue(Float.compare(0.0f, 0.0f) == 0); ref {Float} [1129-1129],
 assertTrue(Float.compare(0.0f, -0.0f) == +1); ref {Float} [1130-1130],
 assertTrue(Float.compare(0.0f, -1.2f) == +1); ref {Float} [1131-1131],
 assertTrue(Float.compare(0.0f, -Float.MAX_VALUE) == +1); ref {Float, Float.MAX_VALUE} [1132-1132],
 assertTrue(Float.compare(0.0f, Float.NEGATIVE_INFINITY) == +1); ref {Float, Float.NEGATIVE_INFINITY} [1133-1133],
 assertTrue(Float.compare(-0.0f, Float.NaN) == -1); ref {Float, Float.NaN} [1135-1135],
 assertTrue(Float.compare(-0.0f, Float.POSITIVE_INFINITY) == -1); ref {Float, Float.POSITIVE_INFINITY} [1136-1136],
 assertTrue(Float.compare(-0.0f, Float.MAX_VALUE) == -1); ref {Float, Float.MAX_VALUE} [1137-1137],
 assertTrue(Float.compare(-0.0f, 1.2f) == -1); ref {Float} [1138-1138],
 assertTrue(Float.compare(-0.0f, 0.0f) == -1); ref {Float} [1139-1139],
 assertTrue(Float.compare(-0.0f, -0.0f) == 0); ref {Float} [1140-1140],
 assertTrue(Float.compare(-0.0f, -1.2f) == +1); ref {Float} [1141-1141],
 assertTrue(Float.compare(-0.0f, -Float.MAX_VALUE) == +1); ref {Float, Float.MAX_VALUE} [1142-1142],
 assertTrue(Float.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1); ref {Float, Float.NEGATIVE_INFINITY} [1143-1143],
 assertTrue(Float.compare(-1.2f, Float.NaN) == -1); ref {Float, Float.NaN} [1145-1145],
 assertTrue(Float.compare(-1.2f, Float.POSITIVE_INFINITY) == -1); ref {Float, Float.POSITIVE_INFINITY} [1146-1146],
 assertTrue(Float.compare(-1.2f, Float.MAX_VALUE) == -1); ref {Float, Float.MAX_VALUE} [1147-1147],
 assertTrue(Float.compare(-1.2f, 1.2f) == -1); ref {Float} [1148-1148],
 assertTrue(Float.compare(-1.2f, 0.0f) == -1); ref {Float} [1149-1149],
 assertTrue(Float.compare(-1.2f, -0.0f) == -1); ref {Float} [1150-1150],
 assertTrue(Float.compare(-1.2f, -1.2f) == 0); ref {Float} [1151-1151],
 assertTrue(Float.compare(-1.2f, -Float.MAX_VALUE) == +1); ref {Float, Float.MAX_VALUE} [1152-1152],
 assertTrue(Float.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1); ref {Float, Float.NEGATIVE_INFINITY} [1153-1153],
 assertTrue(Float.compare(-Float.MAX_VALUE, Float.NaN) == -1); ref {Float, Float.MAX_VALUE, Float.NaN} [1155-1155],
 assertTrue(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1); ref {Float, Float.MAX_VALUE, Float.POSITIVE_INFINITY} [1156-1156],
 assertTrue(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1); ref {Float, Float.MAX_VALUE} [1157-1157],
 assertTrue(Float.compare(-Float.MAX_VALUE, 1.2f) == -1); ref {Float, Float.MAX_VALUE} [1158-1158],
 assertTrue(Float.compare(-Float.MAX_VALUE, 0.0f) == -1); ref {Float, Float.MAX_VALUE} [1159-1159],
 assertTrue(Float.compare(-Float.MAX_VALUE, -0.0f) == -1); ref {Float, Float.MAX_VALUE} [1160-1160],
 assertTrue(Float.compare(-Float.MAX_VALUE, -1.2f) == -1); ref {Float, Float.MAX_VALUE} [1161-1161],
 assertTrue(Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0); ref {Float, Float.MAX_VALUE} [1162-1162],
 assertTrue(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1); ref {Float, Float.MAX_VALUE, Float.NEGATIVE_INFINITY} [1163-1163],
 assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1); ref {Float, Float.NEGATIVE_INFINITY, Float.NaN} [1165-1165],
 assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1); ref {Float, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY} [1166-1166],
 assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1); ref {Float, Float.MAX_VALUE, Float.NEGATIVE_INFINITY} [1167-1167],
 assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1); ref {Float, Float.NEGATIVE_INFINITY} [1168-1168],
 assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1); ref {Float, Float.NEGATIVE_INFINITY} [1169-1169],
 assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1); ref {Float, Float.NEGATIVE_INFINITY} [1170-1170],
 assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1); ref {Float, Float.NEGATIVE_INFINITY} [1171-1171],
 assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1); ref {Float, Float.MAX_VALUE, Float.NEGATIVE_INFINITY} [1172-1172],
 assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0); ref {Float, Float.NEGATIVE_INFINITY} [1173-1173]
[m[m31.08.2022 - 15:15:23.103 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testIsDigits has 6 assertions: 
 assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); ref {NumberUtils} [1178-1178],
 assertFalse("isDigits('') failed", NumberUtils.isDigits("")); ref {NumberUtils} [1179-1179],
 assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); ref {NumberUtils} [1180-1180],
 assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); ref {NumberUtils} [1181-1181],
 assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); ref {NumberUtils} [1182-1182],
 assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); ref {NumberUtils} [1183-1183]
[m[m31.08.2022 - 15:15:23.104 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testIsNumber has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.104 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testLANG971 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.104 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testLANG992 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.104 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testLANG972 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.104 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testIsParsable has 17 assertions: 
 assertFalse(NumberUtils.isParsable(null)); ref {NumberUtils} [1276-1276],
 assertFalse(NumberUtils.isParsable("")); ref {NumberUtils} [1277-1277],
 assertFalse(NumberUtils.isParsable("0xC1AB")); ref {NumberUtils} [1278-1278],
 assertFalse(NumberUtils.isParsable("65CBA2")); ref {NumberUtils} [1279-1279],
 assertFalse(NumberUtils.isParsable("pendro")); ref {NumberUtils} [1280-1280],
 assertFalse(NumberUtils.isParsable("64,2")); ref {NumberUtils} [1281-1281],
 assertFalse(NumberUtils.isParsable("64.2.2")); ref {NumberUtils} [1282-1282],
 assertFalse(NumberUtils.isParsable("64.")); ref {NumberUtils} [1283-1283],
 assertFalse(NumberUtils.isParsable("64L")); ref {NumberUtils} [1284-1284],
 assertTrue(NumberUtils.isParsable("64.2")); ref {NumberUtils} [1285-1285],
 assertTrue(NumberUtils.isParsable("64")); ref {NumberUtils} [1286-1286],
 assertTrue(NumberUtils.isParsable("018")); ref {NumberUtils} [1287-1287],
 assertTrue(NumberUtils.isParsable(".18")); ref {NumberUtils} [1288-1288],
 assertTrue(NumberUtils.isParsable("-65")); ref {NumberUtils} [1289-1289],
 assertTrue(NumberUtils.isParsable("-018")); ref {NumberUtils} [1290-1290],
 assertTrue(NumberUtils.isParsable("-018.2")); ref {NumberUtils} [1291-1291],
 assertTrue(NumberUtils.isParsable("-.236")); ref {NumberUtils} [1292-1292]
[m[m31.08.2022 - 15:15:23.104 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testConstants has 36 assertions: 
 assertTrue(NumberUtils.LONG_ZERO instanceof Long); ref {NumberUtils.LONG_ZERO, NumberUtils} [1310-1310],
 assertTrue(NumberUtils.LONG_ONE instanceof Long); ref {NumberUtils.LONG_ONE, NumberUtils} [1311-1311],
 assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long); ref {NumberUtils.LONG_MINUS_ONE, NumberUtils} [1312-1312],
 assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer); ref {NumberUtils.INTEGER_ZERO, NumberUtils} [1313-1313],
 assertTrue(NumberUtils.INTEGER_ONE instanceof Integer); ref {NumberUtils.INTEGER_ONE, NumberUtils} [1314-1314],
 assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer); ref {NumberUtils.INTEGER_MINUS_ONE, NumberUtils} [1315-1315],
 assertTrue(NumberUtils.SHORT_ZERO instanceof Short); ref {NumberUtils.SHORT_ZERO, NumberUtils} [1316-1316],
 assertTrue(NumberUtils.SHORT_ONE instanceof Short); ref {NumberUtils.SHORT_ONE, NumberUtils} [1317-1317],
 assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short); ref {NumberUtils.SHORT_MINUS_ONE, NumberUtils} [1318-1318],
 assertTrue(NumberUtils.BYTE_ZERO instanceof Byte); ref {NumberUtils.BYTE_ZERO, NumberUtils} [1319-1319],
 assertTrue(NumberUtils.BYTE_ONE instanceof Byte); ref {NumberUtils.BYTE_ONE, NumberUtils} [1320-1320],
 assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte); ref {NumberUtils.BYTE_MINUS_ONE, NumberUtils} [1321-1321],
 assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double); ref {NumberUtils.DOUBLE_ZERO, NumberUtils} [1322-1322],
 assertTrue(NumberUtils.DOUBLE_ONE instanceof Double); ref {NumberUtils.DOUBLE_ONE, NumberUtils} [1323-1323],
 assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double); ref {NumberUtils.DOUBLE_MINUS_ONE, NumberUtils} [1324-1324],
 assertTrue(NumberUtils.FLOAT_ZERO instanceof Float); ref {NumberUtils.FLOAT_ZERO, NumberUtils} [1325-1325],
 assertTrue(NumberUtils.FLOAT_ONE instanceof Float); ref {NumberUtils.FLOAT_ONE, NumberUtils} [1326-1326],
 assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float); ref {NumberUtils.FLOAT_MINUS_ONE, NumberUtils} [1327-1327],
 assertTrue(NumberUtils.LONG_ZERO.longValue() == 0); ref {NumberUtils.LONG_ZERO, NumberUtils} [1329-1329],
 assertTrue(NumberUtils.LONG_ONE.longValue() == 1); ref {NumberUtils.LONG_ONE, NumberUtils} [1330-1330],
 assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1); ref {NumberUtils.LONG_MINUS_ONE, NumberUtils} [1331-1331],
 assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0); ref {NumberUtils.INTEGER_ZERO, NumberUtils} [1332-1332],
 assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1); ref {NumberUtils.INTEGER_ONE, NumberUtils} [1333-1333],
 assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1); ref {NumberUtils.INTEGER_MINUS_ONE, NumberUtils} [1334-1334],
 assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0); ref {NumberUtils.SHORT_ZERO, NumberUtils} [1335-1335],
 assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1); ref {NumberUtils.SHORT_ONE, NumberUtils} [1336-1336],
 assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1); ref {NumberUtils.SHORT_MINUS_ONE, NumberUtils} [1337-1337],
 assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0); ref {NumberUtils.BYTE_ZERO, NumberUtils} [1338-1338],
 assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1); ref {NumberUtils.BYTE_ONE, NumberUtils} [1339-1339],
 assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1); ref {NumberUtils.BYTE_MINUS_ONE, NumberUtils} [1340-1340],
 assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d); ref {NumberUtils.DOUBLE_ZERO, NumberUtils} [1341-1341],
 assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d); ref {NumberUtils.DOUBLE_ONE, NumberUtils} [1342-1342],
 assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d); ref {NumberUtils.DOUBLE_MINUS_ONE, NumberUtils} [1343-1343],
 assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f); ref {NumberUtils.FLOAT_ZERO, NumberUtils} [1344-1344],
 assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f); ref {NumberUtils.FLOAT_ONE, NumberUtils} [1345-1345],
 assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f); ref {NumberUtils.FLOAT_MINUS_ONE, NumberUtils} [1346-1346]
[m[m31.08.2022 - 15:15:23.104 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testLang300 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.104 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::testLang381 has 10 assertions: 
 assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); ref {Double.NaN, Double, NumberUtils} [1358-1358],
 assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); ref {Double.NaN, Double, NumberUtils} [1359-1359],
 assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); ref {Float, Float.NaN, NumberUtils} [1360-1360],
 assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); ref {Float, Float.NaN, NumberUtils} [1361-1361],
 assertTrue(Double.isNaN(NumberUtils.max(a))); ref {a, Double, NumberUtils} [1364-1364],
 assertTrue(Double.isNaN(NumberUtils.min(a))); ref {a, Double, NumberUtils} [1365-1365],
 assertTrue(Double.isNaN(NumberUtils.max(b))); ref {b, Double, NumberUtils} [1368-1368],
 assertTrue(Double.isNaN(NumberUtils.min(b))); ref {b, Double, NumberUtils} [1369-1369],
 assertTrue(Float.isNaN(NumberUtils.max(aF))); ref {Float, aF, NumberUtils} [1372-1372],
 assertTrue(Float.isNaN(NumberUtils.max(bF))); ref {Float, bF, NumberUtils} [1375-1375]
[m[m31.08.2022 - 15:15:23.104 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::compareInt has 3 assertions: 
 assertTrue(NumberUtils.compare(-3, 0) < 0); ref {NumberUtils} [1380-1380],
 assertTrue(NumberUtils.compare(113, 113) == 0); ref {NumberUtils} [1381-1381],
 assertTrue(NumberUtils.compare(213, 32) > 0); ref {NumberUtils} [1382-1382]
[m[m31.08.2022 - 15:15:23.104 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::compareLong has 3 assertions: 
 assertTrue(NumberUtils.compare(-3L, 0L) < 0); ref {NumberUtils} [1387-1387],
 assertTrue(NumberUtils.compare(113L, 113L) == 0); ref {NumberUtils} [1388-1388],
 assertTrue(NumberUtils.compare(213L, 32L) > 0); ref {NumberUtils} [1389-1389]
[m[m31.08.2022 - 15:15:23.104 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::compareShort has 3 assertions: 
 assertTrue(NumberUtils.compare((short) -3, (short) 0) < 0); ref {NumberUtils} [1394-1394],
 assertTrue(NumberUtils.compare((short) 113, (short) 113) == 0); ref {NumberUtils} [1395-1395],
 assertTrue(NumberUtils.compare((short) 213, (short) 32) > 0); ref {NumberUtils} [1396-1396]
[m[m31.08.2022 - 15:15:23.104 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.math.NumberUtilsTest::compareByte has 3 assertions: 
 assertTrue(NumberUtils.compare((byte) -3, (byte) 0) < 0); ref {NumberUtils} [1401-1401],
 assertTrue(NumberUtils.compare((byte) 113, (byte) 113) == 0); ref {NumberUtils} [1402-1402],
 assertTrue(NumberUtils.compare((byte) 123, (byte) 32) > 0); ref {NumberUtils} [1403-1403]
[m[m31.08.2022 - 15:15:23.115 [INFO ] ParsingStrategy.parseTestSuite() - Found 13 test cases
[m[m31.08.2022 - 15:15:23.116 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testJira567 has 2 assertions: 
 assertEquals(2, n.length); ref {n.length, n} [43-43],
 assertEquals(Number.class, n.getClass().getComponentType()); ref {n} [44-44]
[m[m31.08.2022 - 15:15:23.116 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testAddObjectArrayBoolean has 6 assertions: 
 assertTrue(Arrays.equals(new boolean[] { false }, newArray)); ref {newArray, Arrays} [57-57],
 assertEquals(Boolean.TYPE, newArray.getClass().getComponentType()); ref {Boolean.TYPE, newArray, Boolean} [58-58],
 assertTrue(Arrays.equals(new boolean[] { true }, newArray)); ref {newArray, Arrays} [60-60],
 assertEquals(Boolean.TYPE, newArray.getClass().getComponentType()); ref {Boolean.TYPE, newArray, Boolean} [61-61],
 assertTrue(Arrays.equals(new boolean[] { true, false, true, false }, newArray)); ref {newArray, Arrays} [64-64],
 assertEquals(Boolean.TYPE, newArray.getClass().getComponentType()); ref {Boolean.TYPE, newArray, Boolean} [65-65]
[m[m31.08.2022 - 15:15:23.116 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testAddObjectArrayByte has 8 assertions: 
 assertTrue(Arrays.equals(new byte[] { 0 }, newArray)); ref {newArray, Arrays} [72-72],
 assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); ref {Byte, newArray, Byte.TYPE} [73-73],
 assertTrue(Arrays.equals(new byte[] { 1 }, newArray)); ref {newArray, Arrays} [75-75],
 assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); ref {Byte, newArray, Byte.TYPE} [76-76],
 assertTrue(Arrays.equals(new byte[] { 1, 2, 3, 0 }, newArray)); ref {newArray, Arrays} [79-79],
 assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); ref {Byte, newArray, Byte.TYPE} [80-80],
 assertTrue(Arrays.equals(new byte[] { 1, 2, 3, 4 }, newArray)); ref {newArray, Arrays} [82-82],
 assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); ref {Byte, newArray, Byte.TYPE} [83-83]
[m[m31.08.2022 - 15:15:23.116 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testAddObjectArrayChar has 8 assertions: 
 assertTrue(Arrays.equals(new char[] { 0 }, newArray)); ref {newArray, Arrays} [90-90],
 assertEquals(Character.TYPE, newArray.getClass().getComponentType()); ref {Character.TYPE, Character, newArray} [91-91],
 assertTrue(Arrays.equals(new char[] { 1 }, newArray)); ref {newArray, Arrays} [93-93],
 assertEquals(Character.TYPE, newArray.getClass().getComponentType()); ref {Character.TYPE, Character, newArray} [94-94],
 assertTrue(Arrays.equals(new char[] { 1, 2, 3, 0 }, newArray)); ref {newArray, Arrays} [97-97],
 assertEquals(Character.TYPE, newArray.getClass().getComponentType()); ref {Character.TYPE, Character, newArray} [98-98],
 assertTrue(Arrays.equals(new char[] { 1, 2, 3, 4 }, newArray)); ref {newArray, Arrays} [100-100],
 assertEquals(Character.TYPE, newArray.getClass().getComponentType()); ref {Character.TYPE, Character, newArray} [101-101]
[m[m31.08.2022 - 15:15:23.116 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testAddObjectArrayDouble has 8 assertions: 
 assertTrue(Arrays.equals(new double[] { 0 }, newArray)); ref {newArray, Arrays} [108-108],
 assertEquals(Double.TYPE, newArray.getClass().getComponentType()); ref {newArray, Double.TYPE, Double} [109-109],
 assertTrue(Arrays.equals(new double[] { 1 }, newArray)); ref {newArray, Arrays} [111-111],
 assertEquals(Double.TYPE, newArray.getClass().getComponentType()); ref {newArray, Double.TYPE, Double} [112-112],
 assertTrue(Arrays.equals(new double[] { 1, 2, 3, 0 }, newArray)); ref {newArray, Arrays} [115-115],
 assertEquals(Double.TYPE, newArray.getClass().getComponentType()); ref {newArray, Double.TYPE, Double} [116-116],
 assertTrue(Arrays.equals(new double[] { 1, 2, 3, 4 }, newArray)); ref {newArray, Arrays} [118-118],
 assertEquals(Double.TYPE, newArray.getClass().getComponentType()); ref {newArray, Double.TYPE, Double} [119-119]
[m[m31.08.2022 - 15:15:23.116 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testAddObjectArrayFloat has 8 assertions: 
 assertTrue(Arrays.equals(new float[] { 0 }, newArray)); ref {newArray, Arrays} [126-126],
 assertEquals(Float.TYPE, newArray.getClass().getComponentType()); ref {Float, Float.TYPE, newArray} [127-127],
 assertTrue(Arrays.equals(new float[] { 1 }, newArray)); ref {newArray, Arrays} [129-129],
 assertEquals(Float.TYPE, newArray.getClass().getComponentType()); ref {Float, Float.TYPE, newArray} [130-130],
 assertTrue(Arrays.equals(new float[] { 1, 2, 3, 0 }, newArray)); ref {newArray, Arrays} [133-133],
 assertEquals(Float.TYPE, newArray.getClass().getComponentType()); ref {Float, Float.TYPE, newArray} [134-134],
 assertTrue(Arrays.equals(new float[] { 1, 2, 3, 4 }, newArray)); ref {newArray, Arrays} [136-136],
 assertEquals(Float.TYPE, newArray.getClass().getComponentType()); ref {Float, Float.TYPE, newArray} [137-137]
[m[m31.08.2022 - 15:15:23.116 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testAddObjectArrayInt has 8 assertions: 
 assertTrue(Arrays.equals(new int[] { 0 }, newArray)); ref {newArray, Arrays} [144-144],
 assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); ref {Integer.TYPE, Integer, newArray} [145-145],
 assertTrue(Arrays.equals(new int[] { 1 }, newArray)); ref {newArray, Arrays} [147-147],
 assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); ref {Integer.TYPE, Integer, newArray} [148-148],
 assertTrue(Arrays.equals(new int[] { 1, 2, 3, 0 }, newArray)); ref {newArray, Arrays} [151-151],
 assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); ref {Integer.TYPE, Integer, newArray} [152-152],
 assertTrue(Arrays.equals(new int[] { 1, 2, 3, 4 }, newArray)); ref {newArray, Arrays} [154-154],
 assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); ref {Integer.TYPE, Integer, newArray} [155-155]
[m[m31.08.2022 - 15:15:23.116 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testAddObjectArrayLong has 8 assertions: 
 assertTrue(Arrays.equals(new long[] { 0 }, newArray)); ref {newArray, Arrays} [162-162],
 assertEquals(Long.TYPE, newArray.getClass().getComponentType()); ref {Long, newArray, Long.TYPE} [163-163],
 assertTrue(Arrays.equals(new long[] { 1 }, newArray)); ref {newArray, Arrays} [165-165],
 assertEquals(Long.TYPE, newArray.getClass().getComponentType()); ref {Long, newArray, Long.TYPE} [166-166],
 assertTrue(Arrays.equals(new long[] { 1, 2, 3, 0 }, newArray)); ref {newArray, Arrays} [169-169],
 assertEquals(Long.TYPE, newArray.getClass().getComponentType()); ref {Long, newArray, Long.TYPE} [170-170],
 assertTrue(Arrays.equals(new long[] { 1, 2, 3, 4 }, newArray)); ref {newArray, Arrays} [172-172],
 assertEquals(Long.TYPE, newArray.getClass().getComponentType()); ref {Long, newArray, Long.TYPE} [173-173]
[m[m31.08.2022 - 15:15:23.116 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testAddObjectArrayShort has 8 assertions: 
 assertTrue(Arrays.equals(new short[] { 0 }, newArray)); ref {newArray, Arrays} [180-180],
 assertEquals(Short.TYPE, newArray.getClass().getComponentType()); ref {newArray, Short.TYPE, Short} [181-181],
 assertTrue(Arrays.equals(new short[] { 1 }, newArray)); ref {newArray, Arrays} [183-183],
 assertEquals(Short.TYPE, newArray.getClass().getComponentType()); ref {newArray, Short.TYPE, Short} [184-184],
 assertTrue(Arrays.equals(new short[] { 1, 2, 3, 0 }, newArray)); ref {newArray, Arrays} [187-187],
 assertEquals(Short.TYPE, newArray.getClass().getComponentType()); ref {newArray, Short.TYPE, Short} [188-188],
 assertTrue(Arrays.equals(new short[] { 1, 2, 3, 4 }, newArray)); ref {newArray, Arrays} [190-190],
 assertEquals(Short.TYPE, newArray.getClass().getComponentType()); ref {newArray, Short.TYPE, Short} [191-191]
[m[m31.08.2022 - 15:15:23.116 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testAddObjectArrayObject has 14 assertions: 
 assertTrue(Arrays.equals(new String[] { "a" }, newArray)); ref {newArray, Arrays} [200-200],
 assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); ref {newArray, Arrays} [201-201],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [202-202],
 assertTrue(Arrays.equals(new String[] { "a" }, newStringArray)); ref {newStringArray, Arrays} [206-206],
 assertTrue(Arrays.equals(new Object[] { "a" }, newStringArray)); ref {newStringArray, Arrays} [207-207],
 assertEquals(String.class, newStringArray.getClass().getComponentType()); ref {newStringArray} [208-208],
 assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); ref {newArray, Arrays} [212-212],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [213-213],
 assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); ref {newArray, Arrays} [216-216],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [217-217],
 assertTrue(Arrays.equals(new Number[] { Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3) }, newArray)); ref {Integer, Float, newArray, Arrays, Double} [221-221],
 assertEquals(Number.class, newArray.getClass().getComponentType()); ref {newArray} [222-222],
 assertTrue(Arrays.equals(new Float[] { Float.valueOf(3) }, newArray)); ref {Float, newArray, Arrays} [226-226],
 assertEquals(Float.class, newArray.getClass().getComponentType()); ref {newArray} [227-227]
[m[m31.08.2022 - 15:15:23.116 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testLANG571 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.116 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testAddObjectArrayToObjectArray has 46 assertions: 
 assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); ref {ArrayUtils} [254-254],
 assertNotSame(stringArray1, newArray); ref {stringArray1, newArray} [259-259],
 assertTrue(Arrays.equals(stringArray1, newArray)); ref {stringArray1, newArray, Arrays} [260-260],
 assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); ref {newArray, Arrays} [261-261],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [262-262],
 assertNotSame(stringArray2, newArray); ref {stringArray2, newArray} [264-264],
 assertTrue(Arrays.equals(stringArray2, newArray)); ref {stringArray2, newArray, Arrays} [265-265],
 assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); ref {newArray, Arrays} [266-266],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [267-267],
 assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); ref {newArray, Arrays} [269-269],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [270-270],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); ref {ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils, newArray, Arrays} [272-272],
 assertTrue(Arrays.equals(new String[] {}, newArray)); ref {newArray, Arrays} [273-273],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [274-274],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); ref {ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils, newArray, Arrays} [276-276],
 assertTrue(Arrays.equals(new String[] {}, newArray)); ref {newArray, Arrays} [277-277],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [278-278],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); ref {ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils, newArray, Arrays} [280-280],
 assertTrue(Arrays.equals(new String[] {}, newArray)); ref {newArray, Arrays} [281-281],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [282-282],
 assertTrue(Arrays.equals(new String[] { null, null }, newArray)); ref {newArray, Arrays} [285-285],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [286-286],
 // boolean
assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); ref {ArrayUtils, Arrays} [289-290],
 assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); ref {ArrayUtils, Arrays} [292-293],
 assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); ref {ArrayUtils, Arrays} [295-296],
 // char
assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); ref {ArrayUtils, Arrays} [299-300],
 assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); ref {ArrayUtils, Arrays} [302-303],
 assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); ref {ArrayUtils, Arrays} [305-306],
 // byte
assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); ref {ArrayUtils, Arrays} [309-310],
 assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); ref {ArrayUtils, Arrays} [312-313],
 assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); ref {ArrayUtils, Arrays} [315-316],
 // short
assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); ref {ArrayUtils, Arrays} [319-320],
 assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); ref {ArrayUtils, Arrays} [322-323],
 assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); ref {ArrayUtils, Arrays} [325-326],
 // int
assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); ref {ArrayUtils, Arrays} [329-330],
 assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); ref {ArrayUtils, Arrays} [332-333],
 assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); ref {ArrayUtils, Arrays} [335-336],
 // long
assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); ref {ArrayUtils, Arrays} [339-340],
 assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); ref {ArrayUtils, Arrays} [342-343],
 assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); ref {ArrayUtils, Arrays} [345-346],
 // float
assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); ref {ArrayUtils, Arrays} [349-350],
 assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); ref {ArrayUtils, Arrays} [352-353],
 assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); ref {ArrayUtils, Arrays} [355-356],
 // double
assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); ref {Math.PI, ArrayUtils, Arrays, Math} [359-360],
 assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); ref {ArrayUtils, Arrays} [362-363],
 assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); ref {Math.PI, ArrayUtils, Arrays, Math} [365-366]
[m[m31.08.2022 - 15:15:23.117 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsAddTest::testAddObjectAtIndex has 81 assertions: 
 assertTrue(Arrays.equals(new String[] { "a" }, newArray)); ref {newArray, Arrays} [374-374],
 assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); ref {newArray, Arrays} [375-375],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [376-376],
 assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); ref {newArray, Arrays} [379-379],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [380-380],
 assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); ref {newArray, Arrays} [382-382],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [383-383],
 assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); ref {newArray, Arrays} [385-385],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [386-386],
 assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); ref {newArray, Arrays} [388-388],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [389-389],
 assertEquals(String.class, newArray.getClass().getComponentType()); ref {newArray} [390-390],
 assertNotNull(result); ref {result} [396-396],
 assertEquals(4, result.length); ref {result, result.length} [397-397],
 assertEquals("1", result[0]); ref {result} [398-398],
 assertEquals("2", result[1]); ref {result} [399-399],
 assertEquals("3", result[2]); ref {result} [400-400],
 assertEquals("4", result[3]); ref {result} [401-401],
 assertNotNull(result2); ref {result2} [402-402],
 assertEquals(4, result2.length); ref {result2.length, result2} [403-403],
 assertEquals("1", result2[0]); ref {result2} [404-404],
 assertEquals("2", result2[1]); ref {result2} [405-405],
 assertEquals("4", result2[2]); ref {result2} [406-406],
 assertEquals("5", result2[3]); ref {result2} [407-407],
 assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); ref {booleanArray, Arrays} [411-411],
 assertEquals("Index: -1, Length: 0", e.getMessage()); ref {e} [415-415],
 assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); ref {booleanArray, Arrays} [418-418],
 assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); ref {booleanArray, Arrays} [420-420],
 assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); ref {booleanArray, Arrays} [422-422],
 assertEquals("Index: 4, Length: 2", e.getMessage()); ref {e} [426-426],
 assertEquals("Index: -1, Length: 2", e.getMessage()); ref {e} [431-431],
 assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); ref {Arrays, charArray} [436-436],
 assertEquals("Index: -1, Length: 0", e.getMessage()); ref {e} [440-440],
 assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); ref {Arrays, charArray} [443-443],
 assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); ref {Arrays, charArray} [445-445],
 assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); ref {Arrays, charArray} [447-447],
 assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); ref {Arrays, charArray} [449-449],
 assertEquals("Index: 4, Length: 2", e.getMessage()); ref {e} [453-453],
 assertEquals("Index: -1, Length: 2", e.getMessage()); ref {e} [458-458],
 assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); ref {shortArray, Arrays} [463-463],
 assertEquals("Index: -1, Length: 0", e.getMessage()); ref {e} [467-467],
 assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); ref {shortArray, Arrays} [470-470],
 assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); ref {shortArray, Arrays} [472-472],
 assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); ref {shortArray, Arrays} [474-474],
 assertEquals("Index: 4, Length: 2", e.getMessage()); ref {e} [478-478],
 assertEquals("Index: -1, Length: 2", e.getMessage()); ref {e} [483-483],
 assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); ref {byteArray, Arrays} [488-488],
 assertEquals("Index: -1, Length: 0", e.getMessage()); ref {e} [492-492],
 assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); ref {byteArray, Arrays} [495-495],
 assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); ref {byteArray, Arrays} [497-497],
 assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); ref {byteArray, Arrays} [499-499],
 assertEquals("Index: 4, Length: 2", e.getMessage()); ref {e} [503-503],
 assertEquals("Index: -1, Length: 2", e.getMessage()); ref {e} [508-508],
 assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); ref {Arrays, intArray} [513-513],
 assertEquals("Index: -1, Length: 0", e.getMessage()); ref {e} [517-517],
 assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); ref {Arrays, intArray} [520-520],
 assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); ref {Arrays, intArray} [522-522],
 assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); ref {Arrays, intArray} [524-524],
 assertEquals("Index: 4, Length: 2", e.getMessage()); ref {e} [528-528],
 assertEquals("Index: -1, Length: 2", e.getMessage()); ref {e} [533-533],
 assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); ref {longArray, Arrays} [538-538],
 assertEquals("Index: -1, Length: 0", e.getMessage()); ref {e} [542-542],
 assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); ref {longArray, Arrays} [545-545],
 assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); ref {longArray, Arrays} [547-547],
 assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); ref {longArray, Arrays} [549-549],
 assertEquals("Index: 4, Length: 2", e.getMessage()); ref {e} [553-553],
 assertEquals("Index: -1, Length: 2", e.getMessage()); ref {e} [558-558],
 assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); ref {floatArray, Arrays} [563-563],
 assertEquals("Index: -1, Length: 0", e.getMessage()); ref {e} [567-567],
 assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); ref {floatArray, Arrays} [570-570],
 assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); ref {floatArray, Arrays} [572-572],
 assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); ref {floatArray, Arrays} [574-574],
 assertEquals("Index: 4, Length: 2", e.getMessage()); ref {e} [578-578],
 assertEquals("Index: -1, Length: 2", e.getMessage()); ref {e} [583-583],
 assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); ref {doubleArray, Arrays} [588-588],
 assertEquals("Index: -1, Length: 0", e.getMessage()); ref {e} [592-592],
 assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); ref {doubleArray, Arrays} [595-595],
 assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); ref {doubleArray, Arrays} [597-597],
 assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); ref {doubleArray, Arrays} [599-599],
 assertEquals("Index: 4, Length: 2", e.getMessage()); ref {e} [603-603],
 assertEquals("Index: -1, Length: 2", e.getMessage()); ref {e} [608-608]
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.parseTestSuite() - Found 33 test cases
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::test_Equality_Hash has 1 assertions: 
 assertEquals(i++, map.get(parser).intValue()); ref {parser, i, map} [112-112]
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testParseZone has 6 assertions: 
 assertEquals(cal.getTime(), fdf.parse("2003-07-10T15:33:20.000 -0500")); ref {fdf, cal} [124-124],
 assertEquals(cal.getTime(), fdf.parse("2003-07-10T15:33:20.000 GMT-05:00")); ref {fdf, cal} [125-125],
 assertEquals(cal.getTime(), fdf.parse("2003-07-10T16:33:20.000 Eastern Daylight Time")); ref {fdf, cal} [126-126],
 assertEquals(cal.getTime(), fdf.parse("2003-07-10T16:33:20.000 EDT")); ref {fdf, cal} [127-127],
 assertEquals(cal.getTime(), fdf.parse("2003-02-10T09:00:00.000 -0300")); ref {fdf, cal} [132-132],
 assertEquals(cal.getTime(), fdf.parse("2003-02-10T15:05:06.000 +0500")); ref {fdf, cal} [137-137]
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testParseLongShort has 4 assertions: 
 assertEquals(cal.getTime(), fdf.parse("2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00")); ref {fdf, cal} [150-150],
 assertEquals(cal.getTime(), parse); ref {parse, cal} [154-154],
 assertEquals(cal.getTime(), fdf.parse("03 BC 2 10 PM Sat 15 33 20 989 -0500")); ref {fdf, cal} [157-157],
 assertEquals(cal.getTime(), fdf.parse("03 AD 2 10 PM Saturday 15 33 20 989 -0500")); ref {fdf, cal} [160-160]
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testAmPm has 16 assertions: 
 assertEquals(cal.getTime(), h.parse("2010-08-01 12 AM 33:20")); ref {h, cal} [174-174],
 assertEquals(cal.getTime(), K.parse("2010-08-01 0 AM 33:20")); ref {K, cal} [175-175],
 assertEquals(cal.getTime(), k.parse("2010-08-01 00:33:20")); ref {k, cal} [176-176],
 assertEquals(cal.getTime(), H.parse("2010-08-01 00:33:20")); ref {H, cal} [177-177],
 assertEquals(cal.getTime(), h.parse("2010-08-01 3 AM 33:20")); ref {h, cal} [180-180],
 assertEquals(cal.getTime(), K.parse("2010-08-01 3 AM 33:20")); ref {K, cal} [181-181],
 assertEquals(cal.getTime(), k.parse("2010-08-01 03:33:20")); ref {k, cal} [182-182],
 assertEquals(cal.getTime(), H.parse("2010-08-01 03:33:20")); ref {H, cal} [183-183],
 assertEquals(cal.getTime(), h.parse("2010-08-01 3 PM 33:20")); ref {h, cal} [186-186],
 assertEquals(cal.getTime(), K.parse("2010-08-01 3 PM 33:20")); ref {K, cal} [187-187],
 assertEquals(cal.getTime(), k.parse("2010-08-01 15:33:20")); ref {k, cal} [188-188],
 assertEquals(cal.getTime(), H.parse("2010-08-01 15:33:20")); ref {H, cal} [189-189],
 assertEquals(cal.getTime(), h.parse("2010-08-01 12 PM 33:20")); ref {h, cal} [192-192],
 assertEquals(cal.getTime(), K.parse("2010-08-01 0 PM 33:20")); ref {K, cal} [193-193],
 assertEquals(cal.getTime(), k.parse("2010-08-01 12:33:20")); ref {k, cal} [194-194],
 assertEquals(cal.getTime(), H.parse("2010-08-01 12:33:20")); ref {H, cal} [195-195]
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testParses has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testTzParses has 1 assertions: 
 Assert.assertEquals("tz:" + tz.getID() + " locale:" + locale.getDisplayName(), expected, actual); ref {actual, Assert, tz, expected, locale} [275-275]
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLocales_Long_AD has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLocales_Long_BC has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLocales_Short_AD has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLocales_Short_BC has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLocales_LongNoEra_AD has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLocales_LongNoEra_BC has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLocales_ShortNoEra_AD has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLocales_ShortNoEra_BC has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.121 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testParseNumerics has 1 assertions: 
 assertEquals(cal.getTime(), fdf.parse("20030210153320989")); ref {fdf, cal} [377-377]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testQuotes has 1 assertions: 
 assertEquals(cal.getTime(), fdf.parse("'20030210A'B153320989'")); ref {fdf, cal} [388-388]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testSpecialCharacters has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLANG_832 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLANG_831 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testDayOf has 1 assertions: 
 assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03")); ref {fdf, cal} [465-465]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testShortDateStyleWithLocales has 2 assertions: 
 assertEquals(cal.getTime(), fdf.parse("2/3/04")); ref {fdf, cal} [479-479],
 assertEquals(cal.getTime(), fdf.parse("2004-02-03")); ref {fdf, cal} [482-482]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLowYearPadding has 4 assertions: 
 assertEquals(cal.getTime(), parser.parse("0001/01/01")); ref {parser, cal} [496-496],
 assertEquals(cal.getTime(), parser.parse("0010/01/01")); ref {parser, cal} [498-498],
 assertEquals(cal.getTime(), parser.parse("0100/01/01")); ref {parser, cal} [500-500],
 assertEquals(cal.getTime(), parser.parse("0999/01/01")); ref {parser, cal} [502-502]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testMilleniumBug has 1 assertions: 
 assertEquals(cal.getTime(), parser.parse("01.01.1000")); ref {parser, cal} [512-512]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLang303 has 1 assertions: 
 assertEquals(date, parser.parse("2004/11/31")); ref {date, parser} [524-524]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLang538 has 1 assertions: 
 assertEquals(cal.getTime(), parser.parse("2009-10-16T16:42:16.000Z")); ref {parser, cal} [535-535]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testEquals has 3 assertions: 
 assertEquals(parser1, parser2); ref {parser1, parser2} [543-543],
 assertEquals(parser1.hashCode(), parser2.hashCode()); ref {parser1, parser2} [544-544],
 assertFalse(parser1.equals(new Object())); ref {parser1} [546-546]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testToStringContainsName has 1 assertions: 
 assertTrue(parser.toString().startsWith("FastDate")); ref {parser} [552-552]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testPatternMatches has 1 assertions: 
 assertEquals(yMdHmsSZ, parser.getPattern()); ref {parser, yMdHmsSZ} [558-558]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLocaleMatches has 1 assertions: 
 assertEquals(SWEDEN, parser.getLocale()); ref {SWEDEN, parser} [564-564]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testTimeZoneMatches has 1 assertions: 
 assertEquals(REYKJAVIK, parser.getTimeZone()); ref {parser, REYKJAVIK} [570-570]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::testLang996 has 3 assertions: 
 assertEquals(expected.getTime(), fdp.parse("14may2014")); ref {fdp, expected} [580-580],
 assertEquals(expected.getTime(), fdp.parse("14MAY2014")); ref {fdp, expected} [581-581],
 assertEquals(expected.getTime(), fdp.parse("14May2014")); ref {fdp, expected} [582-582]
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::test1806Argument has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.122 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.FastDateParserTest::test1806 has 3 assertions: 
 assertEquals(message + trial.one, cal.getTime().getTime(), parser.parse(dateStub + trial.one).getTime() - trial.offset); ref {trial.offset, parser, dateStub, trial.one, message, trial, cal} [633-633],
 assertEquals(message + trial.two, cal.getTime(), parser.parse(dateStub + trial.two)); ref {trial.two, parser, dateStub, message, trial, cal} [636-636],
 assertEquals(message + trial.three, cal.getTime(), parser.parse(dateStub + trial.three)); ref {parser, dateStub, trial.three, message, trial, cal} [639-639]
[m[m31.08.2022 - 15:15:23.124 [INFO ] ParsingStrategy.parseTestSuite() - Found 17 test cases
[m[m31.08.2022 - 15:15:23.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testConstructors has 5 assertions: 
 assertEquals(0, new MutableInt().intValue()); ref {} [33-33],
 assertEquals(1, new MutableInt(1).intValue()); ref {} [35-35],
 assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); ref {Integer} [37-37],
 assertEquals(3, new MutableInt(new MutableLong(3)).intValue()); ref {} [38-38],
 assertEquals(2, new MutableInt("2").intValue()); ref {} [40-40]
[m[m31.08.2022 - 15:15:23.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testConstructorNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testGetSet has 8 assertions: 
 assertEquals(0, new MutableInt().intValue()); ref {} [52-52],
 assertEquals(Integer.valueOf(0), new MutableInt().getValue()); ref {Integer} [53-53],
 assertEquals(1, mutNum.intValue()); ref {mutNum} [56-56],
 assertEquals(Integer.valueOf(1), mutNum.getValue()); ref {Integer, mutNum} [57-57],
 assertEquals(2, mutNum.intValue()); ref {mutNum} [60-60],
 assertEquals(Integer.valueOf(2), mutNum.getValue()); ref {Integer, mutNum} [61-61],
 assertEquals(3, mutNum.intValue()); ref {mutNum} [64-64],
 assertEquals(Integer.valueOf(3), mutNum.getValue()); ref {Integer, mutNum} [65-65]
[m[m31.08.2022 - 15:15:23.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testSetNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testEquals has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testHashCode has 4 assertions: 
 assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); ref {mutNumA} [105-105],
 assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); ref {mutNumA, mutNumB} [106-106],
 assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); ref {mutNumA, mutNumC} [107-107],
 assertTrue(mutNumA.hashCode() == Integer.valueOf(0).hashCode()); ref {Integer, mutNumA} [108-108]
[m[m31.08.2022 - 15:15:23.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testCompareTo has 3 assertions: 
 assertEquals(0, mutNum.compareTo(new MutableInt(0))); ref {mutNum} [115-115],
 assertEquals(+1, mutNum.compareTo(new MutableInt(-1))); ref {mutNum} [116-116],
 assertEquals(-1, mutNum.compareTo(new MutableInt(1))); ref {mutNum} [117-117]
[m[m31.08.2022 - 15:15:23.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testCompareToNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.124 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testPrimitiveValues has 5 assertions: 
 assertEquals((byte) 1, mutNum.byteValue()); ref {mutNum} [130-130],
 assertEquals((short) 1, mutNum.shortValue()); ref {mutNum} [131-131],
 assertEquals(1.0F, mutNum.floatValue(), 0); ref {mutNum} [132-132],
 assertEquals(1.0, mutNum.doubleValue(), 0); ref {mutNum} [133-133],
 assertEquals(1L, mutNum.longValue()); ref {mutNum} [134-134]
[m[m31.08.2022 - 15:15:23.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testToInteger has 2 assertions: 
 assertEquals(Integer.valueOf(0), new MutableInt(0).toInteger()); ref {Integer} [139-139],
 assertEquals(Integer.valueOf(123), new MutableInt(123).toInteger()); ref {Integer} [140-140]
[m[m31.08.2022 - 15:15:23.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testIncrement has 2 assertions: 
 assertEquals(2, mutNum.intValue()); ref {mutNum} [148-148],
 assertEquals(2L, mutNum.longValue()); ref {mutNum} [149-149]
[m[m31.08.2022 - 15:15:23.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testDecrement has 2 assertions: 
 assertEquals(0, mutNum.intValue()); ref {mutNum} [157-157],
 assertEquals(0L, mutNum.longValue()); ref {mutNum} [158-158]
[m[m31.08.2022 - 15:15:23.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testAddValuePrimitive has 2 assertions: 
 assertEquals(2, mutNum.intValue()); ref {mutNum} [166-166],
 assertEquals(2L, mutNum.longValue()); ref {mutNum} [167-167]
[m[m31.08.2022 - 15:15:23.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testAddValueObject has 2 assertions: 
 assertEquals(2, mutNum.intValue()); ref {mutNum} [175-175],
 assertEquals(2L, mutNum.longValue()); ref {mutNum} [176-176]
[m[m31.08.2022 - 15:15:23.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testSubtractValuePrimitive has 2 assertions: 
 assertEquals(0, mutNum.intValue()); ref {mutNum} [184-184],
 assertEquals(0L, mutNum.longValue()); ref {mutNum} [185-185]
[m[m31.08.2022 - 15:15:23.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testSubtractValueObject has 2 assertions: 
 assertEquals(0, mutNum.intValue()); ref {mutNum} [193-193],
 assertEquals(0L, mutNum.longValue()); ref {mutNum} [194-194]
[m[m31.08.2022 - 15:15:23.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableIntTest::testToString has 3 assertions: 
 assertEquals("0", new MutableInt(0).toString()); ref {} [199-199],
 assertEquals("10", new MutableInt(10).toString()); ref {} [200-200],
 assertEquals("-123", new MutableInt(-123).toString()); ref {} [201-201]
[m[m31.08.2022 - 15:15:23.125 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 15:15:23.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderConcurrencyTest::testLinkedList has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderConcurrencyTest::testArrayList has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.125 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderConcurrencyTest::testCopyOnWriteArrayList has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.127 [INFO ] ParsingStrategy.parseTestSuite() - Found 9 test cases
[m[m31.08.2022 - 15:15:23.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventListenerSupportTest::testAddNullListener has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventListenerSupportTest::testRemoveNullListener has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventListenerSupportTest::testEventDispatchOrder has 3 assertions: 
 assertEquals(calledListeners.size(), 2); ref {calledListeners} [70-70],
 assertSame(calledListeners.get(0), listener1); ref {calledListeners, listener1} [71-71],
 assertSame(calledListeners.get(1), listener2); ref {listener2, calledListeners} [72-72]
[m[m31.08.2022 - 15:15:23.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventListenerSupportTest::testCreateWithNonInterfaceParameter has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventListenerSupportTest::testCreateWithNullParameter has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventListenerSupportTest::testRemoveListenerDuringEvent has 2 assertions: 
 assertEquals(listenerSupport.getListenerCount(), 10); ref {listenerSupport} [95-95],
 assertEquals(listenerSupport.getListenerCount(), 0); ref {listenerSupport} [97-97]
[m[m31.08.2022 - 15:15:23.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventListenerSupportTest::testGetListeners has 7 assertions: 
 assertEquals(0, listeners.length); ref {listeners, listeners.length} [105-105],
 assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType()); ref {listeners} [106-106],
 // for fun, show that the same empty instance is used
assertSame(empty, listenerSupport.getListeners()); ref {listenerSupport, empty} [109-109],
 assertEquals(1, listenerSupport.getListeners().length); ref {listenerSupport, listenerSupport.getListeners().length} [113-113],
 assertEquals(2, listenerSupport.getListeners().length); ref {listenerSupport, listenerSupport.getListeners().length} [116-116],
 assertEquals(1, listenerSupport.getListeners().length); ref {listenerSupport, listenerSupport.getListeners().length} [118-118],
 assertSame(empty, listenerSupport.getListeners()); ref {listenerSupport, empty} [120-120]
[m[m31.08.2022 - 15:15:23.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventListenerSupportTest::testSerialization has 3 assertions: 
 assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType()); ref {listeners} [149-149],
 assertEquals(1, listeners.length); ref {listeners, listeners.length} [150-150],
 assertEquals(0, deserializedListenerSupport.getListeners().length); ref {deserializedListenerSupport.getListeners().length, deserializedListenerSupport} [162-162]
[m[m31.08.2022 - 15:15:23.127 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventListenerSupportTest::testSubclassInvocationHandling has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.128 [INFO ] ParsingStrategy.parseTestSuite() - Found 4 test cases
[m[m31.08.2022 - 15:15:23.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.NumericEntityEscaperTest::testBelow has 1 assertions: 
 assertEquals("Failed to escape numeric entities via the below method", "&#65;&#68;FGZ", result); ref {result} [36-36]
[m[m31.08.2022 - 15:15:23.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.NumericEntityEscaperTest::testBetween has 1 assertions: 
 assertEquals("Failed to escape numeric entities via the between method", "AD&#70;&#71;Z", result); ref {result} [45-45]
[m[m31.08.2022 - 15:15:23.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.NumericEntityEscaperTest::testAbove has 1 assertions: 
 assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); ref {result} [54-54]
[m[m31.08.2022 - 15:15:23.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.NumericEntityEscaperTest::testSupplementary has 1 assertions: 
 assertEquals("Failed to escape numeric entities supplementary characters", expected, result); ref {result, expected} [65-65]
[m[m31.08.2022 - 15:15:23.128 [INFO ] ParsingStrategy.parseTestSuite() - Found 4 test cases
[m[m31.08.2022 - 15:15:23.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest::testInteger has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest::testIntegerWithTransients has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest::testFixture has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.128 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest::testFixtureWithTransients has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.parseTestSuite() - Found 51 test cases
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendNewLine has 2 assertions: 
 assertEquals("---" + SEP + "+++", sb.toString()); ref {SEP, sb} [54-54],
 assertEquals("---#" + SEP, sb.toString()); ref {SEP, sb} [58-58]
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendWithNullText has 9 assertions: 
 assertEquals("", sb.toString()); ref {sb} [66-66],
 assertEquals("NULL", sb.toString()); ref {sb} [69-69],
 assertEquals("NULLNULL", sb.toString()); ref {sb} [72-72],
 assertEquals("NULLNULLfoo", sb.toString()); ref {sb} [75-75],
 assertEquals("NULLNULLfooNULL", sb.toString()); ref {sb} [78-78],
 assertEquals("NULLNULLfooNULL", sb.toString()); ref {sb} [81-81],
 assertEquals("NULLNULLfooNULLbar", sb.toString()); ref {sb} [84-84],
 assertEquals("NULLNULLfooNULLbarNULL", sb.toString()); ref {sb} [87-87],
 assertEquals("NULLNULLfooNULLbarNULLbaz", sb.toString()); ref {sb} [90-90]
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_Object has 8 assertions: 
 assertEquals("", sb.toString()); ref {sb} [98-98],
 assertEquals("", sb.toString()); ref {sb} [101-101],
 assertEquals("foo", sb.toString()); ref {sb} [104-104],
 assertEquals("foo", sb.toString()); ref {sb} [107-107],
 assertEquals("foobaz", sb.toString()); ref {sb} [110-110],
 assertEquals("foobazyes", sb.toString()); ref {sb} [113-113],
 assertEquals("foobazyesSeq", sb.toString()); ref {sb} [116-116],
 assertEquals("foobazyesSeqbld", sb.toString()); ref {sb} [119-119]
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_StringBuilder has 4 assertions: 
 assertEquals("NULL", sb.toString()); ref {sb} [127-127],
 assertEquals("foo", sb.toString()); ref {sb} [131-131],
 assertEquals("foo", sb.toString()); ref {sb} [134-134],
 assertEquals("foobar", sb.toString()); ref {sb} [137-137]
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_String has 4 assertions: 
 assertEquals("NULL", sb.toString()); ref {sb} [145-145],
 assertEquals("foo", sb.toString()); ref {sb} [149-149],
 assertEquals("foo", sb.toString()); ref {sb} [152-152],
 assertEquals("foobar", sb.toString()); ref {sb} [155-155]
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_String_int_int has 5 assertions: 
 assertEquals("NULL", sb.toString()); ref {sb} [163-163],
 assertEquals("foo", sb.toString()); ref {sb} [167-167],
 assertEquals("foo", sb.toString()); ref {sb} [212-212],
 assertEquals("foobar", sb.toString()); ref {sb} [215-215],
 assertEquals("foobarard", sb.toString()); ref {sb} [218-218]
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_StringBuilder_int_int has 5 assertions: 
 assertEquals("NULL", sb.toString()); ref {sb} [226-226],
 assertEquals("foo", sb.toString()); ref {sb} [230-230],
 assertEquals("foo", sb.toString()); ref {sb} [275-275],
 assertEquals("foobar", sb.toString()); ref {sb} [278-278],
 assertEquals("foobarard", sb.toString()); ref {sb} [281-281]
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_StringBuffer has 4 assertions: 
 assertEquals("NULL", sb.toString()); ref {sb} [289-289],
 assertEquals("foo", sb.toString()); ref {sb} [293-293],
 assertEquals("foo", sb.toString()); ref {sb} [296-296],
 assertEquals("foobar", sb.toString()); ref {sb} [299-299]
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_StringBuffer_int_int has 4 assertions: 
 assertEquals("NULL", sb.toString()); ref {sb} [307-307],
 assertEquals("foo", sb.toString()); ref {sb} [311-311],
 assertEquals("foo", sb.toString()); ref {sb} [356-356],
 assertEquals("foobar", sb.toString()); ref {sb} [359-359]
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_StrBuilder has 4 assertions: 
 assertEquals("NULL", sb.toString()); ref {sb} [367-367],
 assertEquals("foo", sb.toString()); ref {sb} [371-371],
 assertEquals("foo", sb.toString()); ref {sb} [374-374],
 assertEquals("foobar", sb.toString()); ref {sb} [377-377]
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_StrBuilder_int_int has 4 assertions: 
 assertEquals("NULL", sb.toString()); ref {sb} [385-385],
 assertEquals("foo", sb.toString()); ref {sb} [389-389],
 assertEquals("foo", sb.toString()); ref {sb} [434-434],
 assertEquals("foobar", sb.toString()); ref {sb} [437-437]
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_CharArray has 3 assertions: 
 assertEquals("NULL", sb.toString()); ref {sb} [445-445],
 assertEquals("", sb.toString()); ref {sb} [449-449],
 assertEquals("foo", sb.toString()); ref {sb} [452-452]
[m[m31.08.2022 - 15:15:23.139 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_CharArray_int_int has 4 assertions: 
 assertEquals("NULL", sb.toString()); ref {sb} [460-460],
 assertEquals("foo", sb.toString()); ref {sb} [464-464],
 assertEquals("foo", sb.toString()); ref {sb} [509-509],
 assertEquals("foobar", sb.toString()); ref {sb} [512-512]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_Boolean has 3 assertions: 
 assertEquals("true", sb.toString()); ref {sb} [520-520],
 assertEquals("truefalse", sb.toString()); ref {sb} [523-523],
 assertEquals("truefalse!", sb.toString()); ref {sb} [526-526]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_PrimitiveNumber has 4 assertions: 
 assertEquals("0", sb.toString()); ref {sb} [534-534],
 assertEquals("01", sb.toString()); ref {sb} [537-537],
 assertEquals("012.3", sb.toString()); ref {sb} [540-540],
 assertEquals("012.34.5", sb.toString()); ref {sb} [543-543]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_FormattedString has 3 assertions: 
 assertEquals("Hello Alice" + SEP, sb.toString()); ref {SEP, sb} [565-565],
 // appendNewLine() calls append(String)
assertEquals(2, count[0]); ref {count} [566-566],
 assertEquals(1, count[1]); ref {count} [567-567]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_Object has 3 assertions: 
 assertEquals("" + SEP, sb.toString()); ref {SEP, sb} [575-575],
 assertEquals(SEP + "foo" + SEP, sb.toString()); ref {SEP, sb} [578-578],
 assertEquals(SEP + "foo" + SEP + "6" + SEP, sb.toString()); ref {SEP, sb} [581-581]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_String has 3 assertions: 
 assertEquals("foo" + SEP, sb.toString()); ref {SEP, sb} [603-603],
 // appendNewLine() calls append(String)
assertEquals(2, count[0]); ref {count} [604-604],
 assertEquals(1, count[1]); ref {count} [605-605]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_String_int_int has 3 assertions: 
 assertEquals("foo" + SEP, sb.toString()); ref {SEP, sb} [627-627],
 assertEquals(1, count[0]); ref {count} [628-628],
 assertEquals(1, count[1]); ref {count} [629-629]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_StringBuffer has 3 assertions: 
 assertEquals("foo" + SEP, sb.toString()); ref {SEP, sb} [651-651],
 assertEquals(1, count[0]); ref {count} [652-652],
 assertEquals(1, count[1]); ref {count} [653-653]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_StringBuilder has 3 assertions: 
 assertEquals("foo" + SEP, sb.toString()); ref {SEP, sb} [675-675],
 assertEquals(1, count[0]); ref {count} [676-676],
 assertEquals(1, count[1]); ref {count} [677-677]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_StringBuffer_int_int has 3 assertions: 
 assertEquals("foo" + SEP, sb.toString()); ref {SEP, sb} [699-699],
 assertEquals(1, count[0]); ref {count} [700-700],
 assertEquals(1, count[1]); ref {count} [701-701]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_StringBuilder_int_int has 3 assertions: 
 assertEquals("foo" + SEP, sb.toString()); ref {SEP, sb} [723-723],
 assertEquals(1, count[0]); ref {count} [724-724],
 assertEquals(1, count[1]); ref {count} [725-725]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_StrBuilder has 3 assertions: 
 assertEquals("foo" + SEP, sb.toString()); ref {SEP, sb} [747-747],
 assertEquals(1, count[0]); ref {count} [748-748],
 assertEquals(1, count[1]); ref {count} [749-749]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_StrBuilder_int_int has 3 assertions: 
 assertEquals("foo" + SEP, sb.toString()); ref {SEP, sb} [771-771],
 assertEquals(1, count[0]); ref {count} [772-772],
 assertEquals(1, count[1]); ref {count} [773-773]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_CharArray has 3 assertions: 
 assertEquals("foo" + SEP, sb.toString()); ref {SEP, sb} [795-795],
 assertEquals(1, count[0]); ref {count} [796-796],
 assertEquals(1, count[1]); ref {count} [797-797]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_CharArray_int_int has 3 assertions: 
 assertEquals("foo" + SEP, sb.toString()); ref {SEP, sb} [819-819],
 assertEquals(1, count[0]); ref {count} [820-820],
 assertEquals(1, count[1]); ref {count} [821-821]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_Boolean has 2 assertions: 
 assertEquals("true" + SEP, sb.toString()); ref {SEP, sb} [829-829],
 assertEquals("false" + SEP, sb.toString()); ref {SEP, sb} [833-833]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendln_PrimitiveNumber has 4 assertions: 
 assertEquals("0" + SEP, sb.toString()); ref {SEP, sb} [841-841],
 assertEquals("1" + SEP, sb.toString()); ref {SEP, sb} [845-845],
 assertEquals("2.3" + SEP, sb.toString()); ref {SEP, sb} [849-849],
 assertEquals("4.5" + SEP, sb.toString()); ref {SEP, sb} [853-853]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendPadding has 6 assertions: 
 assertEquals("foo", sb.toString()); ref {sb} [861-861],
 assertEquals("foo", sb.toString()); ref {sb} [864-864],
 assertEquals("foo", sb.toString()); ref {sb} [867-867],
 assertEquals("foo-", sb.toString()); ref {sb} [870-870],
 assertEquals(20, sb.length()); ref {sb} [873-873],
 // 12345678901234567890
assertEquals("foo-----------------", sb.toString()); ref {sb} [875-875]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendFixedWidthPadLeft has 9 assertions: 
 assertEquals("", sb.toString()); ref {sb} [883-883],
 assertEquals("", sb.toString()); ref {sb} [887-887],
 assertEquals("o", sb.toString()); ref {sb} [891-891],
 assertEquals("oo", sb.toString()); ref {sb} [895-895],
 assertEquals("foo", sb.toString()); ref {sb} [899-899],
 assertEquals("-foo", sb.toString()); ref {sb} [903-903],
 assertEquals(10, sb.length()); ref {sb} [907-907],
 // 1234567890
assertEquals("-------foo", sb.toString()); ref {sb} [909-909],
 assertEquals("-null", sb.toString()); ref {sb} [914-914]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendFixedWidthPadLeft_int has 8 assertions: 
 assertEquals("", sb.toString()); ref {sb} [922-922],
 assertEquals("", sb.toString()); ref {sb} [926-926],
 assertEquals("3", sb.toString()); ref {sb} [930-930],
 assertEquals("23", sb.toString()); ref {sb} [934-934],
 assertEquals("123", sb.toString()); ref {sb} [938-938],
 assertEquals("-123", sb.toString()); ref {sb} [942-942],
 assertEquals(10, sb.length()); ref {sb} [946-946],
 // 1234567890
assertEquals("-------123", sb.toString()); ref {sb} [948-948]
[m[m31.08.2022 - 15:15:23.140 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendFixedWidthPadRight has 9 assertions: 
 assertEquals("", sb.toString()); ref {sb} [956-956],
 assertEquals("", sb.toString()); ref {sb} [960-960],
 assertEquals("f", sb.toString()); ref {sb} [964-964],
 assertEquals("fo", sb.toString()); ref {sb} [968-968],
 assertEquals("foo", sb.toString()); ref {sb} [972-972],
 assertEquals("foo-", sb.toString()); ref {sb} [976-976],
 assertEquals(10, sb.length()); ref {sb} [980-980],
 // 1234567890
assertEquals("foo-------", sb.toString()); ref {sb} [982-982],
 assertEquals("null-", sb.toString()); ref {sb} [987-987]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testLang299 has 1 assertions: 
 assertEquals("f", sb.toString()); ref {sb} [995-995]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendFixedWidthPadRight_int has 8 assertions: 
 assertEquals("", sb.toString()); ref {sb} [1003-1003],
 assertEquals("", sb.toString()); ref {sb} [1007-1007],
 assertEquals("1", sb.toString()); ref {sb} [1011-1011],
 assertEquals("12", sb.toString()); ref {sb} [1015-1015],
 assertEquals("123", sb.toString()); ref {sb} [1019-1019],
 assertEquals("123-", sb.toString()); ref {sb} [1023-1023],
 assertEquals(10, sb.length()); ref {sb} [1027-1027],
 // 1234567890
assertEquals("123-------", sb.toString()); ref {sb} [1029-1029]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppend_FormattedString has 4 assertions: 
 assertEquals("Hi", sb.toString()); ref {sb} [1039-1039],
 assertEquals("Hi", sb.toString()); ref {sb} [1043-1043],
 assertEquals("Hi Alice", sb.toString()); ref {sb} [1047-1047],
 assertEquals(expected, sb.toString()); ref {expected, sb} [1054-1054]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendAll_Array has 4 assertions: 
 assertEquals("", sb.toString()); ref {sb} [1062-1062],
 assertEquals("", sb.toString()); ref {sb} [1066-1066],
 assertEquals("foobarbaz", sb.toString()); ref {sb} [1070-1070],
 assertEquals("foobarbaz", sb.toString()); ref {sb} [1074-1074]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendAll_Collection has 3 assertions: 
 assertEquals("", sb.toString()); ref {sb} [1082-1082],
 assertEquals("", sb.toString()); ref {sb} [1086-1086],
 assertEquals("foobarbaz", sb.toString()); ref {sb} [1090-1090]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendAll_Iterator has 3 assertions: 
 assertEquals("", sb.toString()); ref {sb} [1098-1098],
 assertEquals("", sb.toString()); ref {sb} [1102-1102],
 assertEquals("foobarbaz", sb.toString()); ref {sb} [1106-1106]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendWithSeparators_Array has 5 assertions: 
 assertEquals("", sb.toString()); ref {sb} [1114-1114],
 assertEquals("", sb.toString()); ref {sb} [1118-1118],
 assertEquals("foo,bar,baz", sb.toString()); ref {sb} [1122-1122],
 assertEquals("foobarbaz", sb.toString()); ref {sb} [1126-1126],
 assertEquals("foo,,baz", sb.toString()); ref {sb} [1130-1130]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendWithSeparators_Collection has 5 assertions: 
 assertEquals("", sb.toString()); ref {sb} [1138-1138],
 assertEquals("", sb.toString()); ref {sb} [1142-1142],
 assertEquals("foo,bar,baz", sb.toString()); ref {sb} [1146-1146],
 assertEquals("foobarbaz", sb.toString()); ref {sb} [1150-1150],
 assertEquals("foo,,baz", sb.toString()); ref {sb} [1154-1154]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendWithSeparators_Iterator has 5 assertions: 
 assertEquals("", sb.toString()); ref {sb} [1162-1162],
 assertEquals("", sb.toString()); ref {sb} [1166-1166],
 assertEquals("foo,bar,baz", sb.toString()); ref {sb} [1170-1170],
 assertEquals("foobarbaz", sb.toString()); ref {sb} [1174-1174],
 assertEquals("foo,,baz", sb.toString()); ref {sb} [1178-1178]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendWithSeparatorsWithNullText has 2 assertions: 
 assertEquals("foo,null,baz", sb.toString()); ref {sb} [1187-1187],
 assertEquals("foo,null,baz", sb.toString()); ref {sb} [1191-1191]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendSeparator_String has 3 assertions: 
 assertEquals("", sb.toString()); ref {sb} [1199-1199],
 assertEquals("foo", sb.toString()); ref {sb} [1201-1201],
 assertEquals("foo,", sb.toString()); ref {sb} [1203-1203]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendSeparator_String_String has 7 assertions: 
 assertEquals("", sb.toString()); ref {sb} [1214-1214],
 assertEquals("", sb.toString()); ref {sb} [1216-1216],
 assertEquals(startSeparator, sb.toString()); ref {startSeparator, sb} [1218-1218],
 assertEquals(startSeparator, sb.toString()); ref {startSeparator, sb} [1220-1220],
 assertEquals(startSeparator, sb.toString()); ref {startSeparator, sb} [1222-1222],
 assertEquals(startSeparator + foo, sb.toString()); ref {foo, startSeparator, sb} [1224-1224],
 assertEquals(startSeparator + foo + standardSeparator, sb.toString()); ref {standardSeparator, foo, startSeparator, sb} [1226-1226]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendSeparator_char has 3 assertions: 
 assertEquals("", sb.toString()); ref {sb} [1234-1234],
 assertEquals("foo", sb.toString()); ref {sb} [1236-1236],
 assertEquals("foo,", sb.toString()); ref {sb} [1238-1238]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendSeparator_char_char has 3 assertions: 
 assertEquals(String.valueOf(startSeparator), sb.toString()); ref {startSeparator, String, sb} [1247-1247],
 assertEquals(String.valueOf(startSeparator) + foo, sb.toString()); ref {foo, startSeparator, String, sb} [1249-1249],
 assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString()); ref {standardSeparator, foo, startSeparator, String, sb} [1251-1251]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendSeparator_String_int has 4 assertions: 
 assertEquals("", sb.toString()); ref {sb} [1259-1259],
 assertEquals("foo", sb.toString()); ref {sb} [1261-1261],
 assertEquals("foo,", sb.toString()); ref {sb} [1263-1263],
 assertEquals("foo,", sb.toString()); ref {sb} [1266-1266]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testAppendSeparator_char_int has 4 assertions: 
 assertEquals("", sb.toString()); ref {sb} [1274-1274],
 assertEquals("foo", sb.toString()); ref {sb} [1276-1276],
 assertEquals("foo,", sb.toString()); ref {sb} [1278-1278],
 assertEquals("foo,", sb.toString()); ref {sb} [1281-1281]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testInsert has 28 assertions: 
 assertEquals("barbaz", sb.toString()); ref {sb} [1290-1290],
 assertEquals("barbaz", sb.toString()); ref {sb} [1307-1307],
 assertEquals("foobarbaz", sb.toString()); ref {sb} [1310-1310],
 assertEquals("barbaz", sb.toString()); ref {sb} [1314-1314],
 assertEquals("barbaz", sb.toString()); ref {sb} [1331-1331],
 assertEquals("foobarbaz", sb.toString()); ref {sb} [1334-1334],
 assertEquals("barbaz", sb.toString()); ref {sb} [1338-1338],
 assertEquals("barbaz", sb.toString()); ref {sb} [1355-1355],
 assertEquals("barbaz", sb.toString()); ref {sb} [1358-1358],
 assertEquals("foobarbaz", sb.toString()); ref {sb} [1361-1361],
 assertEquals("barbaz", sb.toString()); ref {sb} [1365-1365],
 assertEquals("barbaz", sb.toString()); ref {sb} [1382-1382],
 assertEquals("barbaz", sb.toString()); ref {sb} [1385-1385],
 assertEquals("barbaz", sb.toString()); ref {sb} [1416-1416],
 assertEquals("foobarbaz", sb.toString()); ref {sb} [1419-1419],
 assertEquals("barbaz", sb.toString()); ref {sb} [1423-1423],
 assertEquals("truebarbaz", sb.toString()); ref {sb} [1440-1440],
 assertEquals("falsetruebarbaz", sb.toString()); ref {sb} [1443-1443],
 assertEquals("barbaz", sb.toString()); ref {sb} [1447-1447],
 assertEquals("!barbaz", sb.toString()); ref {sb} [1464-1464],
 assertEquals("barbaz", sb.toString()); ref {sb} [1468-1468],
 assertEquals("0barbaz", sb.toString()); ref {sb} [1485-1485],
 assertEquals("barbaz", sb.toString()); ref {sb} [1489-1489],
 assertEquals("1barbaz", sb.toString()); ref {sb} [1506-1506],
 assertEquals("barbaz", sb.toString()); ref {sb} [1510-1510],
 assertEquals("2.3barbaz", sb.toString()); ref {sb} [1527-1527],
 assertEquals("barbaz", sb.toString()); ref {sb} [1531-1531],
 assertEquals("4.5barbaz", sb.toString()); ref {sb} [1548-1548]
[m[m31.08.2022 - 15:15:23.141 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrBuilderAppendInsertTest::testInsertWithNullText has 8 assertions: 
 assertEquals("barbaz", sb.toString()); ref {sb} [1557-1557],
 assertEquals("nullbarbaz", sb.toString()); ref {sb} [1574-1574],
 assertEquals("foonullbarbaz", sb.toString()); ref {sb} [1577-1577],
 assertEquals("barbaz", sb.toString()); ref {sb} [1581-1581],
 assertEquals("nullbarbaz", sb.toString()); ref {sb} [1598-1598],
 assertEquals("foonullbarbaz", sb.toString()); ref {sb} [1601-1601],
 assertEquals("nullfoonullbarbaz", sb.toString()); ref {sb} [1604-1604],
 assertEquals("nullnullfoonullbarbaz", sb.toString()); ref {sb} [1607-1607]
[m[m31.08.2022 - 15:15:23.142 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.146 [INFO ] ParsingStrategy.parseTestSuite() - Found 30 test cases
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testBoolean has 4 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [103-103],
 assertEquals(Boolean.class, diff.getType()); ref {diff} [105-105],
 assertEquals(Boolean.TRUE, diff.getLeft()); ref {Boolean.TRUE, diff, Boolean} [106-106],
 assertEquals(Boolean.FALSE, diff.getRight()); ref {Boolean.FALSE, diff, Boolean} [107-107]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testBooleanArray has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [116-116],
 assertArrayEquals(ArrayUtils.toObject(class1.booleanArrayField), (Object[]) diff.getLeft()); ref {class1.booleanArrayField, class1, ArrayUtils, diff} [118-119],
 assertArrayEquals(ArrayUtils.toObject(class2.booleanArrayField), (Object[]) diff.getRight()); ref {class2.booleanArrayField, class2, ArrayUtils, diff} [120-121]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testByte has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [131-131],
 assertEquals(Byte.valueOf(class1.byteField), diff.getLeft()); ref {class1.byteField, class1, Byte, diff} [133-133],
 assertEquals(Byte.valueOf(class2.byteField), diff.getRight()); ref {class2, Byte, diff, class2.byteField} [134-134]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testByteArray has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [143-143],
 assertArrayEquals(ArrayUtils.toObject(class1.byteArrayField), (Object[]) diff.getLeft()); ref {class1, ArrayUtils, diff, class1.byteArrayField} [145-146],
 assertArrayEquals(ArrayUtils.toObject(class2.byteArrayField), (Object[]) diff.getRight()); ref {class2, ArrayUtils, class2.byteArrayField, diff} [147-148]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testChar has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [157-157],
 assertEquals(Character.valueOf(class1.charField), diff.getLeft()); ref {Character, class1, class1.charField, diff} [159-159],
 assertEquals(Character.valueOf(class2.charField), diff.getRight()); ref {Character, class2, diff, class2.charField} [160-160]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testCharArray has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [170-170],
 assertArrayEquals(ArrayUtils.toObject(class1.charArrayField), (Object[]) diff.getLeft()); ref {class1.charArrayField, class1, ArrayUtils, diff} [172-173],
 assertArrayEquals(ArrayUtils.toObject(class2.charArrayField), (Object[]) diff.getRight()); ref {class2, class2.charArrayField, ArrayUtils, diff} [174-175]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testDouble has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [185-185],
 assertEquals(Double.valueOf(class1.doubleField), diff.getLeft()); ref {class1, diff, Double, class1.doubleField} [187-187],
 assertEquals(Double.valueOf(class2.doubleField), diff.getRight()); ref {class2, class2.doubleField, diff, Double} [188-188]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testDoubleArray has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [198-198],
 assertArrayEquals(ArrayUtils.toObject(class1.doubleArrayField), (Object[]) diff.getLeft()); ref {class1.doubleArrayField, class1, ArrayUtils, diff} [200-201],
 assertArrayEquals(ArrayUtils.toObject(class2.doubleArrayField), (Object[]) diff.getRight()); ref {class2.doubleArrayField, class2, ArrayUtils, diff} [202-203]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testFloat has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [212-212],
 assertEquals(Float.valueOf(class1.floatField), diff.getLeft()); ref {Float, class1.floatField, class1, diff} [214-214],
 assertEquals(Float.valueOf(class2.floatField), diff.getRight()); ref {Float, class2, class2.floatField, diff} [215-215]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testFloatArray has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [225-225],
 assertArrayEquals(ArrayUtils.toObject(class1.floatArrayField), (Object[]) diff.getLeft()); ref {class1, ArrayUtils, class1.floatArrayField, diff} [227-228],
 assertArrayEquals(ArrayUtils.toObject(class2.floatArrayField), (Object[]) diff.getRight()); ref {class2.floatArrayField, class2, ArrayUtils, diff} [229-230]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testInt has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [240-240],
 assertEquals(Integer.valueOf(class1.intField), diff.getLeft()); ref {Integer, class1, diff, class1.intField} [242-242],
 assertEquals(Integer.valueOf(class2.intField), diff.getRight()); ref {Integer, class2, diff, class2.intField} [243-243]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testIntArray has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [253-253],
 assertArrayEquals(ArrayUtils.toObject(class1.intArrayField), (Object[]) diff.getLeft()); ref {class1.intArrayField, class1, ArrayUtils, diff} [255-256],
 assertArrayEquals(ArrayUtils.toObject(class2.intArrayField), (Object[]) diff.getRight()); ref {class2, ArrayUtils, diff, class2.intArrayField} [257-258]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testLong has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [267-267],
 assertEquals(Long.valueOf(class1.longField), diff.getLeft()); ref {class1, Long, diff, class1.longField} [269-269],
 assertEquals(Long.valueOf(class2.longField), diff.getRight()); ref {class2, Long, diff, class2.longField} [270-270]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testLongArray has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [280-280],
 assertArrayEquals(ArrayUtils.toObject(class1.longArrayField), (Object[]) diff.getLeft()); ref {class1, ArrayUtils, diff, class1.longArrayField} [282-283],
 assertArrayEquals(ArrayUtils.toObject(class2.longArrayField), (Object[]) diff.getRight()); ref {class2, ArrayUtils, diff, class2.longArrayField} [284-285]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testShort has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [294-294],
 assertEquals(Short.valueOf(class1.shortField), diff.getLeft()); ref {class1.shortField, class1, diff, Short} [296-296],
 assertEquals(Short.valueOf(class2.shortField), diff.getRight()); ref {class2.shortField, class2, diff, Short} [297-297]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testShortArray has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [307-307],
 assertArrayEquals(ArrayUtils.toObject(class1.shortArrayField), (Object[]) diff.getLeft()); ref {class1.shortArrayField, class1, ArrayUtils, diff} [309-310],
 assertArrayEquals(ArrayUtils.toObject(class2.shortArrayField), (Object[]) diff.getRight()); ref {class2, ArrayUtils, diff, class2.shortArrayField} [311-312]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testObject has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [321-321],
 assertEquals(class1.objectField, diff.getLeft()); ref {class1.objectField, class1, diff} [323-323],
 assertEquals(class2.objectField, diff.getRight()); ref {class2, diff, class2.objectField} [324-324]
[m[m31.08.2022 - 15:15:23.147 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testObjectsSameAndEqual has 3 assertions: 
 assertTrue(left.objectField == right.objectField); ref {left, right.objectField, left.objectField, right} [337-337],
 assertTrue(left.objectField.equals(right.objectField)); ref {left, right.objectField, left.objectField, right} [338-338],
 assertEquals(0, list.getNumberOfDiffs()); ref {list} [341-341]
[m[m31.08.2022 - 15:15:23.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testObjectsNotSameButEqual has 3 assertions: 
 assertFalse(left.objectField == right.objectField); ref {left, right.objectField, left.objectField, right} [353-353],
 assertTrue(left.objectField.equals(right.objectField)); ref {left, right.objectField, left.objectField, right} [354-354],
 assertEquals(0, list.getNumberOfDiffs()); ref {list} [357-357]
[m[m31.08.2022 - 15:15:23.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testObjectsNotSameNorEqual has 3 assertions: 
 assertFalse(left.objectField == right.objectField); ref {left, right.objectField, left.objectField, right} [369-369],
 assertFalse(left.objectField.equals(right.objectField)); ref {left, right.objectField, left.objectField, right} [370-370],
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [373-373]
[m[m31.08.2022 - 15:15:23.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testObjectArray has 3 assertions: 
 assertEquals(1, list.getNumberOfDiffs()); ref {list} [382-382],
 assertArrayEquals(class1.objectArrayField, (Object[]) diff.getLeft()); ref {class1, class1.objectArrayField, diff} [384-384],
 assertArrayEquals(class2.objectArrayField, (Object[]) diff.getRight()); ref {class2, diff, class2.objectArrayField} [385-385]
[m[m31.08.2022 - 15:15:23.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testObjectArrayEqual has 1 assertions: 
 assertEquals(0, list.getNumberOfDiffs()); ref {list} [395-395]
[m[m31.08.2022 - 15:15:23.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testByteArrayEqualAsObject has 1 assertions: 
 assertEquals(0, list.getNumberOfDiffs()); ref {list} [413-413]
[m[m31.08.2022 - 15:15:23.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testNullLhs has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testNullRhs has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testSameObjectIgnoresAppends has 1 assertions: 
 assertEquals(0, list.getNumberOfDiffs()); ref {list} [434-434]
[m[m31.08.2022 - 15:15:23.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testSimilarObjectIgnoresAppends has 1 assertions: 
 assertEquals(0, list.getNumberOfDiffs()); ref {list} [444-444]
[m[m31.08.2022 - 15:15:23.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testStylePassedToDiffResult has 2 assertions: 
 assertEquals(SHORT_STYLE, list.getToStringStyle()); ref {SHORT_STYLE, list} [452-452],
 assertEquals(ToStringStyle.MULTI_LINE_STYLE, list.getToStringStyle()); ref {ToStringStyle, ToStringStyle.MULTI_LINE_STYLE, list} [456-456]
[m[m31.08.2022 - 15:15:23.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testTriviallyEqualTestDisabled has 2 assertions: 
 assertThat(explicitTestAndNotEqual1.build().getNumberOfDiffs(), equalToOne); ref {equalToOne, explicitTestAndNotEqual1} [466-466],
 assertThat(explicitTestAndNotEqual2.build().getNumberOfDiffs(), equalToOne); ref {explicitTestAndNotEqual2, equalToOne} [472-472]
[m[m31.08.2022 - 15:15:23.148 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffBuilderTest::testTriviallyEqualTestEnabled has 3 assertions: 
 assertThat(implicitTestAndEqual.build().getNumberOfDiffs(), equalToZero); ref {implicitTestAndEqual, equalToZero} [484-484],
 assertThat(implicitTestAndNotEqual.build().getNumberOfDiffs(), equalToOne); ref {implicitTestAndNotEqual, equalToOne} [490-490],
 assertThat(explicitTestAndEqual.build().getNumberOfDiffs(), equalToZero); ref {equalToZero, explicitTestAndEqual} [495-495]
[m[m31.08.2022 - 15:15:23.149 [INFO ] ParsingStrategy.parseTestSuite() - Found 6 test cases
[m[m31.08.2022 - 15:15:23.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharEncodingTest::testConstructor has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharEncodingTest::testMustBeSupportedJava1_3_1 has 6 assertions: 
 this.assertSupportedEncoding(CharEncoding.ISO_8859_1); ref {CharEncoding, CharEncoding.ISO_8859_1} [51-51],
 this.assertSupportedEncoding(CharEncoding.US_ASCII); ref {CharEncoding, CharEncoding.US_ASCII} [52-52],
 this.assertSupportedEncoding(CharEncoding.UTF_16); ref {CharEncoding.UTF_16, CharEncoding} [53-53],
 this.assertSupportedEncoding(CharEncoding.UTF_16BE); ref {CharEncoding.UTF_16BE, CharEncoding} [54-54],
 this.assertSupportedEncoding(CharEncoding.UTF_16LE); ref {CharEncoding, CharEncoding.UTF_16LE} [55-55],
 this.assertSupportedEncoding(CharEncoding.UTF_8); ref {CharEncoding, CharEncoding.UTF_8} [56-56]
[m[m31.08.2022 - 15:15:23.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharEncodingTest::testSupported has 3 assertions: 
 assertTrue(CharEncoding.isSupported("UTF8")); ref {CharEncoding} [64-64],
 assertTrue(CharEncoding.isSupported("UTF-8")); ref {CharEncoding} [65-65],
 assertTrue(CharEncoding.isSupported("ASCII")); ref {CharEncoding} [66-66]
[m[m31.08.2022 - 15:15:23.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharEncodingTest::testNotSupported has 6 assertions: 
 assertFalse(CharEncoding.isSupported(null)); ref {CharEncoding} [71-71],
 assertFalse(CharEncoding.isSupported("")); ref {CharEncoding} [72-72],
 assertFalse(CharEncoding.isSupported(" ")); ref {CharEncoding} [73-73],
 assertFalse(CharEncoding.isSupported("\t\r\n")); ref {CharEncoding} [74-74],
 assertFalse(CharEncoding.isSupported("DOESNOTEXIST")); ref {CharEncoding} [75-75],
 assertFalse(CharEncoding.isSupported("this is not a valid encoding name")); ref {CharEncoding} [76-76]
[m[m31.08.2022 - 15:15:23.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharEncodingTest::testWorksOnJava1_1_8 has 3 assertions: 
 this.assertSupportedEncoding(CharEncoding.ISO_8859_1); ref {CharEncoding, CharEncoding.ISO_8859_1} [86-86],
 this.assertSupportedEncoding(CharEncoding.US_ASCII); ref {CharEncoding, CharEncoding.US_ASCII} [87-87],
 this.assertSupportedEncoding(CharEncoding.UTF_8); ref {CharEncoding, CharEncoding.UTF_8} [88-88]
[m[m31.08.2022 - 15:15:23.149 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharEncodingTest::testWorksOnJava1_2_2 has 3 assertions: 
 this.assertSupportedEncoding(CharEncoding.ISO_8859_1); ref {CharEncoding, CharEncoding.ISO_8859_1} [101-101],
 this.assertSupportedEncoding(CharEncoding.US_ASCII); ref {CharEncoding, CharEncoding.US_ASCII} [102-102],
 this.assertSupportedEncoding(CharEncoding.UTF_8); ref {CharEncoding, CharEncoding.UTF_8} [103-103]
[m[m31.08.2022 - 15:15:23.149 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.parseTestSuite() - Found 14 test cases
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testConstructors has 5 assertions: 
 assertEquals((short) 0, new MutableShort().shortValue()); ref {} [33-33],
 assertEquals((short) 1, new MutableShort((short) 1).shortValue()); ref {} [35-35],
 assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); ref {Short} [37-37],
 assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); ref {} [38-38],
 assertEquals((short) 2, new MutableShort("2").shortValue()); ref {} [40-40]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testGetSet has 8 assertions: 
 assertEquals((short) 0, new MutableShort().shortValue()); ref {} [51-51],
 assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); ref {Short} [52-52],
 assertEquals((short) 1, mutNum.shortValue()); ref {mutNum} [55-55],
 assertEquals(Short.valueOf((short) 1), mutNum.getValue()); ref {mutNum, Short} [56-56],
 assertEquals((short) 2, mutNum.shortValue()); ref {mutNum} [59-59],
 assertEquals(Short.valueOf((short) 2), mutNum.getValue()); ref {mutNum, Short} [60-60],
 assertEquals((short) 3, mutNum.shortValue()); ref {mutNum} [63-63],
 assertEquals(Short.valueOf((short) 3), mutNum.getValue()); ref {mutNum, Short} [64-64]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testEquals has 10 assertions: 
 assertTrue(mutNumA.equals(mutNumA)); ref {mutNumA} [77-77],
 assertTrue(mutNumA.equals(mutNumB)); ref {mutNumA, mutNumB} [78-78],
 assertTrue(mutNumB.equals(mutNumA)); ref {mutNumA, mutNumB} [79-79],
 assertTrue(mutNumB.equals(mutNumB)); ref {mutNumB} [80-80],
 assertFalse(mutNumA.equals(mutNumC)); ref {mutNumA, mutNumC} [81-81],
 assertFalse(mutNumB.equals(mutNumC)); ref {mutNumB, mutNumC} [82-82],
 assertTrue(mutNumC.equals(mutNumC)); ref {mutNumC} [83-83],
 assertFalse(mutNumA.equals(null)); ref {mutNumA} [84-84],
 assertFalse(mutNumA.equals(Short.valueOf((short) 0))); ref {mutNumA, Short} [85-85],
 assertFalse(mutNumA.equals("0")); ref {mutNumA} [86-86]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testHashCode has 4 assertions: 
 assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); ref {mutNumA} [95-95],
 assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); ref {mutNumA, mutNumB} [96-96],
 assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); ref {mutNumA, mutNumC} [97-97],
 assertTrue(mutNumA.hashCode() == Short.valueOf((short) 0).hashCode()); ref {mutNumA, Short} [98-98]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testCompareTo has 3 assertions: 
 assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0))); ref {mutNum} [105-105],
 assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1))); ref {mutNum} [106-106],
 assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1))); ref {mutNum} [107-107]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testPrimitiveValues has 6 assertions: 
 assertEquals(1.0F, mutNum.floatValue(), 0); ref {mutNum} [118-118],
 assertEquals(1.0, mutNum.doubleValue(), 0); ref {mutNum} [119-119],
 assertEquals((byte) 1, mutNum.byteValue()); ref {mutNum} [120-120],
 assertEquals((short) 1, mutNum.shortValue()); ref {mutNum} [121-121],
 assertEquals(1, mutNum.intValue()); ref {mutNum} [122-122],
 assertEquals(1L, mutNum.longValue()); ref {mutNum} [123-123]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testToShort has 2 assertions: 
 assertEquals(Short.valueOf((short) 0), new MutableShort((short) 0).toShort()); ref {Short} [128-128],
 assertEquals(Short.valueOf((short) 123), new MutableShort((short) 123).toShort()); ref {Short} [129-129]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testIncrement has 2 assertions: 
 assertEquals(2, mutNum.intValue()); ref {mutNum} [137-137],
 assertEquals(2L, mutNum.longValue()); ref {mutNum} [138-138]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testDecrement has 2 assertions: 
 assertEquals(0, mutNum.intValue()); ref {mutNum} [146-146],
 assertEquals(0L, mutNum.longValue()); ref {mutNum} [147-147]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testAddValuePrimitive has 1 assertions: 
 assertEquals((short) 2, mutNum.shortValue()); ref {mutNum} [155-155]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testAddValueObject has 1 assertions: 
 assertEquals((short) 2, mutNum.shortValue()); ref {mutNum} [163-163]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testSubtractValuePrimitive has 1 assertions: 
 assertEquals((short) 0, mutNum.shortValue()); ref {mutNum} [171-171]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testSubtractValueObject has 1 assertions: 
 assertEquals((short) 0, mutNum.shortValue()); ref {mutNum} [179-179]
[m[m31.08.2022 - 15:15:23.151 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableShortTest::testToString has 3 assertions: 
 assertEquals("0", new MutableShort((short) 0).toString()); ref {} [184-184],
 assertEquals("10", new MutableShort((short) 10).toString()); ref {} [185-185],
 assertEquals("-123", new MutableShort((short) -123).toString()); ref {} [186-186]
[m[m31.08.2022 - 15:15:23.169 [INFO ] ParsingStrategy.parseTestSuite() - Found 38 test cases
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new DateUtils()); ref {} [152-152],
 assertEquals(1, cons.length); ref {cons.length, cons} [154-154],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [155-155],
 assertTrue(Modifier.isPublic(DateUtils.class.getModifiers())); ref {Modifier} [156-156],
 assertFalse(Modifier.isFinal(DateUtils.class.getModifiers())); ref {Modifier} [157-157]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testIsSameDay_Date has 4 assertions: 
 assertTrue(DateUtils.isSameDay(datea, dateb)); ref {dateb, DateUtils, datea} [165-165],
 assertFalse(DateUtils.isSameDay(datea, dateb)); ref {dateb, DateUtils, datea} [167-167],
 assertTrue(DateUtils.isSameDay(datea, dateb)); ref {dateb, DateUtils, datea} [169-169],
 assertFalse(DateUtils.isSameDay(datea, dateb)); ref {dateb, DateUtils, datea} [171-171]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testIsSameDay_Cal has 4 assertions: 
 assertTrue(DateUtils.isSameDay(cala, calb)); ref {calb, DateUtils, cala} [183-183],
 assertFalse(DateUtils.isSameDay(cala, calb)); ref {calb, DateUtils, cala} [185-185],
 assertTrue(DateUtils.isSameDay(cala, calb)); ref {calb, DateUtils, cala} [187-187],
 assertFalse(DateUtils.isSameDay(cala, calb)); ref {calb, DateUtils, cala} [189-189]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testIsSameInstant_Date has 4 assertions: 
 assertTrue(DateUtils.isSameInstant(datea, dateb)); ref {dateb, DateUtils, datea} [201-201],
 assertFalse(DateUtils.isSameInstant(datea, dateb)); ref {dateb, DateUtils, datea} [203-203],
 assertTrue(DateUtils.isSameInstant(datea, dateb)); ref {dateb, DateUtils, datea} [205-205],
 assertFalse(DateUtils.isSameInstant(datea, dateb)); ref {dateb, DateUtils, datea} [207-207]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testIsSameInstant_Cal has 2 assertions: 
 assertFalse(DateUtils.isSameInstant(cala, calb)); ref {calb, DateUtils, cala} [223-223],
 assertTrue(DateUtils.isSameInstant(cala, calb)); ref {calb, DateUtils, cala} [226-226]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTime_Cal has 3 assertions: 
 assertTrue(DateUtils.isSameLocalTime(cala, calb)); ref {calb, DateUtils, cala} [242-242],
 assertFalse("LANG-677", DateUtils.isSameLocalTime(calc, cald)); ref {cald, calc, DateUtils} [250-250],
 assertFalse(DateUtils.isSameLocalTime(cala, calb)); ref {calb, DateUtils, cala} [253-253]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testParseDate has 3 assertions: 
 assertEquals(cal.getTime(), date); ref {date, cal} [267-267],
 assertEquals(cal.getTime(), date); ref {date, cal} [271-271],
 assertEquals(cal.getTime(), date); ref {date, cal} [275-275]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testParseDateWithLeniency has 1 assertions: 
 assertEquals(cal.getTime(), date); ref {date, cal} [306-306]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testAddYears has 9 assertions: 
 assertNotSame(base, result); ref {result, base} [319-319],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [320-320],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 1); ref {result} [321-321],
 assertNotSame(base, result); ref {result, base} [324-324],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [325-325],
 assertDate(result, 2001, 6, 5, 4, 3, 2, 1); ref {result} [326-326],
 assertNotSame(base, result); ref {result, base} [329-329],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [330-330],
 assertDate(result, 1999, 6, 5, 4, 3, 2, 1); ref {result} [331-331]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testAddMonths has 9 assertions: 
 assertNotSame(base, result); ref {result, base} [339-339],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [340-340],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 1); ref {result} [341-341],
 assertNotSame(base, result); ref {result, base} [344-344],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [345-345],
 assertDate(result, 2000, 7, 5, 4, 3, 2, 1); ref {result} [346-346],
 assertNotSame(base, result); ref {result, base} [349-349],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [350-350],
 assertDate(result, 2000, 5, 5, 4, 3, 2, 1); ref {result} [351-351]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testAddWeeks has 9 assertions: 
 assertNotSame(base, result); ref {result, base} [359-359],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [360-360],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 1); ref {result} [361-361],
 assertNotSame(base, result); ref {result, base} [364-364],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [365-365],
 assertDate(result, 2000, 6, 12, 4, 3, 2, 1); ref {result} [366-366],
 assertNotSame(base, result); ref {result, base} [369-369],
 // july
assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [370-370],
 // june
assertDate(result, 2000, 5, 28, 4, 3, 2, 1); ref {result} [371-371]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testAddDays has 9 assertions: 
 assertNotSame(base, result); ref {result, base} [379-379],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [380-380],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 1); ref {result} [381-381],
 assertNotSame(base, result); ref {result, base} [384-384],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [385-385],
 assertDate(result, 2000, 6, 6, 4, 3, 2, 1); ref {result} [386-386],
 assertNotSame(base, result); ref {result, base} [389-389],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [390-390],
 assertDate(result, 2000, 6, 4, 4, 3, 2, 1); ref {result} [391-391]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testAddHours has 9 assertions: 
 assertNotSame(base, result); ref {result, base} [399-399],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [400-400],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 1); ref {result} [401-401],
 assertNotSame(base, result); ref {result, base} [404-404],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [405-405],
 assertDate(result, 2000, 6, 5, 5, 3, 2, 1); ref {result} [406-406],
 assertNotSame(base, result); ref {result, base} [409-409],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [410-410],
 assertDate(result, 2000, 6, 5, 3, 3, 2, 1); ref {result} [411-411]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testAddMinutes has 9 assertions: 
 assertNotSame(base, result); ref {result, base} [419-419],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [420-420],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 1); ref {result} [421-421],
 assertNotSame(base, result); ref {result, base} [424-424],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [425-425],
 assertDate(result, 2000, 6, 5, 4, 4, 2, 1); ref {result} [426-426],
 assertNotSame(base, result); ref {result, base} [429-429],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [430-430],
 assertDate(result, 2000, 6, 5, 4, 2, 2, 1); ref {result} [431-431]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testAddSeconds has 9 assertions: 
 assertNotSame(base, result); ref {result, base} [439-439],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [440-440],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 1); ref {result} [441-441],
 assertNotSame(base, result); ref {result, base} [444-444],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [445-445],
 assertDate(result, 2000, 6, 5, 4, 3, 3, 1); ref {result} [446-446],
 assertNotSame(base, result); ref {result, base} [449-449],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [450-450],
 assertDate(result, 2000, 6, 5, 4, 3, 1, 1); ref {result} [451-451]
[m[m31.08.2022 - 15:15:23.170 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testAddMilliseconds has 9 assertions: 
 assertNotSame(base, result); ref {result, base} [459-459],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [460-460],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 1); ref {result} [461-461],
 assertNotSame(base, result); ref {result, base} [464-464],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [465-465],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 2); ref {result} [466-466],
 assertNotSame(base, result); ref {result, base} [469-469],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [470-470],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 0); ref {result} [471-471]
[m[m31.08.2022 - 15:15:23.171 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testSetYears has 9 assertions: 
 assertNotSame(base, result); ref {result, base} [479-479],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [480-480],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 1); ref {result} [481-481],
 assertNotSame(base, result); ref {result, base} [484-484],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [485-485],
 assertDate(result, 2008, 6, 5, 4, 3, 2, 1); ref {result} [486-486],
 assertNotSame(base, result); ref {result, base} [489-489],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [490-490],
 assertDate(result, 2005, 6, 5, 4, 3, 2, 1); ref {result} [491-491]
[m[m31.08.2022 - 15:15:23.171 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testSetMonths has 6 assertions: 
 assertNotSame(base, result); ref {result, base} [499-499],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [500-500],
 assertDate(result, 2000, 5, 5, 4, 3, 2, 1); ref {result} [501-501],
 assertNotSame(base, result); ref {result, base} [504-504],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [505-505],
 assertDate(result, 2000, 1, 5, 4, 3, 2, 1); ref {result} [506-506]
[m[m31.08.2022 - 15:15:23.171 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testSetDays has 6 assertions: 
 assertNotSame(base, result); ref {result, base} [521-521],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [522-522],
 assertDate(result, 2000, 6, 1, 4, 3, 2, 1); ref {result} [523-523],
 assertNotSame(base, result); ref {result, base} [526-526],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [527-527],
 assertDate(result, 2000, 6, 29, 4, 3, 2, 1); ref {result} [528-528]
[m[m31.08.2022 - 15:15:23.171 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testSetHours has 6 assertions: 
 assertNotSame(base, result); ref {result, base} [543-543],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [544-544],
 assertDate(result, 2000, 6, 5, 0, 3, 2, 1); ref {result} [545-545],
 assertNotSame(base, result); ref {result, base} [548-548],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [549-549],
 assertDate(result, 2000, 6, 5, 23, 3, 2, 1); ref {result} [550-550]
[m[m31.08.2022 - 15:15:23.171 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testSetMinutes has 6 assertions: 
 assertNotSame(base, result); ref {result, base} [565-565],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [566-566],
 assertDate(result, 2000, 6, 5, 4, 0, 2, 1); ref {result} [567-567],
 assertNotSame(base, result); ref {result, base} [570-570],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [571-571],
 assertDate(result, 2000, 6, 5, 4, 59, 2, 1); ref {result} [572-572]
[m[m31.08.2022 - 15:15:23.171 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testSetSeconds has 6 assertions: 
 assertNotSame(base, result); ref {result, base} [587-587],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [588-588],
 assertDate(result, 2000, 6, 5, 4, 3, 0, 1); ref {result} [589-589],
 assertNotSame(base, result); ref {result, base} [592-592],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [593-593],
 assertDate(result, 2000, 6, 5, 4, 3, 59, 1); ref {result} [594-594]
[m[m31.08.2022 - 15:15:23.171 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testSetMilliseconds has 6 assertions: 
 assertNotSame(base, result); ref {result, base} [609-609],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [610-610],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 0); ref {result} [611-611],
 assertNotSame(base, result); ref {result, base} [614-614],
 assertDate(base, 2000, 6, 5, 4, 3, 2, 1); ref {base} [615-615],
 assertDate(result, 2000, 6, 5, 4, 3, 2, 999); ref {result} [616-616]
[m[m31.08.2022 - 15:15:23.171 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testToCalendar has 1 assertions: 
 assertEquals("Failed to convert to a Calendar and back", date1, DateUtils.toCalendar(date1).getTime()); ref {date1, DateUtils} [642-642]
[m[m31.08.2022 - 15:15:23.171 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testRound has 59 assertions: 
 // tests for public static Date round(Date date, int field)
assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date1, Calendar.YEAR)); ref {dateParser, Calendar, DateUtils, date1, Calendar.YEAR} [660-662],
 assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date2, Calendar.YEAR)); ref {dateParser, Calendar, date2, DateUtils, Calendar.YEAR} [663-665],
 assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date1, Calendar.MONTH)); ref {Calendar.MONTH, dateParser, Calendar, DateUtils, date1} [666-668],
 assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round(date2, Calendar.MONTH)); ref {Calendar.MONTH, dateParser, Calendar, date2, DateUtils} [669-671],
 assertEquals("round semimonth-0 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date0, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, DateUtils, date0} [672-674],
 assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round(date1, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, DateUtils, date1} [675-677],
 assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round(date2, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, date2, DateUtils} [678-680],
 assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round(date1, Calendar.DATE)); ref {dateParser, Calendar.DATE, Calendar, DateUtils, date1} [683-685],
 assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round(date2, Calendar.DATE)); ref {dateParser, Calendar.DATE, Calendar, date2, DateUtils} [686-688],
 assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.round(date1, Calendar.HOUR)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.HOUR} [689-691],
 assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.round(date2, Calendar.HOUR)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.HOUR} [692-694],
 assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.round(date1, Calendar.MINUTE)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.MINUTE} [695-697],
 assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.round(date2, Calendar.MINUTE)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.MINUTE} [698-700],
 assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round(date1, Calendar.SECOND)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.SECOND} [701-703],
 assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round(date2, Calendar.SECOND)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.SECOND} [704-706],
 assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round(dateAmPm1, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateAmPm1, dateTimeParser, DateUtils} [707-709],
 assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round(dateAmPm2, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, dateAmPm2, DateUtils} [710-712],
 assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round(dateAmPm3, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, dateAmPm3} [713-715],
 assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round(dateAmPm4, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, dateAmPm4} [716-718],
 // tests for public static Date round(Object date, int field)
assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) date1, Calendar.YEAR)); ref {dateParser, Calendar, DateUtils, date1, Calendar.YEAR} [721-723],
 assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) date2, Calendar.YEAR)); ref {dateParser, Calendar, date2, DateUtils, Calendar.YEAR} [724-726],
 assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round((Object) date1, Calendar.MONTH)); ref {Calendar.MONTH, dateParser, Calendar, DateUtils, date1} [727-729],
 assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round((Object) date2, Calendar.MONTH)); ref {Calendar.MONTH, dateParser, Calendar, date2, DateUtils} [730-732],
 assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round((Object) date1, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, DateUtils, date1} [733-735],
 assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round((Object) date2, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, date2, DateUtils} [736-738],
 assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round((Object) date1, Calendar.DATE)); ref {dateParser, Calendar.DATE, Calendar, DateUtils, date1} [739-741],
 assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round((Object) date2, Calendar.DATE)); ref {dateParser, Calendar.DATE, Calendar, date2, DateUtils} [742-744],
 assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.round((Object) date1, Calendar.HOUR)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.HOUR} [745-747],
 assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.round((Object) date2, Calendar.HOUR)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.HOUR} [748-750],
 assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.round((Object) date1, Calendar.MINUTE)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.MINUTE} [751-753],
 assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.round((Object) date2, Calendar.MINUTE)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.MINUTE} [754-756],
 assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round((Object) date1, Calendar.SECOND)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.SECOND} [757-759],
 assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round((Object) date2, Calendar.SECOND)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.SECOND} [760-762],
 assertEquals("round calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round((Object) cal1, Calendar.SECOND)); ref {Calendar, dateTimeParser, DateUtils, cal1, Calendar.SECOND} [763-765],
 assertEquals("round calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round((Object) cal2, Calendar.SECOND)); ref {Calendar, cal2, dateTimeParser, DateUtils, Calendar.SECOND} [766-768],
 assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round((Object) dateAmPm1, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateAmPm1, dateTimeParser, DateUtils} [769-771],
 assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) dateAmPm2, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, dateAmPm2, DateUtils} [772-774],
 assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) dateAmPm3, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, dateAmPm3} [775-777],
 assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round((Object) dateAmPm4, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, dateAmPm4} [778-780],
 assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round((Object) calAmPm1, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, calAmPm1, dateTimeParser, DateUtils} [803-805],
 assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) calAmPm2, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, calAmPm2, dateTimeParser, DateUtils} [806-808],
 assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) calAmPm3, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, calAmPm3} [809-811],
 assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round((Object) calAmPm4, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, calAmPm4} [812-814],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date4, Calendar.DATE)); ref {Calendar.DATE, Calendar, date4, dateTimeParser, DateUtils} [820-822],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal4, Calendar.DATE)); ref {Calendar.DATE, Calendar, cal4, dateTimeParser, DateUtils} [823-825],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date5, Calendar.DATE)); ref {Calendar.DATE, Calendar, date5, dateTimeParser, DateUtils} [826-828],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal5, Calendar.DATE)); ref {Calendar.DATE, Calendar, cal5, dateTimeParser, DateUtils} [829-831],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date6, Calendar.DATE)); ref {date6, Calendar.DATE, Calendar, dateTimeParser, DateUtils} [832-834],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal6, Calendar.DATE)); ref {cal6, Calendar.DATE, Calendar, dateTimeParser, DateUtils} [835-837],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date7, Calendar.DATE)); ref {date7, Calendar.DATE, Calendar, dateTimeParser, DateUtils} [838-840],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal7, Calendar.DATE)); ref {cal7, Calendar.DATE, Calendar, dateTimeParser, DateUtils} [841-843],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.000"), DateUtils.round(date4, Calendar.HOUR_OF_DAY)); ref {Calendar, date4, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [845-847],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.000"), DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY)); ref {Calendar, cal4, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [848-850],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round(date5, Calendar.HOUR_OF_DAY)); ref {Calendar, date5, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [852-854],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY)); ref {Calendar, cal5, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [855-857],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round(date6, Calendar.HOUR_OF_DAY)); ref {date6, Calendar, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [858-860],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY)); ref {cal6, Calendar, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [861-863],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.round(date7, Calendar.HOUR_OF_DAY)); ref {date7, Calendar, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [864-866],
 assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY)); ref {cal7, Calendar, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [867-869]
[m[m31.08.2022 - 15:15:23.171 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testRoundLang346 has 8 assertions: 
 assertEquals("Minute Round Up Failed", dateTimeParser.parse("July 2, 2007 08:09:00.000"), DateUtils.round(date, Calendar.MINUTE)); ref {date, Calendar, dateTimeParser, DateUtils, Calendar.MINUTE} [891-893],
 assertEquals("Minute No Round Failed", dateTimeParser.parse("July 2, 2007 08:08:00.000"), DateUtils.round(date, Calendar.MINUTE)); ref {date, Calendar, dateTimeParser, DateUtils, Calendar.MINUTE} [897-899],
 assertEquals("Second Round Up with 600 Milli Seconds Failed", dateTimeParser.parse("July 2, 2007 08:08:51.000"), DateUtils.round(date, Calendar.SECOND)); ref {date, Calendar, dateTimeParser, DateUtils, Calendar.SECOND} [905-907],
 assertEquals("Second Round Down with 200 Milli Seconds Failed", dateTimeParser.parse("July 2, 2007 08:08:50.000"), DateUtils.round(date, Calendar.SECOND)); ref {date, Calendar, dateTimeParser, DateUtils, Calendar.SECOND} [912-914],
 assertEquals("Second Round Up with 200 Milli Seconds Failed", dateTimeParser.parse("July 2, 2007 08:08:21.000"), DateUtils.round(date, Calendar.SECOND)); ref {date, Calendar, dateTimeParser, DateUtils, Calendar.SECOND} [919-921],
 assertEquals("Second Round Down with 200 Milli Seconds Failed", dateTimeParser.parse("July 2, 2007 08:08:20.000"), DateUtils.round(date, Calendar.SECOND)); ref {date, Calendar, dateTimeParser, DateUtils, Calendar.SECOND} [926-928],
 assertEquals("Hour Round Down Failed", dateTimeParser.parse("July 2, 2007 08:00:00.000"), DateUtils.round(date, Calendar.HOUR)); ref {date, Calendar, dateTimeParser, DateUtils, Calendar.HOUR} [932-934],
 assertEquals("Hour Round Up Failed", dateTimeParser.parse("July 2, 2007 09:00:00.000"), DateUtils.round(date, Calendar.HOUR)); ref {date, Calendar, dateTimeParser, DateUtils, Calendar.HOUR} [938-940]
[m[m31.08.2022 - 15:15:23.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testTruncate has 47 assertions: 
 // tests public static Date truncate(Date date, int field)
assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate(date1, Calendar.YEAR)); ref {dateParser, Calendar, DateUtils, date1, Calendar.YEAR} [951-953],
 assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate(date2, Calendar.YEAR)); ref {dateParser, Calendar, date2, DateUtils, Calendar.YEAR} [954-956],
 assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, Calendar.MONTH)); ref {Calendar.MONTH, dateParser, Calendar, DateUtils, date1} [957-959],
 assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate(date2, Calendar.MONTH)); ref {Calendar.MONTH, dateParser, Calendar, date2, DateUtils} [960-962],
 assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, DateUtils, date1} [963-965],
 assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate(date2, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, date2, DateUtils} [966-968],
 assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate(date1, Calendar.DATE)); ref {dateParser, Calendar.DATE, Calendar, DateUtils, date1} [969-971],
 assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate(date2, Calendar.DATE)); ref {dateParser, Calendar.DATE, Calendar, date2, DateUtils} [972-974],
 assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate(date1, Calendar.HOUR)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.HOUR} [975-977],
 assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate(date2, Calendar.HOUR)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.HOUR} [978-980],
 assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate(date1, Calendar.MINUTE)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.MINUTE} [981-983],
 assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate(date2, Calendar.MINUTE)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.MINUTE} [984-986],
 assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate(date1, Calendar.SECOND)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.SECOND} [987-989],
 assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate(date2, Calendar.SECOND)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.SECOND} [990-992],
 assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm1, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateAmPm1, dateTimeParser, DateUtils} [993-995],
 assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm2, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, dateAmPm2, DateUtils} [996-998],
 assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm3, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, dateAmPm3} [999-1001],
 assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm4, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, dateAmPm4} [1002-1004],
 // tests public static Date truncate(Object date, int field)
assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate((Object) date1, Calendar.YEAR)); ref {dateParser, Calendar, DateUtils, date1, Calendar.YEAR} [1007-1009],
 assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate((Object) date2, Calendar.YEAR)); ref {dateParser, Calendar, date2, DateUtils, Calendar.YEAR} [1010-1012],
 assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, Calendar.MONTH)); ref {Calendar.MONTH, dateParser, Calendar, DateUtils, date1} [1013-1015],
 assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate((Object) date2, Calendar.MONTH)); ref {Calendar.MONTH, dateParser, Calendar, date2, DateUtils} [1016-1018],
 assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, DateUtils, date1} [1019-1021],
 assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, date2, DateUtils} [1022-1024],
 assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate((Object) date1, Calendar.DATE)); ref {dateParser, Calendar.DATE, Calendar, DateUtils, date1} [1025-1027],
 assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate((Object) date2, Calendar.DATE)); ref {dateParser, Calendar.DATE, Calendar, date2, DateUtils} [1028-1030],
 assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate((Object) date1, Calendar.HOUR)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.HOUR} [1031-1033],
 assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate((Object) date2, Calendar.HOUR)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.HOUR} [1034-1036],
 assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate((Object) date1, Calendar.MINUTE)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.MINUTE} [1037-1039],
 assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate((Object) date2, Calendar.MINUTE)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.MINUTE} [1040-1042],
 assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) date1, Calendar.SECOND)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.SECOND} [1043-1045],
 assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) date2, Calendar.SECOND)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.SECOND} [1046-1048],
 assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateAmPm1, dateTimeParser, DateUtils} [1049-1051],
 assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, dateAmPm2, DateUtils} [1052-1054],
 assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, dateAmPm3} [1055-1057],
 assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, dateAmPm4} [1058-1060],
 assertEquals("truncate calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) cal1, Calendar.SECOND)); ref {Calendar, dateTimeParser, DateUtils, cal1, Calendar.SECOND} [1062-1064],
 assertEquals("truncate calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) cal2, Calendar.SECOND)); ref {Calendar, cal2, dateTimeParser, DateUtils, Calendar.SECOND} [1065-1067],
 assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, calAmPm1, dateTimeParser, DateUtils} [1069-1071],
 assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, calAmPm2, dateTimeParser, DateUtils} [1072-1074],
 assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, calAmPm3} [1075-1077],
 assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, calAmPm4} [1078-1080],
 assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate(date3, Calendar.DATE)); ref {Calendar.DATE, Calendar, date3, dateTimeParser, DateUtils} [1103-1105],
 assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate((Object) cal3, Calendar.DATE)); ref {Calendar.DATE, Calendar, dateTimeParser, cal3, DateUtils} [1106-1108],
 // Test truncate across end of daylight saving time
assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate(date8, Calendar.DATE)); ref {date8, Calendar.DATE, Calendar, dateTimeParser, DateUtils} [1110-1112],
 assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate((Object) cal8, Calendar.DATE)); ref {cal8, Calendar.DATE, Calendar, dateTimeParser, DateUtils} [1113-1115],
 assertEquals(0, cal.get(Calendar.HOUR)); ref {Calendar, cal, Calendar.HOUR} [1134-1134]
[m[m31.08.2022 - 15:15:23.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testTruncateLang59 has 18 assertions: 
 assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT)); ref {format, oct31MDT} [1164-1164],
 assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT)); ref {oct31_01MDT, format} [1165-1165],
 assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT)); ref {oct31_01_02MDT, format} [1166-1166],
 assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT)); ref {oct31_01_02_03MDT, format} [1167-1167],
 assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT)); ref {oct31_01_02_03_04MDT, format} [1168-1168],
 assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L); ref {oct31_01MDT, gval} [1174-1174],
 // ---------- Test Truncate ----------
assertEquals("Truncate Calendar.MILLISECOND", oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND)); ref {oct31_01_02_03_04MDT, Calendar.MILLISECOND, Calendar, DateUtils} [1177-1178],
 assertEquals("Truncate Calendar.SECOND", oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND)); ref {oct31_01_02_03MDT, oct31_01_02_03_04MDT, Calendar, DateUtils, Calendar.SECOND} [1180-1181],
 assertEquals("Truncate Calendar.MINUTE", oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE)); ref {oct31_01_02_03_04MDT, oct31_01_02MDT, Calendar, DateUtils, Calendar.MINUTE} [1183-1184],
 assertEquals("Truncate Calendar.HOUR_OF_DAY", oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY)); ref {oct31_01MDT, oct31_01_02_03_04MDT, Calendar, Calendar.HOUR_OF_DAY, DateUtils} [1186-1187],
 assertEquals("Truncate Calendar.HOUR", oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR)); ref {oct31_01MDT, oct31_01_02_03_04MDT, Calendar, DateUtils, Calendar.HOUR} [1189-1190],
 assertEquals("Truncate Calendar.DATE", oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE)); ref {oct31_01_02_03_04MDT, Calendar.DATE, Calendar, oct31MDT, DateUtils} [1192-1193],
 // ---------- Test Round (down) ----------
assertEquals("Round Calendar.MILLISECOND", oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND)); ref {oct31_01_02_03_04MDT, Calendar.MILLISECOND, Calendar, DateUtils} [1197-1198],
 assertEquals("Round Calendar.SECOND", oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND)); ref {oct31_01_02_03MDT, oct31_01_02_03_04MDT, Calendar, DateUtils, Calendar.SECOND} [1200-1201],
 assertEquals("Round Calendar.MINUTE", oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE)); ref {oct31_01_02_03_04MDT, oct31_01_02MDT, Calendar, DateUtils, Calendar.MINUTE} [1203-1204],
 assertEquals("Round Calendar.HOUR_OF_DAY", oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY)); ref {oct31_01MDT, oct31_01_02_03_04MDT, Calendar, Calendar.HOUR_OF_DAY, DateUtils} [1206-1207],
 assertEquals("Round Calendar.HOUR", oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR)); ref {oct31_01MDT, oct31_01_02_03_04MDT, Calendar, DateUtils, Calendar.HOUR} [1209-1210],
 assertEquals("Round Calendar.DATE", oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE)); ref {oct31_01_02_03_04MDT, Calendar.DATE, Calendar, oct31MDT, DateUtils} [1212-1213]
[m[m31.08.2022 - 15:15:23.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testLang530 has 1 assertions: 
 // the format loses milliseconds so have to reintroduce them
assertEquals("Date not equal to itself ISO formatted and parsed", d.getTime(), d2.getTime() + d.getTime() % 1000); ref {d, d2} [1226-1226]
[m[m31.08.2022 - 15:15:23.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testCeil has 61 assertions: 
 // test javadoc
assertEquals("ceiling javadoc-1 failed", dateTimeParser.parse("March 28, 2002 14:00:00.000"), DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"), Calendar.HOUR)); ref {Calendar, dateTimeParser, DateUtils, Calendar.HOUR} [1237-1241],
 assertEquals("ceiling javadoc-2 failed", dateTimeParser.parse("April 1, 2002 00:00:00.000"), DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"), Calendar.MONTH)); ref {Calendar.MONTH, Calendar, dateTimeParser, DateUtils} [1242-1246],
 // tests public static Date ceiling(Date date, int field)
assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling(date1, Calendar.YEAR)); ref {dateParser, Calendar, DateUtils, date1, Calendar.YEAR} [1249-1251],
 assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling(date2, Calendar.YEAR)); ref {dateParser, Calendar, date2, DateUtils, Calendar.YEAR} [1252-1254],
 assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling(date1, Calendar.MONTH)); ref {Calendar.MONTH, dateParser, Calendar, DateUtils, date1} [1255-1257],
 assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2, Calendar.MONTH)); ref {Calendar.MONTH, dateParser, Calendar, date2, DateUtils} [1258-1260],
 assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling(date1, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, DateUtils, date1} [1261-1263],
 assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, date2, DateUtils} [1264-1266],
 assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling(date1, Calendar.DATE)); ref {dateParser, Calendar.DATE, Calendar, DateUtils, date1} [1267-1269],
 assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling(date2, Calendar.DATE)); ref {dateParser, Calendar.DATE, Calendar, date2, DateUtils} [1270-1272],
 assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.ceiling(date1, Calendar.HOUR)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.HOUR} [1273-1275],
 assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUtils.ceiling(date2, Calendar.HOUR)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.HOUR} [1276-1278],
 assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.ceiling(date1, Calendar.MINUTE)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.MINUTE} [1279-1281],
 assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateUtils.ceiling(date2, Calendar.MINUTE)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.MINUTE} [1282-1284],
 assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling(date1, Calendar.SECOND)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.SECOND} [1285-1287],
 assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling(date2, Calendar.SECOND)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.SECOND} [1288-1290],
 assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling(dateAmPm1, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateAmPm1, dateTimeParser, DateUtils} [1291-1293],
 assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling(dateAmPm2, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, dateAmPm2, DateUtils} [1294-1296],
 assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling(dateAmPm3, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, dateAmPm3} [1297-1299],
 assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling(dateAmPm4, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, dateAmPm4} [1300-1302],
 // tests public static Date ceiling(Object date, int field)
assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling((Object) date1, Calendar.YEAR)); ref {dateParser, Calendar, DateUtils, date1, Calendar.YEAR} [1305-1307],
 assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling((Object) date2, Calendar.YEAR)); ref {dateParser, Calendar, date2, DateUtils, Calendar.YEAR} [1308-1310],
 assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling((Object) date1, Calendar.MONTH)); ref {Calendar.MONTH, dateParser, Calendar, DateUtils, date1} [1311-1313],
 assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Object) date2, Calendar.MONTH)); ref {Calendar.MONTH, dateParser, Calendar, date2, DateUtils} [1314-1316],
 assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, DateUtils, date1} [1317-1319],
 assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH)); ref {dateParser, DateUtils.SEMI_MONTH, date2, DateUtils} [1320-1322],
 assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling((Object) date1, Calendar.DATE)); ref {dateParser, Calendar.DATE, Calendar, DateUtils, date1} [1323-1325],
 assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling((Object) date2, Calendar.DATE)); ref {dateParser, Calendar.DATE, Calendar, date2, DateUtils} [1326-1328],
 assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.ceiling((Object) date1, Calendar.HOUR)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.HOUR} [1329-1331],
 assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUtils.ceiling((Object) date2, Calendar.HOUR)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.HOUR} [1332-1334],
 assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.ceiling((Object) date1, Calendar.MINUTE)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.MINUTE} [1335-1337],
 assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateUtils.ceiling((Object) date2, Calendar.MINUTE)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.MINUTE} [1338-1340],
 assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling((Object) date1, Calendar.SECOND)); ref {Calendar, dateTimeParser, DateUtils, date1, Calendar.SECOND} [1341-1343],
 assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling((Object) date2, Calendar.SECOND)); ref {Calendar, dateTimeParser, date2, DateUtils, Calendar.SECOND} [1344-1346],
 assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateAmPm1, dateTimeParser, DateUtils} [1347-1349],
 assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, dateAmPm2, DateUtils} [1350-1352],
 assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, dateAmPm3} [1353-1355],
 assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, dateAmPm4} [1356-1358],
 assertEquals("ceiling calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling((Object) cal1, Calendar.SECOND)); ref {Calendar, dateTimeParser, DateUtils, cal1, Calendar.SECOND} [1360-1362],
 assertEquals("ceiling calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling((Object) cal2, Calendar.SECOND)); ref {Calendar, cal2, dateTimeParser, DateUtils, Calendar.SECOND} [1363-1365],
 assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, calAmPm1, dateTimeParser, DateUtils} [1367-1369],
 assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, calAmPm2, dateTimeParser, DateUtils} [1370-1372],
 assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, calAmPm3} [1373-1375],
 assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM)); ref {Calendar.AM_PM, Calendar, dateTimeParser, DateUtils, calAmPm4} [1376-1378],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date4, Calendar.DATE)); ref {Calendar.DATE, Calendar, date4, dateTimeParser, DateUtils} [1407-1409],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal4, Calendar.DATE)); ref {Calendar.DATE, Calendar, cal4, dateTimeParser, DateUtils} [1410-1412],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date5, Calendar.DATE)); ref {Calendar.DATE, Calendar, date5, dateTimeParser, DateUtils} [1413-1415],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal5, Calendar.DATE)); ref {Calendar.DATE, Calendar, cal5, dateTimeParser, DateUtils} [1416-1418],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date6, Calendar.DATE)); ref {date6, Calendar.DATE, Calendar, dateTimeParser, DateUtils} [1419-1421],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal6, Calendar.DATE)); ref {cal6, Calendar.DATE, Calendar, dateTimeParser, DateUtils} [1422-1424],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date7, Calendar.DATE)); ref {date7, Calendar.DATE, Calendar, dateTimeParser, DateUtils} [1425-1427],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal7, Calendar.DATE)); ref {cal7, Calendar.DATE, Calendar, dateTimeParser, DateUtils} [1428-1430],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY)); ref {Calendar, date4, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [1432-1434],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY)); ref {Calendar, cal4, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [1435-1437],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY)); ref {Calendar, date5, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [1439-1441],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY)); ref {Calendar, cal5, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [1442-1444],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY)); ref {date6, Calendar, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [1445-1447],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY)); ref {cal6, Calendar, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [1448-1450],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY)); ref {date7, Calendar, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [1451-1453],
 assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY)); ref {cal7, Calendar, Calendar.HOUR_OF_DAY, dateTimeParser, DateUtils} [1454-1456],
 assertEquals(0, cal.get(Calendar.HOUR)); ref {Calendar, cal, Calendar.HOUR} [1478-1478]
[m[m31.08.2022 - 15:15:23.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testIteratorEx has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testWeekIterator has 6 assertions: 
 assertWeekIterator(it, sunday); ref {sunday, it} [1532-1532],
 assertWeekIterator(it, monday); ref {it, monday} [1534-1534],
 assertWeekIterator(it, today); ref {today, it} [1536-1536],
 assertWeekIterator(it, centered); ref {centered, it} [1538-1538],
 assertWeekIterator(it, centered); ref {centered, it} [1541-1541],
 assertWeekIterator(it, centered); ref {centered, it} [1543-1543]
[m[m31.08.2022 - 15:15:23.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testMonthIterator has 4 assertions: 
 assertWeekIterator(it, dateParser.parse("January 27, 2002"), dateParser.parse("March 2, 2002")); ref {dateParser, it} [1566-1568],
 assertWeekIterator(it, dateParser.parse("January 28, 2002"), dateParser.parse("March 3, 2002")); ref {dateParser, it} [1571-1573],
 assertWeekIterator(it, dateParser.parse("October 28, 2001"), dateParser.parse("December 1, 2001")); ref {dateParser, it} [1576-1578],
 assertWeekIterator(it, dateParser.parse("October 29, 2001"), dateParser.parse("December 2, 2001")); ref {dateParser, it} [1581-1583]
[m[m31.08.2022 - 15:15:23.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testLANG799_EN_OK has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testLANG799_EN_FAIL has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testLANG799_DE_OK has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testLANG799_DE_FAIL has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.172 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsTest::testLANG799_EN_WITH_DE_LOCALE has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.178 [INFO ] ParsingStrategy.parseTestSuite() - Found 24 test cases
[m[m31.08.2022 - 15:15:23.178 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new CharUtils()); ref {} [43-43],
 assertEquals(1, cons.length); ref {cons.length, cons} [45-45],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [46-46],
 assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers())); ref {Modifier} [47-47],
 assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers())); ref {Modifier} [48-48]
[m[m31.08.2022 - 15:15:23.178 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToCharacterObject_char has 9 assertions: 
 assertEquals(new Character('a'), CharUtils.toCharacterObject('a')); ref {CharUtils} [54-54],
 assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a')); ref {CharUtils} [55-55],
 assertSame(ch, ch2); ref {ch, ch2} [60-60],
 assertEquals(i, ch.charValue()); ref {ch, i} [61-61],
 assertEquals(ch, ch2); ref {ch, ch2} [66-66],
 assertTrue(ch != ch2); ref {ch, ch2} [67-67],
 assertEquals(i, ch.charValue()); ref {ch, i} [68-68],
 assertEquals(i, ch2.charValue()); ref {i, ch2} [69-69],
 assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject('a')); ref {CharUtils} [71-71]
[m[m31.08.2022 - 15:15:23.178 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToCharacterObject_String has 5 assertions: 
 assertEquals(null, CharUtils.toCharacterObject(null)); ref {CharUtils} [76-76],
 assertEquals(null, CharUtils.toCharacterObject("")); ref {CharUtils} [77-77],
 assertEquals(new Character('a'), CharUtils.toCharacterObject("a")); ref {CharUtils} [78-78],
 assertEquals(new Character('a'), CharUtils.toCharacterObject("abc")); ref {CharUtils} [79-79],
 assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject("a")); ref {CharUtils} [80-80]
[m[m31.08.2022 - 15:15:23.178 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToChar_Character has 2 assertions: 
 assertEquals('A', CharUtils.toChar(CHARACTER_A)); ref {CHARACTER_A, CharUtils} [85-85],
 assertEquals('B', CharUtils.toChar(CHARACTER_B)); ref {CHARACTER_B, CharUtils} [86-86]
[m[m31.08.2022 - 15:15:23.178 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToChar_Character_char has 3 assertions: 
 assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X')); ref {CHARACTER_A, CharUtils} [94-94],
 assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X')); ref {CHARACTER_B, CharUtils} [95-95],
 assertEquals('X', CharUtils.toChar((Character) null, 'X')); ref {CharUtils} [96-96]
[m[m31.08.2022 - 15:15:23.178 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToChar_String has 2 assertions: 
 assertEquals('A', CharUtils.toChar("A")); ref {CharUtils} [101-101],
 assertEquals('B', CharUtils.toChar("BA")); ref {CharUtils} [102-102]
[m[m31.08.2022 - 15:15:23.178 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToChar_String_char has 4 assertions: 
 assertEquals('A', CharUtils.toChar("A", 'X')); ref {CharUtils} [113-113],
 assertEquals('B', CharUtils.toChar("BA", 'X')); ref {CharUtils} [114-114],
 assertEquals('X', CharUtils.toChar("", 'X')); ref {CharUtils} [115-115],
 assertEquals('X', CharUtils.toChar((String) null, 'X')); ref {CharUtils} [116-116]
[m[m31.08.2022 - 15:15:23.178 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToIntValue_char has 10 assertions: 
 assertEquals(0, CharUtils.toIntValue('0')); ref {CharUtils} [121-121],
 assertEquals(1, CharUtils.toIntValue('1')); ref {CharUtils} [122-122],
 assertEquals(2, CharUtils.toIntValue('2')); ref {CharUtils} [123-123],
 assertEquals(3, CharUtils.toIntValue('3')); ref {CharUtils} [124-124],
 assertEquals(4, CharUtils.toIntValue('4')); ref {CharUtils} [125-125],
 assertEquals(5, CharUtils.toIntValue('5')); ref {CharUtils} [126-126],
 assertEquals(6, CharUtils.toIntValue('6')); ref {CharUtils} [127-127],
 assertEquals(7, CharUtils.toIntValue('7')); ref {CharUtils} [128-128],
 assertEquals(8, CharUtils.toIntValue('8')); ref {CharUtils} [129-129],
 assertEquals(9, CharUtils.toIntValue('9')); ref {CharUtils} [130-130]
[m[m31.08.2022 - 15:15:23.178 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToIntValue_char_int has 3 assertions: 
 assertEquals(0, CharUtils.toIntValue('0', -1)); ref {CharUtils} [138-138],
 assertEquals(3, CharUtils.toIntValue('3', -1)); ref {CharUtils} [139-139],
 assertEquals(-1, CharUtils.toIntValue('a', -1)); ref {CharUtils} [140-140]
[m[m31.08.2022 - 15:15:23.178 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToIntValue_Character has 2 assertions: 
 assertEquals(0, CharUtils.toIntValue(new Character('0'))); ref {CharUtils} [145-145],
 assertEquals(3, CharUtils.toIntValue(new Character('3'))); ref {CharUtils} [146-146]
[m[m31.08.2022 - 15:15:23.178 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToIntValue_Character_int has 4 assertions: 
 assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); ref {CharUtils} [157-157],
 assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); ref {CharUtils} [158-158],
 assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); ref {CharUtils} [159-159],
 assertEquals(-1, CharUtils.toIntValue(null, -1)); ref {CharUtils} [160-160]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToString_char has 11 assertions: 
 assertEquals("a", CharUtils.toString('a')); ref {CharUtils} [165-165],
 assertSame(CharUtils.toString('a'), CharUtils.toString('a')); ref {CharUtils} [166-166],
 assertSame(str, str2); ref {str, str2} [171-171],
 assertEquals(1, str.length()); ref {str} [172-172],
 assertEquals(i, str.charAt(0)); ref {str, i} [173-173],
 assertEquals(str, str2); ref {str, str2} [178-178],
 assertTrue(str != str2); ref {str, str2} [179-179],
 assertEquals(1, str.length()); ref {str} [180-180],
 assertEquals(i, str.charAt(0)); ref {str, i} [181-181],
 assertEquals(1, str2.length()); ref {str2} [182-182],
 assertEquals(i, str2.charAt(0)); ref {str2, i} [183-183]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToString_Character has 3 assertions: 
 assertEquals(null, CharUtils.toString(null)); ref {CharUtils} [189-189],
 assertEquals("A", CharUtils.toString(CHARACTER_A)); ref {CHARACTER_A, CharUtils} [190-190],
 assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A)); ref {CHARACTER_A, CharUtils} [191-191]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToUnicodeEscaped_char has 6 assertions: 
 assertEquals("\\u0041", CharUtils.unicodeEscaped('A')); ref {CharUtils} [196-196],
 assertEquals("\\u004c", CharUtils.unicodeEscaped('L')); ref {CharUtils} [197-197],
 assertEquals(6, str.length()); ref {str} [201-201],
 assertEquals(i, val); ref {val, i} [203-203],
 assertEquals("\\u0999", CharUtils.unicodeEscaped((char) 0x999)); ref {CharUtils} [205-205],
 assertEquals("\\u1001", CharUtils.unicodeEscaped((char) 0x1001)); ref {CharUtils} [206-206]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testToUnicodeEscaped_Character has 2 assertions: 
 assertEquals(null, CharUtils.unicodeEscaped(null)); ref {CharUtils} [211-211],
 assertEquals("\\u0041", CharUtils.unicodeEscaped(CHARACTER_A)); ref {CHARACTER_A, CharUtils} [212-212]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testIsAscii_char has 8 assertions: 
 assertTrue(CharUtils.isAscii('a')); ref {CharUtils} [217-217],
 assertTrue(CharUtils.isAscii('A')); ref {CharUtils} [218-218],
 assertTrue(CharUtils.isAscii('3')); ref {CharUtils} [219-219],
 assertTrue(CharUtils.isAscii('-')); ref {CharUtils} [220-220],
 assertTrue(CharUtils.isAscii('\n')); ref {CharUtils} [221-221],
 assertFalse(CharUtils.isAscii(CHAR_COPY)); ref {CHAR_COPY, CharUtils} [222-222],
 assertTrue(CharUtils.isAscii((char) i)); ref {CharUtils, i} [226-226],
 assertFalse(CharUtils.isAscii((char) i)); ref {CharUtils, i} [228-228]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testIsAsciiPrintable_char has 8 assertions: 
 assertTrue(CharUtils.isAsciiPrintable('a')); ref {CharUtils} [235-235],
 assertTrue(CharUtils.isAsciiPrintable('A')); ref {CharUtils} [236-236],
 assertTrue(CharUtils.isAsciiPrintable('3')); ref {CharUtils} [237-237],
 assertTrue(CharUtils.isAsciiPrintable('-')); ref {CharUtils} [238-238],
 assertFalse(CharUtils.isAsciiPrintable('\n')); ref {CharUtils} [239-239],
 assertFalse(CharUtils.isAscii(CHAR_COPY)); ref {CHAR_COPY, CharUtils} [240-240],
 assertTrue(CharUtils.isAsciiPrintable((char) i)); ref {CharUtils, i} [244-244],
 assertFalse(CharUtils.isAsciiPrintable((char) i)); ref {CharUtils, i} [246-246]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testIsAsciiControl_char has 8 assertions: 
 assertFalse(CharUtils.isAsciiControl('a')); ref {CharUtils} [253-253],
 assertFalse(CharUtils.isAsciiControl('A')); ref {CharUtils} [254-254],
 assertFalse(CharUtils.isAsciiControl('3')); ref {CharUtils} [255-255],
 assertFalse(CharUtils.isAsciiControl('-')); ref {CharUtils} [256-256],
 assertTrue(CharUtils.isAsciiControl('\n')); ref {CharUtils} [257-257],
 assertFalse(CharUtils.isAsciiControl(CHAR_COPY)); ref {CHAR_COPY, CharUtils} [258-258],
 assertTrue(CharUtils.isAsciiControl((char) i)); ref {CharUtils, i} [262-262],
 assertFalse(CharUtils.isAsciiControl((char) i)); ref {CharUtils, i} [264-264]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testIsAsciiAlpha_char has 8 assertions: 
 assertTrue(CharUtils.isAsciiAlpha('a')); ref {CharUtils} [271-271],
 assertTrue(CharUtils.isAsciiAlpha('A')); ref {CharUtils} [272-272],
 assertFalse(CharUtils.isAsciiAlpha('3')); ref {CharUtils} [273-273],
 assertFalse(CharUtils.isAsciiAlpha('-')); ref {CharUtils} [274-274],
 assertFalse(CharUtils.isAsciiAlpha('\n')); ref {CharUtils} [275-275],
 assertFalse(CharUtils.isAsciiAlpha(CHAR_COPY)); ref {CHAR_COPY, CharUtils} [276-276],
 assertTrue(CharUtils.isAsciiAlpha((char) i)); ref {CharUtils, i} [280-280],
 assertFalse(CharUtils.isAsciiAlpha((char) i)); ref {CharUtils, i} [282-282]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testIsAsciiAlphaUpper_char has 8 assertions: 
 assertFalse(CharUtils.isAsciiAlphaUpper('a')); ref {CharUtils} [289-289],
 assertTrue(CharUtils.isAsciiAlphaUpper('A')); ref {CharUtils} [290-290],
 assertFalse(CharUtils.isAsciiAlphaUpper('3')); ref {CharUtils} [291-291],
 assertFalse(CharUtils.isAsciiAlphaUpper('-')); ref {CharUtils} [292-292],
 assertFalse(CharUtils.isAsciiAlphaUpper('\n')); ref {CharUtils} [293-293],
 assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY)); ref {CHAR_COPY, CharUtils} [294-294],
 assertTrue(CharUtils.isAsciiAlphaUpper((char) i)); ref {CharUtils, i} [298-298],
 assertFalse(CharUtils.isAsciiAlphaUpper((char) i)); ref {CharUtils, i} [300-300]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testIsAsciiAlphaLower_char has 8 assertions: 
 assertTrue(CharUtils.isAsciiAlphaLower('a')); ref {CharUtils} [307-307],
 assertFalse(CharUtils.isAsciiAlphaLower('A')); ref {CharUtils} [308-308],
 assertFalse(CharUtils.isAsciiAlphaLower('3')); ref {CharUtils} [309-309],
 assertFalse(CharUtils.isAsciiAlphaLower('-')); ref {CharUtils} [310-310],
 assertFalse(CharUtils.isAsciiAlphaLower('\n')); ref {CharUtils} [311-311],
 assertFalse(CharUtils.isAsciiAlphaLower(CHAR_COPY)); ref {CHAR_COPY, CharUtils} [312-312],
 assertTrue(CharUtils.isAsciiAlphaLower((char) i)); ref {CharUtils, i} [316-316],
 assertFalse(CharUtils.isAsciiAlphaLower((char) i)); ref {CharUtils, i} [318-318]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testIsAsciiNumeric_char has 8 assertions: 
 assertFalse(CharUtils.isAsciiNumeric('a')); ref {CharUtils} [325-325],
 assertFalse(CharUtils.isAsciiNumeric('A')); ref {CharUtils} [326-326],
 assertTrue(CharUtils.isAsciiNumeric('3')); ref {CharUtils} [327-327],
 assertFalse(CharUtils.isAsciiNumeric('-')); ref {CharUtils} [328-328],
 assertFalse(CharUtils.isAsciiNumeric('\n')); ref {CharUtils} [329-329],
 assertFalse(CharUtils.isAsciiNumeric(CHAR_COPY)); ref {CHAR_COPY, CharUtils} [330-330],
 assertTrue(CharUtils.isAsciiNumeric((char) i)); ref {CharUtils, i} [334-334],
 assertFalse(CharUtils.isAsciiNumeric((char) i)); ref {CharUtils, i} [336-336]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testIsAsciiAlphanumeric_char has 8 assertions: 
 assertTrue(CharUtils.isAsciiAlphanumeric('a')); ref {CharUtils} [343-343],
 assertTrue(CharUtils.isAsciiAlphanumeric('A')); ref {CharUtils} [344-344],
 assertTrue(CharUtils.isAsciiAlphanumeric('3')); ref {CharUtils} [345-345],
 assertFalse(CharUtils.isAsciiAlphanumeric('-')); ref {CharUtils} [346-346],
 assertFalse(CharUtils.isAsciiAlphanumeric('\n')); ref {CharUtils} [347-347],
 assertFalse(CharUtils.isAsciiAlphanumeric(CHAR_COPY)); ref {CHAR_COPY, CharUtils} [348-348],
 assertTrue(CharUtils.isAsciiAlphanumeric((char) i)); ref {CharUtils, i} [352-352],
 assertFalse(CharUtils.isAsciiAlphanumeric((char) i)); ref {CharUtils, i} [354-354]
[m[m31.08.2022 - 15:15:23.179 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharUtilsTest::testCompare has 3 assertions: 
 assertTrue(CharUtils.compare('a', 'b') < 0); ref {CharUtils} [361-361],
 assertTrue(CharUtils.compare('c', 'c') == 0); ref {CharUtils} [362-362],
 assertTrue(CharUtils.compare('c', 'a') > 0); ref {CharUtils} [363-363]
[m[m31.08.2022 - 15:15:23.184 [INFO ] ParsingStrategy.parseTestSuite() - Found 14 test cases
[m[m31.08.2022 - 15:15:23.184 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testCommaMatcher has 4 assertions: 
 assertSame(matcher, StrMatcher.commaMatcher()); ref {matcher, StrMatcher} [42-42],
 assertEquals(0, matcher.isMatch(BUFFER1, 0)); ref {BUFFER1, matcher} [43-43],
 assertEquals(1, matcher.isMatch(BUFFER1, 1)); ref {BUFFER1, matcher} [44-44],
 assertEquals(0, matcher.isMatch(BUFFER1, 2)); ref {BUFFER1, matcher} [45-45]
[m[m31.08.2022 - 15:15:23.184 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testTabMatcher has 4 assertions: 
 assertSame(matcher, StrMatcher.tabMatcher()); ref {matcher, StrMatcher} [52-52],
 assertEquals(0, matcher.isMatch(BUFFER1, 2)); ref {BUFFER1, matcher} [53-53],
 assertEquals(1, matcher.isMatch(BUFFER1, 3)); ref {BUFFER1, matcher} [54-54],
 assertEquals(0, matcher.isMatch(BUFFER1, 4)); ref {BUFFER1, matcher} [55-55]
[m[m31.08.2022 - 15:15:23.184 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testSpaceMatcher has 4 assertions: 
 assertSame(matcher, StrMatcher.spaceMatcher()); ref {matcher, StrMatcher} [62-62],
 assertEquals(0, matcher.isMatch(BUFFER1, 4)); ref {BUFFER1, matcher} [63-63],
 assertEquals(1, matcher.isMatch(BUFFER1, 5)); ref {BUFFER1, matcher} [64-64],
 assertEquals(0, matcher.isMatch(BUFFER1, 6)); ref {BUFFER1, matcher} [65-65]
[m[m31.08.2022 - 15:15:23.184 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testSplitMatcher has 10 assertions: 
 assertSame(matcher, StrMatcher.splitMatcher()); ref {matcher, StrMatcher} [72-72],
 assertEquals(0, matcher.isMatch(BUFFER1, 2)); ref {BUFFER1, matcher} [73-73],
 assertEquals(1, matcher.isMatch(BUFFER1, 3)); ref {BUFFER1, matcher} [74-74],
 assertEquals(0, matcher.isMatch(BUFFER1, 4)); ref {BUFFER1, matcher} [75-75],
 assertEquals(1, matcher.isMatch(BUFFER1, 5)); ref {BUFFER1, matcher} [76-76],
 assertEquals(0, matcher.isMatch(BUFFER1, 6)); ref {BUFFER1, matcher} [77-77],
 assertEquals(1, matcher.isMatch(BUFFER1, 7)); ref {BUFFER1, matcher} [78-78],
 assertEquals(1, matcher.isMatch(BUFFER1, 8)); ref {BUFFER1, matcher} [79-79],
 assertEquals(1, matcher.isMatch(BUFFER1, 9)); ref {BUFFER1, matcher} [80-80],
 assertEquals(0, matcher.isMatch(BUFFER1, 10)); ref {BUFFER1, matcher} [81-81]
[m[m31.08.2022 - 15:15:23.185 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testTrimMatcher has 10 assertions: 
 assertSame(matcher, StrMatcher.trimMatcher()); ref {matcher, StrMatcher} [88-88],
 assertEquals(0, matcher.isMatch(BUFFER1, 2)); ref {BUFFER1, matcher} [89-89],
 assertEquals(1, matcher.isMatch(BUFFER1, 3)); ref {BUFFER1, matcher} [90-90],
 assertEquals(0, matcher.isMatch(BUFFER1, 4)); ref {BUFFER1, matcher} [91-91],
 assertEquals(1, matcher.isMatch(BUFFER1, 5)); ref {BUFFER1, matcher} [92-92],
 assertEquals(0, matcher.isMatch(BUFFER1, 6)); ref {BUFFER1, matcher} [93-93],
 assertEquals(1, matcher.isMatch(BUFFER1, 7)); ref {BUFFER1, matcher} [94-94],
 assertEquals(1, matcher.isMatch(BUFFER1, 8)); ref {BUFFER1, matcher} [95-95],
 assertEquals(1, matcher.isMatch(BUFFER1, 9)); ref {BUFFER1, matcher} [96-96],
 assertEquals(1, matcher.isMatch(BUFFER1, 10)); ref {BUFFER1, matcher} [97-97]
[m[m31.08.2022 - 15:15:23.185 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testSingleQuoteMatcher has 4 assertions: 
 assertSame(matcher, StrMatcher.singleQuoteMatcher()); ref {matcher, StrMatcher} [104-104],
 assertEquals(0, matcher.isMatch(BUFFER1, 10)); ref {BUFFER1, matcher} [105-105],
 assertEquals(1, matcher.isMatch(BUFFER1, 11)); ref {BUFFER1, matcher} [106-106],
 assertEquals(0, matcher.isMatch(BUFFER1, 12)); ref {BUFFER1, matcher} [107-107]
[m[m31.08.2022 - 15:15:23.185 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testDoubleQuoteMatcher has 3 assertions: 
 assertSame(matcher, StrMatcher.doubleQuoteMatcher()); ref {matcher, StrMatcher} [114-114],
 assertEquals(0, matcher.isMatch(BUFFER1, 11)); ref {BUFFER1, matcher} [115-115],
 assertEquals(1, matcher.isMatch(BUFFER1, 12)); ref {BUFFER1, matcher} [116-116]
[m[m31.08.2022 - 15:15:23.185 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testQuoteMatcher has 4 assertions: 
 assertSame(matcher, StrMatcher.quoteMatcher()); ref {matcher, StrMatcher} [123-123],
 assertEquals(0, matcher.isMatch(BUFFER1, 10)); ref {BUFFER1, matcher} [124-124],
 assertEquals(1, matcher.isMatch(BUFFER1, 11)); ref {BUFFER1, matcher} [125-125],
 assertEquals(1, matcher.isMatch(BUFFER1, 12)); ref {BUFFER1, matcher} [126-126]
[m[m31.08.2022 - 15:15:23.185 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testNoneMatcher has 14 assertions: 
 assertSame(matcher, StrMatcher.noneMatcher()); ref {matcher, StrMatcher} [133-133],
 assertEquals(0, matcher.isMatch(BUFFER1, 0)); ref {BUFFER1, matcher} [134-134],
 assertEquals(0, matcher.isMatch(BUFFER1, 1)); ref {BUFFER1, matcher} [135-135],
 assertEquals(0, matcher.isMatch(BUFFER1, 2)); ref {BUFFER1, matcher} [136-136],
 assertEquals(0, matcher.isMatch(BUFFER1, 3)); ref {BUFFER1, matcher} [137-137],
 assertEquals(0, matcher.isMatch(BUFFER1, 4)); ref {BUFFER1, matcher} [138-138],
 assertEquals(0, matcher.isMatch(BUFFER1, 5)); ref {BUFFER1, matcher} [139-139],
 assertEquals(0, matcher.isMatch(BUFFER1, 6)); ref {BUFFER1, matcher} [140-140],
 assertEquals(0, matcher.isMatch(BUFFER1, 7)); ref {BUFFER1, matcher} [141-141],
 assertEquals(0, matcher.isMatch(BUFFER1, 8)); ref {BUFFER1, matcher} [142-142],
 assertEquals(0, matcher.isMatch(BUFFER1, 9)); ref {BUFFER1, matcher} [143-143],
 assertEquals(0, matcher.isMatch(BUFFER1, 10)); ref {BUFFER1, matcher} [144-144],
 assertEquals(0, matcher.isMatch(BUFFER1, 11)); ref {BUFFER1, matcher} [145-145],
 assertEquals(0, matcher.isMatch(BUFFER1, 12)); ref {BUFFER1, matcher} [146-146]
[m[m31.08.2022 - 15:15:23.185 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testCharMatcher_char has 6 assertions: 
 assertEquals(0, matcher.isMatch(BUFFER2, 0)); ref {BUFFER2, matcher} [153-153],
 assertEquals(0, matcher.isMatch(BUFFER2, 1)); ref {BUFFER2, matcher} [154-154],
 assertEquals(1, matcher.isMatch(BUFFER2, 2)); ref {BUFFER2, matcher} [155-155],
 assertEquals(0, matcher.isMatch(BUFFER2, 3)); ref {BUFFER2, matcher} [156-156],
 assertEquals(0, matcher.isMatch(BUFFER2, 4)); ref {BUFFER2, matcher} [157-157],
 assertEquals(0, matcher.isMatch(BUFFER2, 5)); ref {BUFFER2, matcher} [158-158]
[m[m31.08.2022 - 15:15:23.185 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testCharSetMatcher_String has 9 assertions: 
 assertEquals(1, matcher.isMatch(BUFFER2, 0)); ref {BUFFER2, matcher} [165-165],
 assertEquals(0, matcher.isMatch(BUFFER2, 1)); ref {BUFFER2, matcher} [166-166],
 assertEquals(1, matcher.isMatch(BUFFER2, 2)); ref {BUFFER2, matcher} [167-167],
 assertEquals(0, matcher.isMatch(BUFFER2, 3)); ref {BUFFER2, matcher} [168-168],
 assertEquals(1, matcher.isMatch(BUFFER2, 4)); ref {BUFFER2, matcher} [169-169],
 assertEquals(0, matcher.isMatch(BUFFER2, 5)); ref {BUFFER2, matcher} [170-170],
 assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); ref {StrMatcher} [171-171],
 assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); ref {StrMatcher} [172-172],
 assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher); ref {StrMatcher} [173-173]
[m[m31.08.2022 - 15:15:23.185 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testCharSetMatcher_charArray has 9 assertions: 
 assertEquals(1, matcher.isMatch(BUFFER2, 0)); ref {BUFFER2, matcher} [180-180],
 assertEquals(0, matcher.isMatch(BUFFER2, 1)); ref {BUFFER2, matcher} [181-181],
 assertEquals(1, matcher.isMatch(BUFFER2, 2)); ref {BUFFER2, matcher} [182-182],
 assertEquals(0, matcher.isMatch(BUFFER2, 3)); ref {BUFFER2, matcher} [183-183],
 assertEquals(1, matcher.isMatch(BUFFER2, 4)); ref {BUFFER2, matcher} [184-184],
 assertEquals(0, matcher.isMatch(BUFFER2, 5)); ref {BUFFER2, matcher} [185-185],
 assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(new char[0])); ref {StrMatcher} [186-186],
 assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null)); ref {StrMatcher} [187-187],
 assertTrue(StrMatcher.charSetMatcher("a".toCharArray()) instanceof StrMatcher.CharMatcher); ref {StrMatcher} [188-188]
[m[m31.08.2022 - 15:15:23.185 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testStringMatcher_String has 8 assertions: 
 assertEquals(0, matcher.isMatch(BUFFER2, 0)); ref {BUFFER2, matcher} [195-195],
 assertEquals(2, matcher.isMatch(BUFFER2, 1)); ref {BUFFER2, matcher} [196-196],
 assertEquals(0, matcher.isMatch(BUFFER2, 2)); ref {BUFFER2, matcher} [197-197],
 assertEquals(0, matcher.isMatch(BUFFER2, 3)); ref {BUFFER2, matcher} [198-198],
 assertEquals(0, matcher.isMatch(BUFFER2, 4)); ref {BUFFER2, matcher} [199-199],
 assertEquals(0, matcher.isMatch(BUFFER2, 5)); ref {BUFFER2, matcher} [200-200],
 assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher("")); ref {StrMatcher} [201-201],
 assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher((String) null)); ref {StrMatcher} [202-202]
[m[m31.08.2022 - 15:15:23.185 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrMatcherTest::testMatcherIndices has 3 assertions: 
 assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length)); ref {BUFFER2, BUFFER2.length, matcher} [212-212],
 assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3)); ref {BUFFER2, matcher} [213-213],
 assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2)); ref {BUFFER2, matcher} [214-214]
[m[m31.08.2022 - 15:15:23.211 [INFO ] ParsingStrategy.parseTestSuite() - Found 50 test cases
[m[m31.08.2022 - 15:15:23.211 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContains_Char has 8 assertions: 
 assertFalse(StringUtils.contains(null, ' ')); ref {StringUtils} [66-66],
 assertFalse(StringUtils.contains("", ' ')); ref {StringUtils} [67-67],
 assertFalse(StringUtils.contains("", null)); ref {StringUtils} [68-68],
 assertFalse(StringUtils.contains(null, null)); ref {StringUtils} [69-69],
 assertTrue(StringUtils.contains("abc", 'a')); ref {StringUtils} [70-70],
 assertTrue(StringUtils.contains("abc", 'b')); ref {StringUtils} [71-71],
 assertTrue(StringUtils.contains("abc", 'c')); ref {StringUtils} [72-72],
 assertFalse(StringUtils.contains("abc", 'z')); ref {StringUtils} [73-73]
[m[m31.08.2022 - 15:15:23.212 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContains_String has 11 assertions: 
 assertFalse(StringUtils.contains(null, null)); ref {StringUtils} [78-78],
 assertFalse(StringUtils.contains(null, "")); ref {StringUtils} [79-79],
 assertFalse(StringUtils.contains(null, "a")); ref {StringUtils} [80-80],
 assertFalse(StringUtils.contains("", null)); ref {StringUtils} [81-81],
 assertTrue(StringUtils.contains("", "")); ref {StringUtils} [82-82],
 assertFalse(StringUtils.contains("", "a")); ref {StringUtils} [83-83],
 assertTrue(StringUtils.contains("abc", "a")); ref {StringUtils} [84-84],
 assertTrue(StringUtils.contains("abc", "b")); ref {StringUtils} [85-85],
 assertTrue(StringUtils.contains("abc", "c")); ref {StringUtils} [86-86],
 assertTrue(StringUtils.contains("abc", "abc")); ref {StringUtils} [87-87],
 assertFalse(StringUtils.contains("abc", "z")); ref {StringUtils} [88-88]
[m[m31.08.2022 - 15:15:23.212 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContains_StringWithBadSupplementaryChars has 7 assertions: 
 // Test edge case: 1/2 of a (broken) supplementary char
assertFalse(StringUtils.contains(CharUSuppCharHigh, CharU20001)); ref {CharU20001, StringUtils, CharUSuppCharHigh} [97-97],
 assertFalse(StringUtils.contains(CharUSuppCharLow, CharU20001)); ref {CharUSuppCharLow, CharU20001, StringUtils} [98-98],
 assertFalse(StringUtils.contains(CharU20001, CharUSuppCharHigh)); ref {CharU20001, StringUtils, CharUSuppCharHigh} [99-99],
 assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); ref {CharUSuppCharLow, CharU20001} [100-100],
 assertTrue(StringUtils.contains(CharU20001, CharUSuppCharLow)); ref {CharUSuppCharLow, CharU20001, StringUtils} [101-101],
 assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharLow + "a", "a")); ref {CharUSuppCharLow, CharU20001, StringUtils} [102-102],
 assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharHigh + "a", "a")); ref {CharU20001, StringUtils, CharUSuppCharHigh} [103-103]
[m[m31.08.2022 - 15:15:23.212 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContains_StringWithSupplementaryChars has 4 assertions: 
 assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20000)); ref {CharU20000, CharU20001, StringUtils} [111-111],
 assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20001)); ref {CharU20000, CharU20001, StringUtils} [112-112],
 assertTrue(StringUtils.contains(CharU20000, CharU20000)); ref {CharU20000, StringUtils} [113-113],
 assertFalse(StringUtils.contains(CharU20000, CharU20001)); ref {CharU20000, CharU20001, StringUtils} [114-114]
[m[m31.08.2022 - 15:15:23.212 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringCharArray has 11 assertions: 
 assertFalse(StringUtils.containsAny(null, (char[]) null)); ref {StringUtils} [119-119],
 assertFalse(StringUtils.containsAny(null, new char[0])); ref {StringUtils} [120-120],
 assertFalse(StringUtils.containsAny(null, new char[] { 'a', 'b' })); ref {StringUtils} [121-121],
 assertFalse(StringUtils.containsAny("", (char[]) null)); ref {StringUtils} [123-123],
 assertFalse(StringUtils.containsAny("", new char[0])); ref {StringUtils} [124-124],
 assertFalse(StringUtils.containsAny("", new char[] { 'a', 'b' })); ref {StringUtils} [125-125],
 assertFalse(StringUtils.containsAny("zzabyycdxx", (char[]) null)); ref {StringUtils} [127-127],
 assertFalse(StringUtils.containsAny("zzabyycdxx", new char[0])); ref {StringUtils} [128-128],
 assertTrue(StringUtils.containsAny("zzabyycdxx", new char[] { 'z', 'a' })); ref {StringUtils} [129-129],
 assertTrue(StringUtils.containsAny("zzabyycdxx", new char[] { 'b', 'y' })); ref {StringUtils} [130-130],
 assertFalse(StringUtils.containsAny("ab", new char[] { 'z' })); ref {StringUtils} [131-131]
[m[m31.08.2022 - 15:15:23.212 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringCharArrayWithBadSupplementaryChars has 7 assertions: 
 // Test edge case: 1/2 of a (broken) supplementary char
assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray())); ref {CharU20001, StringUtils, CharUSuppCharHigh} [140-140],
 assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray())); ref {CharU20001, StringUtils, CharUSuppCharHigh} [141-141],
 assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); ref {CharUSuppCharLow, CharU20001} [142-142],
 assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray())); ref {CharUSuppCharLow, CharU20001, StringUtils} [143-143],
 assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray())); ref {CharU20001, StringUtils, CharUSuppCharHigh} [144-144],
 assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); ref {CharUSuppCharLow, CharU20001} [145-145],
 assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray())); ref {CharUSuppCharLow, CharU20001, StringUtils} [146-146]
[m[m31.08.2022 - 15:15:23.212 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringCharArrayWithSupplementaryChars has 11 assertions: 
 assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [154-154],
 assertTrue(StringUtils.containsAny("a" + CharU20000 + CharU20001, "a".toCharArray())); ref {CharU20000, CharU20001, StringUtils} [155-155],
 assertTrue(StringUtils.containsAny(CharU20000 + "a" + CharU20001, "a".toCharArray())); ref {CharU20000, CharU20001, StringUtils} [156-156],
 assertTrue(StringUtils.containsAny(CharU20000 + CharU20001 + "a", "a".toCharArray())); ref {CharU20000, CharU20001, StringUtils} [157-157],
 assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [158-158],
 assertTrue(StringUtils.containsAny(CharU20000, CharU20000.toCharArray())); ref {CharU20000, StringUtils} [159-159],
 // Sanity check:
assertEquals(-1, CharU20000.indexOf(CharU20001)); ref {CharU20000, CharU20001} [161-161],
 assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); ref {CharU20000, CharU20001} [162-162],
 assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); ref {CharU20000, CharU20001} [163-163],
 // Test:
assertFalse(StringUtils.containsAny(CharU20000, CharU20001.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [165-165],
 assertFalse(StringUtils.containsAny(CharU20001, CharU20000.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [166-166]
[m[m31.08.2022 - 15:15:23.212 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringString has 11 assertions: 
 assertFalse(StringUtils.containsAny(null, (String) null)); ref {StringUtils} [171-171],
 assertFalse(StringUtils.containsAny(null, "")); ref {StringUtils} [172-172],
 assertFalse(StringUtils.containsAny(null, "ab")); ref {StringUtils} [173-173],
 assertFalse(StringUtils.containsAny("", (String) null)); ref {StringUtils} [175-175],
 assertFalse(StringUtils.containsAny("", "")); ref {StringUtils} [176-176],
 assertFalse(StringUtils.containsAny("", "ab")); ref {StringUtils} [177-177],
 assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null)); ref {StringUtils} [179-179],
 assertFalse(StringUtils.containsAny("zzabyycdxx", "")); ref {StringUtils} [180-180],
 assertTrue(StringUtils.containsAny("zzabyycdxx", "za")); ref {StringUtils} [181-181],
 assertTrue(StringUtils.containsAny("zzabyycdxx", "by")); ref {StringUtils} [182-182],
 assertFalse(StringUtils.containsAny("ab", "z")); ref {StringUtils} [183-183]
[m[m31.08.2022 - 15:15:23.212 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringWithBadSupplementaryChars has 6 assertions: 
 // Test edge case: 1/2 of a (broken) supplementary char
assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001)); ref {CharU20001, StringUtils, CharUSuppCharHigh} [192-192],
 assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); ref {CharUSuppCharLow, CharU20001} [193-193],
 assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001)); ref {CharUSuppCharLow, CharU20001, StringUtils} [194-194],
 assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh)); ref {CharU20001, StringUtils, CharUSuppCharHigh} [195-195],
 assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); ref {CharUSuppCharLow, CharU20001} [196-196],
 assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow)); ref {CharUSuppCharLow, CharU20001, StringUtils} [197-197]
[m[m31.08.2022 - 15:15:23.212 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringWithSupplementaryChars has 8 assertions: 
 assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000)); ref {CharU20000, CharU20001, StringUtils} [205-205],
 assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001)); ref {CharU20000, CharU20001, StringUtils} [206-206],
 assertTrue(StringUtils.containsAny(CharU20000, CharU20000)); ref {CharU20000, StringUtils} [207-207],
 // Sanity check:
assertEquals(-1, CharU20000.indexOf(CharU20001)); ref {CharU20000, CharU20001} [209-209],
 assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); ref {CharU20000, CharU20001} [210-210],
 assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); ref {CharU20000, CharU20001} [211-211],
 // Test:
assertFalse(StringUtils.containsAny(CharU20000, CharU20001)); ref {CharU20000, CharU20001, StringUtils} [213-213],
 assertFalse(StringUtils.containsAny(CharU20001, CharU20000)); ref {CharU20000, CharU20001, StringUtils} [214-214]
[m[m31.08.2022 - 15:15:23.212 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringStringArray has 11 assertions: 
 assertFalse(StringUtils.containsAny(null, (String[]) null)); ref {StringUtils} [219-219],
 assertFalse(StringUtils.containsAny(null, new String[0])); ref {StringUtils} [220-220],
 assertFalse(StringUtils.containsAny(null, new String[] { "hello" })); ref {StringUtils} [221-221],
 assertFalse(StringUtils.containsAny("", (String[]) null)); ref {StringUtils} [222-222],
 assertFalse(StringUtils.containsAny("", new String[0])); ref {StringUtils} [223-223],
 assertFalse(StringUtils.containsAny("", new String[] { "hello" })); ref {StringUtils} [224-224],
 assertFalse(StringUtils.containsAny("hello, goodbye", (String[]) null)); ref {StringUtils} [225-225],
 assertFalse(StringUtils.containsAny("hello, goodbye", new String[0])); ref {StringUtils} [226-226],
 assertTrue(StringUtils.containsAny("hello, goodbye", new String[] { "hello", "goodbye" })); ref {StringUtils} [227-227],
 assertTrue(StringUtils.containsAny("hello, goodbye", new String[] { "hello", "Goodbye" })); ref {StringUtils} [228-228],
 assertFalse(StringUtils.containsAny("hello, goodbye", new String[] { "Hello", "Goodbye" })); ref {StringUtils} [229-229]
[m[m31.08.2022 - 15:15:23.212 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsIgnoreCase_LocaleIndependence has 2 assertions: 
 assertTrue(Locale.getDefault() + ": " + j + " " + tdata[j][0] + " " + tdata[j][1], StringUtils.containsIgnoreCase(tdata[j][0], tdata[j][1])); ref {Locale, StringUtils, j, tdata} [254-255],
 assertFalse(Locale.getDefault() + ": " + j + " " + fdata[j][0] + " " + fdata[j][1], StringUtils.containsIgnoreCase(fdata[j][0], fdata[j][1])); ref {Locale, StringUtils, j, fdata} [258-259]
[m[m31.08.2022 - 15:15:23.212 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsIgnoreCase_StringString has 22 assertions: 
 assertFalse(StringUtils.containsIgnoreCase(null, null)); ref {StringUtils} [269-269],
 // Null tests
assertFalse(StringUtils.containsIgnoreCase(null, "")); ref {StringUtils} [272-272],
 assertFalse(StringUtils.containsIgnoreCase(null, "a")); ref {StringUtils} [273-273],
 assertFalse(StringUtils.containsIgnoreCase(null, "abc")); ref {StringUtils} [274-274],
 assertFalse(StringUtils.containsIgnoreCase("", null)); ref {StringUtils} [276-276],
 assertFalse(StringUtils.containsIgnoreCase("a", null)); ref {StringUtils} [277-277],
 assertFalse(StringUtils.containsIgnoreCase("abc", null)); ref {StringUtils} [278-278],
 // Match len = 0
assertTrue(StringUtils.containsIgnoreCase("", "")); ref {StringUtils} [281-281],
 assertTrue(StringUtils.containsIgnoreCase("a", "")); ref {StringUtils} [282-282],
 assertTrue(StringUtils.containsIgnoreCase("abc", "")); ref {StringUtils} [283-283],
 // Match len = 1
assertFalse(StringUtils.containsIgnoreCase("", "a")); ref {StringUtils} [286-286],
 assertTrue(StringUtils.containsIgnoreCase("a", "a")); ref {StringUtils} [287-287],
 assertTrue(StringUtils.containsIgnoreCase("abc", "a")); ref {StringUtils} [288-288],
 assertFalse(StringUtils.containsIgnoreCase("", "A")); ref {StringUtils} [289-289],
 assertTrue(StringUtils.containsIgnoreCase("a", "A")); ref {StringUtils} [290-290],
 assertTrue(StringUtils.containsIgnoreCase("abc", "A")); ref {StringUtils} [291-291],
 // Match len > 1
assertFalse(StringUtils.containsIgnoreCase("", "abc")); ref {StringUtils} [294-294],
 assertFalse(StringUtils.containsIgnoreCase("a", "abc")); ref {StringUtils} [295-295],
 assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc")); ref {StringUtils} [296-296],
 assertFalse(StringUtils.containsIgnoreCase("", "ABC")); ref {StringUtils} [297-297],
 assertFalse(StringUtils.containsIgnoreCase("a", "ABC")); ref {StringUtils} [298-298],
 assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC")); ref {StringUtils} [299-299]
[m[m31.08.2022 - 15:15:23.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArray has 15 assertions: 
 assertTrue(StringUtils.containsNone(null, (char[]) null)); ref {StringUtils} [311-311],
 assertTrue(StringUtils.containsNone("", (char[]) null)); ref {StringUtils} [312-312],
 assertTrue(StringUtils.containsNone(null, emptyChars)); ref {StringUtils, emptyChars} [313-313],
 assertTrue(StringUtils.containsNone(str1, emptyChars)); ref {StringUtils, str1, emptyChars} [314-314],
 assertTrue(StringUtils.containsNone("", emptyChars)); ref {StringUtils, emptyChars} [315-315],
 assertTrue(StringUtils.containsNone("", chars1)); ref {chars1, StringUtils} [316-316],
 assertTrue(StringUtils.containsNone(str1, chars1)); ref {chars1, StringUtils, str1} [317-317],
 assertTrue(StringUtils.containsNone(str1, chars2)); ref {chars2, StringUtils, str1} [318-318],
 assertTrue(StringUtils.containsNone(str1, chars3)); ref {chars3, StringUtils, str1} [319-319],
 assertFalse(StringUtils.containsNone(str2, chars1)); ref {chars1, StringUtils, str2} [320-320],
 assertTrue(StringUtils.containsNone(str2, chars2)); ref {chars2, StringUtils, str2} [321-321],
 assertTrue(StringUtils.containsNone(str2, chars3)); ref {chars3, StringUtils, str2} [322-322],
 assertFalse(StringUtils.containsNone(str3, chars1)); ref {chars1, str3, StringUtils} [323-323],
 assertFalse(StringUtils.containsNone(str3, chars2)); ref {chars2, str3, StringUtils} [324-324],
 assertTrue(StringUtils.containsNone(str3, chars3)); ref {chars3, str3, StringUtils} [325-325]
[m[m31.08.2022 - 15:15:23.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithBadSupplementaryChars has 7 assertions: 
 // Test edge case: 1/2 of a (broken) supplementary char
assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray())); ref {CharU20001, StringUtils, CharUSuppCharHigh} [334-334],
 assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); ref {CharUSuppCharLow, CharU20001} [335-335],
 assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray())); ref {CharUSuppCharLow, CharU20001, StringUtils} [336-336],
 assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); ref {CharU20001, CharUSuppCharHigh} [337-337],
 assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray())); ref {CharU20001, StringUtils, CharUSuppCharHigh} [338-338],
 assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); ref {CharUSuppCharLow, CharU20001} [339-339],
 assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray())); ref {CharUSuppCharLow, CharU20001, StringUtils} [340-340]
[m[m31.08.2022 - 15:15:23.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithSupplementaryChars has 8 assertions: 
 assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [348-348],
 assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [349-349],
 assertFalse(StringUtils.containsNone(CharU20000, CharU20000.toCharArray())); ref {CharU20000, StringUtils} [350-350],
 // Sanity check:
assertEquals(-1, CharU20000.indexOf(CharU20001)); ref {CharU20000, CharU20001} [352-352],
 assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); ref {CharU20000, CharU20001} [353-353],
 assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); ref {CharU20000, CharU20001} [354-354],
 // Test:
assertTrue(StringUtils.containsNone(CharU20000, CharU20001.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [356-356],
 assertTrue(StringUtils.containsNone(CharU20001, CharU20000.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [357-357]
[m[m31.08.2022 - 15:15:23.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_String has 15 assertions: 
 assertTrue(StringUtils.containsNone(null, (String) null)); ref {StringUtils} [368-368],
 assertTrue(StringUtils.containsNone("", (String) null)); ref {StringUtils} [369-369],
 assertTrue(StringUtils.containsNone(null, "")); ref {StringUtils} [370-370],
 assertTrue(StringUtils.containsNone(str1, "")); ref {StringUtils, str1} [371-371],
 assertTrue(StringUtils.containsNone("", "")); ref {StringUtils} [372-372],
 assertTrue(StringUtils.containsNone("", chars1)); ref {chars1, StringUtils} [373-373],
 assertTrue(StringUtils.containsNone(str1, chars1)); ref {chars1, StringUtils, str1} [374-374],
 assertTrue(StringUtils.containsNone(str1, chars2)); ref {chars2, StringUtils, str1} [375-375],
 assertTrue(StringUtils.containsNone(str1, chars3)); ref {chars3, StringUtils, str1} [376-376],
 assertFalse(StringUtils.containsNone(str2, chars1)); ref {chars1, StringUtils, str2} [377-377],
 assertTrue(StringUtils.containsNone(str2, chars2)); ref {chars2, StringUtils, str2} [378-378],
 assertTrue(StringUtils.containsNone(str2, chars3)); ref {chars3, StringUtils, str2} [379-379],
 assertFalse(StringUtils.containsNone(str3, chars1)); ref {chars1, str3, StringUtils} [380-380],
 assertFalse(StringUtils.containsNone(str3, chars2)); ref {chars2, str3, StringUtils} [381-381],
 assertTrue(StringUtils.containsNone(str3, chars3)); ref {chars3, str3, StringUtils} [382-382]
[m[m31.08.2022 - 15:15:23.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithBadSupplementaryChars has 7 assertions: 
 // Test edge case: 1/2 of a (broken) supplementary char
assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); ref {CharU20001, StringUtils, CharUSuppCharHigh} [391-391],
 assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); ref {CharUSuppCharLow, CharU20001} [392-392],
 assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); ref {CharUSuppCharLow, CharU20001, StringUtils} [393-393],
 assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); ref {CharU20001, CharUSuppCharHigh} [394-394],
 assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); ref {CharU20001, StringUtils, CharUSuppCharHigh} [395-395],
 assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); ref {CharUSuppCharLow, CharU20001} [396-396],
 assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); ref {CharUSuppCharLow, CharU20001, StringUtils} [397-397]
[m[m31.08.2022 - 15:15:23.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithSupplementaryChars has 8 assertions: 
 assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000)); ref {CharU20000, CharU20001, StringUtils} [405-405],
 assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001)); ref {CharU20000, CharU20001, StringUtils} [406-406],
 assertFalse(StringUtils.containsNone(CharU20000, CharU20000)); ref {CharU20000, StringUtils} [407-407],
 // Sanity check:
assertEquals(-1, CharU20000.indexOf(CharU20001)); ref {CharU20000, CharU20001} [409-409],
 assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); ref {CharU20000, CharU20001} [410-410],
 assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); ref {CharU20000, CharU20001} [411-411],
 // Test:
assertTrue(StringUtils.containsNone(CharU20000, CharU20001)); ref {CharU20000, CharU20001, StringUtils} [413-413],
 assertTrue(StringUtils.containsNone(CharU20001, CharU20000)); ref {CharU20000, CharU20001, StringUtils} [414-414]
[m[m31.08.2022 - 15:15:23.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsOnly_CharArray has 15 assertions: 
 assertFalse(StringUtils.containsOnly(null, (char[]) null)); ref {StringUtils} [426-426],
 assertFalse(StringUtils.containsOnly("", (char[]) null)); ref {StringUtils} [427-427],
 assertFalse(StringUtils.containsOnly(null, emptyChars)); ref {StringUtils, emptyChars} [428-428],
 assertFalse(StringUtils.containsOnly(str1, emptyChars)); ref {StringUtils, str1, emptyChars} [429-429],
 assertTrue(StringUtils.containsOnly("", emptyChars)); ref {StringUtils, emptyChars} [430-430],
 assertTrue(StringUtils.containsOnly("", chars1)); ref {chars1, StringUtils} [431-431],
 assertFalse(StringUtils.containsOnly(str1, chars1)); ref {chars1, StringUtils, str1} [432-432],
 assertTrue(StringUtils.containsOnly(str1, chars2)); ref {chars2, StringUtils, str1} [433-433],
 assertTrue(StringUtils.containsOnly(str1, chars3)); ref {chars3, StringUtils, str1} [434-434],
 assertTrue(StringUtils.containsOnly(str2, chars1)); ref {chars1, StringUtils, str2} [435-435],
 assertFalse(StringUtils.containsOnly(str2, chars2)); ref {chars2, StringUtils, str2} [436-436],
 assertTrue(StringUtils.containsOnly(str2, chars3)); ref {chars3, StringUtils, str2} [437-437],
 assertFalse(StringUtils.containsOnly(str3, chars1)); ref {chars1, str3, StringUtils} [438-438],
 assertFalse(StringUtils.containsOnly(str3, chars2)); ref {chars2, str3, StringUtils} [439-439],
 assertTrue(StringUtils.containsOnly(str3, chars3)); ref {chars3, str3, StringUtils} [440-440]
[m[m31.08.2022 - 15:15:23.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsOnly_String has 15 assertions: 
 assertFalse(StringUtils.containsOnly(null, (String) null)); ref {StringUtils} [451-451],
 assertFalse(StringUtils.containsOnly("", (String) null)); ref {StringUtils} [452-452],
 assertFalse(StringUtils.containsOnly(null, "")); ref {StringUtils} [453-453],
 assertFalse(StringUtils.containsOnly(str1, "")); ref {StringUtils, str1} [454-454],
 assertTrue(StringUtils.containsOnly("", "")); ref {StringUtils} [455-455],
 assertTrue(StringUtils.containsOnly("", chars1)); ref {chars1, StringUtils} [456-456],
 assertFalse(StringUtils.containsOnly(str1, chars1)); ref {chars1, StringUtils, str1} [457-457],
 assertTrue(StringUtils.containsOnly(str1, chars2)); ref {chars2, StringUtils, str1} [458-458],
 assertTrue(StringUtils.containsOnly(str1, chars3)); ref {chars3, StringUtils, str1} [459-459],
 assertTrue(StringUtils.containsOnly(str2, chars1)); ref {chars1, StringUtils, str2} [460-460],
 assertFalse(StringUtils.containsOnly(str2, chars2)); ref {chars2, StringUtils, str2} [461-461],
 assertTrue(StringUtils.containsOnly(str2, chars3)); ref {chars3, StringUtils, str2} [462-462],
 assertFalse(StringUtils.containsOnly(str3, chars1)); ref {chars1, str3, StringUtils} [463-463],
 assertFalse(StringUtils.containsOnly(str3, chars2)); ref {chars2, str3, StringUtils} [464-464],
 assertTrue(StringUtils.containsOnly(str3, chars3)); ref {chars3, str3, StringUtils} [465-465]
[m[m31.08.2022 - 15:15:23.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsWhitespace has 7 assertions: 
 assertFalse(StringUtils.containsWhitespace("")); ref {StringUtils} [470-470],
 assertTrue(StringUtils.containsWhitespace(" ")); ref {StringUtils} [471-471],
 assertFalse(StringUtils.containsWhitespace("a")); ref {StringUtils} [472-472],
 assertTrue(StringUtils.containsWhitespace("a ")); ref {StringUtils} [473-473],
 assertTrue(StringUtils.containsWhitespace(" a")); ref {StringUtils} [474-474],
 assertTrue(StringUtils.containsWhitespace("a\t")); ref {StringUtils} [475-475],
 assertTrue(StringUtils.containsWhitespace("\n")); ref {StringUtils} [476-476]
[m[m31.08.2022 - 15:15:23.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testCustomCharSequence has 3 assertions: 
 assertThat(new CustomCharSequence(FOO), IsNot.<CharSequence>not(FOO)); ref {IsNot, FOO} [527-527],
 assertThat(FOO, IsNot.<CharSequence>not(new CustomCharSequence(FOO))); ref {IsNot, FOO} [528-528],
 assertEquals(new CustomCharSequence(FOO), new CustomCharSequence(FOO)); ref {FOO} [529-529]
[m[m31.08.2022 - 15:15:23.213 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals has 12 assertions: 
 assertTrue(StringUtils.equals(null, null)); ref {StringUtils} [535-535],
 assertTrue(StringUtils.equals(fooCs, fooCs)); ref {StringUtils, fooCs} [536-536],
 assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); ref {StringUtils, fooCs, FOO} [537-537],
 assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); ref {StringUtils, fooCs} [538-538],
 assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); ref {StringUtils, fooCs, FOO} [539-539],
 assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); ref {StringUtils, FOO, fooCs} [540-540],
 assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); ref {StringUtils, fooCs} [541-541],
 assertFalse(StringUtils.equals(fooCs, barCs)); ref {barCs, StringUtils, fooCs} [542-542],
 assertFalse(StringUtils.equals(fooCs, null)); ref {StringUtils, fooCs} [543-543],
 assertFalse(StringUtils.equals(null, fooCs)); ref {StringUtils, fooCs} [544-544],
 assertFalse(StringUtils.equals(fooCs, foobarCs)); ref {foobarCs, StringUtils, fooCs} [545-545],
 assertFalse(StringUtils.equals(foobarCs, fooCs)); ref {foobarCs, StringUtils, fooCs} [546-546]
[m[m31.08.2022 - 15:15:23.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEqualsOnStrings has 9 assertions: 
 assertTrue(StringUtils.equals(null, null)); ref {StringUtils} [551-551],
 assertTrue(StringUtils.equals(FOO, FOO)); ref {StringUtils, FOO} [552-552],
 assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' }))); ref {StringUtils, FOO} [553-553],
 assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' }))); ref {StringUtils, FOO} [554-554],
 assertFalse(StringUtils.equals(FOO, BAR)); ref {BAR, StringUtils, FOO} [555-555],
 assertFalse(StringUtils.equals(FOO, null)); ref {StringUtils, FOO} [556-556],
 assertFalse(StringUtils.equals(null, FOO)); ref {StringUtils, FOO} [557-557],
 assertFalse(StringUtils.equals(FOO, FOOBAR)); ref {StringUtils, FOO, FOOBAR} [558-558],
 assertFalse(StringUtils.equals(FOOBAR, FOO)); ref {StringUtils, FOO, FOOBAR} [559-559]
[m[m31.08.2022 - 15:15:23.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEqualsIgnoreCase has 9 assertions: 
 assertTrue(StringUtils.equalsIgnoreCase(null, null)); ref {StringUtils} [564-564],
 assertTrue(StringUtils.equalsIgnoreCase(FOO, FOO)); ref {StringUtils, FOO} [565-565],
 assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' }))); ref {StringUtils, FOO} [566-566],
 assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' }))); ref {StringUtils, FOO} [567-567],
 assertFalse(StringUtils.equalsIgnoreCase(FOO, BAR)); ref {BAR, StringUtils, FOO} [568-568],
 assertFalse(StringUtils.equalsIgnoreCase(FOO, null)); ref {StringUtils, FOO} [569-569],
 assertFalse(StringUtils.equalsIgnoreCase(null, FOO)); ref {StringUtils, FOO} [570-570],
 assertTrue(StringUtils.equalsIgnoreCase("", "")); ref {StringUtils} [571-571],
 assertFalse(StringUtils.equalsIgnoreCase("abcd", "abcd ")); ref {StringUtils} [572-572]
[m[m31.08.2022 - 15:15:23.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOf_char has 5 assertions: 
 assertEquals(-1, StringUtils.indexOf(null, ' ')); ref {StringUtils} [578-578],
 assertEquals(-1, StringUtils.indexOf("", ' ')); ref {StringUtils} [579-579],
 assertEquals(0, StringUtils.indexOf("aabaabaa", 'a')); ref {StringUtils} [580-580],
 assertEquals(2, StringUtils.indexOf("aabaabaa", 'b')); ref {StringUtils} [581-581],
 assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b')); ref {StringUtils} [583-583]
[m[m31.08.2022 - 15:15:23.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOf_charInt has 10 assertions: 
 assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); ref {StringUtils} [588-588],
 assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); ref {StringUtils} [589-589],
 assertEquals(-1, StringUtils.indexOf("", ' ', 0)); ref {StringUtils} [590-590],
 assertEquals(-1, StringUtils.indexOf("", ' ', -1)); ref {StringUtils} [591-591],
 assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); ref {StringUtils} [592-592],
 assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); ref {StringUtils} [593-593],
 assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); ref {StringUtils} [594-594],
 assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); ref {StringUtils} [595-595],
 assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); ref {StringUtils} [596-596],
 assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); ref {StringUtils} [598-598]
[m[m31.08.2022 - 15:15:23.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOf_String has 8 assertions: 
 assertEquals(-1, StringUtils.indexOf(null, null)); ref {StringUtils} [603-603],
 assertEquals(-1, StringUtils.indexOf("", null)); ref {StringUtils} [604-604],
 assertEquals(0, StringUtils.indexOf("", "")); ref {StringUtils} [605-605],
 assertEquals(0, StringUtils.indexOf("aabaabaa", "a")); ref {StringUtils} [606-606],
 assertEquals(2, StringUtils.indexOf("aabaabaa", "b")); ref {StringUtils} [607-607],
 assertEquals(1, StringUtils.indexOf("aabaabaa", "ab")); ref {StringUtils} [608-608],
 assertEquals(0, StringUtils.indexOf("aabaabaa", "")); ref {StringUtils} [609-609],
 assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b")); ref {StringUtils} [611-611]
[m[m31.08.2022 - 15:15:23.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOf_StringInt has 25 assertions: 
 assertEquals(-1, StringUtils.indexOf(null, null, 0)); ref {StringUtils} [616-616],
 assertEquals(-1, StringUtils.indexOf(null, null, -1)); ref {StringUtils} [617-617],
 assertEquals(-1, StringUtils.indexOf(null, "", 0)); ref {StringUtils} [618-618],
 assertEquals(-1, StringUtils.indexOf(null, "", -1)); ref {StringUtils} [619-619],
 assertEquals(-1, StringUtils.indexOf("", null, 0)); ref {StringUtils} [620-620],
 assertEquals(-1, StringUtils.indexOf("", null, -1)); ref {StringUtils} [621-621],
 assertEquals(0, StringUtils.indexOf("", "", 0)); ref {StringUtils} [622-622],
 assertEquals(0, StringUtils.indexOf("", "", -1)); ref {StringUtils} [623-623],
 assertEquals(0, StringUtils.indexOf("", "", 9)); ref {StringUtils} [624-624],
 assertEquals(0, StringUtils.indexOf("abc", "", 0)); ref {StringUtils} [625-625],
 assertEquals(0, StringUtils.indexOf("abc", "", -1)); ref {StringUtils} [626-626],
 assertEquals(3, StringUtils.indexOf("abc", "", 9)); ref {StringUtils} [627-627],
 assertEquals(3, StringUtils.indexOf("abc", "", 3)); ref {StringUtils} [628-628],
 assertEquals(0, StringUtils.indexOf("aabaabaa", "a", 0)); ref {StringUtils} [629-629],
 assertEquals(2, StringUtils.indexOf("aabaabaa", "b", 0)); ref {StringUtils} [630-630],
 assertEquals(1, StringUtils.indexOf("aabaabaa", "ab", 0)); ref {StringUtils} [631-631],
 assertEquals(5, StringUtils.indexOf("aabaabaa", "b", 3)); ref {StringUtils} [632-632],
 assertEquals(-1, StringUtils.indexOf("aabaabaa", "b", 9)); ref {StringUtils} [633-633],
 assertEquals(2, StringUtils.indexOf("aabaabaa", "b", -1)); ref {StringUtils} [634-634],
 assertEquals(2, StringUtils.indexOf("aabaabaa", "", 2)); ref {StringUtils} [635-635],
 // Test that startIndex works correctly, i.e. cannot match before startIndex
assertEquals(7, StringUtils.indexOf("12345678", "8", 5)); ref {StringUtils} [638-638],
 assertEquals(7, StringUtils.indexOf("12345678", "8", 6)); ref {StringUtils} [639-639],
 // 7 is last index
assertEquals(7, StringUtils.indexOf("12345678", "8", 7)); ref {StringUtils} [640-640],
 assertEquals(-1, StringUtils.indexOf("12345678", "8", 8)); ref {StringUtils} [641-641],
 assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b", 3)); ref {StringUtils} [643-643]
[m[m31.08.2022 - 15:15:23.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringCharArray has 11 assertions: 
 assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null)); ref {StringUtils} [648-648],
 assertEquals(-1, StringUtils.indexOfAny(null, new char[0])); ref {StringUtils} [649-649],
 assertEquals(-1, StringUtils.indexOfAny(null, new char[] { 'a', 'b' })); ref {StringUtils} [650-650],
 assertEquals(-1, StringUtils.indexOfAny("", (char[]) null)); ref {StringUtils} [652-652],
 assertEquals(-1, StringUtils.indexOfAny("", new char[0])); ref {StringUtils} [653-653],
 assertEquals(-1, StringUtils.indexOfAny("", new char[] { 'a', 'b' })); ref {StringUtils} [654-654],
 assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (char[]) null)); ref {StringUtils} [656-656],
 assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", new char[0])); ref {StringUtils} [657-657],
 assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", new char[] { 'z', 'a' })); ref {StringUtils} [658-658],
 assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", new char[] { 'b', 'y' })); ref {StringUtils} [659-659],
 assertEquals(-1, StringUtils.indexOfAny("ab", new char[] { 'z' })); ref {StringUtils} [660-660]
[m[m31.08.2022 - 15:15:23.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringCharArrayWithSupplementaryChars has 4 assertions: 
 assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [668-668],
 assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [669-669],
 assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray())); ref {CharU20000, StringUtils} [670-670],
 assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [671-671]
[m[m31.08.2022 - 15:15:23.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringString has 11 assertions: 
 assertEquals(-1, StringUtils.indexOfAny(null, (String) null)); ref {StringUtils} [676-676],
 assertEquals(-1, StringUtils.indexOfAny(null, "")); ref {StringUtils} [677-677],
 assertEquals(-1, StringUtils.indexOfAny(null, "ab")); ref {StringUtils} [678-678],
 assertEquals(-1, StringUtils.indexOfAny("", (String) null)); ref {StringUtils} [680-680],
 assertEquals(-1, StringUtils.indexOfAny("", "")); ref {StringUtils} [681-681],
 assertEquals(-1, StringUtils.indexOfAny("", "ab")); ref {StringUtils} [682-682],
 assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (String) null)); ref {StringUtils} [684-684],
 assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", "")); ref {StringUtils} [685-685],
 assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", "za")); ref {StringUtils} [686-686],
 assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", "by")); ref {StringUtils} [687-687],
 assertEquals(-1, StringUtils.indexOfAny("ab", "z")); ref {StringUtils} [688-688]
[m[m31.08.2022 - 15:15:23.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringStringArray has 14 assertions: 
 assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); ref {StringUtils} [693-693],
 assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); ref {StringUtils, FOOBAR_SUB_ARRAY} [694-694],
 assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); ref {StringUtils, FOOBAR} [695-695],
 assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); ref {StringUtils, FOOBAR, FOOBAR_SUB_ARRAY} [696-696],
 assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); ref {StringUtils, FOOBAR} [697-697],
 assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); ref {StringUtils} [698-698],
 assertEquals(-1, StringUtils.indexOfAny("", new String[0])); ref {StringUtils} [699-699],
 assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { "llll" })); ref {StringUtils, FOOBAR} [700-700],
 assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] { "" })); ref {StringUtils, FOOBAR} [701-701],
 assertEquals(0, StringUtils.indexOfAny("", new String[] { "" })); ref {StringUtils} [702-702],
 assertEquals(-1, StringUtils.indexOfAny("", new String[] { "a" })); ref {StringUtils} [703-703],
 assertEquals(-1, StringUtils.indexOfAny("", new String[] { null })); ref {StringUtils} [704-704],
 assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { null })); ref {StringUtils, FOOBAR} [705-705],
 assertEquals(-1, StringUtils.indexOfAny(null, new String[] { null })); ref {StringUtils} [706-706]
[m[m31.08.2022 - 15:15:23.214 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringStringWithSupplementaryChars has 4 assertions: 
 assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); ref {CharU20000, CharU20001, StringUtils} [714-714],
 assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); ref {CharU20000, CharU20001, StringUtils} [715-715],
 assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); ref {CharU20000, StringUtils} [716-716],
 assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); ref {CharU20000, CharU20001, StringUtils} [717-717]
[m[m31.08.2022 - 15:15:23.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringCharArray has 12 assertions: 
 assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null)); ref {StringUtils} [722-722],
 assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0])); ref {StringUtils} [723-723],
 assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] { 'a', 'b' })); ref {StringUtils} [724-724],
 assertEquals(-1, StringUtils.indexOfAnyBut("", (char[]) null)); ref {StringUtils} [726-726],
 assertEquals(-1, StringUtils.indexOfAnyBut("", new char[0])); ref {StringUtils} [727-727],
 assertEquals(-1, StringUtils.indexOfAnyBut("", new char[] { 'a', 'b' })); ref {StringUtils} [728-728],
 assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (char[]) null)); ref {StringUtils} [730-730],
 assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", new char[0])); ref {StringUtils} [731-731],
 assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] { 'z', 'a' })); ref {StringUtils} [732-732],
 assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] { 'b', 'y' })); ref {StringUtils} [733-733],
 assertEquals(-1, StringUtils.indexOfAnyBut("aba", new char[] { 'a', 'b' })); ref {StringUtils} [734-734],
 assertEquals(0, StringUtils.indexOfAnyBut("aba", new char[] { 'z' })); ref {StringUtils} [735-735]
[m[m31.08.2022 - 15:15:23.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringCharArrayWithSupplementaryChars has 4 assertions: 
 assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [741-741],
 assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [742-742],
 assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); ref {CharU20000, StringUtils} [743-743],
 assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); ref {CharU20000, CharU20001, StringUtils} [744-744]
[m[m31.08.2022 - 15:15:23.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringString has 11 assertions: 
 assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null)); ref {StringUtils} [749-749],
 assertEquals(-1, StringUtils.indexOfAnyBut(null, "")); ref {StringUtils} [750-750],
 assertEquals(-1, StringUtils.indexOfAnyBut(null, "ab")); ref {StringUtils} [751-751],
 assertEquals(-1, StringUtils.indexOfAnyBut("", (String) null)); ref {StringUtils} [753-753],
 assertEquals(-1, StringUtils.indexOfAnyBut("", "")); ref {StringUtils} [754-754],
 assertEquals(-1, StringUtils.indexOfAnyBut("", "ab")); ref {StringUtils} [755-755],
 assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (String) null)); ref {StringUtils} [757-757],
 assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", "")); ref {StringUtils} [758-758],
 assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", "za")); ref {StringUtils} [759-759],
 assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", "by")); ref {StringUtils} [760-760],
 assertEquals(0, StringUtils.indexOfAnyBut("ab", "z")); ref {StringUtils} [761-761]
[m[m31.08.2022 - 15:15:23.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars has 4 assertions: 
 assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); ref {CharU20000, CharU20001, StringUtils} [766-766],
 assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); ref {CharU20000, CharU20001, StringUtils} [767-767],
 assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); ref {CharU20000, StringUtils} [768-768],
 assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); ref {CharU20000, CharU20001, StringUtils} [769-769]
[m[m31.08.2022 - 15:15:23.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfIgnoreCase_String has 11 assertions: 
 assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); ref {StringUtils} [774-774],
 assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); ref {StringUtils} [775-775],
 assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); ref {StringUtils} [776-776],
 assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); ref {StringUtils} [777-777],
 assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); ref {StringUtils} [778-778],
 assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); ref {StringUtils} [779-779],
 assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); ref {StringUtils} [780-780],
 assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); ref {StringUtils} [781-781],
 assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); ref {StringUtils} [782-782],
 assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); ref {StringUtils} [783-783],
 assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); ref {StringUtils} [784-784]
[m[m31.08.2022 - 15:15:23.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfIgnoreCase_StringInt has 14 assertions: 
 assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", -1)); ref {StringUtils} [789-789],
 assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 0)); ref {StringUtils} [790-790],
 assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 1)); ref {StringUtils} [791-791],
 assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 2)); ref {StringUtils} [792-792],
 assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 3)); ref {StringUtils} [793-793],
 assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 4)); ref {StringUtils} [794-794],
 assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 5)); ref {StringUtils} [795-795],
 assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 6)); ref {StringUtils} [796-796],
 assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 7)); ref {StringUtils} [797-797],
 assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 8)); ref {StringUtils} [798-798],
 assertEquals(1, StringUtils.indexOfIgnoreCase("aab", "AB", 1)); ref {StringUtils} [799-799],
 assertEquals(5, StringUtils.indexOfIgnoreCase("aabaabaa", "", 5)); ref {StringUtils} [800-800],
 assertEquals(-1, StringUtils.indexOfIgnoreCase("ab", "AAB", 0)); ref {StringUtils} [801-801],
 assertEquals(-1, StringUtils.indexOfIgnoreCase("aab", "AAB", 1)); ref {StringUtils} [802-802]
[m[m31.08.2022 - 15:15:23.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testLastIndexOf_char has 5 assertions: 
 assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); ref {StringUtils} [807-807],
 assertEquals(-1, StringUtils.lastIndexOf("", ' ')); ref {StringUtils} [808-808],
 assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); ref {StringUtils} [809-809],
 assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); ref {StringUtils} [810-810],
 assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); ref {StringUtils} [812-812]
[m[m31.08.2022 - 15:15:23.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testLastIndexOf_charInt has 11 assertions: 
 assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); ref {StringUtils} [817-817],
 assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); ref {StringUtils} [818-818],
 assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); ref {StringUtils} [819-819],
 assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); ref {StringUtils} [820-820],
 assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); ref {StringUtils} [821-821],
 assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); ref {StringUtils} [822-822],
 assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); ref {StringUtils} [823-823],
 assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); ref {StringUtils} [824-824],
 assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); ref {StringUtils} [825-825],
 assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); ref {StringUtils} [826-826],
 assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); ref {StringUtils} [828-828]
[m[m31.08.2022 - 15:15:23.215 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testLastIndexOf_String has 9 assertions: 
 assertEquals(-1, StringUtils.lastIndexOf(null, null)); ref {StringUtils} [833-833],
 assertEquals(-1, StringUtils.lastIndexOf("", null)); ref {StringUtils} [834-834],
 assertEquals(-1, StringUtils.lastIndexOf("", "a")); ref {StringUtils} [835-835],
 assertEquals(0, StringUtils.lastIndexOf("", "")); ref {StringUtils} [836-836],
 assertEquals(8, StringUtils.lastIndexOf("aabaabaa", "")); ref {StringUtils} [837-837],
 assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a")); ref {StringUtils} [838-838],
 assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b")); ref {StringUtils} [839-839],
 assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab")); ref {StringUtils} [840-840],
 assertEquals(4, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "ab")); ref {StringUtils} [842-842]
[m[m31.08.2022 - 15:15:23.224 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testLastIndexOf_StringInt has 30 assertions: 
 assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); ref {StringUtils} [847-847],
 assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); ref {StringUtils} [848-848],
 assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); ref {StringUtils} [849-849],
 assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); ref {StringUtils} [850-850],
 assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); ref {StringUtils} [851-851],
 assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); ref {StringUtils} [852-852],
 assertEquals(0, StringUtils.lastIndexOf("", "", 0)); ref {StringUtils} [853-853],
 assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); ref {StringUtils} [854-854],
 assertEquals(0, StringUtils.lastIndexOf("", "", 9)); ref {StringUtils} [855-855],
 assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); ref {StringUtils} [856-856],
 assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); ref {StringUtils} [857-857],
 assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); ref {StringUtils} [858-858],
 assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); ref {StringUtils} [859-859],
 assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); ref {StringUtils} [860-860],
 assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); ref {StringUtils} [861-861],
 assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); ref {StringUtils} [862-862],
 assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); ref {StringUtils} [863-863],
 assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); ref {StringUtils} [864-864],
 assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); ref {StringUtils} [865-865],
 assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); ref {StringUtils} [866-866],
 assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1)); ref {StringUtils} [867-867],
 // Test that fromIndex works correctly, i.e. cannot match after fromIndex
assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9)); ref {StringUtils} [870-870],
 assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8)); ref {StringUtils} [871-871],
 // 7 is last index
assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); ref {StringUtils} [872-872],
 assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6)); ref {StringUtils} [873-873],
 assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1)); ref {StringUtils} [875-875],
 assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2)); ref {StringUtils} [876-876],
 assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2)); ref {StringUtils} [877-877],
 assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3)); ref {StringUtils} [878-878],
 assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3)); ref {StringUtils} [880-880]
[m[m31.08.2022 - 15:15:23.224 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testLastIndexOfAny_StringStringArray has 18 assertions: 
 // test both types of ...
assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null)); ref {StringUtils} [885-885],
 // ... varargs invocation
assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); ref {StringUtils} [886-886],
 // Missing varag
assertEquals(-1, StringUtils.lastIndexOfAny(null)); ref {StringUtils} [887-887],
 assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY)); ref {StringUtils, FOOBAR_SUB_ARRAY} [888-888],
 // test both types of ...
assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null)); ref {StringUtils, FOOBAR} [889-889],
 // ... varargs invocation
assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); ref {StringUtils, FOOBAR} [890-890],
 // Missing vararg
assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); ref {StringUtils, FOOBAR} [891-891],
 assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); ref {StringUtils, FOOBAR, FOOBAR_SUB_ARRAY} [892-892],
 assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0])); ref {StringUtils, FOOBAR} [893-893],
 assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0])); ref {StringUtils} [894-894],
 assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0])); ref {StringUtils} [895-895],
 assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] { "llll" })); ref {StringUtils, FOOBAR} [896-896],
 assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] { "" })); ref {StringUtils, FOOBAR} [897-897],
 assertEquals(0, StringUtils.lastIndexOfAny("", new String[] { "" })); ref {StringUtils} [898-898],
 assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] { "a" })); ref {StringUtils} [899-899],
 assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] { null })); ref {StringUtils} [900-900],
 assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] { null })); ref {StringUtils, FOOBAR} [901-901],
 assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] { null })); ref {StringUtils} [902-902]
[m[m31.08.2022 - 15:15:23.224 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testLastIndexOfIgnoreCase_String has 14 assertions: 
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); ref {StringUtils} [907-907],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); ref {StringUtils} [908-908],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); ref {StringUtils} [909-909],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); ref {StringUtils} [910-910],
 assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); ref {StringUtils} [911-911],
 assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); ref {StringUtils} [912-912],
 assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); ref {StringUtils} [913-913],
 assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); ref {StringUtils} [914-914],
 assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b")); ref {StringUtils} [915-915],
 assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")); ref {StringUtils} [916-916],
 assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab")); ref {StringUtils} [917-917],
 assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB")); ref {StringUtils} [918-918],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB")); ref {StringUtils} [919-919],
 assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aab", "AAB")); ref {StringUtils} [920-920]
[m[m31.08.2022 - 15:15:23.224 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testLastIndexOfIgnoreCase_StringInt has 21 assertions: 
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0)); ref {StringUtils} [925-925],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1)); ref {StringUtils} [926-926],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", 0)); ref {StringUtils} [927-927],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", -1)); ref {StringUtils} [928-928],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, 0)); ref {StringUtils} [929-929],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, -1)); ref {StringUtils} [930-930],
 assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 0)); ref {StringUtils} [931-931],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "", -1)); ref {StringUtils} [932-932],
 assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 9)); ref {StringUtils} [933-933],
 assertEquals(0, StringUtils.lastIndexOfIgnoreCase("abc", "", 0)); ref {StringUtils} [934-934],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("abc", "", -1)); ref {StringUtils} [935-935],
 assertEquals(3, StringUtils.lastIndexOfIgnoreCase("abc", "", 9)); ref {StringUtils} [936-936],
 assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8)); ref {StringUtils} [937-937],
 assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8)); ref {StringUtils} [938-938],
 assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8)); ref {StringUtils} [939-939],
 assertEquals(2, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 3)); ref {StringUtils} [940-940],
 assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9)); ref {StringUtils} [941-941],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1)); ref {StringUtils} [942-942],
 assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0)); ref {StringUtils} [943-943],
 assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0)); ref {StringUtils} [944-944],
 assertEquals(1, StringUtils.lastIndexOfIgnoreCase("aab", "AB", 1)); ref {StringUtils} [945-945]
[m[m31.08.2022 - 15:15:23.224 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testLastOrdinalIndexOf has 11 assertions: 
 assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); ref {StringUtils} [950-950],
 assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); ref {StringUtils} [951-951],
 assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); ref {StringUtils} [952-952],
 assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); ref {StringUtils} [953-953],
 assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); ref {StringUtils} [954-954],
 assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); ref {StringUtils} [955-955],
 assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); ref {StringUtils} [956-956],
 assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); ref {StringUtils} [957-957],
 assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); ref {StringUtils} [958-958],
 assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); ref {StringUtils} [959-959],
 assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); ref {StringUtils} [960-960]
[m[m31.08.2022 - 15:15:23.224 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testOrdinalIndexOf has 55 assertions: 
 assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); ref {Integer, StringUtils, Integer.MIN_VALUE} [965-965],
 assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); ref {Integer, StringUtils, Integer.MIN_VALUE} [966-966],
 assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); ref {Integer, StringUtils, Integer.MIN_VALUE} [967-967],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); ref {Integer, StringUtils, Integer.MIN_VALUE} [968-968],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); ref {Integer, StringUtils, Integer.MIN_VALUE} [969-969],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); ref {Integer, StringUtils, Integer.MIN_VALUE} [970-970],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); ref {Integer, StringUtils, Integer.MIN_VALUE} [971-971],
 assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); ref {StringUtils} [973-973],
 assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); ref {StringUtils} [974-974],
 assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); ref {StringUtils} [975-975],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); ref {StringUtils} [976-976],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); ref {StringUtils} [977-977],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); ref {StringUtils} [978-978],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); ref {StringUtils} [979-979],
 assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); ref {StringUtils} [981-981],
 assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); ref {StringUtils} [982-982],
 assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); ref {StringUtils} [983-983],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); ref {StringUtils} [984-984],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); ref {StringUtils} [985-985],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); ref {StringUtils} [986-986],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); ref {StringUtils} [987-987],
 assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); ref {StringUtils} [989-989],
 assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); ref {StringUtils} [990-990],
 assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); ref {StringUtils} [991-991],
 assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); ref {StringUtils} [992-992],
 assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); ref {StringUtils} [993-993],
 assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); ref {StringUtils} [994-994],
 assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); ref {StringUtils} [995-995],
 assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); ref {StringUtils} [997-997],
 assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); ref {StringUtils} [998-998],
 assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); ref {StringUtils} [999-999],
 assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); ref {StringUtils} [1000-1000],
 assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); ref {StringUtils} [1001-1001],
 assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); ref {StringUtils} [1002-1002],
 assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); ref {StringUtils} [1003-1003],
 assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1005-1005],
 assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1006-1006],
 assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1007-1007],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1008-1008],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1009-1009],
 assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1010-1010],
 assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1011-1011],
 assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); ref {StringUtils} [1013-1013],
 assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); ref {StringUtils} [1014-1014],
 assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); ref {StringUtils} [1015-1015],
 assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); ref {StringUtils} [1016-1016],
 assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); ref {StringUtils} [1017-1017],
 assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); ref {StringUtils} [1018-1018],
 assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); ref {StringUtils} [1019-1019],
 assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); ref {StringUtils} [1020-1020],
 assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); ref {StringUtils} [1021-1021],
 assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); ref {StringUtils} [1022-1022],
 assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); ref {StringUtils} [1023-1023],
 assertEquals(3, StringUtils.ordinalIndexOf("aaaaaa", "aa", 2)); ref {StringUtils} [1025-1025],
 assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaa", "aa", 3)); ref {StringUtils} [1026-1026]
[m[m31.08.2022 - 15:15:23.226 [INFO ] ParsingStrategy.parseTestSuite() - Found 10 test cases
[m[m31.08.2022 - 15:15:23.226 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.TripleTest::testTripleOf has 8 assertions: 
 assertTrue(triple instanceof ImmutableTriple<?, ?, ?>); ref {triple} [38-38],
 assertEquals(0, ((ImmutableTriple<Integer, String, Boolean>) triple).left.intValue()); ref {((ImmutableTriple<Integer, String, Boolean>) triple).left, triple} [39-39],
 assertEquals("foo", ((ImmutableTriple<Integer, String, Boolean>) triple).middle); ref {triple, ((ImmutableTriple<Integer, String, Boolean>) triple).middle} [40-40],
 assertEquals(Boolean.TRUE, ((ImmutableTriple<Integer, String, Boolean>) triple).right); ref {Boolean.TRUE, triple, ((ImmutableTriple<Integer, String, Boolean>) triple).right, Boolean} [41-41],
 assertTrue(triple2 instanceof ImmutableTriple<?, ?, ?>); ref {triple2} [43-43],
 assertNull(((ImmutableTriple<Object, String, Long>) triple2).left); ref {triple2, ((ImmutableTriple<Object, String, Long>) triple2).left} [44-44],
 assertEquals("bar", ((ImmutableTriple<Object, String, Long>) triple2).middle); ref {triple2, ((ImmutableTriple<Object, String, Long>) triple2).middle} [45-45],
 assertEquals(new Long(200L), ((ImmutableTriple<Object, String, Long>) triple2).right); ref {triple2, ((ImmutableTriple<Object, String, Long>) triple2).right} [46-46]
[m[m31.08.2022 - 15:15:23.227 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.TripleTest::testCompatibilityBetweenTriples has 3 assertions: 
 assertEquals(triple, triple2); ref {triple2, triple} [53-53],
 assertEquals(triple.hashCode(), triple2.hashCode()); ref {triple2, triple} [54-54],
 assertTrue(set.contains(triple2)); ref {set, triple2} [57-57]
[m[m31.08.2022 - 15:15:23.227 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.TripleTest::testComparable1 has 4 assertions: 
 assertTrue(triple1.compareTo(triple1) == 0); ref {triple1} [64-64],
 assertTrue(triple1.compareTo(triple2) < 0); ref {triple2, triple1} [65-65],
 assertTrue(triple2.compareTo(triple2) == 0); ref {triple2} [66-66],
 assertTrue(triple2.compareTo(triple1) > 0); ref {triple2, triple1} [67-67]
[m[m31.08.2022 - 15:15:23.227 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.TripleTest::testComparable2 has 4 assertions: 
 assertTrue(triple1.compareTo(triple1) == 0); ref {triple1} [74-74],
 assertTrue(triple1.compareTo(triple2) < 0); ref {triple2, triple1} [75-75],
 assertTrue(triple2.compareTo(triple2) == 0); ref {triple2} [76-76],
 assertTrue(triple2.compareTo(triple1) > 0); ref {triple2, triple1} [77-77]
[m[m31.08.2022 - 15:15:23.227 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.TripleTest::testComparable3 has 4 assertions: 
 assertTrue(triple1.compareTo(triple1) == 0); ref {triple1} [84-84],
 assertTrue(triple1.compareTo(triple2) < 0); ref {triple2, triple1} [85-85],
 assertTrue(triple2.compareTo(triple2) == 0); ref {triple2} [86-86],
 assertTrue(triple2.compareTo(triple1) > 0); ref {triple2, triple1} [87-87]
[m[m31.08.2022 - 15:15:23.227 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.TripleTest::testComparable4 has 4 assertions: 
 assertTrue(triple1.compareTo(triple1) == 0); ref {triple1} [94-94],
 assertTrue(triple1.compareTo(triple2) < 0); ref {triple2, triple1} [95-95],
 assertTrue(triple2.compareTo(triple2) == 0); ref {triple2} [96-96],
 assertTrue(triple2.compareTo(triple1) > 0); ref {triple2, triple1} [97-97]
[m[m31.08.2022 - 15:15:23.227 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.TripleTest::testToString has 1 assertions: 
 assertEquals("(Key,Something,Value)", triple.toString()); ref {triple} [103-103]
[m[m31.08.2022 - 15:15:23.227 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.TripleTest::testToStringCustom has 1 assertions: 
 assertEquals("Test created on " + "04-25-2011", triple.toString("Test created on %3$tm-%3$td-%3$tY")); ref {triple} [111-111]
[m[m31.08.2022 - 15:15:23.227 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.TripleTest::testFormattable_simple has 1 assertions: 
 assertEquals("(Key,Something,Value)", String.format("%1$s", triple)); ref {triple, String} [117-117]
[m[m31.08.2022 - 15:15:23.227 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.TripleTest::testFormattable_padded has 1 assertions: 
 assertEquals("         (Key,Something,Value)", String.format("%1$30s", triple)); ref {triple, String} [123-123]
[m[m31.08.2022 - 15:15:23.247 [INFO ] ParsingStrategy.parseTestSuite() - Found 55 test cases
[m[m31.08.2022 - 15:15:23.247 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllObjectArray has 22 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, array, ArrayUtils} [41-41],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [42-42],
 assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, array, ArrayUtils} [44-44],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [45-45],
 assertArrayEquals(new Object[] { "a" }, array); ref {array} [47-47],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [48-48],
 assertArrayEquals(new Object[] { "a", "d" }, array); ref {array} [50-50],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [51-51],
 assertArrayEquals(new Object[] { "b", "c" }, array); ref {array} [53-53],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [54-54],
 assertArrayEquals(new Object[] { "c" }, array); ref {array} [56-56],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [57-57],
 assertArrayEquals(new Object[] { "c", "e" }, array); ref {array} [59-59],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [60-60],
 assertArrayEquals(new Object[] { "b", "d" }, array); ref {array} [62-62],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [63-63],
 assertArrayEquals(new Object[] { "c" }, array); ref {array} [65-65],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [66-66],
 assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, array, ArrayUtils} [68-68],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [69-69],
 assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, array, ArrayUtils} [71-71],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [72-72]
[m[m31.08.2022 - 15:15:23.247 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllObjectArrayRemoveNone has 3 assertions: 
 assertNotSame(array1, array2); ref {array2, array1} [79-79],
 assertArrayEquals(array1, array2); ref {array2, array1} [80-80],
 assertEquals(Object.class, array2.getClass().getComponentType()); ref {array2} [81-81]
[m[m31.08.2022 - 15:15:23.247 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllObjectArrayNegativeIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.247 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllObjectArrayOutOfBoundsIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.247 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllNullObjectArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllNumberArray has 13 assertions: 
 assertEquals(3, inarray.length); ref {inarray.length, inarray} [102-102],
 assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray); ref {Integer, outarray, Byte} [105-105],
 assertEquals(Number.class, outarray.getClass().getComponentType()); ref {outarray} [106-106],
 assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); ref {Integer, outarray} [108-108],
 assertEquals(Number.class, outarray.getClass().getComponentType()); ref {outarray} [109-109],
 assertEquals(0, outarray.length); ref {outarray, outarray.length} [111-111],
 assertEquals(Number.class, outarray.getClass().getComponentType()); ref {outarray} [112-112],
 assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray); ref {outarray, Byte} [115-115],
 assertEquals(Number.class, outarray.getClass().getComponentType()); ref {outarray} [116-116],
 assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray); ref {outarray, Long} [118-118],
 assertEquals(Number.class, outarray.getClass().getComponentType()); ref {outarray} [119-119],
 assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); ref {Integer, outarray} [121-121],
 assertEquals(Number.class, outarray.getClass().getComponentType()); ref {outarray} [122-122]
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllBooleanArray has 28 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [129-129],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [130-130],
 assertTrue(Arrays.equals(new boolean[] { false }, array)); ref {array, Arrays} [132-132],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [133-133],
 assertTrue(Arrays.equals(new boolean[] { true }, array)); ref {array, Arrays} [135-135],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [136-136],
 assertTrue(Arrays.equals(new boolean[] { true, true }, array)); ref {array, Arrays} [138-138],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [139-139],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [142-142],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [143-143],
 assertTrue(Arrays.equals(new boolean[] { false }, array)); ref {array, Arrays} [145-145],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [146-146],
 assertTrue(Arrays.equals(new boolean[] { false }, array)); ref {array, Arrays} [148-148],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [149-149],
 assertTrue(Arrays.equals(new boolean[] { true }, array)); ref {array, Arrays} [151-151],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [152-152],
 assertTrue(Arrays.equals(new boolean[] { false, false }, array)); ref {array, Arrays} [154-154],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [155-155],
 assertTrue(Arrays.equals(new boolean[] { true, true, true }, array)); ref {array, Arrays} [157-157],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [158-158],
 assertTrue(Arrays.equals(new boolean[] { true, true }, array)); ref {array, Arrays} [160-160],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [161-161],
 assertTrue(Arrays.equals(new boolean[] { false, false, false }, array)); ref {array, Arrays} [163-163],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [164-164],
 assertTrue(Arrays.equals(new boolean[] { true, true, true, true }, array)); ref {array, Arrays} [166-166],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [167-167],
 assertTrue(Arrays.equals(new boolean[] { false, true, false, true }, array)); ref {array, Arrays} [169-169],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [170-170]
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllBooleanArrayRemoveNone has 3 assertions: 
 assertNotSame(array1, array2); ref {array2, array1} [177-177],
 assertTrue(Arrays.equals(array1, array2)); ref {array2, array1, Arrays} [178-178],
 assertEquals(boolean.class, array2.getClass().getComponentType()); ref {array2} [179-179]
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllBooleanArrayNegativeIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllBooleanArrayOutOfBoundsIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllNullBooleanArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllByteArray has 24 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils, Arrays} [201-201],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [202-202],
 assertTrue(Arrays.equals(new byte[] { 2 }, array)); ref {array, Arrays} [204-204],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [205-205],
 assertTrue(Arrays.equals(new byte[] { 1 }, array)); ref {array, Arrays} [207-207],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [208-208],
 assertTrue(Arrays.equals(new byte[] { 1, 1 }, array)); ref {array, Arrays} [210-210],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [211-211],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils, Arrays} [214-214],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [215-215],
 assertTrue(Arrays.equals(new byte[] { 3 }, array)); ref {array, Arrays} [217-217],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [218-218],
 assertTrue(Arrays.equals(new byte[] { 1 }, array)); ref {array, Arrays} [220-220],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [221-221],
 assertTrue(Arrays.equals(new byte[] { 2 }, array)); ref {array, Arrays} [223-223],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [224-224],
 assertTrue(Arrays.equals(new byte[] { 1, 3, 5 }, array)); ref {array, Arrays} [226-226],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [227-227],
 assertTrue(Arrays.equals(new byte[] { 2, 4 }, array)); ref {array, Arrays} [229-229],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [230-230],
 assertTrue(Arrays.equals(new byte[] { 1, 3, 5, 7 }, array)); ref {array, Arrays} [232-232],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [233-233],
 assertTrue(Arrays.equals(new byte[] { 2, 4, 6 }, array)); ref {array, Arrays} [235-235],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [236-236]
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllByteArrayRemoveNone has 3 assertions: 
 assertNotSame(array1, array2); ref {array2, array1} [243-243],
 assertArrayEquals(array1, array2); ref {array2, array1} [244-244],
 assertEquals(byte.class, array2.getClass().getComponentType()); ref {array2} [245-245]
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllByteArrayNegativeIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllByteArrayOutOfBoundsIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllNullByteArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllCharArray has 24 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_CHAR_ARRAY} [267-267],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [268-268],
 assertTrue(Arrays.equals(new char[] { 'b' }, array)); ref {array, Arrays} [270-270],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [271-271],
 assertTrue(Arrays.equals(new char[] { 'a' }, array)); ref {array, Arrays} [273-273],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [274-274],
 assertTrue(Arrays.equals(new char[] { 'a', 'c' }, array)); ref {array, Arrays} [276-276],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [277-277],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_CHAR_ARRAY} [280-280],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [281-281],
 assertTrue(Arrays.equals(new char[] { 'c' }, array)); ref {array, Arrays} [283-283],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [284-284],
 assertTrue(Arrays.equals(new char[] { 'a' }, array)); ref {array, Arrays} [286-286],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [287-287],
 assertTrue(Arrays.equals(new char[] { 'b' }, array)); ref {array, Arrays} [289-289],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [290-290],
 assertTrue(Arrays.equals(new char[] { 'a', 'c', 'e' }, array)); ref {array, Arrays} [292-292],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [293-293],
 assertTrue(Arrays.equals(new char[] { 'b', 'd' }, array)); ref {array, Arrays} [295-295],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [296-296],
 assertTrue(Arrays.equals(new char[] { 'a', 'c', 'e', 'g' }, array)); ref {array, Arrays} [298-298],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [299-299],
 assertTrue(Arrays.equals(new char[] { 'b', 'd', 'f' }, array)); ref {array, Arrays} [301-301],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [302-302]
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllCharArrayRemoveNone has 3 assertions: 
 assertNotSame(array1, array2); ref {array2, array1} [309-309],
 assertArrayEquals(array1, array2); ref {array2, array1} [310-310],
 assertEquals(char.class, array2.getClass().getComponentType()); ref {array2} [311-311]
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllCharArrayNegativeIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllCharArrayOutOfBoundsIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.248 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllNullCharArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllDoubleArray has 24 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils, Arrays} [333-333],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [334-334],
 assertTrue(Arrays.equals(new double[] { 2 }, array)); ref {array, Arrays} [336-336],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [337-337],
 assertTrue(Arrays.equals(new double[] { 1 }, array)); ref {array, Arrays} [339-339],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [340-340],
 assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); ref {array, Arrays} [342-342],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [343-343],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils, Arrays} [346-346],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [347-347],
 assertTrue(Arrays.equals(new double[] { 3 }, array)); ref {array, Arrays} [349-349],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [350-350],
 assertTrue(Arrays.equals(new double[] { 1 }, array)); ref {array, Arrays} [352-352],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [353-353],
 assertTrue(Arrays.equals(new double[] { 2 }, array)); ref {array, Arrays} [355-355],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [356-356],
 assertTrue(Arrays.equals(new double[] { 1, 3, 5 }, array)); ref {array, Arrays} [358-358],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [359-359],
 assertTrue(Arrays.equals(new double[] { 2, 4 }, array)); ref {array, Arrays} [361-361],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [362-362],
 assertTrue(Arrays.equals(new double[] { 1, 3, 5, 7 }, array)); ref {array, Arrays} [364-364],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [365-365],
 assertTrue(Arrays.equals(new double[] { 2, 4, 6 }, array)); ref {array, Arrays} [367-367],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [368-368]
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllDoubleArrayRemoveNone has 3 assertions: 
 assertNotSame(array1, array2); ref {array2, array1} [375-375],
 assertTrue(Arrays.equals(array1, array2)); ref {array2, array1, Arrays} [376-376],
 assertEquals(double.class, array2.getClass().getComponentType()); ref {array2} [377-377]
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllDoubleArrayNegativeIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllDoubleArrayOutOfBoundsIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllNullDoubleArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllFloatArray has 24 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils, Arrays} [399-399],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [400-400],
 assertTrue(Arrays.equals(new float[] { 2 }, array)); ref {array, Arrays} [402-402],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [403-403],
 assertTrue(Arrays.equals(new float[] { 1 }, array)); ref {array, Arrays} [405-405],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [406-406],
 assertTrue(Arrays.equals(new float[] { 1, 1 }, array)); ref {array, Arrays} [408-408],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [409-409],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils, Arrays} [412-412],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [413-413],
 assertTrue(Arrays.equals(new float[] { 3 }, array)); ref {array, Arrays} [415-415],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [416-416],
 assertTrue(Arrays.equals(new float[] { 1 }, array)); ref {array, Arrays} [418-418],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [419-419],
 assertTrue(Arrays.equals(new float[] { 2 }, array)); ref {array, Arrays} [421-421],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [422-422],
 assertTrue(Arrays.equals(new float[] { 1, 3, 5 }, array)); ref {array, Arrays} [424-424],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [425-425],
 assertTrue(Arrays.equals(new float[] { 2, 4 }, array)); ref {array, Arrays} [427-427],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [428-428],
 assertTrue(Arrays.equals(new float[] { 1, 3, 5, 7 }, array)); ref {array, Arrays} [430-430],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [431-431],
 assertTrue(Arrays.equals(new float[] { 2, 4, 6 }, array)); ref {array, Arrays} [433-433],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [434-434]
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllFloatArrayRemoveNone has 3 assertions: 
 assertNotSame(array1, array2); ref {array2, array1} [441-441],
 assertTrue(Arrays.equals(array1, array2)); ref {array2, array1, Arrays} [442-442],
 assertEquals(float.class, array2.getClass().getComponentType()); ref {array2} [443-443]
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllFloatArrayNegativeIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllFloatArrayOutOfBoundsIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllNullFloatArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllIntArray has 26 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_INT_ARRAY} [465-465],
 assertTrue(Arrays.equals(new int[] { 1 }, array)); ref {array, Arrays} [467-467],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_INT_ARRAY} [469-469],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [470-470],
 assertTrue(Arrays.equals(new int[] { 2 }, array)); ref {array, Arrays} [472-472],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [473-473],
 assertTrue(Arrays.equals(new int[] { 1 }, array)); ref {array, Arrays} [475-475],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [476-476],
 assertTrue(Arrays.equals(new int[] { 1, 1 }, array)); ref {array, Arrays} [478-478],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [479-479],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_INT_ARRAY} [482-482],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [483-483],
 assertTrue(Arrays.equals(new int[] { 3 }, array)); ref {array, Arrays} [485-485],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [486-486],
 assertTrue(Arrays.equals(new int[] { 1 }, array)); ref {array, Arrays} [488-488],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [489-489],
 assertTrue(Arrays.equals(new int[] { 2 }, array)); ref {array, Arrays} [491-491],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [492-492],
 assertTrue(Arrays.equals(new int[] { 1, 3, 5 }, array)); ref {array, Arrays} [494-494],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [495-495],
 assertTrue(Arrays.equals(new int[] { 2, 4 }, array)); ref {array, Arrays} [497-497],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [498-498],
 assertTrue(Arrays.equals(new int[] { 1, 3, 5, 7 }, array)); ref {array, Arrays} [500-500],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [501-501],
 assertTrue(Arrays.equals(new int[] { 2, 4, 6 }, array)); ref {array, Arrays} [503-503],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [504-504]
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllIntArrayRemoveNone has 3 assertions: 
 assertNotSame(array1, array2); ref {array2, array1} [511-511],
 assertArrayEquals(array1, array2); ref {array2, array1} [512-512],
 assertEquals(int.class, array2.getClass().getComponentType()); ref {array2} [513-513]
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllIntArrayNegativeIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllIntArrayOutOfBoundsIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.249 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllNullIntArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllLongArray has 24 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY, Arrays} [535-535],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [536-536],
 assertTrue(Arrays.equals(new long[] { 2 }, array)); ref {array, Arrays} [538-538],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [539-539],
 assertTrue(Arrays.equals(new long[] { 1 }, array)); ref {array, Arrays} [541-541],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [542-542],
 assertTrue(Arrays.equals(new long[] { 1, 1 }, array)); ref {array, Arrays} [544-544],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [545-545],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY, Arrays} [548-548],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [549-549],
 assertTrue(Arrays.equals(new long[] { 3 }, array)); ref {array, Arrays} [551-551],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [552-552],
 assertTrue(Arrays.equals(new long[] { 1 }, array)); ref {array, Arrays} [554-554],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [555-555],
 assertTrue(Arrays.equals(new long[] { 2 }, array)); ref {array, Arrays} [557-557],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [558-558],
 assertTrue(Arrays.equals(new long[] { 1, 3, 5 }, array)); ref {array, Arrays} [560-560],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [561-561],
 assertTrue(Arrays.equals(new long[] { 2, 4 }, array)); ref {array, Arrays} [563-563],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [564-564],
 assertTrue(Arrays.equals(new long[] { 1, 3, 5, 7 }, array)); ref {array, Arrays} [566-566],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [567-567],
 assertTrue(Arrays.equals(new long[] { 2, 4, 6 }, array)); ref {array, Arrays} [569-569],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [570-570]
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllLongArrayRemoveNone has 3 assertions: 
 assertNotSame(array1, array2); ref {array2, array1} [577-577],
 assertArrayEquals(array1, array2); ref {array2, array1} [578-578],
 assertEquals(long.class, array2.getClass().getComponentType()); ref {array2} [579-579]
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllLongArrayNegativeIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllLongArrayOutOfBoundsIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllNullLongArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllShortArray has 24 assertions: 
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils, Arrays} [601-601],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [602-602],
 assertTrue(Arrays.equals(new short[] { 2 }, array)); ref {array, Arrays} [604-604],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [605-605],
 assertTrue(Arrays.equals(new short[] { 1 }, array)); ref {array, Arrays} [607-607],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [608-608],
 assertTrue(Arrays.equals(new short[] { 1, 1 }, array)); ref {array, Arrays} [610-610],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [611-611],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils, Arrays} [614-614],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [615-615],
 assertTrue(Arrays.equals(new short[] { 3 }, array)); ref {array, Arrays} [617-617],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [618-618],
 assertTrue(Arrays.equals(new short[] { 1 }, array)); ref {array, Arrays} [620-620],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [621-621],
 assertTrue(Arrays.equals(new short[] { 2 }, array)); ref {array, Arrays} [623-623],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [624-624],
 assertTrue(Arrays.equals(new short[] { 1, 3, 5 }, array)); ref {array, Arrays} [626-626],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [627-627],
 assertTrue(Arrays.equals(new short[] { 2, 4 }, array)); ref {array, Arrays} [629-629],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [630-630],
 assertTrue(Arrays.equals(new short[] { 1, 3, 5, 7 }, array)); ref {array, Arrays} [632-632],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [633-633],
 assertTrue(Arrays.equals(new short[] { 2, 4, 6 }, array)); ref {array, Arrays} [635-635],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [636-636]
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllShortArrayRemoveNone has 3 assertions: 
 assertNotSame(array1, array2); ref {array2, array1} [643-643],
 assertArrayEquals(array1, array2); ref {array2, array1} [644-644],
 assertEquals(short.class, array2.getClass().getComponentType()); ref {array2} [645-645]
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllShortArrayNegativeIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllShortArrayOutOfBoundsIndex has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveAllNullShortArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveElementsObjectArray has 24 assertions: 
 assertNull(array); ref {array} [667-667],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, array, ArrayUtils, Arrays} [669-669],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [670-670],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, array, ArrayUtils, Arrays} [672-672],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [673-673],
 assertTrue(Arrays.equals(new Object[] { "b" }, array)); ref {array, Arrays} [675-675],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [676-676],
 assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); ref {array, Arrays} [678-678],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [679-679],
 assertNull(array); ref {array} [682-682],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, array, ArrayUtils, Arrays} [684-684],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [685-685],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, array, ArrayUtils, Arrays} [687-687],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [688-688],
 assertTrue(Arrays.equals(new Object[] { "b" }, array)); ref {array, Arrays} [690-690],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [691-691],
 assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); ref {array, Arrays} [693-693],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [694-694],
 assertTrue(Arrays.equals(new Object[] { "a" }, array)); ref {array, Arrays} [696-696],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [697-697],
 assertTrue(Arrays.equals(new Object[] { "b" }, array)); ref {array, Arrays} [699-699],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [700-700],
 assertTrue(Arrays.equals(new Object[] { "b" }, array)); ref {array, Arrays} [702-702],
 assertEquals(Object.class, array.getClass().getComponentType()); ref {array} [703-703]
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveElementBooleanArray has 24 assertions: 
 assertNull(array); ref {array} [710-710],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [712-712],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [713-713],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [715-715],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [716-716],
 assertTrue(Arrays.equals(new boolean[] { false }, array)); ref {array, Arrays} [718-718],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [719-719],
 assertTrue(Arrays.equals(new boolean[] { false, true }, array)); ref {array, Arrays} [721-721],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [722-722],
 assertNull(array); ref {array} [725-725],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [727-727],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [728-728],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [730-730],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [731-731],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [733-733],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [734-734],
 assertTrue(Arrays.equals(new boolean[] { false }, array)); ref {array, Arrays} [736-736],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [737-737],
 assertTrue(Arrays.equals(new boolean[] { true }, array)); ref {array, Arrays} [739-739],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [740-740],
 assertTrue(Arrays.equals(new boolean[] { false }, array)); ref {array, Arrays} [742-742],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [743-743],
 assertTrue(Arrays.equals(new boolean[] { false }, array)); ref {array, Arrays} [745-745],
 assertEquals(Boolean.TYPE, array.getClass().getComponentType()); ref {Boolean.TYPE, array, Boolean} [746-746]
[m[m31.08.2022 - 15:15:23.250 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveElementByteArray has 24 assertions: 
 assertNull(array); ref {array} [753-753],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils, Arrays} [755-755],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [756-756],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils, Arrays} [758-758],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [759-759],
 assertTrue(Arrays.equals(new byte[] { 2 }, array)); ref {array, Arrays} [761-761],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [762-762],
 assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); ref {array, Arrays} [764-764],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [765-765],
 assertNull(array); ref {array} [768-768],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils, Arrays} [770-770],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [771-771],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils, Arrays} [773-773],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [774-774],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils, Arrays} [776-776],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [777-777],
 assertTrue(Arrays.equals(new byte[] { 2 }, array)); ref {array, Arrays} [779-779],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [780-780],
 assertTrue(Arrays.equals(new byte[] { 1 }, array)); ref {array, Arrays} [782-782],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [783-783],
 assertTrue(Arrays.equals(new byte[] { 2 }, array)); ref {array, Arrays} [785-785],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [786-786],
 assertTrue(Arrays.equals(new byte[] { 2 }, array)); ref {array, Arrays} [788-788],
 assertEquals(Byte.TYPE, array.getClass().getComponentType()); ref {array, Byte, Byte.TYPE} [789-789]
[m[m31.08.2022 - 15:15:23.251 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveElementCharArray has 24 assertions: 
 assertNull(array); ref {array} [796-796],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_CHAR_ARRAY} [798-798],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [799-799],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_CHAR_ARRAY} [801-801],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [802-802],
 assertTrue(Arrays.equals(new char[] { 'b' }, array)); ref {array, Arrays} [804-804],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [805-805],
 assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); ref {array, Arrays} [807-807],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [808-808],
 assertNull(array); ref {array} [811-811],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_CHAR_ARRAY} [813-813],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [814-814],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_CHAR_ARRAY} [816-816],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [817-817],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_CHAR_ARRAY} [819-819],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [820-820],
 assertTrue(Arrays.equals(new char[] { 'b' }, array)); ref {array, Arrays} [822-822],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [823-823],
 assertTrue(Arrays.equals(new char[] { 'a' }, array)); ref {array, Arrays} [825-825],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [826-826],
 assertTrue(Arrays.equals(new char[] { 'b' }, array)); ref {array, Arrays} [828-828],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [829-829],
 assertTrue(Arrays.equals(new char[] { 'b' }, array)); ref {array, Arrays} [831-831],
 assertEquals(Character.TYPE, array.getClass().getComponentType()); ref {Character.TYPE, Character, array} [832-832]
[m[m31.08.2022 - 15:15:23.251 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveElementDoubleArray has 24 assertions: 
 assertNull(array); ref {array} [840-840],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils, Arrays} [842-842],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [843-843],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils, Arrays} [845-845],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [846-846],
 assertTrue(Arrays.equals(new double[] { 2 }, array)); ref {array, Arrays} [848-848],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [849-849],
 assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); ref {array, Arrays} [851-851],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [852-852],
 assertNull(array); ref {array} [855-855],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils, Arrays} [857-857],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [858-858],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils, Arrays} [860-860],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [861-861],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils, Arrays} [863-863],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [864-864],
 assertTrue(Arrays.equals(new double[] { 2 }, array)); ref {array, Arrays} [866-866],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [867-867],
 assertTrue(Arrays.equals(new double[] { 1 }, array)); ref {array, Arrays} [869-869],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [870-870],
 assertTrue(Arrays.equals(new double[] { 2 }, array)); ref {array, Arrays} [872-872],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [873-873],
 assertTrue(Arrays.equals(new double[] { 2 }, array)); ref {array, Arrays} [875-875],
 assertEquals(Double.TYPE, array.getClass().getComponentType()); ref {array, Double.TYPE, Double} [876-876]
[m[m31.08.2022 - 15:15:23.251 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveElementFloatArray has 24 assertions: 
 assertNull(array); ref {array} [884-884],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils, Arrays} [886-886],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [887-887],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils, Arrays} [889-889],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [890-890],
 assertTrue(Arrays.equals(new float[] { 2 }, array)); ref {array, Arrays} [892-892],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [893-893],
 assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); ref {array, Arrays} [895-895],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [896-896],
 assertNull(array); ref {array} [899-899],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils, Arrays} [901-901],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [902-902],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils, Arrays} [904-904],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [905-905],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils, Arrays} [907-907],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [908-908],
 assertTrue(Arrays.equals(new float[] { 2 }, array)); ref {array, Arrays} [910-910],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [911-911],
 assertTrue(Arrays.equals(new float[] { 2 }, array)); ref {array, Arrays} [913-913],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [914-914],
 assertTrue(Arrays.equals(new float[] { 1 }, array)); ref {array, Arrays} [916-916],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [917-917],
 assertTrue(Arrays.equals(new float[] { 2 }, array)); ref {array, Arrays} [919-919],
 assertEquals(Float.TYPE, array.getClass().getComponentType()); ref {Float, array, Float.TYPE} [920-920]
[m[m31.08.2022 - 15:15:23.251 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveElementIntArray has 24 assertions: 
 assertNull(array); ref {array} [927-927],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_INT_ARRAY} [929-929],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [930-930],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_INT_ARRAY} [932-932],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [933-933],
 assertTrue(Arrays.equals(new int[] { 2 }, array)); ref {array, Arrays} [935-935],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [936-936],
 assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); ref {array, Arrays} [938-938],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [939-939],
 assertNull(array); ref {array} [942-942],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_INT_ARRAY} [944-944],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [945-945],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_INT_ARRAY} [947-947],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [948-948],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); ref {array, ArrayUtils, Arrays, ArrayUtils.EMPTY_INT_ARRAY} [950-950],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [951-951],
 assertTrue(Arrays.equals(new int[] { 2 }, array)); ref {array, Arrays} [953-953],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [954-954],
 assertTrue(Arrays.equals(new int[] { 1 }, array)); ref {array, Arrays} [956-956],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [957-957],
 assertTrue(Arrays.equals(new int[] { 2 }, array)); ref {array, Arrays} [959-959],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [960-960],
 assertTrue(Arrays.equals(new int[] { 2 }, array)); ref {array, Arrays} [962-962],
 assertEquals(Integer.TYPE, array.getClass().getComponentType()); ref {Integer.TYPE, Integer, array} [963-963]
[m[m31.08.2022 - 15:15:23.251 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveElementLongArray has 24 assertions: 
 assertNull(array); ref {array} [971-971],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY, Arrays} [973-973],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [974-974],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY, Arrays} [976-976],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [977-977],
 assertTrue(Arrays.equals(new long[] { 2 }, array)); ref {array, Arrays} [979-979],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [980-980],
 assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); ref {array, Arrays} [982-982],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [983-983],
 assertNull(array); ref {array} [986-986],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY, Arrays} [988-988],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [989-989],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY, Arrays} [991-991],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [992-992],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY, Arrays} [994-994],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [995-995],
 assertTrue(Arrays.equals(new long[] { 2 }, array)); ref {array, Arrays} [997-997],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [998-998],
 assertTrue(Arrays.equals(new long[] { 2 }, array)); ref {array, Arrays} [1000-1000],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [1001-1001],
 assertTrue(Arrays.equals(new long[] { 1 }, array)); ref {array, Arrays} [1003-1003],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [1004-1004],
 assertTrue(Arrays.equals(new long[] { 2 }, array)); ref {array, Arrays} [1006-1006],
 assertEquals(Long.TYPE, array.getClass().getComponentType()); ref {array, Long, Long.TYPE} [1007-1007]
[m[m31.08.2022 - 15:15:23.251 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest::testRemoveElementShortArray has 24 assertions: 
 assertNull(array); ref {array} [1014-1014],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils, Arrays} [1016-1016],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [1017-1017],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils, Arrays} [1019-1019],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [1020-1020],
 assertTrue(Arrays.equals(new short[] { 2 }, array)); ref {array, Arrays} [1022-1022],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [1023-1023],
 assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); ref {array, Arrays} [1025-1025],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [1026-1026],
 assertNull(array); ref {array} [1029-1029],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils, Arrays} [1031-1031],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [1032-1032],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils, Arrays} [1034-1034],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [1035-1035],
 assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils, Arrays} [1037-1037],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [1038-1038],
 assertTrue(Arrays.equals(new short[] { 2 }, array)); ref {array, Arrays} [1040-1040],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [1041-1041],
 assertTrue(Arrays.equals(new short[] { 2 }, array)); ref {array, Arrays} [1043-1043],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [1044-1044],
 assertTrue(Arrays.equals(new short[] { 1 }, array)); ref {array, Arrays} [1046-1046],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [1047-1047],
 assertTrue(Arrays.equals(new short[] { 2 }, array)); ref {array, Arrays} [1049-1049],
 assertEquals(Short.TYPE, array.getClass().getComponentType()); ref {array, Short.TYPE, Short} [1050-1050]
[m[m31.08.2022 - 15:15:23.252 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 15:15:23.253 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.JavaVersionTest::testGetJavaVersion has 12 assertions: 
 assertEquals("0.9 failed", JAVA_0_9, get("0.9")); ref {JAVA_0_9} [47-47],
 assertEquals("1.1 failed", JAVA_1_1, get("1.1")); ref {JAVA_1_1} [48-48],
 assertEquals("1.2 failed", JAVA_1_2, get("1.2")); ref {JAVA_1_2} [49-49],
 assertEquals("1.3 failed", JAVA_1_3, get("1.3")); ref {JAVA_1_3} [50-50],
 assertEquals("1.4 failed", JAVA_1_4, get("1.4")); ref {JAVA_1_4} [51-51],
 assertEquals("1.5 failed", JAVA_1_5, get("1.5")); ref {JAVA_1_5} [52-52],
 assertEquals("1.6 failed", JAVA_1_6, get("1.6")); ref {JAVA_1_6} [53-53],
 assertEquals("1.7 failed", JAVA_1_7, get("1.7")); ref {JAVA_1_7} [54-54],
 assertEquals("1.8 failed", JAVA_1_8, get("1.8")); ref {JAVA_1_8} [55-55],
 assertEquals("1.9 failed", JAVA_1_9, get("1.9")); ref {JAVA_1_9} [56-56],
 assertEquals("1.10 failed", JAVA_RECENT, get("1.10")); ref {JAVA_RECENT} [57-57],
 // assertNull("2.10 unexpectedly worked", get("2.10"));
assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); ref {} [59-59]
[m[m31.08.2022 - 15:15:23.253 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.JavaVersionTest::testAtLeast has 5 assertions: 
 assertFalse("1.2 at least 1.5 passed", JAVA_1_2.atLeast(JAVA_1_5)); ref {JAVA_1_5, JAVA_1_2} [64-64],
 assertTrue("1.5 at least 1.2 failed", JAVA_1_5.atLeast(JAVA_1_2)); ref {JAVA_1_5, JAVA_1_2} [65-65],
 assertFalse("1.6 at least 1.7 passed", JAVA_1_6.atLeast(JAVA_1_7)); ref {JAVA_1_7, JAVA_1_6} [66-66],
 assertTrue("0.9 at least 1.5 failed", JAVA_0_9.atLeast(JAVA_1_5)); ref {JAVA_0_9, JAVA_1_5} [68-68],
 assertFalse("0.9 at least 1.6 passed", JAVA_0_9.atLeast(JAVA_1_6)); ref {JAVA_0_9, JAVA_1_6} [69-69]
[m[m31.08.2022 - 15:15:23.253 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.JavaVersionTest::testToString has 1 assertions: 
 assertEquals("1.2", JAVA_1_2.toString()); ref {JAVA_1_2} [74-74]
[m[m31.08.2022 - 15:15:23.255 [INFO ] ParsingStrategy.parseTestSuite() - Found 40 test cases
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testConcurrentExceptionCauseUnchecked has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testConcurrentExceptionCauseError has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testConcurrentExceptionCauseNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testConcurrentRuntimeExceptionCauseUnchecked has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testConcurrentRuntimeExceptionCauseError has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testConcurrentRuntimeExceptionCauseNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testExtractCauseNull has 1 assertions: 
 assertNull("Non null result", ConcurrentUtils.extractCause(null)); ref {ConcurrentUtils} [94-94]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testExtractCauseNullCause has 1 assertions: 
 assertNull("Non null result", ConcurrentUtils.extractCause(new ExecutionException("Test", null))); ref {ConcurrentUtils} [102-103]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testExtractCauseError has 2 assertions: 
 final Error err = new AssertionError("Test"); ref {} [111-111],
 assertEquals("Wrong error", err, e); ref {err, e} [116-116]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testExtractCauseUncheckedException has 1 assertions: 
 assertEquals("Wrong exception", rex, r); ref {r, rex} [130-130]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testExtractCauseChecked has 1 assertions: 
 assertSame("Wrong cause", ex, cex.getCause()); ref {ex, cex} [142-142]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testExtractCauseUncheckedNull has 1 assertions: 
 assertNull("Non null result", ConcurrentUtils.extractCauseUnchecked(null)); ref {ConcurrentUtils} [150-150]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testExtractCauseUncheckedNullCause has 1 assertions: 
 assertNull("Non null result", ConcurrentUtils.extractCauseUnchecked(new ExecutionException("Test", null))); ref {ConcurrentUtils} [158-159]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testExtractCauseUncheckedError has 2 assertions: 
 final Error err = new AssertionError("Test"); ref {} [167-167],
 assertEquals("Wrong error", err, e); ref {err, e} [172-172]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testExtractCauseUncheckedUncheckedException has 1 assertions: 
 assertEquals("Wrong exception", rex, r); ref {r, rex} [186-186]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testExtractCauseUncheckedChecked has 1 assertions: 
 assertSame("Wrong cause", ex, cex.getCause()); ref {ex, cex} [198-198]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testHandleCauseError has 2 assertions: 
 final Error err = new AssertionError("Test"); ref {} [208-208],
 assertEquals("Wrong error", err, e); ref {err, e} [213-213]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testHandleCauseUncheckedException has 1 assertions: 
 assertEquals("Wrong exception", rex, r); ref {r, rex} [229-229]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testHandleCauseChecked has 1 assertions: 
 assertEquals("Wrong cause", ex, cex.getCause()); ref {ex, cex} [243-243]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testHandleCauseNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testHandleCauseUncheckedError has 2 assertions: 
 final Error err = new AssertionError("Test"); ref {} [265-265],
 assertEquals("Wrong error", err, e); ref {err, e} [270-270]
[m[m31.08.2022 - 15:15:23.256 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testHandleCauseUncheckedUncheckedException has 1 assertions: 
 assertEquals("Wrong exception", rex, r); ref {r, rex} [284-284]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testHandleCauseUncheckedChecked has 1 assertions: 
 assertEquals("Wrong cause", ex, crex.getCause()); ref {ex, crex} [298-298]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testHandleCauseUncheckedNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testInitializeNull has 1 assertions: 
 assertNull("Got a result", ConcurrentUtils.initialize(null)); ref {ConcurrentUtils} [322-322]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testInitialize has 1 assertions: 
 assertSame("Wrong result object", result, ConcurrentUtils.initialize(init)); ref {result, init, ConcurrentUtils} [339-340]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testInitializeUncheckedNull has 1 assertions: 
 assertNull("Got a result", ConcurrentUtils.initializeUnchecked(null)); ref {ConcurrentUtils} [349-349]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testInitializeUnchecked has 1 assertions: 
 assertSame("Wrong result object", result, ConcurrentUtils.initializeUnchecked(init)); ref {result, init, ConcurrentUtils} [366-367]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testInitializeUncheckedEx has 1 assertions: 
 assertSame("Wrong cause", cause, crex.getCause()); ref {cause, crex} [389-389]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testConstantFuture_Integer has 7 assertions: 
 assertTrue(test.isDone()); ref {test} [404-404],
 assertSame(value, test.get()); ref {test, value} [405-405],
 assertSame(value, test.get(1000, TimeUnit.SECONDS)); ref {test, TimeUnit, value, TimeUnit.SECONDS} [406-406],
 assertSame(value, test.get(1000, null)); ref {test, value} [407-407],
 assertFalse(test.isCancelled()); ref {test} [408-408],
 assertFalse(test.cancel(true)); ref {test} [409-409],
 assertFalse(test.cancel(false)); ref {test} [410-410]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testConstantFuture_null has 7 assertions: 
 assertTrue(test.isDone()); ref {test} [422-422],
 assertSame(value, test.get()); ref {test, value} [423-423],
 assertSame(value, test.get(1000, TimeUnit.SECONDS)); ref {test, TimeUnit, value, TimeUnit.SECONDS} [424-424],
 assertSame(value, test.get(1000, null)); ref {test, value} [425-425],
 assertFalse(test.isCancelled()); ref {test} [426-426],
 assertFalse(test.cancel(true)); ref {test} [427-427],
 assertFalse(test.cancel(false)); ref {test} [428-428]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testPutIfAbsentKeyPresent has 2 assertions: 
 assertEquals("Wrong result", value, ConcurrentUtils.putIfAbsent(map, key, 0)); ref {value, map, ConcurrentUtils, key} [441-442],
 assertEquals("Wrong value in map", value, map.get(key)); ref {value, map, key} [443-443]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testPutIfAbsentKeyNotPresent has 2 assertions: 
 assertEquals("Wrong result", value, ConcurrentUtils.putIfAbsent(map, key, value)); ref {value, map, ConcurrentUtils, key} [454-455],
 assertEquals("Wrong value in map", value, map.get(key)); ref {value, map, key} [456-456]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testPutIfAbsentNullMap has 1 assertions: 
 assertNull("Wrong result", ConcurrentUtils.putIfAbsent(null, "test", 100)); ref {ConcurrentUtils} [464-465]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testCreateIfAbsentKeyPresent has 2 assertions: 
 assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsent(map, key, init)); ref {init, value, map, ConcurrentUtils, key} [484-485],
 assertEquals("Wrong value in map", value, map.get(key)); ref {value, map, key} [486-486]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testCreateIfAbsentKeyNotPresent has 2 assertions: 
 assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsent(map, key, init)); ref {init, value, map, ConcurrentUtils, key} [506-507],
 assertEquals("Wrong value in map", value, map.get(key)); ref {value, map, key} [508-508]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testCreateIfAbsentNullMap has 1 assertions: 
 assertNull("Wrong result", ConcurrentUtils.createIfAbsent(null, "test", init)); ref {init, ConcurrentUtils} [524-525]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testCreateIfAbsentNullInit has 2 assertions: 
 assertNull("Wrong result", ConcurrentUtils.createIfAbsent(map, key, null)); ref {map, ConcurrentUtils, key} [540-541],
 assertEquals("Map was changed", value, map.get(key)); ref {value, map, key} [542-542]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testCreateIfAbsentUncheckedSuccess has 2 assertions: 
 assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsentUnchecked(map, key, new ConstantInitializer<Integer>(value))); ref {value, map, ConcurrentUtils, key} [553-555],
 assertEquals("Wrong value in map", value, map.get(key)); ref {value, map, key} [556-556]
[m[m31.08.2022 - 15:15:23.257 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConcurrentUtilsTest::testCreateIfAbsentUncheckedException has 1 assertions: 
 assertEquals("Wrong cause", ex, crex.getCause()); ref {ex, crex} [579-579]
[m[m31.08.2022 - 15:15:23.258 [INFO ] ParsingStrategy.parseTestSuite() - Found 11 test cases
[m[m31.08.2022 - 15:15:23.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest::test_toStringExclude has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest::test_toStringExcludeArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest::test_toStringExcludeArrayWithNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest::test_toStringExcludeArrayWithNulls has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest::test_toStringExcludeCollection has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest::test_toStringExcludeCollectionWithNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest::test_toStringExcludeCollectionWithNulls has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest::test_toStringExcludeEmptyArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest::test_toStringExcludeEmptyCollection has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest::test_toStringExcludeNullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.258 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest::test_toStringExcludeNullCollection has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.260 [INFO ] ParsingStrategy.parseTestSuite() - Found 10 test cases
[m[m31.08.2022 - 15:15:23.260 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest::simpleObject has 1 assertions: 
 assertEquals(expected, toString(tx)); ref {tx, expected} [42-42]
[m[m31.08.2022 - 15:15:23.260 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest::nestedElements has 1 assertions: 
 assertEquals(exp, toString(customer)); ref {exp, customer} [57-57]
[m[m31.08.2022 - 15:15:23.260 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest::nestedAndArray has 1 assertions: 
 assertEquals(expected, toString(acc)); ref {acc, expected} [80-80]
[m[m31.08.2022 - 15:15:23.260 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest::noArray has 1 assertions: 
 assertEquals(exp, toString(wa)); ref {wa, exp} [94-94]
[m[m31.08.2022 - 15:15:23.260 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest::boolArray has 1 assertions: 
 assertEquals(exp, toString(wa)); ref {wa, exp} [113-113]
[m[m31.08.2022 - 15:15:23.260 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest::charArray has 1 assertions: 
 assertEquals(exp, toString(wa)); ref {wa, exp} [131-131]
[m[m31.08.2022 - 15:15:23.260 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest::intArray has 1 assertions: 
 assertEquals(exp, toString(wa)); ref {wa, exp} [149-149]
[m[m31.08.2022 - 15:15:23.260 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest::doubleArray has 1 assertions: 
 assertEquals(exp, toString(wa)); ref {wa, exp} [167-167]
[m[m31.08.2022 - 15:15:23.260 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest::longArray has 1 assertions: 
 assertEquals(exp, toString(wa)); ref {wa, exp} [185-185]
[m[m31.08.2022 - 15:15:23.260 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest::stringArray has 1 assertions: 
 assertEquals(exp, toString(wa)); ref {wa, exp} [203-203]
[m[m31.08.2022 - 15:15:23.261 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:23.261 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new EventUtils()); ref {} [50-50],
 assertEquals(1, cons.length); ref {cons.length, cons} [52-52],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [53-53],
 assertTrue(Modifier.isPublic(EventUtils.class.getModifiers())); ref {Modifier} [54-54],
 assertFalse(Modifier.isFinal(EventUtils.class.getModifiers())); ref {Modifier} [55-55]
[m[m31.08.2022 - 15:15:23.261 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventUtilsTest::testAddEventListener has 3 assertions: 
 assertEquals(0, handler.getEventCount("propertyChange")); ref {handler} [64-64],
 assertEquals(0, handler.getEventCount("propertyChange")); ref {handler} [66-66],
 assertEquals(1, handler.getEventCount("propertyChange")); ref {handler} [68-68]
[m[m31.08.2022 - 15:15:23.261 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventUtilsTest::testAddEventListenerWithNoAddMethod has 1 assertions: 
 assertEquals("Class " + src.getClass().getName() + " does not have a public add" + ObjectChangeListener.class.getSimpleName() + " method which takes a parameter of type " + ObjectChangeListener.class.getName() + ".", e.getMessage()); ref {src, e} [84-84]
[m[m31.08.2022 - 15:15:23.261 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventUtilsTest::testAddEventListenerThrowsException has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.261 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventUtilsTest::testAddEventListenerWithPrivateAddMethod has 1 assertions: 
 assertEquals("Class " + src.getClass().getName() + " does not have a public add" + VetoableChangeListener.class.getSimpleName() + " method which takes a parameter of type " + VetoableChangeListener.class.getName() + ".", e.getMessage()); ref {src, e} [123-123]
[m[m31.08.2022 - 15:15:23.261 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventUtilsTest::testBindEventsToMethod has 2 assertions: 
 assertEquals(0, counter.getCount()); ref {counter} [133-133],
 assertEquals(1, counter.getCount()); ref {counter} [135-135]
[m[m31.08.2022 - 15:15:23.261 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventUtilsTest::testBindEventsToMethodWithEvent has 2 assertions: 
 assertEquals(0, counter.getCount()); ref {counter} [145-145],
 assertEquals(1, counter.getCount()); ref {counter} [147-147]
[m[m31.08.2022 - 15:15:23.261 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.event.EventUtilsTest::testBindFilteredEventsToMethod has 3 assertions: 
 assertEquals(0, counter.getCount()); ref {counter} [157-157],
 assertEquals(1, counter.getCount()); ref {counter} [159-159],
 assertEquals(1, counter.getCount()); ref {counter} [161-161]
[m[m31.08.2022 - 15:15:23.262 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m31.08.2022 - 15:15:23.262 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest::testContextedException has 2 assertions: 
 assertTrue(trace.indexOf("ContextedException") >= 0); ref {trace} [46-46],
 assertTrue(StringUtils.isEmpty(message)); ref {StringUtils, message} [47-47]
[m[m31.08.2022 - 15:15:23.262 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest::testContextedExceptionString has 2 assertions: 
 assertEquals(TEST_MESSAGE, exceptionContext.getMessage()); ref {TEST_MESSAGE, exceptionContext} [53-53],
 assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); ref {trace, TEST_MESSAGE} [56-56]
[m[m31.08.2022 - 15:15:23.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest::testContextedExceptionThrowable has 3 assertions: 
 assertTrue(trace.indexOf("ContextedException") >= 0); ref {trace} [64-64],
 assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); ref {trace, TEST_MESSAGE} [65-65],
 assertTrue(message.indexOf(TEST_MESSAGE) >= 0); ref {TEST_MESSAGE, message} [66-66]
[m[m31.08.2022 - 15:15:23.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest::testContextedExceptionStringThrowable has 4 assertions: 
 assertTrue(trace.indexOf("ContextedException") >= 0); ref {trace} [74-74],
 assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); ref {trace, TEST_MESSAGE} [75-75],
 assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); ref {trace, TEST_MESSAGE_2} [76-76],
 assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); ref {TEST_MESSAGE_2, message} [77-77]
[m[m31.08.2022 - 15:15:23.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest::testContextedExceptionStringThrowableContext has 4 assertions: 
 assertTrue(trace.indexOf("ContextedException") >= 0); ref {trace} [87-87],
 assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); ref {trace, TEST_MESSAGE} [88-88],
 assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); ref {trace, TEST_MESSAGE_2} [89-89],
 assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); ref {TEST_MESSAGE_2, message} [90-90]
[m[m31.08.2022 - 15:15:23.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest::testNullExceptionPassing has 1 assertions: 
 assertTrue(message != null); ref {message} [103-103]
[m[m31.08.2022 - 15:15:23.263 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest::testRawMessage has 3 assertions: 
 assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage()); ref {TEST_MESSAGE, exceptionContext} [108-108],
 assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage()); ref {exceptionContext, TEST_MESSAGE_2} [110-110],
 assertNull(exceptionContext.getRawMessage()); ref {exceptionContext} [112-112]
[m[m31.08.2022 - 15:15:23.267 [INFO ] ParsingStrategy.parseTestSuite() - Found 34 test cases
[m[m31.08.2022 - 15:15:23.267 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::testConstructable has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.267 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_getEnumMap has 9 assertions: 
 assertEquals("getEnumMap not created correctly", "{RED=RED, AMBER=AMBER, GREEN=GREEN}", test.toString()); ref {test} [49-49],
 assertEquals(3, test.size()); ref {test} [50-50],
 assertTrue(test.containsKey("RED")); ref {test} [51-51],
 assertEquals(Traffic.RED, test.get("RED")); ref {test, Traffic.RED, Traffic} [52-52],
 assertTrue(test.containsKey("AMBER")); ref {test} [53-53],
 assertEquals(Traffic.AMBER, test.get("AMBER")); ref {test, Traffic.AMBER, Traffic} [54-54],
 assertTrue(test.containsKey("GREEN")); ref {test} [55-55],
 assertEquals(Traffic.GREEN, test.get("GREEN")); ref {test, Traffic, Traffic.GREEN} [56-56],
 assertFalse(test.containsKey("PURPLE")); ref {test} [57-57]
[m[m31.08.2022 - 15:15:23.267 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_getEnumList has 4 assertions: 
 assertEquals(3, test.size()); ref {test} [63-63],
 assertEquals(Traffic.RED, test.get(0)); ref {test, Traffic.RED, Traffic} [64-64],
 assertEquals(Traffic.AMBER, test.get(1)); ref {test, Traffic.AMBER, Traffic} [65-65],
 assertEquals(Traffic.GREEN, test.get(2)); ref {test, Traffic, Traffic.GREEN} [66-66]
[m[m31.08.2022 - 15:15:23.267 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_isEnum has 5 assertions: 
 assertTrue(EnumUtils.isValidEnum(Traffic.class, "RED")); ref {EnumUtils} [71-71],
 assertTrue(EnumUtils.isValidEnum(Traffic.class, "AMBER")); ref {EnumUtils} [72-72],
 assertTrue(EnumUtils.isValidEnum(Traffic.class, "GREEN")); ref {EnumUtils} [73-73],
 assertFalse(EnumUtils.isValidEnum(Traffic.class, "PURPLE")); ref {EnumUtils} [74-74],
 assertFalse(EnumUtils.isValidEnum(Traffic.class, null)); ref {EnumUtils} [75-75]
[m[m31.08.2022 - 15:15:23.267 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_isEnum_nullClass has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.267 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_getEnum has 5 assertions: 
 assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED")); ref {EnumUtils, Traffic.RED, Traffic} [85-85],
 assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER")); ref {EnumUtils, Traffic.AMBER, Traffic} [86-86],
 assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN")); ref {EnumUtils, Traffic, Traffic.GREEN} [87-87],
 assertEquals(null, EnumUtils.getEnum(Traffic.class, "PURPLE")); ref {EnumUtils} [88-88],
 assertEquals(null, EnumUtils.getEnum(Traffic.class, null)); ref {EnumUtils} [89-89]
[m[m31.08.2022 - 15:15:23.267 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_getEnum_nullClass has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.267 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVector_nullClass has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.267 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVectors_nullClass has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVector_nullIterable has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVectors_nullIterable has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVector_nullElement has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVectors_nullElement has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVector_nullClassWithArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVectors_nullClassWithArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVector_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVectors_nullArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVector_nullArrayElement has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVectors_nullArrayElement has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVector_longClass has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVector_longClassWithArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVector_nonEnumClass has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVectors_nonEnumClass has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVector_nonEnumClassWithArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVectors_nonEnumClassWithArray has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVector has 8 assertions: 
 assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class))); ref {EnumUtils, EnumSet} [211-211],
 assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED))); ref {EnumUtils, Traffic.RED, EnumSet, Traffic} [212-212],
 assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER))); ref {EnumUtils, Traffic.AMBER, EnumSet, Traffic} [213-213],
 assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.GREEN))); ref {EnumUtils, EnumSet, Traffic, Traffic.GREEN} [214-214],
 assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER))); ref {EnumUtils, Traffic.RED, Traffic.AMBER, EnumSet, Traffic} [215-215],
 assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN))); ref {EnumUtils, Traffic.RED, EnumSet, Traffic, Traffic.GREEN} [216-216],
 assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN))); ref {EnumUtils, Traffic.AMBER, EnumSet, Traffic, Traffic.GREEN} [217-217],
 assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN))); ref {EnumUtils, Traffic.RED, Traffic.AMBER, EnumSet, Traffic, Traffic.GREEN} [218-218]
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVectors has 8 assertions: 
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L); ref {EnumUtils, EnumSet} [223-223],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L); ref {EnumUtils, Traffic.RED, EnumSet, Traffic} [224-224],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L); ref {EnumUtils, Traffic.AMBER, EnumSet, Traffic} [225-225],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L); ref {EnumUtils, EnumSet, Traffic, Traffic.GREEN} [226-226],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L); ref {EnumUtils, Traffic.RED, Traffic.AMBER, EnumSet, Traffic} [227-227],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L); ref {EnumUtils, Traffic.RED, EnumSet, Traffic, Traffic.GREEN} [228-228],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L); ref {EnumUtils, Traffic.AMBER, EnumSet, Traffic, Traffic.GREEN} [229-229],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L); ref {EnumUtils, Traffic.RED, Traffic.AMBER, EnumSet, Traffic, Traffic.GREEN} [230-230]
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVectorFromArray has 9 assertions: 
 assertEquals(0L, EnumUtils.generateBitVector(Traffic.class)); ref {EnumUtils} [235-235],
 assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED)); ref {EnumUtils, Traffic.RED, Traffic} [236-236],
 assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER)); ref {EnumUtils, Traffic.AMBER, Traffic} [237-237],
 assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, Traffic.GREEN)); ref {EnumUtils, Traffic, Traffic.GREEN} [238-238],
 assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER)); ref {EnumUtils, Traffic.RED, Traffic.AMBER, Traffic} [239-239],
 assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.GREEN)); ref {EnumUtils, Traffic.RED, Traffic, Traffic.GREEN} [240-240],
 assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER, Traffic.GREEN)); ref {EnumUtils, Traffic.AMBER, Traffic, Traffic.GREEN} [241-241],
 assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN)); ref {EnumUtils, Traffic.RED, Traffic.AMBER, Traffic, Traffic.GREEN} [242-242],
 // gracefully handles duplicates:
assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN)); ref {EnumUtils, Traffic.RED, Traffic.AMBER, Traffic, Traffic.GREEN} [244-244]
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_generateBitVectorsFromArray has 9 assertions: 
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class), 0L); ref {EnumUtils} [249-249],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED), 1L); ref {EnumUtils, Traffic.RED, Traffic} [250-250],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER), 2L); ref {EnumUtils, Traffic.AMBER, Traffic} [251-251],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.GREEN), 4L); ref {EnumUtils, Traffic, Traffic.GREEN} [252-252],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER), 3L); ref {EnumUtils, Traffic.RED, Traffic.AMBER, Traffic} [253-253],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.GREEN), 5L); ref {EnumUtils, Traffic.RED, Traffic, Traffic.GREEN} [254-254],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER, Traffic.GREEN), 6L); ref {EnumUtils, Traffic.AMBER, Traffic, Traffic.GREEN} [255-255],
 assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN), 7L); ref {EnumUtils, Traffic.RED, Traffic.AMBER, Traffic, Traffic.GREEN} [256-256],
 // gracefully handles duplicates:
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN), 7L); ref {EnumUtils, Traffic.RED, Traffic.AMBER, Traffic, Traffic.GREEN} [258-258]
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_processBitVector_nullClass has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_processBitVectors_nullClass has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.268 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_processBitVector has 8 assertions: 
 assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L)); ref {EnumUtils, EnumSet} [279-279],
 assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L)); ref {EnumUtils, Traffic.RED, EnumSet, Traffic} [280-280],
 assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L)); ref {EnumUtils, Traffic.AMBER, EnumSet, Traffic} [281-281],
 assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L)); ref {EnumUtils, Traffic.RED, Traffic.AMBER, EnumSet, Traffic} [282-282],
 assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L)); ref {EnumUtils, EnumSet, Traffic, Traffic.GREEN} [283-283],
 assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L)); ref {EnumUtils, Traffic.RED, EnumSet, Traffic, Traffic.GREEN} [284-284],
 assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L)); ref {EnumUtils, Traffic.AMBER, EnumSet, Traffic, Traffic.GREEN} [285-285],
 assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 7L)); ref {EnumUtils, Traffic.RED, Traffic.AMBER, EnumSet, Traffic, Traffic.GREEN} [286-286]
[m[m31.08.2022 - 15:15:23.269 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_processBitVectors has 24 assertions: 
 assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L)); ref {EnumUtils, EnumSet} [291-291],
 assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 1L)); ref {EnumUtils, Traffic.RED, EnumSet, Traffic} [292-292],
 assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 2L)); ref {EnumUtils, Traffic.AMBER, EnumSet, Traffic} [293-293],
 assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 3L)); ref {EnumUtils, Traffic.RED, Traffic.AMBER, EnumSet, Traffic} [294-294],
 assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 4L)); ref {EnumUtils, EnumSet, Traffic, Traffic.GREEN} [295-295],
 assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 5L)); ref {EnumUtils, Traffic.RED, EnumSet, Traffic, Traffic.GREEN} [296-296],
 assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 6L)); ref {EnumUtils, Traffic.AMBER, EnumSet, Traffic, Traffic.GREEN} [297-297],
 assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 7L)); ref {EnumUtils, Traffic.RED, Traffic.AMBER, EnumSet, Traffic, Traffic.GREEN} [298-298],
 assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L, 0L)); ref {EnumUtils, EnumSet} [300-300],
 assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 0L, 1L)); ref {EnumUtils, Traffic.RED, EnumSet, Traffic} [301-301],
 assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 2L)); ref {EnumUtils, Traffic.AMBER, EnumSet, Traffic} [302-302],
 assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 3L)); ref {EnumUtils, Traffic.RED, Traffic.AMBER, EnumSet, Traffic} [303-303],
 assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 4L)); ref {EnumUtils, EnumSet, Traffic, Traffic.GREEN} [304-304],
 assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 5L)); ref {EnumUtils, Traffic.RED, EnumSet, Traffic, Traffic.GREEN} [305-305],
 assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 6L)); ref {EnumUtils, Traffic.AMBER, EnumSet, Traffic, Traffic.GREEN} [306-306],
 assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 7L)); ref {EnumUtils, Traffic.RED, Traffic.AMBER, EnumSet, Traffic, Traffic.GREEN} [307-307],
 // demonstrate tolerance of irrelevant high-order digits:
assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 666L, 0L)); ref {EnumUtils, EnumSet} [310-310],
 assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 666L, 1L)); ref {EnumUtils, Traffic.RED, EnumSet, Traffic} [311-311],
 assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 2L)); ref {EnumUtils, Traffic.AMBER, EnumSet, Traffic} [312-312],
 assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 3L)); ref {EnumUtils, Traffic.RED, Traffic.AMBER, EnumSet, Traffic} [313-313],
 assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 4L)); ref {EnumUtils, EnumSet, Traffic, Traffic.GREEN} [314-314],
 assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 5L)); ref {EnumUtils, Traffic.RED, EnumSet, Traffic, Traffic.GREEN} [315-315],
 assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 6L)); ref {EnumUtils, Traffic.AMBER, EnumSet, Traffic, Traffic.GREEN} [316-316],
 assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 7L)); ref {EnumUtils, Traffic.RED, Traffic.AMBER, EnumSet, Traffic, Traffic.GREEN} [317-317]
[m[m31.08.2022 - 15:15:23.269 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.EnumUtilsTest::test_processBitVector_longClass has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.269 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 15:15:23.269 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.HashSetvBitSetTest::testTimes has 1 assertions: 
 Assert.assertTrue(timeDiff <= 0); ref {Assert, timeDiff} [45-45]
[m[m31.08.2022 - 15:15:23.269 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.HashSetvBitSetTest::testTimesExtractOrBitset has 1 assertions: 
 Assert.assertTrue(timeDiff <= 0); ref {Assert, timeDiff} [135-135]
[m[m31.08.2022 - 15:15:23.301 [INFO ] ParsingStrategy.parseTestSuite() - Found 124 test cases
[m[m31.08.2022 - 15:15:23.301 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new StringUtils()); ref {} [118-118],
 assertEquals(1, cons.length); ref {cons.length, cons} [120-120],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [121-121],
 assertTrue(Modifier.isPublic(StringUtils.class.getModifiers())); ref {Modifier} [122-122],
 assertFalse(Modifier.isFinal(StringUtils.class.getModifiers())); ref {Modifier} [123-123]
[m[m31.08.2022 - 15:15:23.301 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testIsEmpty has 5 assertions: 
 assertTrue(StringUtils.isEmpty(null)); ref {StringUtils} [129-129],
 assertTrue(StringUtils.isEmpty("")); ref {StringUtils} [130-130],
 assertFalse(StringUtils.isEmpty(" ")); ref {StringUtils} [131-131],
 assertFalse(StringUtils.isEmpty("bob")); ref {StringUtils} [132-132],
 assertFalse(StringUtils.isEmpty("  bob  ")); ref {StringUtils} [133-133]
[m[m31.08.2022 - 15:15:23.301 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testIsNotEmpty has 5 assertions: 
 assertFalse(StringUtils.isNotEmpty(null)); ref {StringUtils} [138-138],
 assertFalse(StringUtils.isNotEmpty("")); ref {StringUtils} [139-139],
 assertTrue(StringUtils.isNotEmpty(" ")); ref {StringUtils} [140-140],
 assertTrue(StringUtils.isNotEmpty("bob")); ref {StringUtils} [141-141],
 assertTrue(StringUtils.isNotEmpty("  bob  ")); ref {StringUtils} [142-142]
[m[m31.08.2022 - 15:15:23.301 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testIsAnyEmpty has 8 assertions: 
 assertTrue(StringUtils.isAnyEmpty((String) null)); ref {StringUtils} [147-147],
 assertTrue(StringUtils.isAnyEmpty((String[]) null)); ref {StringUtils} [148-148],
 assertTrue(StringUtils.isAnyEmpty(null, "foo")); ref {StringUtils} [149-149],
 assertTrue(StringUtils.isAnyEmpty("", "bar")); ref {StringUtils} [150-150],
 assertTrue(StringUtils.isAnyEmpty("bob", "")); ref {StringUtils} [151-151],
 assertTrue(StringUtils.isAnyEmpty("  bob  ", null)); ref {StringUtils} [152-152],
 assertFalse(StringUtils.isAnyEmpty(" ", "bar")); ref {StringUtils} [153-153],
 assertFalse(StringUtils.isAnyEmpty("foo", "bar")); ref {StringUtils} [154-154]
[m[m31.08.2022 - 15:15:23.301 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testIsNoneEmpty has 8 assertions: 
 assertFalse(StringUtils.isNoneEmpty((String) null)); ref {StringUtils} [159-159],
 assertFalse(StringUtils.isNoneEmpty((String[]) null)); ref {StringUtils} [160-160],
 assertFalse(StringUtils.isNoneEmpty(null, "foo")); ref {StringUtils} [161-161],
 assertFalse(StringUtils.isNoneEmpty("", "bar")); ref {StringUtils} [162-162],
 assertFalse(StringUtils.isNoneEmpty("bob", "")); ref {StringUtils} [163-163],
 assertFalse(StringUtils.isNoneEmpty("  bob  ", null)); ref {StringUtils} [164-164],
 assertTrue(StringUtils.isNoneEmpty(" ", "bar")); ref {StringUtils} [165-165],
 assertTrue(StringUtils.isNoneEmpty("foo", "bar")); ref {StringUtils} [166-166]
[m[m31.08.2022 - 15:15:23.301 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testIsBlank has 5 assertions: 
 assertTrue(StringUtils.isBlank(null)); ref {StringUtils} [171-171],
 assertTrue(StringUtils.isBlank("")); ref {StringUtils} [172-172],
 assertTrue(StringUtils.isBlank(" ")); ref {StringUtils} [173-173],
 assertFalse(StringUtils.isBlank("bob")); ref {StringUtils} [174-174],
 assertFalse(StringUtils.isBlank("  bob  ")); ref {StringUtils} [175-175]
[m[m31.08.2022 - 15:15:23.301 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testIsNotBlank has 5 assertions: 
 assertFalse(StringUtils.isNotBlank(null)); ref {StringUtils} [180-180],
 assertFalse(StringUtils.isNotBlank("")); ref {StringUtils} [181-181],
 assertFalse(StringUtils.isNotBlank(" ")); ref {StringUtils} [182-182],
 assertTrue(StringUtils.isNotBlank("bob")); ref {StringUtils} [183-183],
 assertTrue(StringUtils.isNotBlank("  bob  ")); ref {StringUtils} [184-184]
[m[m31.08.2022 - 15:15:23.301 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testIsAnyBlank has 9 assertions: 
 assertTrue(StringUtils.isAnyBlank((String) null)); ref {StringUtils} [189-189],
 assertTrue(StringUtils.isAnyBlank((String[]) null)); ref {StringUtils} [190-190],
 assertTrue(StringUtils.isAnyBlank(null, "foo")); ref {StringUtils} [191-191],
 assertTrue(StringUtils.isAnyBlank(null, null)); ref {StringUtils} [192-192],
 assertTrue(StringUtils.isAnyBlank("", "bar")); ref {StringUtils} [193-193],
 assertTrue(StringUtils.isAnyBlank("bob", "")); ref {StringUtils} [194-194],
 assertTrue(StringUtils.isAnyBlank("  bob  ", null)); ref {StringUtils} [195-195],
 assertTrue(StringUtils.isAnyBlank(" ", "bar")); ref {StringUtils} [196-196],
 assertFalse(StringUtils.isAnyBlank("foo", "bar")); ref {StringUtils} [197-197]
[m[m31.08.2022 - 15:15:23.301 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testIsNoneBlank has 9 assertions: 
 assertFalse(StringUtils.isNoneBlank((String) null)); ref {StringUtils} [202-202],
 assertFalse(StringUtils.isNoneBlank((String[]) null)); ref {StringUtils} [203-203],
 assertFalse(StringUtils.isNoneBlank(null, "foo")); ref {StringUtils} [204-204],
 assertFalse(StringUtils.isNoneBlank(null, null)); ref {StringUtils} [205-205],
 assertFalse(StringUtils.isNoneBlank("", "bar")); ref {StringUtils} [206-206],
 assertFalse(StringUtils.isNoneBlank("bob", "")); ref {StringUtils} [207-207],
 assertFalse(StringUtils.isNoneBlank("  bob  ", null)); ref {StringUtils} [208-208],
 assertFalse(StringUtils.isNoneBlank(" ", "bar")); ref {StringUtils} [209-209],
 assertTrue(StringUtils.isNoneBlank("foo", "bar")); ref {StringUtils} [210-210]
[m[m31.08.2022 - 15:15:23.301 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testCaseFunctions has 26 assertions: 
 assertNull(StringUtils.upperCase(null)); ref {StringUtils} [216-216],
 assertNull(StringUtils.upperCase(null, Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [217-217],
 assertNull(StringUtils.lowerCase(null)); ref {StringUtils} [218-218],
 assertNull(StringUtils.lowerCase(null, Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [219-219],
 assertNull(StringUtils.capitalize(null)); ref {StringUtils} [220-220],
 assertNull(StringUtils.uncapitalize(null)); ref {StringUtils} [221-221],
 assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); ref {StringUtils} [223-224],
 assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); ref {StringUtils} [225-226],
 assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); ref {FOO_CAP, StringUtils} [227-228],
 assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); ref {FOO_CAP, StringUtils, FOO_UNCAP} [229-230],
 assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); ref {FOO_CAP, StringUtils, FOO_UNCAP} [232-233],
 assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); ref {StringUtils, FOO_UNCAP} [234-235],
 assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); ref {StringUtils} [236-237],
 assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); ref {StringUtils} [238-239],
 // reflection type of tests: Sentences.
assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); ref {StringUtils, SENTENCE_UNCAP} [242-243],
 assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); ref {SENTENCE_CAP, StringUtils} [244-245],
 // reflection type of tests: One word.
assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); ref {StringUtils, FOO_UNCAP} [248-249],
 assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); ref {FOO_CAP, StringUtils} [250-251],
 assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); ref {StringUtils} [253-254],
 assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); ref {StringUtils} [255-256],
 assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); ref {StringUtils} [257-258],
 assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); ref {StringUtils} [259-260],
 assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [262-263],
 assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [264-265],
 assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [266-267],
 assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [268-269]
[m[m31.08.2022 - 15:15:23.301 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testSwapCase_String has 10 assertions: 
 assertNull(StringUtils.swapCase(null)); ref {StringUtils} [274-274],
 assertEquals("", StringUtils.swapCase("")); ref {StringUtils} [275-275],
 assertEquals("  ", StringUtils.swapCase("  ")); ref {StringUtils} [276-276],
 assertEquals("i", WordUtils.swapCase("I")); ref {WordUtils} [278-278],
 assertEquals("I", WordUtils.swapCase("i")); ref {WordUtils} [279-279],
 assertEquals("I AM HERE 123", StringUtils.swapCase("i am here 123")); ref {StringUtils} [280-280],
 assertEquals("i aM hERE 123", StringUtils.swapCase("I Am Here 123")); ref {StringUtils} [281-281],
 assertEquals("I AM here 123", StringUtils.swapCase("i am HERE 123")); ref {StringUtils} [282-282],
 assertEquals("i am here 123", StringUtils.swapCase("I AM HERE 123")); ref {StringUtils} [283-283],
 assertEquals(expect, WordUtils.swapCase(test)); ref {expect, WordUtils, test} [287-287]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_Objects has 3 assertions: 
 assertEquals("abc", StringUtils.join("a", "b", "c")); ref {StringUtils} [293-293],
 assertEquals("a", StringUtils.join(null, "", "a")); ref {StringUtils} [294-294],
 assertNull(StringUtils.join((Object[]) null)); ref {StringUtils} [295-295]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_Objectarray has 10 assertions: 
 // assertNull(StringUtils.join(null)); // generates warning
// equivalent explicit cast
assertNull(StringUtils.join((Object[]) null)); ref {StringUtils} [301-301],
 // test additional varargs calls
// empty array
assertEquals("", StringUtils.join(new Object[0])); ref {StringUtils} [303-303],
 // => new Object[]{null}
assertEquals("", StringUtils.join((Object) null)); ref {StringUtils} [304-304],
 assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST)); ref {EMPTY_ARRAY_LIST, StringUtils} [306-306],
 assertEquals("", StringUtils.join(NULL_ARRAY_LIST)); ref {StringUtils, NULL_ARRAY_LIST} [307-307],
 assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST)); ref {NULL_TO_STRING_LIST, StringUtils} [308-308],
 assertEquals("abc", StringUtils.join(new String[] { "a", "b", "c" })); ref {StringUtils} [309-309],
 assertEquals("a", StringUtils.join(new String[] { null, "a", "" })); ref {StringUtils} [310-310],
 assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST)); ref {StringUtils, MIXED_ARRAY_LIST} [311-311],
 assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST)); ref {StringUtils, MIXED_TYPE_LIST} [312-312]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayCharSeparator has 11 assertions: 
 assertNull(StringUtils.join((Object[]) null, ',')); ref {StringUtils} [317-317],
 assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR)); ref {ARRAY_LIST, TEXT_LIST_CHAR, StringUtils, SEPARATOR_CHAR} [318-318],
 assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR)); ref {EMPTY_ARRAY_LIST, StringUtils, SEPARATOR_CHAR} [319-319],
 assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR)); ref {StringUtils, MIXED_ARRAY_LIST, SEPARATOR_CHAR} [320-320],
 assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR)); ref {StringUtils, MIXED_TYPE_LIST, SEPARATOR_CHAR} [321-321],
 assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1)); ref {StringUtils, MIXED_ARRAY_LIST, MIXED_ARRAY_LIST.length} [323-323],
 assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1)); ref {StringUtils, MIXED_TYPE_LIST} [324-324],
 assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1)); ref {NULL_TO_STRING_LIST, StringUtils} [325-325],
 assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2)); ref {StringUtils, MIXED_TYPE_LIST} [326-326],
 assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2)); ref {StringUtils, MIXED_TYPE_LIST} [327-327],
 assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1)); ref {StringUtils, MIXED_TYPE_LIST} [328-328]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayOfChars has 3 assertions: 
 assertNull(StringUtils.join((char[]) null, ',')); ref {StringUtils} [333-333],
 assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); ref {StringUtils, SEPARATOR_CHAR, CHAR_PRIM_LIST} [334-334],
 assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); ref {StringUtils, SEPARATOR_CHAR, CHAR_PRIM_LIST} [335-335]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayOfBytes has 3 assertions: 
 assertNull(StringUtils.join((byte[]) null, ',')); ref {StringUtils} [340-340],
 assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); ref {StringUtils, BYTE_PRIM_LIST, SEPARATOR_CHAR} [341-341],
 assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); ref {StringUtils, BYTE_PRIM_LIST, SEPARATOR_CHAR} [342-342]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayOfInts has 3 assertions: 
 assertNull(StringUtils.join((int[]) null, ',')); ref {StringUtils} [347-347],
 assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); ref {INT_PRIM_LIST, StringUtils, SEPARATOR_CHAR} [348-348],
 assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); ref {INT_PRIM_LIST, StringUtils, SEPARATOR_CHAR} [349-349]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayOfLongs has 3 assertions: 
 assertNull(StringUtils.join((long[]) null, ',')); ref {StringUtils} [354-354],
 assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); ref {StringUtils, LONG_PRIM_LIST, SEPARATOR_CHAR} [355-355],
 assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); ref {StringUtils, LONG_PRIM_LIST, SEPARATOR_CHAR} [356-356]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayOfFloats has 3 assertions: 
 assertNull(StringUtils.join((float[]) null, ',')); ref {StringUtils} [361-361],
 assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); ref {StringUtils, SEPARATOR_CHAR, FLOAT_PRIM_LIST} [362-362],
 assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); ref {StringUtils, SEPARATOR_CHAR, FLOAT_PRIM_LIST} [363-363]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayOfDoubles has 3 assertions: 
 assertNull(StringUtils.join((double[]) null, ',')); ref {StringUtils} [368-368],
 assertEquals("1.0;2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR)); ref {StringUtils, DOUBLE_PRIM_LIST, SEPARATOR_CHAR} [369-369],
 assertEquals("2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); ref {StringUtils, DOUBLE_PRIM_LIST, SEPARATOR_CHAR} [370-370]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayOfShorts has 3 assertions: 
 assertNull(StringUtils.join((short[]) null, ',')); ref {StringUtils} [375-375],
 assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); ref {StringUtils, SHORT_PRIM_LIST, SEPARATOR_CHAR} [376-376],
 assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); ref {StringUtils, SHORT_PRIM_LIST, SEPARATOR_CHAR} [377-377]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayString has 16 assertions: 
 assertNull(StringUtils.join((Object[]) null, null)); ref {StringUtils} [382-382],
 assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null)); ref {ARRAY_LIST, StringUtils, TEXT_LIST_NOSEP} [383-383],
 assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, "")); ref {ARRAY_LIST, StringUtils, TEXT_LIST_NOSEP} [384-384],
 assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null)); ref {StringUtils, NULL_ARRAY_LIST} [386-386],
 assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null)); ref {EMPTY_ARRAY_LIST, StringUtils} [388-388],
 assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, "")); ref {EMPTY_ARRAY_LIST, StringUtils} [389-389],
 assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR)); ref {EMPTY_ARRAY_LIST, SEPARATOR, StringUtils} [390-390],
 assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR)); ref {ARRAY_LIST, SEPARATOR, StringUtils, TEXT_LIST} [392-392],
 assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR)); ref {SEPARATOR, StringUtils, MIXED_ARRAY_LIST} [393-393],
 assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR)); ref {SEPARATOR, StringUtils, MIXED_TYPE_LIST} [394-394],
 assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length - 1)); ref {StringUtils, MIXED_ARRAY_LIST, MIXED_ARRAY_LIST.length} [396-396],
 assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1)); ref {StringUtils, MIXED_ARRAY_LIST, MIXED_ARRAY_LIST.length} [397-397],
 assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1)); ref {StringUtils, MIXED_TYPE_LIST} [398-398],
 assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2)); ref {StringUtils, MIXED_TYPE_LIST} [399-399],
 assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2)); ref {StringUtils, MIXED_TYPE_LIST} [400-400],
 assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1)); ref {StringUtils, MIXED_TYPE_LIST} [401-401]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_IteratorChar has 5 assertions: 
 assertNull(StringUtils.join((Iterator<?>) null, ',')); ref {StringUtils} [406-406],
 assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); ref {ARRAY_LIST, TEXT_LIST_CHAR, StringUtils, SEPARATOR_CHAR, Arrays} [407-407],
 assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); ref {StringUtils, NULL_ARRAY_LIST, SEPARATOR_CHAR, Arrays} [408-408],
 assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); ref {EMPTY_ARRAY_LIST, StringUtils, SEPARATOR_CHAR, Arrays} [409-409],
 assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); ref {StringUtils, Collections} [410-410]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_IteratorString has 11 assertions: 
 assertNull(StringUtils.join((Iterator<?>) null, null)); ref {StringUtils} [415-415],
 assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null)); ref {ARRAY_LIST, StringUtils, Arrays, TEXT_LIST_NOSEP} [416-416],
 assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), "")); ref {ARRAY_LIST, StringUtils, Arrays, TEXT_LIST_NOSEP} [417-417],
 assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), "x")); ref {StringUtils, Collections} [418-418],
 assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), null)); ref {StringUtils, Collections} [419-419],
 assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null)); ref {StringUtils, NULL_ARRAY_LIST, Arrays} [421-421],
 assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null)); ref {EMPTY_ARRAY_LIST, StringUtils, Arrays} [423-423],
 assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), "")); ref {EMPTY_ARRAY_LIST, StringUtils, Arrays} [424-424],
 assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR)); ref {EMPTY_ARRAY_LIST, SEPARATOR, StringUtils, Arrays} [425-425],
 assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR)); ref {ARRAY_LIST, SEPARATOR, StringUtils, Arrays, TEXT_LIST} [427-427],
 assertNull(StringUtils.join(Arrays.asList(NULL_TO_STRING_LIST).iterator(), SEPARATOR)); ref {NULL_TO_STRING_LIST, SEPARATOR, StringUtils, Arrays} [429-429]
[m[m31.08.2022 - 15:15:23.302 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_IterableChar has 5 assertions: 
 assertNull(StringUtils.join((Iterable<?>) null, ',')); ref {StringUtils} [434-434],
 assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR)); ref {ARRAY_LIST, TEXT_LIST_CHAR, StringUtils, SEPARATOR_CHAR, Arrays} [435-435],
 assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR)); ref {StringUtils, NULL_ARRAY_LIST, SEPARATOR_CHAR, Arrays} [436-436],
 assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR)); ref {EMPTY_ARRAY_LIST, StringUtils, SEPARATOR_CHAR, Arrays} [437-437],
 assertEquals("foo", StringUtils.join(Collections.singleton("foo"), 'x')); ref {StringUtils, Collections} [438-438]
[m[m31.08.2022 - 15:15:23.303 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testJoin_IterableString has 10 assertions: 
 assertNull(StringUtils.join((Iterable<?>) null, null)); ref {StringUtils} [443-443],
 assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); ref {ARRAY_LIST, StringUtils, Arrays, TEXT_LIST_NOSEP} [444-444],
 assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); ref {ARRAY_LIST, StringUtils, Arrays, TEXT_LIST_NOSEP} [445-445],
 assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); ref {StringUtils, Collections} [446-446],
 assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); ref {StringUtils, Collections} [447-447],
 assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); ref {StringUtils, NULL_ARRAY_LIST, Arrays} [449-449],
 assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); ref {EMPTY_ARRAY_LIST, StringUtils, Arrays} [451-451],
 assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), "")); ref {EMPTY_ARRAY_LIST, StringUtils, Arrays} [452-452],
 assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR)); ref {EMPTY_ARRAY_LIST, SEPARATOR, StringUtils, Arrays} [453-453],
 assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR)); ref {ARRAY_LIST, SEPARATOR, StringUtils, Arrays, TEXT_LIST} [455-455]
[m[m31.08.2022 - 15:15:23.303 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testSplit_String has 11 assertions: 
 assertNull(StringUtils.split(null)); ref {StringUtils} [460-460],
 assertEquals(0, StringUtils.split("").length); ref {StringUtils.split("").length, StringUtils} [461-461],
 assertEquals(3, res.length); ref {res, res.length} [465-465],
 assertEquals("a", res[0]); ref {res} [466-466],
 assertEquals("b", res[1]); ref {res} [467-467],
 assertEquals(".c", res[2]); ref {res} [468-468],
 assertEquals(1, res.length); ref {res, res.length} [472-472],
 assertEquals("a", res[0]); ref {res} [473-473],
 assertEquals(2, res.length); ref {res, res.length} [477-477],
 assertEquals("a", res[0]); ref {res} [478-478],
 assertEquals("b" + NON_WHITESPACE + "c", res[1]); ref {res, NON_WHITESPACE} [479-479]
[m[m31.08.2022 - 15:15:23.303 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testSplit_StringChar has 12 assertions: 
 assertNull(StringUtils.split(null, '.')); ref {StringUtils} [484-484],
 assertEquals(0, StringUtils.split("", '.').length); ref {StringUtils.split("", '.').length, StringUtils} [485-485],
 assertEquals(3, res.length); ref {res, res.length} [489-489],
 assertEquals("a", res[0]); ref {res} [490-490],
 assertEquals("b", res[1]); ref {res} [491-491],
 assertEquals(" c", res[2]); ref {res} [492-492],
 assertEquals(1, res.length); ref {res, res.length} [496-496],
 assertEquals("a", res[0]); ref {res} [497-497],
 assertEquals(3, res.length); ref {res, res.length} [501-501],
 assertEquals("a", res[0]); ref {res} [502-502],
 assertEquals("b", res[1]); ref {res} [503-503],
 assertEquals("c", res[2]); ref {res} [504-504]
[m[m31.08.2022 - 15:15:23.303 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testSplit_StringString_StringStringInt has 8 assertions: 
 assertNull(StringUtils.split(null, ".")); ref {StringUtils} [509-509],
 assertNull(StringUtils.split(null, ".", 3)); ref {StringUtils} [510-510],
 assertEquals(0, StringUtils.split("", ".").length); ref {StringUtils, StringUtils.split("", ".").length} [512-512],
 assertEquals(0, StringUtils.split("", ".", 3).length); ref {StringUtils.split("", ".", 3).length, StringUtils} [513-513],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [528-528],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [530-530],
 assertEquals(expectedResults2.length, results.length); ref {expectedResults2.length, results.length, expectedResults2, results} [535-535],
 assertEquals(expectedResults2[i], results[i]); ref {i, expectedResults2, results} [537-537]
[m[m31.08.2022 - 15:15:23.303 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testSplitByWholeString_StringStringBoolean has 8 assertions: 
 assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".")); ref {StringUtils} [583-583],
 assertEquals(0, StringUtils.splitByWholeSeparator("", ".").length); ref {StringUtils.splitByWholeSeparator("", ".").length, StringUtils} [585-585],
 assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); ref {splitOnNullResults.length, splitOnNullResults, splitOnNullExpectedResults.length, splitOnNullExpectedResults} [591-591],
 assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); ref {splitOnNullResults, splitOnNullExpectedResults, i} [593-593],
 assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); ref {splitOnStringResults.length, splitOnStringResults, splitOnStringExpectedResults.length, splitOnStringExpectedResults} [600-600],
 assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); ref {i, splitOnStringResults, splitOnStringExpectedResults} [602-602],
 assertEquals(splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length); ref {splitWithMultipleSeparator.length, splitWithMultipleSeparator, splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparatorExpectedResults} [607-607],
 assertEquals(splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i]); ref {splitWithMultipleSeparator, i, splitWithMultipleSeparatorExpectedResults} [609-609]
[m[m31.08.2022 - 15:15:23.303 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testSplitByWholeString_StringStringBooleanInt has 6 assertions: 
 assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".", 3)); ref {StringUtils} [615-615],
 assertEquals(0, StringUtils.splitByWholeSeparator("", ".", 3).length); ref {StringUtils, StringUtils.splitByWholeSeparator("", ".", 3).length} [617-617],
 assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); ref {splitOnNullResults.length, splitOnNullResults, splitOnNullExpectedResults.length, splitOnNullExpectedResults} [624-624],
 assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); ref {splitOnNullResults, splitOnNullExpectedResults, i} [626-626],
 assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); ref {splitOnStringResults.length, splitOnStringResults, splitOnStringExpectedResults.length, splitOnStringExpectedResults} [634-634],
 assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); ref {i, splitOnStringResults, splitOnStringExpectedResults} [636-636]
[m[m31.08.2022 - 15:15:23.303 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testSplitByWholeSeparatorPreserveAllTokens_StringStringInt has 10 assertions: 
 assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1)); ref {StringUtils} [642-642],
 assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length); ref {StringUtils, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length} [644-644],
 assertEquals(expected.length, actual.length); ref {actual, actual.length, expected.length, expected} [651-651],
 assertEquals(expected[i], actual[i]); ref {actual, expected, i} [653-653],
 assertEquals(expected.length, actual.length); ref {actual, actual.length, expected.length, expected} [661-661],
 assertEquals(expected[i], actual[i]); ref {actual, expected, i} [663-663],
 assertEquals(expected.length, actual.length); ref {actual, actual.length, expected.length, expected} [671-671],
 assertEquals(expected[i], actual[i]); ref {actual, expected, i} [673-673],
 assertEquals(expected.length, actual.length); ref {actual, actual.length, expected.length, expected} [681-681],
 assertEquals(expected[i], actual[i]); ref {actual, expected, i} [683-683]
[m[m31.08.2022 - 15:15:23.303 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testSplitPreserveAllTokens_String has 42 assertions: 
 assertNull(StringUtils.splitPreserveAllTokens(null)); ref {StringUtils} [689-689],
 assertEquals(0, StringUtils.splitPreserveAllTokens("").length); ref {StringUtils.splitPreserveAllTokens("").length, StringUtils} [690-690],
 assertEquals(2, res.length); ref {res, res.length} [694-694],
 assertEquals("abc", res[0]); ref {res} [695-695],
 assertEquals("def", res[1]); ref {res} [696-696],
 assertEquals(3, res.length); ref {res, res.length} [700-700],
 assertEquals("abc", res[0]); ref {res} [701-701],
 assertEquals("", res[1]); ref {res} [702-702],
 assertEquals("def", res[2]); ref {res} [703-703],
 assertEquals(3, res.length); ref {res, res.length} [707-707],
 assertEquals("", res[0]); ref {res} [708-708],
 assertEquals("abc", res[1]); ref {res} [709-709],
 assertEquals("", res[2]); ref {res} [710-710],
 assertEquals(3, res.length); ref {res, res.length} [714-714],
 assertEquals("a", res[0]); ref {res} [715-715],
 assertEquals("b", res[1]); ref {res} [716-716],
 assertEquals(".c", res[2]); ref {res} [717-717],
 assertEquals(4, res.length); ref {res, res.length} [721-721],
 assertEquals("", res[0]); ref {res} [722-722],
 assertEquals("a", res[1]); ref {res} [723-723],
 assertEquals("b", res[2]); ref {res} [724-724],
 assertEquals(".c", res[3]); ref {res} [725-725],
 assertEquals(5, res.length); ref {res, res.length} [729-729],
 assertEquals("a", res[0]); ref {res} [730-730],
 assertEquals("", res[1]); ref {res} [731-731],
 assertEquals("b", res[2]); ref {res} [732-732],
 assertEquals("", res[3]); ref {res} [733-733],
 assertEquals(".c", res[4]); ref {res} [734-734],
 assertEquals(4, res.length); ref {res, res.length} [738-738],
 assertEquals("", res[0]); ref {res} [739-739],
 assertEquals("a", res[1]); ref {res} [740-740],
 assertEquals("", res[2]); ref {res} [741-741],
 assertEquals("", res[3]); ref {res} [742-742],
 assertEquals(4, res.length); ref {res, res.length} [746-746],
 assertEquals("", res[0]); ref {res} [747-747],
 assertEquals("a", res[1]); ref {res} [748-748],
 assertEquals("", res[2]); ref {res} [749-749],
 assertEquals("b", res[3]); ref {res} [750-750],
 assertEquals(WHITESPACE.length() + 1, res.length); ref {res, WHITESPACE, res.length} [754-754],
 assertEquals("a", res[0]); ref {res} [755-755],
 assertEquals("", res[i]); ref {res, i} [758-758],
 assertEquals("b" + NON_WHITESPACE + "c", res[WHITESPACE.length()]); ref {res, NON_WHITESPACE, WHITESPACE} [760-760]
[m[m31.08.2022 - 15:15:23.303 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testSplitPreserveAllTokens_StringChar has 63 assertions: 
 assertNull(StringUtils.splitPreserveAllTokens(null, '.')); ref {StringUtils} [765-765],
 assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); ref {StringUtils.splitPreserveAllTokens("", '.').length, StringUtils} [766-766],
 assertEquals(3, res.length); ref {res, res.length} [770-770],
 assertEquals("a", res[0]); ref {res} [771-771],
 assertEquals("b", res[1]); ref {res} [772-772],
 assertEquals(" c", res[2]); ref {res} [773-773],
 assertEquals(4, res.length); ref {res, res.length} [777-777],
 assertEquals("a", res[0]); ref {res} [778-778],
 assertEquals("b", res[1]); ref {res} [779-779],
 assertEquals("", res[2]); ref {res} [780-780],
 assertEquals(" c", res[3]); ref {res} [781-781],
 assertEquals(3, res.length); ref {res, res.length} [785-785],
 assertEquals("", res[0]); ref {res} [786-786],
 assertEquals("a", res[1]); ref {res} [787-787],
 assertEquals("", res[2]); ref {res} [788-788],
 assertEquals(4, res.length); ref {res, res.length} [792-792],
 assertEquals("", res[0]); ref {res} [793-793],
 assertEquals("a", res[1]); ref {res} [794-794],
 assertEquals("", res[2]); ref {res} [795-795],
 assertEquals("", res[3]); ref {res} [796-796],
 assertEquals(4, res.length); ref {res, res.length} [800-800],
 assertEquals("", res[0]); ref {res} [801-801],
 assertEquals("", res[1]); ref {res} [802-802],
 assertEquals("a", res[2]); ref {res} [803-803],
 assertEquals("", res[3]); ref {res} [804-804],
 assertEquals(3, res.length); ref {res, res.length} [808-808],
 assertEquals("", res[0]); ref {res} [809-809],
 assertEquals("", res[1]); ref {res} [810-810],
 assertEquals("a", res[2]); ref {res} [811-811],
 assertEquals(3, res.length); ref {res, res.length} [815-815],
 assertEquals("a", res[0]); ref {res} [816-816],
 assertEquals("b", res[1]); ref {res} [817-817],
 assertEquals("c", res[2]); ref {res} [818-818],
 assertEquals(5, res.length); ref {res, res.length} [822-822],
 assertEquals("a", res[0]); ref {res} [823-823],
 assertEquals("", res[1]); ref {res} [824-824],
 assertEquals("b", res[2]); ref {res} [825-825],
 assertEquals("", res[3]); ref {res} [826-826],
 assertEquals("c", res[4]); ref {res} [827-827],
 assertEquals(4, res.length); ref {res, res.length} [831-831],
 assertEquals("", res[0]); ref {res} [832-832],
 assertEquals("a", res[1]); ref {res} [833-833],
 assertEquals("b", res[2]); ref {res} [834-834],
 assertEquals("c", res[3]); ref {res} [835-835],
 assertEquals(5, res.length); ref {res, res.length} [839-839],
 assertEquals("", res[0]); ref {res} [840-840],
 assertEquals("", res[1]); ref {res} [841-841],
 assertEquals("a", res[2]); ref {res} [842-842],
 assertEquals("b", res[3]); ref {res} [843-843],
 assertEquals("c", res[4]); ref {res} [844-844],
 assertEquals(4, res.length); ref {res, res.length} [848-848],
 assertEquals("a", res[0]); ref {res} [849-849],
 assertEquals("b", res[1]); ref {res} [850-850],
 assertEquals("c", res[2]); ref {res} [851-851],
 assertEquals("", res[3]); ref {res} [852-852],
 assertEquals(5, res.length); ref {res, res.length} [856-856],
 assertEquals("a", res[0]); ref {res} [857-857],
 assertEquals("b", res[1]); ref {res} [858-858],
 assertEquals("c", res[2]); ref {res} [859-859],
 assertEquals("", res[3]); ref {res} [860-860],
 assertEquals("", res[3]); ref {res} [861-861],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [868-868],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [870-870]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testSplitPreserveAllTokens_StringString_StringStringInt has 26 assertions: 
 assertNull(StringUtils.splitPreserveAllTokens(null, ".")); ref {StringUtils} [877-877],
 assertNull(StringUtils.splitPreserveAllTokens(null, ".", 3)); ref {StringUtils} [878-878],
 assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); ref {StringUtils, StringUtils.splitPreserveAllTokens("", ".").length} [880-880],
 assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); ref {StringUtils, StringUtils.splitPreserveAllTokens("", ".", 3).length} [881-881],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [897-897],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [899-899],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [907-907],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [909-909],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [917-917],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [919-919],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [927-927],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [929-929],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [937-937],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [939-939],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [947-947],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [949-949],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [957-957],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [959-959],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [967-967],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [969-969],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [977-977],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [979-979],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [987-987],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [989-989],
 assertEquals(expectedResults.length, results.length); ref {expectedResults.length, results.length, expectedResults, results} [997-997],
 assertEquals(expectedResults[i], results[i]); ref {i, expectedResults, results} [999-999]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testSplitByCharacterType has 9 assertions: 
 assertNull(StringUtils.splitByCharacterType(null)); ref {StringUtils} [1052-1052],
 assertEquals(0, StringUtils.splitByCharacterType("").length); ref {StringUtils, StringUtils.splitByCharacterType("").length} [1053-1053],
 assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab de fg"))); ref {StringUtils, ArrayUtils} [1055-1056],
 assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab   de fg"))); ref {StringUtils, ArrayUtils} [1058-1059],
 assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterType("ab:cd:ef"))); ref {StringUtils, ArrayUtils} [1061-1062],
 assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterType("number5"))); ref {StringUtils, ArrayUtils} [1064-1065],
 assertTrue(ArrayUtils.isEquals(new String[] { "foo", "B", "ar" }, StringUtils.splitByCharacterType("fooBar"))); ref {StringUtils, ArrayUtils} [1067-1068],
 assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "B", "ar" }, StringUtils.splitByCharacterType("foo200Bar"))); ref {StringUtils, ArrayUtils} [1070-1071],
 assertTrue(ArrayUtils.isEquals(new String[] { "ASFR", "ules" }, StringUtils.splitByCharacterType("ASFRules"))); ref {StringUtils, ArrayUtils} [1073-1074]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testSplitByCharacterTypeCamelCase has 9 assertions: 
 assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); ref {StringUtils} [1079-1079],
 assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); ref {StringUtils.splitByCharacterTypeCamelCase("").length, StringUtils} [1080-1080],
 assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); ref {StringUtils, ArrayUtils} [1082-1083],
 assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); ref {StringUtils, ArrayUtils} [1085-1086],
 assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); ref {StringUtils, ArrayUtils} [1088-1089],
 assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterTypeCamelCase("number5"))); ref {StringUtils, ArrayUtils} [1091-1092],
 assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("fooBar"))); ref {StringUtils, ArrayUtils} [1094-1095],
 assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); ref {StringUtils, ArrayUtils} [1097-1098],
 assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); ref {StringUtils, ArrayUtils} [1100-1101]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDeleteWhitespace_String has 8 assertions: 
 assertNull(StringUtils.deleteWhitespace(null)); ref {StringUtils} [1106-1106],
 assertEquals("", StringUtils.deleteWhitespace("")); ref {StringUtils} [1107-1107],
 assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); ref {StringUtils} [1108-1108],
 assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); ref {StringUtilsTest, StringUtils, StringUtilsTest.WHITESPACE} [1109-1109],
 assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); ref {StringUtilsTest, StringUtilsTest.NON_WHITESPACE, StringUtils} [1110-1110],
 // Note: u-2007 and u-000A both cause problems in the source code
// it should ignore 2007 but delete 000A
assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  ")); ref {StringUtils} [1113-1113],
 assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); ref {StringUtils} [1114-1114],
 assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt")); ref {StringUtils} [1115-1115]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testLang623 has 2 assertions: 
 assertEquals("t", StringUtils.replaceChars("\u00DE", '\u00DE', 't')); ref {StringUtils} [1120-1120],
 assertEquals("t", StringUtils.replaceChars("\u00FE", '\u00FE', 't')); ref {StringUtils} [1121-1121]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringString has 15 assertions: 
 assertNull(StringUtils.replace(null, null, null)); ref {StringUtils} [1126-1126],
 assertNull(StringUtils.replace(null, null, "any")); ref {StringUtils} [1127-1127],
 assertNull(StringUtils.replace(null, "any", null)); ref {StringUtils} [1128-1128],
 assertNull(StringUtils.replace(null, "any", "any")); ref {StringUtils} [1129-1129],
 assertEquals("", StringUtils.replace("", null, null)); ref {StringUtils} [1131-1131],
 assertEquals("", StringUtils.replace("", null, "any")); ref {StringUtils} [1132-1132],
 assertEquals("", StringUtils.replace("", "any", null)); ref {StringUtils} [1133-1133],
 assertEquals("", StringUtils.replace("", "any", "any")); ref {StringUtils} [1134-1134],
 assertEquals("FOO", StringUtils.replace("FOO", "", "any")); ref {StringUtils} [1136-1136],
 assertEquals("FOO", StringUtils.replace("FOO", null, "any")); ref {StringUtils} [1137-1137],
 assertEquals("FOO", StringUtils.replace("FOO", "F", null)); ref {StringUtils} [1138-1138],
 assertEquals("FOO", StringUtils.replace("FOO", null, null)); ref {StringUtils} [1139-1139],
 assertEquals("", StringUtils.replace("foofoofoo", "foo", "")); ref {StringUtils} [1141-1141],
 assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar")); ref {StringUtils} [1142-1142],
 assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar")); ref {StringUtils} [1143-1143]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testReplacePattern has 1 assertions: 
 assertEquals("X", StringUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X")); ref {StringUtils} [1148-1148]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testRemovePattern has 1 assertions: 
 assertEquals("", StringUtils.removePattern("<A>x\\ny</A>", "<A>.*</A>")); ref {StringUtils} [1153-1153]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringStringInt has 17 assertions: 
 assertNull(StringUtils.replace(null, null, null, 2)); ref {StringUtils} [1158-1158],
 assertNull(StringUtils.replace(null, null, "any", 2)); ref {StringUtils} [1159-1159],
 assertNull(StringUtils.replace(null, "any", null, 2)); ref {StringUtils} [1160-1160],
 assertNull(StringUtils.replace(null, "any", "any", 2)); ref {StringUtils} [1161-1161],
 assertEquals("", StringUtils.replace("", null, null, 2)); ref {StringUtils} [1163-1163],
 assertEquals("", StringUtils.replace("", null, "any", 2)); ref {StringUtils} [1164-1164],
 assertEquals("", StringUtils.replace("", "any", null, 2)); ref {StringUtils} [1165-1165],
 assertEquals("", StringUtils.replace("", "any", "any", 2)); ref {StringUtils} [1166-1166],
 assertSame(str, StringUtils.replace(str, "x", "", -1)); ref {str, StringUtils} [1169-1169],
 assertEquals("f", StringUtils.replace("oofoo", "o", "", -1)); ref {StringUtils} [1171-1171],
 assertEquals("oofoo", StringUtils.replace("oofoo", "o", "", 0)); ref {StringUtils} [1172-1172],
 assertEquals("ofoo", StringUtils.replace("oofoo", "o", "", 1)); ref {StringUtils} [1173-1173],
 assertEquals("foo", StringUtils.replace("oofoo", "o", "", 2)); ref {StringUtils} [1174-1174],
 assertEquals("fo", StringUtils.replace("oofoo", "o", "", 3)); ref {StringUtils} [1175-1175],
 assertEquals("f", StringUtils.replace("oofoo", "o", "", 4)); ref {StringUtils} [1176-1176],
 assertEquals("f", StringUtils.replace("oofoo", "o", "", -5)); ref {StringUtils} [1178-1178],
 assertEquals("f", StringUtils.replace("oofoo", "o", "", 1000)); ref {StringUtils} [1179-1179]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testReplaceOnce_StringStringString has 13 assertions: 
 assertNull(StringUtils.replaceOnce(null, null, null)); ref {StringUtils} [1184-1184],
 assertNull(StringUtils.replaceOnce(null, null, "any")); ref {StringUtils} [1185-1185],
 assertNull(StringUtils.replaceOnce(null, "any", null)); ref {StringUtils} [1186-1186],
 assertNull(StringUtils.replaceOnce(null, "any", "any")); ref {StringUtils} [1187-1187],
 assertEquals("", StringUtils.replaceOnce("", null, null)); ref {StringUtils} [1189-1189],
 assertEquals("", StringUtils.replaceOnce("", null, "any")); ref {StringUtils} [1190-1190],
 assertEquals("", StringUtils.replaceOnce("", "any", null)); ref {StringUtils} [1191-1191],
 assertEquals("", StringUtils.replaceOnce("", "any", "any")); ref {StringUtils} [1192-1192],
 assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any")); ref {StringUtils} [1194-1194],
 assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any")); ref {StringUtils} [1195-1195],
 assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null)); ref {StringUtils} [1196-1196],
 assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null)); ref {StringUtils} [1197-1197],
 assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", "")); ref {StringUtils} [1199-1199]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray has 14 assertions: 
 // JAVADOC TESTS START
assertNull(StringUtils.replaceEach(null, new String[] { "a" }, new String[] { "b" })); ref {StringUtils} [1208-1208],
 assertEquals(StringUtils.replaceEach("", new String[] { "a" }, new String[] { "b" }), ""); ref {StringUtils} [1209-1209],
 assertEquals(StringUtils.replaceEach("aba", null, null), "aba"); ref {StringUtils} [1210-1210],
 assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba"); ref {StringUtils} [1211-1211],
 assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba"); ref {StringUtils} [1212-1212],
 assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, null), "aba"); ref {StringUtils} [1213-1213],
 assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { "" }), "b"); ref {StringUtils} [1215-1215],
 assertEquals(StringUtils.replaceEach("aba", new String[] { null }, new String[] { "a" }), "aba"); ref {StringUtils} [1216-1216],
 assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); ref {StringUtils} [1217-1217],
 assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "dcte"); ref {StringUtils} [1218-1218],
 // JAVADOC TESTS END
assertEquals("bcc", StringUtils.replaceEach("abc", new String[] { "a", "b" }, new String[] { "b", "c" })); ref {StringUtils} [1221-1221],
 assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, new String[] { "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4" })); ref {StringUtils} [1222-1230],
 // Test null safety inside arrays - LANG-552
assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { null }), "aba"); ref {StringUtils} [1233-1233],
 assertEquals(StringUtils.replaceEach("aba", new String[] { "a", "b" }, new String[] { "c", null }), "cbc"); ref {StringUtils} [1234-1234]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArrayBoolean has 10 assertions: 
 // JAVADOC TESTS START
assertNull(StringUtils.replaceEachRepeatedly(null, new String[] { "a" }, new String[] { "b" })); ref {StringUtils} [1243-1243],
 assertEquals(StringUtils.replaceEachRepeatedly("", new String[] { "a" }, new String[] { "b" }), ""); ref {StringUtils} [1244-1244],
 assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null), "aba"); ref {StringUtils} [1245-1245],
 assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); ref {StringUtils} [1246-1246],
 assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]), "aba"); ref {StringUtils} [1247-1247],
 assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); ref {StringUtils} [1248-1248],
 assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { "a" }, new String[] { "" }), "b"); ref {StringUtils} [1250-1250],
 assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { null }, new String[] { "a" }), "aba"); ref {StringUtils} [1251-1251],
 assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); ref {StringUtils} [1252-1252],
 assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "tcte"); ref {StringUtils} [1253-1253]
[m[m31.08.2022 - 15:15:23.304 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testReplaceChars_StringCharChar has 4 assertions: 
 assertNull(StringUtils.replaceChars(null, 'b', 'z')); ref {StringUtils} [1265-1265],
 assertEquals("", StringUtils.replaceChars("", 'b', 'z')); ref {StringUtils} [1266-1266],
 assertEquals("azcza", StringUtils.replaceChars("abcba", 'b', 'z')); ref {StringUtils} [1267-1267],
 assertEquals("abcba", StringUtils.replaceChars("abcba", 'x', 'z')); ref {StringUtils} [1268-1268]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testReplaceChars_StringStringString has 30 assertions: 
 assertNull(StringUtils.replaceChars(null, null, null)); ref {StringUtils} [1273-1273],
 assertNull(StringUtils.replaceChars(null, "", null)); ref {StringUtils} [1274-1274],
 assertNull(StringUtils.replaceChars(null, "a", null)); ref {StringUtils} [1275-1275],
 assertNull(StringUtils.replaceChars(null, null, "")); ref {StringUtils} [1276-1276],
 assertNull(StringUtils.replaceChars(null, null, "x")); ref {StringUtils} [1277-1277],
 assertEquals("", StringUtils.replaceChars("", null, null)); ref {StringUtils} [1279-1279],
 assertEquals("", StringUtils.replaceChars("", "", null)); ref {StringUtils} [1280-1280],
 assertEquals("", StringUtils.replaceChars("", "a", null)); ref {StringUtils} [1281-1281],
 assertEquals("", StringUtils.replaceChars("", null, "")); ref {StringUtils} [1282-1282],
 assertEquals("", StringUtils.replaceChars("", null, "x")); ref {StringUtils} [1283-1283],
 assertEquals("abc", StringUtils.replaceChars("abc", null, null)); ref {StringUtils} [1285-1285],
 assertEquals("abc", StringUtils.replaceChars("abc", null, "")); ref {StringUtils} [1286-1286],
 assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); ref {StringUtils} [1287-1287],
 assertEquals("abc", StringUtils.replaceChars("abc", "", null)); ref {StringUtils} [1289-1289],
 assertEquals("abc", StringUtils.replaceChars("abc", "", "")); ref {StringUtils} [1290-1290],
 assertEquals("abc", StringUtils.replaceChars("abc", "", "x")); ref {StringUtils} [1291-1291],
 assertEquals("ac", StringUtils.replaceChars("abc", "b", null)); ref {StringUtils} [1293-1293],
 assertEquals("ac", StringUtils.replaceChars("abc", "b", "")); ref {StringUtils} [1294-1294],
 assertEquals("axc", StringUtils.replaceChars("abc", "b", "x")); ref {StringUtils} [1295-1295],
 assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); ref {StringUtils} [1297-1297],
 assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); ref {StringUtils} [1298-1298],
 assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); ref {StringUtils} [1299-1299],
 assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w")); ref {StringUtils} [1301-1301],
 assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w")); ref {StringUtils} [1302-1302],
 // Javadoc examples:
assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy")); ref {StringUtils} [1305-1305],
 assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); ref {StringUtils} [1306-1306],
 assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); ref {StringUtils} [1307-1307],
 assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); ref {StringUtils} [1308-1308],
 // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454
assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc")); ref {StringUtils} [1311-1311],
 assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789", "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234")); ref {StringUtils} [1312-1314]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testOverlay_StringStringIntInt has 21 assertions: 
 assertNull(StringUtils.overlay(null, null, 2, 4)); ref {StringUtils} [1319-1319],
 assertNull(StringUtils.overlay(null, null, -2, -4)); ref {StringUtils} [1320-1320],
 assertEquals("", StringUtils.overlay("", null, 0, 0)); ref {StringUtils} [1322-1322],
 assertEquals("", StringUtils.overlay("", "", 0, 0)); ref {StringUtils} [1323-1323],
 assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0)); ref {StringUtils} [1324-1324],
 assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4)); ref {StringUtils} [1325-1325],
 assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4)); ref {StringUtils} [1326-1326],
 assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4)); ref {StringUtils} [1328-1328],
 assertEquals("abef", StringUtils.overlay("abcdef", null, 4, 2)); ref {StringUtils} [1329-1329],
 assertEquals("abef", StringUtils.overlay("abcdef", "", 2, 4)); ref {StringUtils} [1330-1330],
 assertEquals("abef", StringUtils.overlay("abcdef", "", 4, 2)); ref {StringUtils} [1331-1331],
 assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 2, 4)); ref {StringUtils} [1332-1332],
 assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 4, 2)); ref {StringUtils} [1333-1333],
 assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", -1, 4)); ref {StringUtils} [1335-1335],
 assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", 4, -1)); ref {StringUtils} [1336-1336],
 assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -2, -1)); ref {StringUtils} [1337-1337],
 assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -1, -2)); ref {StringUtils} [1338-1338],
 assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 4, 10)); ref {StringUtils} [1339-1339],
 assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 4)); ref {StringUtils} [1340-1340],
 assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 8, 10)); ref {StringUtils} [1341-1341],
 assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 8)); ref {StringUtils} [1342-1342]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testRepeat_StringInt has 8 assertions: 
 assertNull(StringUtils.repeat(null, 2)); ref {StringUtils} [1347-1347],
 assertEquals("", StringUtils.repeat("ab", 0)); ref {StringUtils} [1348-1348],
 assertEquals("", StringUtils.repeat("", 3)); ref {StringUtils} [1349-1349],
 assertEquals("aaa", StringUtils.repeat("a", 3)); ref {StringUtils} [1350-1350],
 assertEquals("ababab", StringUtils.repeat("ab", 3)); ref {StringUtils} [1351-1351],
 assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); ref {StringUtils} [1352-1352],
 assertEquals(10000, str.length()); ref {str} [1354-1354],
 assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); ref {str, StringUtils} [1355-1355]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testRepeat_StringStringInt has 7 assertions: 
 assertNull(StringUtils.repeat(null, null, 2)); ref {StringUtils} [1360-1360],
 assertNull(StringUtils.repeat(null, "x", 2)); ref {StringUtils} [1361-1361],
 assertEquals("", StringUtils.repeat("", null, 2)); ref {StringUtils} [1362-1362],
 assertEquals("", StringUtils.repeat("ab", "", 0)); ref {StringUtils} [1364-1364],
 assertEquals("", StringUtils.repeat("", "", 2)); ref {StringUtils} [1365-1365],
 assertEquals("xx", StringUtils.repeat("", "x", 3)); ref {StringUtils} [1367-1367],
 assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); ref {StringUtils} [1369-1369]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testChop has 1 assertions: 
 assertEquals("chop(String) failed", expectedResult, StringUtils.chop(original)); ref {original, expectedResult, StringUtils} [1392-1393]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testChomp has 15 assertions: 
 assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original)); ref {original, expectedResult, StringUtils} [1421-1422],
 assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar")); ref {StringUtils} [1425-1426],
 assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz")); ref {StringUtils} [1427-1428],
 assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo")); ref {StringUtils} [1429-1430],
 assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "")); ref {StringUtils} [1431-1432],
 assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null)); ref {StringUtils} [1433-1434],
 assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo")); ref {StringUtils} [1435-1436],
 assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null)); ref {StringUtils} [1437-1438],
 assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "")); ref {StringUtils} [1439-1440],
 assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo")); ref {StringUtils} [1441-1442],
 assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null)); ref {StringUtils} [1443-1444],
 assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "")); ref {StringUtils} [1445-1446],
 assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo")); ref {StringUtils} [1447-1448],
 assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo")); ref {StringUtils} [1449-1450],
 assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo")); ref {StringUtils} [1451-1452]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testRightPad_StringInt has 5 assertions: 
 assertNull(StringUtils.rightPad(null, 5)); ref {StringUtils} [1458-1458],
 assertEquals("     ", StringUtils.rightPad("", 5)); ref {StringUtils} [1459-1459],
 assertEquals("abc  ", StringUtils.rightPad("abc", 5)); ref {StringUtils} [1460-1460],
 assertEquals("abc", StringUtils.rightPad("abc", 2)); ref {StringUtils} [1461-1461],
 assertEquals("abc", StringUtils.rightPad("abc", -1)); ref {StringUtils} [1462-1462]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testRightPad_StringIntChar has 8 assertions: 
 assertNull(StringUtils.rightPad(null, 5, ' ')); ref {StringUtils} [1467-1467],
 assertEquals("     ", StringUtils.rightPad("", 5, ' ')); ref {StringUtils} [1468-1468],
 assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); ref {StringUtils} [1469-1469],
 assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); ref {StringUtils} [1470-1470],
 assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); ref {StringUtils} [1471-1471],
 assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); ref {StringUtils} [1472-1472],
 assertEquals(10000, str.length()); ref {str} [1474-1474],
 assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); ref {str, StringUtils} [1475-1475]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testRightPad_StringIntString has 10 assertions: 
 assertNull(StringUtils.rightPad(null, 5, "-+")); ref {StringUtils} [1480-1480],
 assertEquals("     ", StringUtils.rightPad("", 5, " ")); ref {StringUtils} [1481-1481],
 assertNull(StringUtils.rightPad(null, 8, null)); ref {StringUtils} [1482-1482],
 assertEquals("abc-+-+", StringUtils.rightPad("abc", 7, "-+")); ref {StringUtils} [1483-1483],
 assertEquals("abc-+~", StringUtils.rightPad("abc", 6, "-+~")); ref {StringUtils} [1484-1484],
 assertEquals("abc-+", StringUtils.rightPad("abc", 5, "-+~")); ref {StringUtils} [1485-1485],
 assertEquals("abc", StringUtils.rightPad("abc", 2, " ")); ref {StringUtils} [1486-1486],
 assertEquals("abc", StringUtils.rightPad("abc", -1, " ")); ref {StringUtils} [1487-1487],
 assertEquals("abc  ", StringUtils.rightPad("abc", 5, null)); ref {StringUtils} [1488-1488],
 assertEquals("abc  ", StringUtils.rightPad("abc", 5, "")); ref {StringUtils} [1489-1489]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testLeftPad_StringInt has 4 assertions: 
 assertNull(StringUtils.leftPad(null, 5)); ref {StringUtils} [1495-1495],
 assertEquals("     ", StringUtils.leftPad("", 5)); ref {StringUtils} [1496-1496],
 assertEquals("  abc", StringUtils.leftPad("abc", 5)); ref {StringUtils} [1497-1497],
 assertEquals("abc", StringUtils.leftPad("abc", 2)); ref {StringUtils} [1498-1498]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testLeftPad_StringIntChar has 8 assertions: 
 assertNull(StringUtils.leftPad(null, 5, ' ')); ref {StringUtils} [1503-1503],
 assertEquals("     ", StringUtils.leftPad("", 5, ' ')); ref {StringUtils} [1504-1504],
 assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); ref {StringUtils} [1505-1505],
 assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); ref {StringUtils} [1506-1506],
 assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); ref {StringUtils} [1507-1507],
 assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); ref {StringUtils} [1508-1508],
 assertEquals(10000, str.length()); ref {str} [1510-1510],
 assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); ref {str, StringUtils} [1511-1511]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testLeftPad_StringIntString has 10 assertions: 
 assertNull(StringUtils.leftPad(null, 5, "-+")); ref {StringUtils} [1516-1516],
 assertNull(StringUtils.leftPad(null, 5, null)); ref {StringUtils} [1517-1517],
 assertEquals("     ", StringUtils.leftPad("", 5, " ")); ref {StringUtils} [1518-1518],
 assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); ref {StringUtils} [1519-1519],
 assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); ref {StringUtils} [1520-1520],
 assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); ref {StringUtils} [1521-1521],
 assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); ref {StringUtils} [1522-1522],
 assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); ref {StringUtils} [1523-1523],
 assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); ref {StringUtils} [1524-1524],
 assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); ref {StringUtils} [1525-1525]
[m[m31.08.2022 - 15:15:23.305 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testLengthString has 6 assertions: 
 assertEquals(0, StringUtils.length(null)); ref {StringUtils} [1530-1530],
 assertEquals(0, StringUtils.length("")); ref {StringUtils} [1531-1531],
 assertEquals(0, StringUtils.length(StringUtils.EMPTY)); ref {StringUtils, StringUtils.EMPTY} [1532-1532],
 assertEquals(1, StringUtils.length("A")); ref {StringUtils} [1533-1533],
 assertEquals(1, StringUtils.length(" ")); ref {StringUtils} [1534-1534],
 assertEquals(8, StringUtils.length("ABCDEFGH")); ref {StringUtils} [1535-1535]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testLengthStringBuffer has 5 assertions: 
 assertEquals(0, StringUtils.length(new StringBuffer(""))); ref {StringUtils} [1540-1540],
 assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY))); ref {StringUtils, StringUtils.EMPTY} [1541-1541],
 assertEquals(1, StringUtils.length(new StringBuffer("A"))); ref {StringUtils} [1542-1542],
 assertEquals(1, StringUtils.length(new StringBuffer(" "))); ref {StringUtils} [1543-1543],
 assertEquals(8, StringUtils.length(new StringBuffer("ABCDEFGH"))); ref {StringUtils} [1544-1544]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testLengthStringBuilder has 5 assertions: 
 assertEquals(0, StringUtils.length(new StringBuilder(""))); ref {StringUtils} [1549-1549],
 assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY))); ref {StringUtils, StringUtils.EMPTY} [1550-1550],
 assertEquals(1, StringUtils.length(new StringBuilder("A"))); ref {StringUtils} [1551-1551],
 assertEquals(1, StringUtils.length(new StringBuilder(" "))); ref {StringUtils} [1552-1552],
 assertEquals(8, StringUtils.length(new StringBuilder("ABCDEFGH"))); ref {StringUtils} [1553-1553]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testLength_CharBuffer has 4 assertions: 
 assertEquals(0, StringUtils.length(CharBuffer.wrap(""))); ref {StringUtils, CharBuffer} [1558-1558],
 assertEquals(1, StringUtils.length(CharBuffer.wrap("A"))); ref {StringUtils, CharBuffer} [1559-1559],
 assertEquals(1, StringUtils.length(CharBuffer.wrap(" "))); ref {StringUtils, CharBuffer} [1560-1560],
 assertEquals(8, StringUtils.length(CharBuffer.wrap("ABCDEFGH"))); ref {StringUtils, CharBuffer} [1561-1561]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testCenter_StringInt has 11 assertions: 
 assertNull(StringUtils.center(null, -1)); ref {StringUtils} [1567-1567],
 assertNull(StringUtils.center(null, 4)); ref {StringUtils} [1568-1568],
 assertEquals("    ", StringUtils.center("", 4)); ref {StringUtils} [1569-1569],
 assertEquals("ab", StringUtils.center("ab", 0)); ref {StringUtils} [1570-1570],
 assertEquals("ab", StringUtils.center("ab", -1)); ref {StringUtils} [1571-1571],
 assertEquals("ab", StringUtils.center("ab", 1)); ref {StringUtils} [1572-1572],
 assertEquals("    ", StringUtils.center("", 4)); ref {StringUtils} [1573-1573],
 assertEquals(" ab ", StringUtils.center("ab", 4)); ref {StringUtils} [1574-1574],
 assertEquals("abcd", StringUtils.center("abcd", 2)); ref {StringUtils} [1575-1575],
 assertEquals(" a  ", StringUtils.center("a", 4)); ref {StringUtils} [1576-1576],
 assertEquals("  a  ", StringUtils.center("a", 5)); ref {StringUtils} [1577-1577]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testCenter_StringIntChar has 12 assertions: 
 assertNull(StringUtils.center(null, -1, ' ')); ref {StringUtils} [1582-1582],
 assertNull(StringUtils.center(null, 4, ' ')); ref {StringUtils} [1583-1583],
 assertEquals("    ", StringUtils.center("", 4, ' ')); ref {StringUtils} [1584-1584],
 assertEquals("ab", StringUtils.center("ab", 0, ' ')); ref {StringUtils} [1585-1585],
 assertEquals("ab", StringUtils.center("ab", -1, ' ')); ref {StringUtils} [1586-1586],
 assertEquals("ab", StringUtils.center("ab", 1, ' ')); ref {StringUtils} [1587-1587],
 assertEquals("    ", StringUtils.center("", 4, ' ')); ref {StringUtils} [1588-1588],
 assertEquals(" ab ", StringUtils.center("ab", 4, ' ')); ref {StringUtils} [1589-1589],
 assertEquals("abcd", StringUtils.center("abcd", 2, ' ')); ref {StringUtils} [1590-1590],
 assertEquals(" a  ", StringUtils.center("a", 4, ' ')); ref {StringUtils} [1591-1591],
 assertEquals("  a  ", StringUtils.center("a", 5, ' ')); ref {StringUtils} [1592-1592],
 assertEquals("xxaxx", StringUtils.center("a", 5, 'x')); ref {StringUtils} [1593-1593]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testCenter_StringIntString has 15 assertions: 
 assertNull(StringUtils.center(null, 4, null)); ref {StringUtils} [1598-1598],
 assertNull(StringUtils.center(null, -1, " ")); ref {StringUtils} [1599-1599],
 assertNull(StringUtils.center(null, 4, " ")); ref {StringUtils} [1600-1600],
 assertEquals("    ", StringUtils.center("", 4, " ")); ref {StringUtils} [1601-1601],
 assertEquals("ab", StringUtils.center("ab", 0, " ")); ref {StringUtils} [1602-1602],
 assertEquals("ab", StringUtils.center("ab", -1, " ")); ref {StringUtils} [1603-1603],
 assertEquals("ab", StringUtils.center("ab", 1, " ")); ref {StringUtils} [1604-1604],
 assertEquals("    ", StringUtils.center("", 4, " ")); ref {StringUtils} [1605-1605],
 assertEquals(" ab ", StringUtils.center("ab", 4, " ")); ref {StringUtils} [1606-1606],
 assertEquals("abcd", StringUtils.center("abcd", 2, " ")); ref {StringUtils} [1607-1607],
 assertEquals(" a  ", StringUtils.center("a", 4, " ")); ref {StringUtils} [1608-1608],
 assertEquals("yayz", StringUtils.center("a", 4, "yz")); ref {StringUtils} [1609-1609],
 assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); ref {StringUtils} [1610-1610],
 assertEquals("  abc  ", StringUtils.center("abc", 7, null)); ref {StringUtils} [1611-1611],
 assertEquals("  abc  ", StringUtils.center("abc", 7, "")); ref {StringUtils} [1612-1612]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testReverse_String has 3 assertions: 
 assertNull(StringUtils.reverse(null)); ref {StringUtils} [1618-1618],
 assertEquals("", StringUtils.reverse("")); ref {StringUtils} [1619-1619],
 assertEquals("sdrawkcab", StringUtils.reverse("backwards")); ref {StringUtils} [1620-1620]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testReverseDelimited_StringChar has 5 assertions: 
 assertNull(StringUtils.reverseDelimited(null, '.')); ref {StringUtils} [1625-1625],
 assertEquals("", StringUtils.reverseDelimited("", '.')); ref {StringUtils} [1626-1626],
 assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); ref {StringUtils} [1627-1627],
 assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); ref {StringUtils} [1628-1628],
 assertEquals("", StringUtils.reverseDelimited("", '.')); ref {StringUtils} [1629-1629]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDefault_String has 3 assertions: 
 assertEquals("", StringUtils.defaultString(null)); ref {StringUtils} [1635-1635],
 assertEquals("", StringUtils.defaultString("")); ref {StringUtils} [1636-1636],
 assertEquals("abc", StringUtils.defaultString("abc")); ref {StringUtils} [1637-1637]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDefault_StringString has 3 assertions: 
 assertEquals("NULL", StringUtils.defaultString(null, "NULL")); ref {StringUtils} [1642-1642],
 assertEquals("", StringUtils.defaultString("", "NULL")); ref {StringUtils} [1643-1643],
 assertEquals("abc", StringUtils.defaultString("abc", "NULL")); ref {StringUtils} [1644-1644]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDefaultIfEmpty_StringString has 5 assertions: 
 assertEquals("NULL", StringUtils.defaultIfEmpty(null, "NULL")); ref {StringUtils} [1649-1649],
 assertEquals("NULL", StringUtils.defaultIfEmpty("", "NULL")); ref {StringUtils} [1650-1650],
 assertEquals("abc", StringUtils.defaultIfEmpty("abc", "NULL")); ref {StringUtils} [1651-1651],
 assertNull(StringUtils.defaultIfEmpty("", null)); ref {StringUtils} [1652-1652],
 assertEquals("abc", s); ref {s} [1655-1655]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDefaultIfBlank_StringString has 6 assertions: 
 assertEquals("NULL", StringUtils.defaultIfBlank(null, "NULL")); ref {StringUtils} [1660-1660],
 assertEquals("NULL", StringUtils.defaultIfBlank("", "NULL")); ref {StringUtils} [1661-1661],
 assertEquals("NULL", StringUtils.defaultIfBlank(" ", "NULL")); ref {StringUtils} [1662-1662],
 assertEquals("abc", StringUtils.defaultIfBlank("abc", "NULL")); ref {StringUtils} [1663-1663],
 assertNull(StringUtils.defaultIfBlank("", null)); ref {StringUtils} [1664-1664],
 assertEquals("abc", s); ref {s} [1667-1667]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDefaultIfEmpty_StringBuilders has 4 assertions: 
 assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuilder(""), new StringBuilder("NULL")).toString()); ref {StringUtils} [1672-1672],
 assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuilder("abc"), new StringBuilder("NULL")).toString()); ref {StringUtils} [1673-1673],
 assertNull(StringUtils.defaultIfEmpty(new StringBuilder(""), null)); ref {StringUtils} [1674-1674],
 assertEquals("abc", s.toString()); ref {s} [1677-1677]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDefaultIfBlank_StringBuilders has 5 assertions: 
 assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuilder(""), new StringBuilder("NULL")).toString()); ref {StringUtils} [1682-1682],
 assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuilder(" "), new StringBuilder("NULL")).toString()); ref {StringUtils} [1683-1683],
 assertEquals("abc", StringUtils.defaultIfBlank(new StringBuilder("abc"), new StringBuilder("NULL")).toString()); ref {StringUtils} [1684-1684],
 assertNull(StringUtils.defaultIfBlank(new StringBuilder(""), null)); ref {StringUtils} [1685-1685],
 assertEquals("abc", s.toString()); ref {s} [1688-1688]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDefaultIfEmpty_StringBuffers has 4 assertions: 
 assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuffer(""), new StringBuffer("NULL")).toString()); ref {StringUtils} [1693-1693],
 assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); ref {StringUtils} [1694-1694],
 assertNull(StringUtils.defaultIfEmpty(new StringBuffer(""), null)); ref {StringUtils} [1695-1695],
 assertEquals("abc", s.toString()); ref {s} [1698-1698]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDefaultIfBlank_StringBuffers has 5 assertions: 
 assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(""), new StringBuffer("NULL")).toString()); ref {StringUtils} [1703-1703],
 assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(" "), new StringBuffer("NULL")).toString()); ref {StringUtils} [1704-1704],
 assertEquals("abc", StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); ref {StringUtils} [1705-1705],
 assertNull(StringUtils.defaultIfBlank(new StringBuffer(""), null)); ref {StringUtils} [1706-1706],
 assertEquals("abc", s.toString()); ref {s} [1709-1709]
[m[m31.08.2022 - 15:15:23.306 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDefaultIfEmpty_CharBuffers has 4 assertions: 
 assertEquals("NULL", StringUtils.defaultIfEmpty(CharBuffer.wrap(""), CharBuffer.wrap("NULL")).toString()); ref {StringUtils, CharBuffer} [1714-1714],
 assertEquals("abc", StringUtils.defaultIfEmpty(CharBuffer.wrap("abc"), CharBuffer.wrap("NULL")).toString()); ref {StringUtils, CharBuffer} [1715-1715],
 assertNull(StringUtils.defaultIfEmpty(CharBuffer.wrap(""), null)); ref {StringUtils, CharBuffer} [1716-1716],
 assertEquals("abc", s.toString()); ref {s} [1719-1719]
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDefaultIfBlank_CharBuffers has 5 assertions: 
 assertEquals("NULL", StringUtils.defaultIfBlank(CharBuffer.wrap(""), CharBuffer.wrap("NULL")).toString()); ref {StringUtils, CharBuffer} [1724-1724],
 assertEquals("NULL", StringUtils.defaultIfBlank(CharBuffer.wrap(" "), CharBuffer.wrap("NULL")).toString()); ref {StringUtils, CharBuffer} [1725-1725],
 assertEquals("abc", StringUtils.defaultIfBlank(CharBuffer.wrap("abc"), CharBuffer.wrap("NULL")).toString()); ref {StringUtils, CharBuffer} [1726-1726],
 assertNull(StringUtils.defaultIfBlank(CharBuffer.wrap(""), null)); ref {StringUtils, CharBuffer} [1727-1727],
 assertEquals("abc", s.toString()); ref {s} [1730-1730]
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testAbbreviate_StringInt has 12 assertions: 
 assertNull(StringUtils.abbreviate(null, 10)); ref {StringUtils} [1736-1736],
 assertEquals("", StringUtils.abbreviate("", 10)); ref {StringUtils} [1737-1737],
 assertEquals("short", StringUtils.abbreviate("short", 10)); ref {StringUtils} [1738-1738],
 assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10)); ref {StringUtils} [1739-1739],
 assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14)); ref {raspberry, StringUtils} [1742-1742],
 assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15)); ref {StringUtils} [1743-1743],
 assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16)); ref {StringUtils} [1744-1744],
 assertEquals("abc...", StringUtils.abbreviate("abcdefg", 6)); ref {StringUtils} [1745-1745],
 assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 7)); ref {StringUtils} [1746-1746],
 assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 8)); ref {StringUtils} [1747-1747],
 assertEquals("a...", StringUtils.abbreviate("abcdefg", 4)); ref {StringUtils} [1748-1748],
 assertEquals("", StringUtils.abbreviate("", 4)); ref {StringUtils} [1749-1749]
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testAbbreviate_StringIntInt has 25 assertions: 
 assertNull(StringUtils.abbreviate(null, 10, 12)); ref {StringUtils} [1763-1763],
 assertEquals("", StringUtils.abbreviate("", 0, 10)); ref {StringUtils} [1764-1764],
 assertEquals("", StringUtils.abbreviate("", 2, 10)); ref {StringUtils} [1765-1765],
 assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15)); ref {raspberry, StringUtils} [1786-1786],
 assertNull(StringUtils.abbreviate(null, 7, 14)); ref {StringUtils} [1788-1788],
 assertAbbreviateWithOffset("abcdefg...", -1, 10); ref {} [1789-1789],
 assertAbbreviateWithOffset("abcdefg...", 0, 10); ref {} [1790-1790],
 assertAbbreviateWithOffset("abcdefg...", 1, 10); ref {} [1791-1791],
 assertAbbreviateWithOffset("abcdefg...", 2, 10); ref {} [1792-1792],
 assertAbbreviateWithOffset("abcdefg...", 3, 10); ref {} [1793-1793],
 assertAbbreviateWithOffset("abcdefg...", 4, 10); ref {} [1794-1794],
 assertAbbreviateWithOffset("...fghi...", 5, 10); ref {} [1795-1795],
 assertAbbreviateWithOffset("...ghij...", 6, 10); ref {} [1796-1796],
 assertAbbreviateWithOffset("...hijk...", 7, 10); ref {} [1797-1797],
 assertAbbreviateWithOffset("...ijklmno", 8, 10); ref {} [1798-1798],
 assertAbbreviateWithOffset("...ijklmno", 9, 10); ref {} [1799-1799],
 assertAbbreviateWithOffset("...ijklmno", 10, 10); ref {} [1800-1800],
 assertAbbreviateWithOffset("...ijklmno", 10, 10); ref {} [1801-1801],
 assertAbbreviateWithOffset("...ijklmno", 11, 10); ref {} [1802-1802],
 assertAbbreviateWithOffset("...ijklmno", 12, 10); ref {} [1803-1803],
 assertAbbreviateWithOffset("...ijklmno", 13, 10); ref {} [1804-1804],
 assertAbbreviateWithOffset("...ijklmno", 14, 10); ref {} [1805-1805],
 assertAbbreviateWithOffset("...ijklmno", 15, 10); ref {} [1806-1806],
 assertAbbreviateWithOffset("...ijklmno", 16, 10); ref {} [1807-1807],
 assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10); ref {Integer, Integer.MAX_VALUE} [1808-1808]
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testAbbreviateMiddle has 14 assertions: 
 // javadoc examples
assertNull(StringUtils.abbreviateMiddle(null, null, 0)); ref {StringUtils} [1827-1827],
 assertEquals("abc", StringUtils.abbreviateMiddle("abc", null, 0)); ref {StringUtils} [1828-1828],
 assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 0)); ref {StringUtils} [1829-1829],
 assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 3)); ref {StringUtils} [1830-1830],
 assertEquals("ab.f", StringUtils.abbreviateMiddle("abcdef", ".", 4)); ref {StringUtils} [1831-1831],
 // JIRA issue (LANG-405) example (slightly different than actual expected result)
assertEquals("A very long text with un...f the text is complete.", StringUtils.abbreviateMiddle("A very long text with unimportant stuff in the middle but interesting start and " + "end to see if the text is complete.", "...", 50)); ref {StringUtils} [1834-1838],
 assertEquals("Start text->Close text", StringUtils.abbreviateMiddle(longText, "->", 22)); ref {longText, StringUtils} [1842-1844],
 // Test negative length
assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", -1)); ref {StringUtils} [1847-1847],
 // Test boundaries
// Fails to change anything as method ensures first and last char are kept
assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 1)); ref {StringUtils} [1851-1851],
 assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 2)); ref {StringUtils} [1852-1852],
 // Test length of n=1
assertEquals("a", StringUtils.abbreviateMiddle("a", ".", 1)); ref {StringUtils} [1855-1855],
 // Test smallest length that can lead to success
assertEquals("a.d", StringUtils.abbreviateMiddle("abcd", ".", 3)); ref {StringUtils} [1858-1858],
 // More from LANG-405
assertEquals("a..f", StringUtils.abbreviateMiddle("abcdef", "..", 4)); ref {StringUtils} [1861-1861],
 assertEquals("ab.ef", StringUtils.abbreviateMiddle("abcdef", ".", 5)); ref {StringUtils} [1862-1862]
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDifference_StringString has 9 assertions: 
 assertNull(StringUtils.difference(null, null)); ref {StringUtils} [1868-1868],
 assertEquals("", StringUtils.difference("", "")); ref {StringUtils} [1869-1869],
 assertEquals("abc", StringUtils.difference("", "abc")); ref {StringUtils} [1870-1870],
 assertEquals("", StringUtils.difference("abc", "")); ref {StringUtils} [1871-1871],
 assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); ref {StringUtils} [1872-1872],
 assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); ref {StringUtils} [1873-1873],
 assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); ref {StringUtils} [1874-1874],
 assertEquals("", StringUtils.difference("abc", "abc")); ref {StringUtils} [1875-1875],
 assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); ref {StringUtils} [1876-1876]
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDifferenceAt_StringString has 9 assertions: 
 assertEquals(-1, StringUtils.indexOfDifference(null, null)); ref {StringUtils} [1881-1881],
 assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); ref {StringUtils} [1882-1882],
 assertEquals(-1, StringUtils.indexOfDifference("", "")); ref {StringUtils} [1883-1883],
 assertEquals(0, StringUtils.indexOfDifference("", "abc")); ref {StringUtils} [1884-1884],
 assertEquals(0, StringUtils.indexOfDifference("abc", "")); ref {StringUtils} [1885-1885],
 assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); ref {StringUtils} [1886-1886],
 assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); ref {StringUtils} [1887-1887],
 assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); ref {StringUtils} [1888-1888],
 assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot")); ref {StringUtils} [1889-1889]
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetLevenshteinDistance_StringString has 10 assertions: 
 assertEquals(0, StringUtils.getLevenshteinDistance("", "")); ref {StringUtils} [1896-1896],
 assertEquals(1, StringUtils.getLevenshteinDistance("", "a")); ref {StringUtils} [1897-1897],
 assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "")); ref {StringUtils} [1898-1898],
 assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog")); ref {StringUtils} [1899-1899],
 assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant")); ref {StringUtils} [1900-1900],
 assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo")); ref {StringUtils} [1901-1901],
 assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant")); ref {StringUtils} [1902-1902],
 assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz")); ref {StringUtils} [1903-1903],
 assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo")); ref {StringUtils} [1904-1904],
 assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo")); ref {StringUtils} [1905-1905]
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetLevenshteinDistance_NullString has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetLevenshteinDistance_StringNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetLevenshteinDistance_StringStringInt has 38 assertions: 
 // empty strings
assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); ref {StringUtils} [1921-1921],
 assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); ref {StringUtils} [1922-1922],
 assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); ref {StringUtils} [1923-1923],
 assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); ref {StringUtils} [1924-1924],
 // unequal strings, zero threshold
assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); ref {StringUtils} [1927-1927],
 assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); ref {StringUtils} [1928-1928],
 // equal strings
assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); ref {StringUtils} [1931-1931],
 assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); ref {StringUtils} [1932-1932],
 // same length
assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); ref {StringUtils} [1935-1935],
 assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); ref {StringUtils} [1936-1936],
 // big stripe
assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10)); ref {StringUtils} [1939-1939],
 // distance less than threshold
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8)); ref {StringUtils} [1942-1942],
 assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4)); ref {StringUtils} [1943-1943],
 // distance equal to threshold
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7)); ref {StringUtils} [1946-1946],
 assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3)); ref {StringUtils} [1947-1947],
 // distance greater than threshold
assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2)); ref {StringUtils} [1950-1950],
 assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2)); ref {StringUtils} [1951-1951],
 assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6)); ref {StringUtils} [1952-1952],
 // stripe runs off array, strings not similar
assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1)); ref {StringUtils} [1955-1955],
 assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1)); ref {StringUtils} [1956-1956],
 // stripe runs off array, strings are similar
assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1)); ref {StringUtils} [1959-1959],
 assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1)); ref {StringUtils} [1960-1960],
 // old getLevenshteinDistance test cases
assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog", 1)); ref {StringUtils} [1963-1963],
 assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant", 3)); ref {StringUtils} [1964-1964],
 assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo", 7)); ref {StringUtils} [1965-1965],
 assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo", 6)); ref {StringUtils} [1966-1966],
 assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant", 7)); ref {StringUtils} [1967-1967],
 assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant", 6)); ref {StringUtils} [1968-1968],
 assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz", 8)); ref {StringUtils} [1969-1969],
 assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo", 8)); ref {StringUtils} [1970-1970],
 assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo", 1)); ref {StringUtils} [1971-1971],
 assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog", Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1973-1973],
 assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant", Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1974-1974],
 assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo", Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1975-1975],
 assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant", Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1976-1976],
 assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz", Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1977-1977],
 assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo", Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1978-1978],
 assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo", Integer.MAX_VALUE)); ref {Integer, StringUtils, Integer.MAX_VALUE} [1979-1979]
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetLevenshteinDistance_NullStringInt has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetLevenshteinDistance_StringNullInt has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.307 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetLevenshteinDistance_StringStringNegativeInt has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetJaroWinklerDistance_StringString has 7 assertions: 
 assertEquals(0.93d, StringUtils.getJaroWinklerDistance("frog", "fog"), 0.0d); ref {StringUtils} [1999-1999],
 assertEquals(0.0d, StringUtils.getJaroWinklerDistance("fly", "ant"), 0.0d); ref {StringUtils} [2000-2000],
 assertEquals(0.44d, StringUtils.getJaroWinklerDistance("elephant", "hippo"), 0.0d); ref {StringUtils} [2001-2001],
 assertEquals(0.91d, StringUtils.getJaroWinklerDistance("ABC Corporation", "ABC Corp"), 0.0d); ref {StringUtils} [2002-2002],
 assertEquals(0.93d, StringUtils.getJaroWinklerDistance("D N H Enterprises Inc", "D & H Enterprises, Inc."), 0.0d); ref {StringUtils} [2003-2003],
 assertEquals(0.94d, StringUtils.getJaroWinklerDistance("My Gym Children's Fitness Center", "My Gym. Childrens Fitness"), 0.0d); ref {StringUtils} [2004-2004],
 assertEquals(0.9d, StringUtils.getJaroWinklerDistance("PENNSYLVANIA", "PENNCISYLVNIA"), 0.0d); ref {StringUtils} [2005-2005]
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetJaroWinklerDistance_NullNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetJaroWinklerDistance_StringNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetJaroWinklerDistance_NullString has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetFuzzyDistance has 7 assertions: 
 assertEquals(0, StringUtils.getFuzzyDistance("", "", Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [2025-2025],
 assertEquals(0, StringUtils.getFuzzyDistance("Workshop", "b", Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [2026-2026],
 assertEquals(1, StringUtils.getFuzzyDistance("Room", "o", Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [2027-2027],
 assertEquals(1, StringUtils.getFuzzyDistance("Workshop", "w", Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [2028-2028],
 assertEquals(2, StringUtils.getFuzzyDistance("Workshop", "ws", Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [2029-2029],
 assertEquals(4, StringUtils.getFuzzyDistance("Workshop", "wo", Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [2030-2030],
 assertEquals(3, StringUtils.getFuzzyDistance("Apache Software Foundation", "asf", Locale.ENGLISH)); ref {Locale, Locale.ENGLISH, StringUtils} [2031-2031]
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetFuzzyDistance_NullNullNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetFuzzyDistance_StringNullLoclae has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetFuzzyDistance_NullStringLocale has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetFuzzyDistance_StringStringNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testEMPTY has 3 assertions: 
 assertNotNull(StringUtils.EMPTY); ref {StringUtils, StringUtils.EMPTY} [2059-2059],
 assertEquals("", StringUtils.EMPTY); ref {StringUtils, StringUtils.EMPTY} [2060-2060],
 assertEquals(0, StringUtils.EMPTY.length()); ref {StringUtils, StringUtils.EMPTY} [2061-2061]
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testIsAllLowerCase has 10 assertions: 
 assertFalse(StringUtils.isAllLowerCase(null)); ref {StringUtils} [2069-2069],
 assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); ref {StringUtils, StringUtils.EMPTY} [2070-2070],
 assertFalse(StringUtils.isAllLowerCase("  ")); ref {StringUtils} [2071-2071],
 assertTrue(StringUtils.isAllLowerCase("abc")); ref {StringUtils} [2072-2072],
 assertFalse(StringUtils.isAllLowerCase("abc ")); ref {StringUtils} [2073-2073],
 assertFalse(StringUtils.isAllLowerCase("abc\n")); ref {StringUtils} [2074-2074],
 assertFalse(StringUtils.isAllLowerCase("abC")); ref {StringUtils} [2075-2075],
 assertFalse(StringUtils.isAllLowerCase("ab c")); ref {StringUtils} [2076-2076],
 assertFalse(StringUtils.isAllLowerCase("ab1c")); ref {StringUtils} [2077-2077],
 assertFalse(StringUtils.isAllLowerCase("ab/c")); ref {StringUtils} [2078-2078]
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testIsAllUpperCase has 10 assertions: 
 assertFalse(StringUtils.isAllUpperCase(null)); ref {StringUtils} [2086-2086],
 assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY)); ref {StringUtils, StringUtils.EMPTY} [2087-2087],
 assertFalse(StringUtils.isAllUpperCase("  ")); ref {StringUtils} [2088-2088],
 assertTrue(StringUtils.isAllUpperCase("ABC")); ref {StringUtils} [2089-2089],
 assertFalse(StringUtils.isAllUpperCase("ABC ")); ref {StringUtils} [2090-2090],
 assertFalse(StringUtils.isAllUpperCase("ABC\n")); ref {StringUtils} [2091-2091],
 assertFalse(StringUtils.isAllUpperCase("aBC")); ref {StringUtils} [2092-2092],
 assertFalse(StringUtils.isAllUpperCase("A C")); ref {StringUtils} [2093-2093],
 assertFalse(StringUtils.isAllUpperCase("A1C")); ref {StringUtils} [2094-2094],
 assertFalse(StringUtils.isAllUpperCase("A/C")); ref {StringUtils} [2095-2095]
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testRemoveStart has 10 assertions: 
 // StringUtils.removeStart("", *)        = ""
assertNull(StringUtils.removeStart(null, null)); ref {StringUtils} [2101-2101],
 assertNull(StringUtils.removeStart(null, "")); ref {StringUtils} [2102-2102],
 assertNull(StringUtils.removeStart(null, "a")); ref {StringUtils} [2103-2103],
 // StringUtils.removeStart(*, null)      = *
assertEquals(StringUtils.removeStart("", null), ""); ref {StringUtils} [2106-2106],
 assertEquals(StringUtils.removeStart("", ""), ""); ref {StringUtils} [2107-2107],
 assertEquals(StringUtils.removeStart("", "a"), ""); ref {StringUtils} [2108-2108],
 // All others:
assertEquals(StringUtils.removeStart("www.domain.com", "www."), "domain.com"); ref {StringUtils} [2111-2111],
 assertEquals(StringUtils.removeStart("domain.com", "www."), "domain.com"); ref {StringUtils} [2112-2112],
 assertEquals(StringUtils.removeStart("domain.com", ""), "domain.com"); ref {StringUtils} [2113-2113],
 assertEquals(StringUtils.removeStart("domain.com", null), "domain.com"); ref {StringUtils} [2114-2114]
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testRemoveStartIgnoreCase has 11 assertions: 
 // StringUtils.removeStart("", *)        = ""
assertNull("removeStartIgnoreCase(null, null)", StringUtils.removeStartIgnoreCase(null, null)); ref {StringUtils} [2120-2120],
 assertNull("removeStartIgnoreCase(null, \"\")", StringUtils.removeStartIgnoreCase(null, "")); ref {StringUtils} [2121-2121],
 assertNull("removeStartIgnoreCase(null, \"a\")", StringUtils.removeStartIgnoreCase(null, "a")); ref {StringUtils} [2122-2122],
 // StringUtils.removeStart(*, null)      = *
assertEquals("removeStartIgnoreCase(\"\", null)", StringUtils.removeStartIgnoreCase("", null), ""); ref {StringUtils} [2125-2125],
 assertEquals("removeStartIgnoreCase(\"\", \"\")", StringUtils.removeStartIgnoreCase("", ""), ""); ref {StringUtils} [2126-2126],
 assertEquals("removeStartIgnoreCase(\"\", \"a\")", StringUtils.removeStartIgnoreCase("", "a"), ""); ref {StringUtils} [2127-2127],
 // All others:
assertEquals("removeStartIgnoreCase(\"www.domain.com\", \"www.\")", StringUtils.removeStartIgnoreCase("www.domain.com", "www."), "domain.com"); ref {StringUtils} [2130-2130],
 assertEquals("removeStartIgnoreCase(\"domain.com\", \"www.\")", StringUtils.removeStartIgnoreCase("domain.com", "www."), "domain.com"); ref {StringUtils} [2131-2131],
 assertEquals("removeStartIgnoreCase(\"domain.com\", \"\")", StringUtils.removeStartIgnoreCase("domain.com", ""), "domain.com"); ref {StringUtils} [2132-2132],
 assertEquals("removeStartIgnoreCase(\"domain.com\", null)", StringUtils.removeStartIgnoreCase("domain.com", null), "domain.com"); ref {StringUtils} [2133-2133],
 // Case insensitive:
assertEquals("removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")", StringUtils.removeStartIgnoreCase("www.domain.com", "WWW."), "domain.com"); ref {StringUtils} [2136-2136]
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testRemoveEnd has 11 assertions: 
 // StringUtils.removeEnd("", *)        = ""
assertNull(StringUtils.removeEnd(null, null)); ref {StringUtils} [2142-2142],
 assertNull(StringUtils.removeEnd(null, "")); ref {StringUtils} [2143-2143],
 assertNull(StringUtils.removeEnd(null, "a")); ref {StringUtils} [2144-2144],
 // StringUtils.removeEnd(*, null)      = *
assertEquals(StringUtils.removeEnd("", null), ""); ref {StringUtils} [2147-2147],
 assertEquals(StringUtils.removeEnd("", ""), ""); ref {StringUtils} [2148-2148],
 assertEquals(StringUtils.removeEnd("", "a"), ""); ref {StringUtils} [2149-2149],
 // All others:
assertEquals(StringUtils.removeEnd("www.domain.com.", ".com"), "www.domain.com."); ref {StringUtils} [2152-2152],
 assertEquals(StringUtils.removeEnd("www.domain.com", ".com"), "www.domain"); ref {StringUtils} [2153-2153],
 assertEquals(StringUtils.removeEnd("www.domain", ".com"), "www.domain"); ref {StringUtils} [2154-2154],
 assertEquals(StringUtils.removeEnd("domain.com", ""), "domain.com"); ref {StringUtils} [2155-2155],
 assertEquals(StringUtils.removeEnd("domain.com", null), "domain.com"); ref {StringUtils} [2156-2156]
[m[m31.08.2022 - 15:15:23.308 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testRemoveEndIgnoreCase has 13 assertions: 
 // StringUtils.removeEndIgnoreCase("", *)        = ""
assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); ref {StringUtils} [2162-2162],
 assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); ref {StringUtils} [2163-2163],
 assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); ref {StringUtils} [2164-2164],
 // StringUtils.removeEnd(*, null)      = *
assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); ref {StringUtils} [2167-2167],
 assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); ref {StringUtils} [2168-2168],
 assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); ref {StringUtils} [2169-2169],
 // All others:
assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); ref {StringUtils} [2172-2172],
 assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); ref {StringUtils} [2173-2173],
 assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); ref {StringUtils} [2174-2174],
 assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com"); ref {StringUtils} [2175-2175],
 assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com"); ref {StringUtils} [2176-2176],
 // Case insensitive:
assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); ref {StringUtils} [2179-2179],
 assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); ref {StringUtils} [2180-2180]
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testRemove_String has 14 assertions: 
 // StringUtils.remove(null, *)        = null
assertNull(StringUtils.remove(null, null)); ref {StringUtils} [2186-2186],
 assertNull(StringUtils.remove(null, "")); ref {StringUtils} [2187-2187],
 assertNull(StringUtils.remove(null, "a")); ref {StringUtils} [2188-2188],
 // StringUtils.remove("", *)          = ""
assertEquals("", StringUtils.remove("", null)); ref {StringUtils} [2191-2191],
 assertEquals("", StringUtils.remove("", "")); ref {StringUtils} [2192-2192],
 assertEquals("", StringUtils.remove("", "a")); ref {StringUtils} [2193-2193],
 // StringUtils.remove(*, null)        = *
assertNull(StringUtils.remove(null, null)); ref {StringUtils} [2196-2196],
 assertEquals("", StringUtils.remove("", null)); ref {StringUtils} [2197-2197],
 assertEquals("a", StringUtils.remove("a", null)); ref {StringUtils} [2198-2198],
 // StringUtils.remove(*, "")          = *
assertNull(StringUtils.remove(null, "")); ref {StringUtils} [2201-2201],
 assertEquals("", StringUtils.remove("", "")); ref {StringUtils} [2202-2202],
 assertEquals("a", StringUtils.remove("a", "")); ref {StringUtils} [2203-2203],
 // StringUtils.remove("queued", "ue") = "qd"
assertEquals("qd", StringUtils.remove("queued", "ue")); ref {StringUtils} [2206-2206],
 // StringUtils.remove("queued", "zz") = "queued"
assertEquals("queued", StringUtils.remove("queued", "zz")); ref {StringUtils} [2209-2209]
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testRemove_char has 8 assertions: 
 // StringUtils.remove(null, *)       = null
assertNull(StringUtils.remove(null, 'a')); ref {StringUtils} [2215-2215],
 assertNull(StringUtils.remove(null, 'a')); ref {StringUtils} [2216-2216],
 assertNull(StringUtils.remove(null, 'a')); ref {StringUtils} [2217-2217],
 // StringUtils.remove("", *)          = ""
assertEquals("", StringUtils.remove("", 'a')); ref {StringUtils} [2220-2220],
 assertEquals("", StringUtils.remove("", 'a')); ref {StringUtils} [2221-2221],
 assertEquals("", StringUtils.remove("", 'a')); ref {StringUtils} [2222-2222],
 // StringUtils.remove("queued", 'u') = "qeed"
assertEquals("qeed", StringUtils.remove("queued", 'u')); ref {StringUtils} [2225-2225],
 // StringUtils.remove("queued", 'z') = "queued"
assertEquals("queued", StringUtils.remove("queued", 'z')); ref {StringUtils} [2228-2228]
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testDifferenceAt_StringArray has 17 assertions: 
 assertEquals(-1, StringUtils.indexOfDifference((String[]) null)); ref {StringUtils} [2233-2233],
 assertEquals(-1, StringUtils.indexOfDifference(new String[] {})); ref {StringUtils} [2234-2234],
 assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc" })); ref {StringUtils} [2235-2235],
 assertEquals(-1, StringUtils.indexOfDifference(new String[] { null, null })); ref {StringUtils} [2236-2236],
 assertEquals(-1, StringUtils.indexOfDifference(new String[] { "", "" })); ref {StringUtils} [2237-2237],
 assertEquals(0, StringUtils.indexOfDifference(new String[] { "", null })); ref {StringUtils} [2238-2238],
 assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", null, null })); ref {StringUtils} [2239-2239],
 assertEquals(0, StringUtils.indexOfDifference(new String[] { null, null, "abc" })); ref {StringUtils} [2240-2240],
 assertEquals(0, StringUtils.indexOfDifference(new String[] { "", "abc" })); ref {StringUtils} [2241-2241],
 assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", "" })); ref {StringUtils} [2242-2242],
 assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc", "abc" })); ref {StringUtils} [2243-2243],
 assertEquals(1, StringUtils.indexOfDifference(new String[] { "abc", "a" })); ref {StringUtils} [2244-2244],
 assertEquals(2, StringUtils.indexOfDifference(new String[] { "ab", "abxyz" })); ref {StringUtils} [2245-2245],
 assertEquals(2, StringUtils.indexOfDifference(new String[] { "abcde", "abxyz" })); ref {StringUtils} [2246-2246],
 assertEquals(0, StringUtils.indexOfDifference(new String[] { "abcde", "xyz" })); ref {StringUtils} [2247-2247],
 assertEquals(0, StringUtils.indexOfDifference(new String[] { "xyz", "abcde" })); ref {StringUtils} [2248-2248],
 assertEquals(7, StringUtils.indexOfDifference(new String[] { "i am a machine", "i am a robot" })); ref {StringUtils} [2249-2249]
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testGetCommonPrefix_StringArray has 17 assertions: 
 assertEquals("", StringUtils.getCommonPrefix((String[]) null)); ref {StringUtils} [2254-2254],
 assertEquals("", StringUtils.getCommonPrefix()); ref {StringUtils} [2255-2255],
 assertEquals("abc", StringUtils.getCommonPrefix("abc")); ref {StringUtils} [2256-2256],
 assertEquals("", StringUtils.getCommonPrefix(null, null)); ref {StringUtils} [2257-2257],
 assertEquals("", StringUtils.getCommonPrefix("", "")); ref {StringUtils} [2258-2258],
 assertEquals("", StringUtils.getCommonPrefix("", null)); ref {StringUtils} [2259-2259],
 assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); ref {StringUtils} [2260-2260],
 assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); ref {StringUtils} [2261-2261],
 assertEquals("", StringUtils.getCommonPrefix("", "abc")); ref {StringUtils} [2262-2262],
 assertEquals("", StringUtils.getCommonPrefix("abc", "")); ref {StringUtils} [2263-2263],
 assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); ref {StringUtils} [2264-2264],
 assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); ref {StringUtils} [2265-2265],
 assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); ref {StringUtils} [2266-2266],
 assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); ref {StringUtils} [2267-2267],
 assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); ref {StringUtils} [2268-2268],
 assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); ref {StringUtils} [2269-2269],
 assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); ref {StringUtils} [2270-2270]
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testNormalizeSpace has 18 assertions: 
 assertNull(StringUtils.normalizeSpace(null)); ref {StringUtils} [2275-2275],
 assertEquals("", StringUtils.normalizeSpace("")); ref {StringUtils} [2276-2276],
 assertEquals("", StringUtils.normalizeSpace(" ")); ref {StringUtils} [2277-2277],
 assertEquals("", StringUtils.normalizeSpace("\t")); ref {StringUtils} [2278-2278],
 assertEquals("", StringUtils.normalizeSpace("\n")); ref {StringUtils} [2279-2279],
 assertEquals("", StringUtils.normalizeSpace("\u0009")); ref {StringUtils} [2280-2280],
 assertEquals("", StringUtils.normalizeSpace("\u000B")); ref {StringUtils} [2281-2281],
 assertEquals("", StringUtils.normalizeSpace("\u000C")); ref {StringUtils} [2282-2282],
 assertEquals("", StringUtils.normalizeSpace("\u001C")); ref {StringUtils} [2283-2283],
 assertEquals("", StringUtils.normalizeSpace("\u001D")); ref {StringUtils} [2284-2284],
 assertEquals("", StringUtils.normalizeSpace("\u001E")); ref {StringUtils} [2285-2285],
 assertEquals("", StringUtils.normalizeSpace("\u001F")); ref {StringUtils} [2286-2286],
 assertEquals("", StringUtils.normalizeSpace("\f")); ref {StringUtils} [2287-2287],
 assertEquals("", StringUtils.normalizeSpace("\r")); ref {StringUtils} [2288-2288],
 assertEquals("a", StringUtils.normalizeSpace("  a  ")); ref {StringUtils} [2289-2289],
 assertEquals("a b c", StringUtils.normalizeSpace("  a  b   c  ")); ref {StringUtils} [2290-2290],
 assertEquals("a b c", StringUtils.normalizeSpace("a\t\f\r  b\u000B   c\n")); ref {StringUtils} [2291-2291],
 assertEquals("a   b c", StringUtils.normalizeSpace("a\t\f\r  " + HARD_SPACE + HARD_SPACE + "b\u000B   c\n")); ref {HARD_SPACE, StringUtils} [2292-2292]
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testLANG666 has 2 assertions: 
 assertEquals("12", StringUtils.stripEnd("120.00", ".0")); ref {StringUtils} [2297-2297],
 assertEquals("121", StringUtils.stripEnd("121.00", ".0")); ref {StringUtils} [2298-2298]
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testStringUtilsCharSequenceContract has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testToString has 4 assertions: 
 // sanity check start
assertArrayEquals(expectedBytes, expectedString.getBytes()); ref {expectedBytes, expectedString} [2340-2340],
 // sanity check end
assertEquals(expectedString, StringUtils.toString(expectedBytes, null)); ref {expectedBytes, StringUtils, expectedString} [2342-2342],
 assertEquals(expectedString, StringUtils.toString(expectedBytes, SystemUtils.FILE_ENCODING)); ref {expectedBytes, SystemUtils.FILE_ENCODING, StringUtils, expectedString, SystemUtils} [2343-2343],
 assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding)); ref {expectedBytes, StringUtils, encoding, expectedString} [2346-2346]
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testEscapeSurrogatePairs has 7 assertions: 
 assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); ref {StringEscapeUtils} [2351-2351],
 // Examples from https://en.wikipedia.org/wiki/UTF-16
assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); ref {StringEscapeUtils} [2353-2353],
 assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); ref {StringEscapeUtils} [2354-2354],
 assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); ref {StringEscapeUtils} [2355-2355],
 assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); ref {StringEscapeUtils} [2356-2356],
 assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); ref {StringEscapeUtils} [2357-2357],
 assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); ref {StringEscapeUtils} [2358-2358]
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testEscapeSurrogatePairsLang858 has 2 assertions: 
 // fail LANG-858
assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD")); ref {StringEscapeUtils} [2366-2366],
 // fail LANG-858
assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); ref {StringEscapeUtils} [2367-2367]
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testUnescapeSurrogatePairs has 6 assertions: 
 assertEquals("\uD83D\uDE30", StringEscapeUtils.unescapeCsv("\uD83D\uDE30")); ref {StringEscapeUtils} [2372-2372],
 // Examples from https://en.wikipedia.org/wiki/UTF-16
assertEquals("\uD800\uDC00", StringEscapeUtils.unescapeCsv("\uD800\uDC00")); ref {StringEscapeUtils} [2374-2374],
 assertEquals("\uD834\uDD1E", StringEscapeUtils.unescapeCsv("\uD834\uDD1E")); ref {StringEscapeUtils} [2375-2375],
 assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeCsv("\uDBFF\uDFFD")); ref {StringEscapeUtils} [2376-2376],
 assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml3("\uDBFF\uDFFD")); ref {StringEscapeUtils} [2377-2377],
 assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml4("\uDBFF\uDFFD")); ref {StringEscapeUtils} [2378-2378]
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testAppendIfMissing has 16 assertions: 
 assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); ref {StringUtils} [2386-2386],
 assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); ref {StringUtils} [2387-2387],
 assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); ref {StringUtils} [2388-2388],
 assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); ref {StringUtils} [2389-2389],
 assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); ref {StringUtils} [2390-2390],
 assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); ref {StringUtils} [2391-2391],
 assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); ref {StringUtils} [2393-2393],
 assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); ref {StringUtils} [2394-2394],
 assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); ref {StringUtils} [2395-2395],
 assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); ref {StringUtils} [2396-2396],
 assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); ref {StringUtils} [2397-2397],
 assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); ref {StringUtils} [2398-2398],
 assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); ref {StringUtils} [2399-2399],
 assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); ref {StringUtils} [2400-2400],
 assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); ref {StringUtils} [2401-2401],
 assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); ref {StringUtils} [2402-2402]
[m[m31.08.2022 - 15:15:23.309 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testAppendIfMissingIgnoreCase has 16 assertions: 
 assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null)); ref {StringUtils} [2410-2410],
 assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null)); ref {StringUtils} [2411-2411],
 assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz")); ref {StringUtils} [2412-2412],
 assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz")); ref {StringUtils} [2413-2413],
 assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz")); ref {StringUtils} [2414-2414],
 assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz")); ref {StringUtils} [2415-2415],
 assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null)); ref {StringUtils} [2417-2417],
 assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); ref {StringUtils} [2418-2418],
 assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); ref {StringUtils} [2419-2419],
 assertEquals("appendIfMissingIgnoreCase(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); ref {StringUtils} [2420-2420],
 assertEquals("appendIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "")); ref {StringUtils} [2421-2421],
 assertEquals("appendIfMissingIgnoreCase(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno")); ref {StringUtils} [2422-2422],
 assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno")); ref {StringUtils} [2423-2423],
 assertEquals("appendIfMissingIgnoreCase(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno")); ref {StringUtils} [2424-2424],
 assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz,mno)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno")); ref {StringUtils} [2425-2425],
 assertEquals("appendIfMissingIgnoreCase(abcMNO,xyz,mno)", "abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno")); ref {StringUtils} [2426-2426]
[m[m31.08.2022 - 15:15:23.310 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testPrependIfMissing has 16 assertions: 
 assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null, null)); ref {StringUtils} [2434-2434],
 assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc", null)); ref {StringUtils} [2435-2435],
 assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("", "xyz")); ref {StringUtils} [2436-2436],
 assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz")); ref {StringUtils} [2437-2437],
 assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz")); ref {StringUtils} [2438-2438],
 assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz")); ref {StringUtils} [2439-2439],
 assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null, null, (CharSequence[]) null)); ref {StringUtils} [2441-2441],
 assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc", null, (CharSequence[]) null)); ref {StringUtils} [2442-2442],
 assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("", "xyz", (CharSequence[]) null)); ref {StringUtils} [2443-2443],
 assertEquals("prependIfMissing(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", new CharSequence[] { null })); ref {StringUtils} [2444-2444],
 assertEquals("prependIfMissing(abc,xyz,\"\")", "abc", StringUtils.prependIfMissing("abc", "xyz", "")); ref {StringUtils} [2445-2445],
 assertEquals("prependIfMissing(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", "mno")); ref {StringUtils} [2446-2446],
 assertEquals("prependIfMissing(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz", "mno")); ref {StringUtils} [2447-2447],
 assertEquals("prependIfMissing(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissing("mnoabc", "xyz", "mno")); ref {StringUtils} [2448-2448],
 assertEquals("prependIfMissing(XYZabc,xyz,mno)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz", "mno")); ref {StringUtils} [2449-2449],
 assertEquals("prependIfMissing(MNOabc,xyz,mno)", "xyzMNOabc", StringUtils.prependIfMissing("MNOabc", "xyz", "mno")); ref {StringUtils} [2450-2450]
[m[m31.08.2022 - 15:15:23.310 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testPrependIfMissingIgnoreCase has 16 assertions: 
 assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); ref {StringUtils} [2458-2458],
 assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); ref {StringUtils} [2459-2459],
 assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); ref {StringUtils} [2460-2460],
 assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); ref {StringUtils} [2461-2461],
 assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); ref {StringUtils} [2462-2462],
 assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); ref {StringUtils} [2463-2463],
 assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); ref {StringUtils} [2465-2465],
 assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); ref {StringUtils} [2466-2466],
 assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); ref {StringUtils} [2467-2467],
 assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); ref {StringUtils} [2468-2468],
 assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); ref {StringUtils} [2469-2469],
 assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); ref {StringUtils} [2470-2470],
 assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); ref {StringUtils} [2471-2471],
 assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); ref {StringUtils} [2472-2472],
 assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); ref {StringUtils} [2473-2473],
 assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); ref {StringUtils} [2474-2474]
[m[m31.08.2022 - 15:15:23.310 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testToEncodedString has 4 assertions: 
 // sanity check start
assertArrayEquals(expectedBytes, expectedString.getBytes()); ref {expectedBytes, expectedString} [2488-2488],
 // sanity check end
assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.defaultCharset())); ref {expectedBytes, StringUtils, Charset, expectedString} [2490-2490],
 assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.forName(encoding))); ref {expectedBytes, StringUtils, Charset, encoding, expectedString} [2491-2491],
 assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.forName(encoding))); ref {expectedBytes, StringUtils, Charset, encoding, expectedString} [2494-2494]
[m[m31.08.2022 - 15:15:23.310 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testWrap_StringChar has 12 assertions: 
 assertNull(StringUtils.wrap(null, null)); ref {StringUtils} [2501-2501],
 assertNull(StringUtils.wrap(null, '\0')); ref {StringUtils} [2502-2502],
 assertNull(StringUtils.wrap(null, '1')); ref {StringUtils} [2503-2503],
 assertEquals(null, StringUtils.wrap(null, null)); ref {StringUtils} [2505-2505],
 assertEquals("", StringUtils.wrap("", '\0')); ref {StringUtils} [2506-2506],
 assertEquals("xabx", StringUtils.wrap("ab", 'x')); ref {StringUtils} [2507-2507],
 assertEquals("\"ab\"", StringUtils.wrap("ab", '\"')); ref {StringUtils} [2508-2508],
 assertEquals("\"\"ab\"\"", StringUtils.wrap("\"ab\"", '\"')); ref {StringUtils} [2509-2509],
 assertEquals("'ab'", StringUtils.wrap("ab", '\'')); ref {StringUtils} [2510-2510],
 assertEquals("''abcd''", StringUtils.wrap("'abcd'", '\'')); ref {StringUtils} [2511-2511],
 assertEquals("'\"abcd\"'", StringUtils.wrap("\"abcd\"", '\'')); ref {StringUtils} [2512-2512],
 assertEquals("\"'abcd'\"", StringUtils.wrap("'abcd'", '\"')); ref {StringUtils} [2513-2513]
[m[m31.08.2022 - 15:15:23.310 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsTest::testWrap_StringString has 13 assertions: 
 assertNull(StringUtils.wrap(null, null)); ref {StringUtils} [2518-2518],
 assertNull(StringUtils.wrap(null, "")); ref {StringUtils} [2519-2519],
 assertNull(StringUtils.wrap(null, "1")); ref {StringUtils} [2520-2520],
 assertEquals(null, StringUtils.wrap(null, null)); ref {StringUtils} [2522-2522],
 assertEquals("", StringUtils.wrap("", "")); ref {StringUtils} [2523-2523],
 assertEquals("ab", StringUtils.wrap("ab", null)); ref {StringUtils} [2524-2524],
 assertEquals("xabx", StringUtils.wrap("ab", "x")); ref {StringUtils} [2525-2525],
 assertEquals("\"ab\"", StringUtils.wrap("ab", "\"")); ref {StringUtils} [2526-2526],
 assertEquals("\"\"ab\"\"", StringUtils.wrap("\"ab\"", "\"")); ref {StringUtils} [2527-2527],
 assertEquals("'ab'", StringUtils.wrap("ab", "'")); ref {StringUtils} [2528-2528],
 assertEquals("''abcd''", StringUtils.wrap("'abcd'", "'")); ref {StringUtils} [2529-2529],
 assertEquals("'\"abcd\"'", StringUtils.wrap("\"abcd\"", "'")); ref {StringUtils} [2530-2530],
 assertEquals("\"'abcd'\"", StringUtils.wrap("'abcd'", "\"")); ref {StringUtils} [2531-2531]
[m[m31.08.2022 - 15:15:23.317 [INFO ] ParsingStrategy.parseTestSuite() - Found 12 test cases
[m[m31.08.2022 - 15:15:23.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.WordUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new WordUtils()); ref {} [39-39],
 assertEquals(1, cons.length); ref {cons.length, cons} [41-41],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [42-42],
 assertTrue(Modifier.isPublic(WordUtils.class.getModifiers())); ref {Modifier} [43-43],
 assertFalse(Modifier.isFinal(WordUtils.class.getModifiers())); ref {Modifier} [44-44]
[m[m31.08.2022 - 15:15:23.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.WordUtilsTest::testWrap_StringInt has 8 assertions: 
 assertEquals(null, WordUtils.wrap(null, 20)); ref {WordUtils} [50-50],
 assertEquals(null, WordUtils.wrap(null, -1)); ref {WordUtils} [51-51],
 assertEquals("", WordUtils.wrap("", 20)); ref {WordUtils} [53-53],
 assertEquals("", WordUtils.wrap("", -1)); ref {WordUtils} [54-54],
 assertEquals(expected, WordUtils.wrap(input, 20)); ref {input, WordUtils, expected} [61-61],
 assertEquals(expected, WordUtils.wrap(input, 20)); ref {input, WordUtils, expected} [67-67],
 assertEquals(expected, WordUtils.wrap(input, 20)); ref {input, WordUtils, expected} [73-73],
 assertEquals(expected, WordUtils.wrap(input, 7)); ref {input, WordUtils, expected} [79-79]
[m[m31.08.2022 - 15:15:23.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.WordUtilsTest::testWrap_StringIntStringBoolean has 31 assertions: 
 assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); ref {WordUtils} [84-84],
 assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); ref {WordUtils} [85-85],
 assertEquals(null, WordUtils.wrap(null, 20, null, true)); ref {WordUtils} [86-86],
 assertEquals(null, WordUtils.wrap(null, 20, null, false)); ref {WordUtils} [87-87],
 assertEquals(null, WordUtils.wrap(null, -1, null, true)); ref {WordUtils} [88-88],
 assertEquals(null, WordUtils.wrap(null, -1, null, false)); ref {WordUtils} [89-89],
 assertEquals("", WordUtils.wrap("", 20, "\n", false)); ref {WordUtils} [91-91],
 assertEquals("", WordUtils.wrap("", 20, "\n", true)); ref {WordUtils} [92-92],
 assertEquals("", WordUtils.wrap("", 20, null, false)); ref {WordUtils} [93-93],
 assertEquals("", WordUtils.wrap("", 20, null, true)); ref {WordUtils} [94-94],
 assertEquals("", WordUtils.wrap("", -1, null, false)); ref {WordUtils} [95-95],
 assertEquals("", WordUtils.wrap("", -1, null, true)); ref {WordUtils} [96-96],
 assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); ref {input, WordUtils, expected} [101-101],
 assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); ref {input, WordUtils, expected} [102-102],
 assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false)); ref {input, WordUtils, expected} [107-107],
 assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true)); ref {input, WordUtils, expected} [108-108],
 assertEquals(expected, WordUtils.wrap(input, 6, "\n", false)); ref {input, WordUtils, expected} [113-113],
 assertEquals(expected, WordUtils.wrap(input, 2, "\n", false)); ref {input, WordUtils, expected} [115-115],
 assertEquals(expected, WordUtils.wrap(input, -1, "\n", false)); ref {input, WordUtils, expected} [116-116],
 assertEquals(expected, WordUtils.wrap(input, 20, null, false)); ref {input, WordUtils, expected} [123-123],
 assertEquals(expected, WordUtils.wrap(input, 20, null, true)); ref {input, WordUtils, expected} [124-124],
 assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); ref {input, WordUtils, expected} [129-129],
 assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); ref {input, WordUtils, expected} [130-130],
 assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); ref {input, WordUtils, expected} [135-135],
 assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); ref {input, WordUtils, expected} [136-136],
 assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); ref {input, WordUtils, expected} [141-141],
 assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); ref {input, WordUtils, expected} [142-142],
 assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); ref {input, WordUtils, expected} [147-147],
 assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); ref {input, WordUtils, expected} [149-149],
 assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); ref {input, WordUtils, expected} [154-154],
 assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); ref {input, WordUtils, expected} [156-156]
[m[m31.08.2022 - 15:15:23.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.WordUtilsTest::testCapitalize_String has 9 assertions: 
 assertEquals(null, WordUtils.capitalize(null)); ref {WordUtils} [162-162],
 assertEquals("", WordUtils.capitalize("")); ref {WordUtils} [163-163],
 assertEquals("  ", WordUtils.capitalize("  ")); ref {WordUtils} [164-164],
 assertEquals("I", WordUtils.capitalize("I")); ref {WordUtils} [166-166],
 assertEquals("I", WordUtils.capitalize("i")); ref {WordUtils} [167-167],
 assertEquals("I Am Here 123", WordUtils.capitalize("i am here 123")); ref {WordUtils} [168-168],
 assertEquals("I Am Here 123", WordUtils.capitalize("I Am Here 123")); ref {WordUtils} [169-169],
 assertEquals("I Am HERE 123", WordUtils.capitalize("i am HERE 123")); ref {WordUtils} [170-170],
 assertEquals("I AM HERE 123", WordUtils.capitalize("I AM HERE 123")); ref {WordUtils} [171-171]
[m[m31.08.2022 - 15:15:23.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.WordUtilsTest::testCapitalizeWithDelimiters_String has 11 assertions: 
 assertEquals(null, WordUtils.capitalize(null, null)); ref {WordUtils} [176-176],
 assertEquals("", WordUtils.capitalize("", new char[0])); ref {WordUtils} [177-177],
 assertEquals("  ", WordUtils.capitalize("  ", new char[0])); ref {WordUtils} [178-178],
 assertEquals("I", WordUtils.capitalize("I", chars)); ref {WordUtils, chars} [181-181],
 assertEquals("I", WordUtils.capitalize("i", chars)); ref {WordUtils, chars} [182-182],
 assertEquals("I-Am Here+123", WordUtils.capitalize("i-am here+123", chars)); ref {WordUtils, chars} [183-183],
 assertEquals("I Am+Here-123", WordUtils.capitalize("I Am+Here-123", chars)); ref {WordUtils, chars} [184-184],
 assertEquals("I+Am-HERE 123", WordUtils.capitalize("i+am-HERE 123", chars)); ref {WordUtils, chars} [185-185],
 assertEquals("I-AM HERE+123", WordUtils.capitalize("I-AM HERE+123", chars)); ref {WordUtils, chars} [186-186],
 assertEquals("I aM.Fine", WordUtils.capitalize("i aM.fine", chars)); ref {WordUtils, chars} [188-188],
 assertEquals("I Am.fine", WordUtils.capitalize("i am.fine", null)); ref {WordUtils} [189-189]
[m[m31.08.2022 - 15:15:23.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.WordUtilsTest::testCapitalizeFully_String has 9 assertions: 
 assertEquals(null, WordUtils.capitalizeFully(null)); ref {WordUtils} [194-194],
 assertEquals("", WordUtils.capitalizeFully("")); ref {WordUtils} [195-195],
 assertEquals("  ", WordUtils.capitalizeFully("  ")); ref {WordUtils} [196-196],
 assertEquals("I", WordUtils.capitalizeFully("I")); ref {WordUtils} [198-198],
 assertEquals("I", WordUtils.capitalizeFully("i")); ref {WordUtils} [199-199],
 assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); ref {WordUtils} [200-200],
 assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); ref {WordUtils} [201-201],
 assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); ref {WordUtils} [202-202],
 assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); ref {WordUtils} [203-203]
[m[m31.08.2022 - 15:15:23.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.WordUtilsTest::testCapitalizeFullyWithDelimiters_String has 11 assertions: 
 assertEquals(null, WordUtils.capitalizeFully(null, null)); ref {WordUtils} [208-208],
 assertEquals("", WordUtils.capitalizeFully("", new char[0])); ref {WordUtils} [209-209],
 assertEquals("  ", WordUtils.capitalizeFully("  ", new char[0])); ref {WordUtils} [210-210],
 assertEquals("I", WordUtils.capitalizeFully("I", chars)); ref {WordUtils, chars} [213-213],
 assertEquals("I", WordUtils.capitalizeFully("i", chars)); ref {WordUtils, chars} [214-214],
 assertEquals("I-Am Here+123", WordUtils.capitalizeFully("i-am here+123", chars)); ref {WordUtils, chars} [215-215],
 assertEquals("I Am+Here-123", WordUtils.capitalizeFully("I Am+Here-123", chars)); ref {WordUtils, chars} [216-216],
 assertEquals("I+Am-Here 123", WordUtils.capitalizeFully("i+am-HERE 123", chars)); ref {WordUtils, chars} [217-217],
 assertEquals("I-Am Here+123", WordUtils.capitalizeFully("I-AM HERE+123", chars)); ref {WordUtils, chars} [218-218],
 assertEquals("I am.Fine", WordUtils.capitalizeFully("i aM.fine", chars)); ref {WordUtils, chars} [220-220],
 assertEquals("I Am.fine", WordUtils.capitalizeFully("i am.fine", null)); ref {WordUtils} [221-221]
[m[m31.08.2022 - 15:15:23.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.WordUtilsTest::testUncapitalize_String has 9 assertions: 
 assertEquals(null, WordUtils.uncapitalize(null)); ref {WordUtils} [226-226],
 assertEquals("", WordUtils.uncapitalize("")); ref {WordUtils} [227-227],
 assertEquals("  ", WordUtils.uncapitalize("  ")); ref {WordUtils} [228-228],
 assertEquals("i", WordUtils.uncapitalize("I")); ref {WordUtils} [230-230],
 assertEquals("i", WordUtils.uncapitalize("i")); ref {WordUtils} [231-231],
 assertEquals("i am here 123", WordUtils.uncapitalize("i am here 123")); ref {WordUtils} [232-232],
 assertEquals("i am here 123", WordUtils.uncapitalize("I Am Here 123")); ref {WordUtils} [233-233],
 assertEquals("i am hERE 123", WordUtils.uncapitalize("i am HERE 123")); ref {WordUtils} [234-234],
 assertEquals("i aM hERE 123", WordUtils.uncapitalize("I AM HERE 123")); ref {WordUtils} [235-235]
[m[m31.08.2022 - 15:15:23.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.WordUtilsTest::testUncapitalizeWithDelimiters_String has 11 assertions: 
 assertEquals(null, WordUtils.uncapitalize(null, null)); ref {WordUtils} [240-240],
 assertEquals("", WordUtils.uncapitalize("", new char[0])); ref {WordUtils} [241-241],
 assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); ref {WordUtils} [242-242],
 assertEquals("i", WordUtils.uncapitalize("I", chars)); ref {WordUtils, chars} [245-245],
 assertEquals("i", WordUtils.uncapitalize("i", chars)); ref {WordUtils, chars} [246-246],
 assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars)); ref {WordUtils, chars} [247-247],
 assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars)); ref {WordUtils, chars} [248-248],
 assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars)); ref {WordUtils, chars} [249-249],
 assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars)); ref {WordUtils, chars} [250-250],
 assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars)); ref {WordUtils, chars} [252-252],
 assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null)); ref {WordUtils} [253-253]
[m[m31.08.2022 - 15:15:23.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.WordUtilsTest::testInitials_String has 9 assertions: 
 assertEquals(null, WordUtils.initials(null)); ref {WordUtils} [259-259],
 assertEquals("", WordUtils.initials("")); ref {WordUtils} [260-260],
 assertEquals("", WordUtils.initials("  ")); ref {WordUtils} [261-261],
 assertEquals("I", WordUtils.initials("I")); ref {WordUtils} [263-263],
 assertEquals("i", WordUtils.initials("i")); ref {WordUtils} [264-264],
 assertEquals("BJL", WordUtils.initials("Ben John Lee")); ref {WordUtils} [265-265],
 assertEquals("BJ", WordUtils.initials("Ben J.Lee")); ref {WordUtils} [266-266],
 assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); ref {WordUtils} [267-267],
 assertEquals("iah1", WordUtils.initials("i am here 123")); ref {WordUtils} [268-268]
[m[m31.08.2022 - 15:15:23.318 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.WordUtilsTest::testInitials_String_charArray has 66 assertions: 
 assertEquals(null, WordUtils.initials(null, array)); ref {WordUtils, array} [275-275],
 assertEquals("", WordUtils.initials("", array)); ref {WordUtils, array} [276-276],
 assertEquals("", WordUtils.initials("  ", array)); ref {WordUtils, array} [277-277],
 assertEquals("I", WordUtils.initials("I", array)); ref {WordUtils, array} [278-278],
 assertEquals("i", WordUtils.initials("i", array)); ref {WordUtils, array} [279-279],
 assertEquals("S", WordUtils.initials("SJC", array)); ref {WordUtils, array} [280-280],
 assertEquals("BJL", WordUtils.initials("Ben John Lee", array)); ref {WordUtils, array} [281-281],
 assertEquals("BJ", WordUtils.initials("Ben J.Lee", array)); ref {WordUtils, array} [282-282],
 assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee", array)); ref {WordUtils, array} [283-283],
 assertEquals("KO", WordUtils.initials("Kay O'Murphy", array)); ref {WordUtils, array} [284-284],
 assertEquals("iah1", WordUtils.initials("i am here 123", array)); ref {WordUtils, array} [285-285],
 assertEquals(null, WordUtils.initials(null, array)); ref {WordUtils, array} [288-288],
 assertEquals("", WordUtils.initials("", array)); ref {WordUtils, array} [289-289],
 assertEquals("", WordUtils.initials("  ", array)); ref {WordUtils, array} [290-290],
 assertEquals("", WordUtils.initials("I", array)); ref {WordUtils, array} [291-291],
 assertEquals("", WordUtils.initials("i", array)); ref {WordUtils, array} [292-292],
 assertEquals("", WordUtils.initials("SJC", array)); ref {WordUtils, array} [293-293],
 assertEquals("", WordUtils.initials("Ben John Lee", array)); ref {WordUtils, array} [294-294],
 assertEquals("", WordUtils.initials("Ben J.Lee", array)); ref {WordUtils, array} [295-295],
 assertEquals("", WordUtils.initials(" Ben   John  . Lee", array)); ref {WordUtils, array} [296-296],
 assertEquals("", WordUtils.initials("Kay O'Murphy", array)); ref {WordUtils, array} [297-297],
 assertEquals("", WordUtils.initials("i am here 123", array)); ref {WordUtils, array} [298-298],
 assertEquals(null, WordUtils.initials(null, array)); ref {WordUtils, array} [301-301],
 assertEquals("", WordUtils.initials("", array)); ref {WordUtils, array} [302-302],
 assertEquals("", WordUtils.initials("  ", array)); ref {WordUtils, array} [303-303],
 assertEquals("I", WordUtils.initials("I", array)); ref {WordUtils, array} [304-304],
 assertEquals("i", WordUtils.initials("i", array)); ref {WordUtils, array} [305-305],
 assertEquals("S", WordUtils.initials("SJC", array)); ref {WordUtils, array} [306-306],
 assertEquals("BJL", WordUtils.initials("Ben John Lee", array)); ref {WordUtils, array} [307-307],
 assertEquals("BJ", WordUtils.initials("Ben J.Lee", array)); ref {WordUtils, array} [308-308],
 assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee", array)); ref {WordUtils, array} [309-309],
 assertEquals("KO", WordUtils.initials("Kay O'Murphy", array)); ref {WordUtils, array} [310-310],
 assertEquals("iah1", WordUtils.initials("i am here 123", array)); ref {WordUtils, array} [311-311],
 assertEquals(null, WordUtils.initials(null, array)); ref {WordUtils, array} [314-314],
 assertEquals("", WordUtils.initials("", array)); ref {WordUtils, array} [315-315],
 assertEquals("", WordUtils.initials("  ", array)); ref {WordUtils, array} [316-316],
 assertEquals("I", WordUtils.initials("I", array)); ref {WordUtils, array} [317-317],
 assertEquals("i", WordUtils.initials("i", array)); ref {WordUtils, array} [318-318],
 assertEquals("S", WordUtils.initials("SJC", array)); ref {WordUtils, array} [319-319],
 assertEquals("BJL", WordUtils.initials("Ben John Lee", array)); ref {WordUtils, array} [320-320],
 assertEquals("BJL", WordUtils.initials("Ben J.Lee", array)); ref {WordUtils, array} [321-321],
 assertEquals("BJL", WordUtils.initials(" Ben   John  . Lee", array)); ref {WordUtils, array} [322-322],
 assertEquals("KO", WordUtils.initials("Kay O'Murphy", array)); ref {WordUtils, array} [323-323],
 assertEquals("iah1", WordUtils.initials("i am here 123", array)); ref {WordUtils, array} [324-324],
 assertEquals(null, WordUtils.initials(null, array)); ref {WordUtils, array} [327-327],
 assertEquals("", WordUtils.initials("", array)); ref {WordUtils, array} [328-328],
 assertEquals("", WordUtils.initials("  ", array)); ref {WordUtils, array} [329-329],
 assertEquals("I", WordUtils.initials("I", array)); ref {WordUtils, array} [330-330],
 assertEquals("i", WordUtils.initials("i", array)); ref {WordUtils, array} [331-331],
 assertEquals("S", WordUtils.initials("SJC", array)); ref {WordUtils, array} [332-332],
 assertEquals("BJL", WordUtils.initials("Ben John Lee", array)); ref {WordUtils, array} [333-333],
 assertEquals("BJL", WordUtils.initials("Ben J.Lee", array)); ref {WordUtils, array} [334-334],
 assertEquals("BJL", WordUtils.initials(" Ben   John  . Lee", array)); ref {WordUtils, array} [335-335],
 assertEquals("KOM", WordUtils.initials("Kay O'Murphy", array)); ref {WordUtils, array} [336-336],
 assertEquals("iah1", WordUtils.initials("i am here 123", array)); ref {WordUtils, array} [337-337],
 assertEquals(null, WordUtils.initials(null, array)); ref {WordUtils, array} [340-340],
 assertEquals("", WordUtils.initials("", array)); ref {WordUtils, array} [341-341],
 assertEquals(" ", WordUtils.initials("  ", array)); ref {WordUtils, array} [342-342],
 assertEquals("", WordUtils.initials("I", array)); ref {WordUtils, array} [343-343],
 assertEquals("i", WordUtils.initials("i", array)); ref {WordUtils, array} [344-344],
 assertEquals("C", WordUtils.initials("SJC", array)); ref {WordUtils, array} [345-345],
 assertEquals("Bh", WordUtils.initials("Ben John Lee", array)); ref {WordUtils, array} [346-346],
 assertEquals("B.", WordUtils.initials("Ben J.Lee", array)); ref {WordUtils, array} [347-347],
 assertEquals(" h", WordUtils.initials(" Ben   John  . Lee", array)); ref {WordUtils, array} [348-348],
 assertEquals("K", WordUtils.initials("Kay O'Murphy", array)); ref {WordUtils, array} [349-349],
 assertEquals("i2", WordUtils.initials("i am here 123", array)); ref {WordUtils, array} [350-350]
[m[m31.08.2022 - 15:15:23.318 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.WordUtilsTest::testSwapCase_String has 10 assertions: 
 assertEquals(null, WordUtils.swapCase(null)); ref {WordUtils} [356-356],
 assertEquals("", WordUtils.swapCase("")); ref {WordUtils} [357-357],
 assertEquals("  ", WordUtils.swapCase("  ")); ref {WordUtils} [358-358],
 assertEquals("i", WordUtils.swapCase("I")); ref {WordUtils} [360-360],
 assertEquals("I", WordUtils.swapCase("i")); ref {WordUtils} [361-361],
 assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123")); ref {WordUtils} [362-362],
 assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123")); ref {WordUtils} [363-363],
 assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123")); ref {WordUtils} [364-364],
 assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123")); ref {WordUtils} [365-365],
 assertEquals(expect, WordUtils.swapCase(test)); ref {expect, WordUtils, test} [369-369]
[m[m31.08.2022 - 15:15:23.320 [INFO ] ParsingStrategy.parseTestSuite() - Found 15 test cases
[m[m31.08.2022 - 15:15:23.320 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new LocaleUtils()); ref {} [69-69],
 assertEquals(1, cons.length); ref {cons.length, cons} [71-71],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [72-72],
 assertTrue(Modifier.isPublic(LocaleUtils.class.getModifiers())); ref {Modifier} [73-73],
 assertFalse(Modifier.isFinal(LocaleUtils.class.getModifiers())); ref {Modifier} [74-74]
[m[m31.08.2022 - 15:15:23.320 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testToLocale_1Part has 7 assertions: 
 assertNull(LocaleUtils.toLocale((String) null)); ref {LocaleUtils} [131-131],
 assertValidToLocale("us"); ref {} [133-133],
 assertValidToLocale("fr"); ref {} [134-134],
 assertValidToLocale("de"); ref {} [135-135],
 assertValidToLocale("zh"); ref {} [136-136],
 // Valid format but lang doesnt exist, should make instance anyway
assertValidToLocale("qq"); ref {} [138-138],
 // LANG-941: JDK 8 introduced the empty locale as one of the default locales
assertValidToLocale(""); ref {} [140-140]
[m[m31.08.2022 - 15:15:23.320 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testToLocale_2Part has 2 assertions: 
 assertValidToLocale("us_EN", "us", "EN"); ref {} [175-175],
 // valid though doesnt exist
assertValidToLocale("us_ZH", "us", "ZH"); ref {} [177-177]
[m[m31.08.2022 - 15:15:23.321 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testToLocale_3Part has 5 assertions: 
 assertValidToLocale("us_EN_A", "us", "EN", "A"); ref {} [210-210],
 assertValidToLocale("us_EN_a", "us", "EN", "a"); ref {} [214-214],
 assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); ref {} [215-215],
 assertValidToLocale("us_EN_a", "us", "EN", "A"); ref {} [217-217],
 assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); ref {} [218-218]
[m[m31.08.2022 - 15:15:23.321 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testLocaleLookupList_Locale has 6 assertions: 
 assertLocaleLookupList(null, null, new Locale[0]); ref {} [255-255],
 assertLocaleLookupList(LOCALE_QQ, null, new Locale[] { LOCALE_QQ }); ref {LOCALE_QQ} [256-256],
 assertLocaleLookupList(LOCALE_EN, null, new Locale[] { LOCALE_EN }); ref {LOCALE_EN} [257-257],
 assertLocaleLookupList(LOCALE_EN, null, new Locale[] { LOCALE_EN }); ref {LOCALE_EN} [258-258],
 assertLocaleLookupList(LOCALE_EN_US, null, new Locale[] { LOCALE_EN_US, LOCALE_EN }); ref {LOCALE_EN_US, LOCALE_EN} [259-262],
 assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); ref {LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN} [263-267]
[m[m31.08.2022 - 15:15:23.321 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testLocaleLookupList_LocaleLocale has 10 assertions: 
 assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, new Locale[] { LOCALE_QQ }); ref {LOCALE_QQ} [275-276],
 assertLocaleLookupList(LOCALE_EN, LOCALE_EN, new Locale[] { LOCALE_EN }); ref {LOCALE_EN} [277-278],
 assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, new Locale[] { LOCALE_EN_US, LOCALE_EN }); ref {LOCALE_EN_US, LOCALE_EN} [280-283],
 assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); ref {LOCALE_EN_US, LOCALE_EN, LOCALE_QQ} [284-288],
 assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); ref {LOCALE_EN_US, LOCALE_QQ_ZZ, LOCALE_EN} [289-293],
 assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); ref {LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN} [295-299],
 assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); ref {LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN} [300-304],
 assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); ref {LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ} [305-310],
 assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); ref {LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, LOCALE_EN_US, LOCALE_EN} [311-316],
 assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN, new Locale[] { LOCALE_FR_CA, LOCALE_FR, LOCALE_EN }); ref {LOCALE_FR_CA, LOCALE_EN, LOCALE_FR} [317-321]
[m[m31.08.2022 - 15:15:23.321 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testAvailableLocaleList has 4 assertions: 
 assertNotNull(list); ref {list} [332-332],
 assertSame(list, list2); ref {list2, list} [333-333],
 assertUnmodifiableCollection(list); ref {list} [334-334],
 assertEquals(jdkLocaleList, list); ref {jdkLocaleList, list} [338-338]
[m[m31.08.2022 - 15:15:23.321 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testAvailableLocaleSet has 4 assertions: 
 assertNotNull(set); ref {set} [349-349],
 assertSame(set, set2); ref {set, set2} [350-350],
 assertUnmodifiableCollection(set); ref {set} [351-351],
 assertEquals(jdkLocaleSet, set); ref {set, jdkLocaleSet} [356-356]
[m[m31.08.2022 - 15:15:23.321 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testIsAvailableLocale has 7 assertions: 
 assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN)); ref {set, LocaleUtils, LOCALE_EN} [367-367],
 assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US)); ref {LOCALE_EN_US, set, LocaleUtils} [368-368],
 assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ)); ref {LOCALE_EN_US_ZZZZ, set, LocaleUtils} [369-369],
 assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR)); ref {set, LocaleUtils, LOCALE_FR} [370-370],
 assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA)); ref {LOCALE_FR_CA, set, LocaleUtils} [371-371],
 assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ)); ref {set, LocaleUtils, LOCALE_QQ} [372-372],
 assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ)); ref {LOCALE_QQ_ZZ, set, LocaleUtils} [373-373]
[m[m31.08.2022 - 15:15:23.321 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testThreeCharsLocale has 4 assertions: 
 assertNotNull(locale); ref {locale} [384-384],
 assertEquals(str, locale.getLanguage()); ref {str, locale} [385-385],
 assertTrue(StringUtils.isBlank(locale.getCountry())); ref {StringUtils, locale} [386-386],
 assertEquals(new Locale(str), locale); ref {str, locale} [387-387]
[m[m31.08.2022 - 15:15:23.321 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testLanguagesByCountry has 4 assertions: 
 assertLanguageByCountry(null, new String[0]); ref {} [435-435],
 assertLanguageByCountry("GB", new String[] { "en" }); ref {} [436-436],
 assertLanguageByCountry("ZZ", new String[0]); ref {} [437-437],
 assertLanguageByCountry("CH", new String[] { "fr", "de", "it" }); ref {} [438-438]
[m[m31.08.2022 - 15:15:23.321 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testCountriesByLanguage has 4 assertions: 
 assertCountriesByLanguage(null, new String[0]); ref {} [486-486],
 assertCountriesByLanguage("de", new String[] { "DE", "CH", "AT", "LU" }); ref {} [487-487],
 assertCountriesByLanguage("zz", new String[0]); ref {} [488-488],
 assertCountriesByLanguage("it", new String[] { "IT", "CH" }); ref {} [489-489]
[m[m31.08.2022 - 15:15:23.321 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testLang328 has 2 assertions: 
 assertValidToLocale("fr__P", "fr", "", "P"); ref {} [507-507],
 assertValidToLocale("fr__POSIX", "fr", "", "POSIX"); ref {} [508-508]
[m[m31.08.2022 - 15:15:23.321 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testLang865 has 3 assertions: 
 assertValidToLocale("_GB", "", "GB", ""); ref {} [516-516],
 assertValidToLocale("_GB_P", "", "GB", "P"); ref {} [517-517],
 assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); ref {} [518-518]
[m[m31.08.2022 - 15:15:23.321 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.LocaleUtilsTest::testParseAllLocales has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.322 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:23.322 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple has 4 assertions: 
 assertEquals(time, watch.getTime()); ref {watch, time} [42-42],
 assertTrue(time >= 500); ref {time} [44-44],
 assertTrue(time < 700); ref {time} [45-45],
 assertEquals(0, watch.getTime()); ref {watch} [48-48]
[m[m31.08.2022 - 15:15:23.322 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimpleGet has 3 assertions: 
 assertEquals(0, watch.getTime()); ref {watch} [54-54],
 assertEquals("00:00:00.000", watch.toString()); ref {watch} [55-55],
 assertTrue(watch.getTime() < 2000); ref {watch} [59-59]
[m[m31.08.2022 - 15:15:23.323 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.StopWatchTest::testStopWatchSplit has 5 assertions: 
 assertEquals("Formatted split string not the correct length", splitStr.length(), 12); ref {splitStr} [76-77],
 assertTrue(splitTime >= 500); ref {splitTime} [78-78],
 assertTrue(splitTime < 700); ref {splitTime} [79-79],
 assertTrue(totalTime >= 1500); ref {totalTime} [80-80],
 assertTrue(totalTime < 1900); ref {totalTime} [81-81]
[m[m31.08.2022 - 15:15:23.323 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.StopWatchTest::testStopWatchSuspend has 4 assertions: 
 assertTrue(suspendTime >= 500); ref {suspendTime} [97-97],
 assertTrue(suspendTime < 700); ref {suspendTime} [98-98],
 assertTrue(totalTime >= 1000); ref {totalTime} [99-99],
 assertTrue(totalTime < 1300); ref {totalTime} [100-100]
[m[m31.08.2022 - 15:15:23.323 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.StopWatchTest::testLang315 has 1 assertions: 
 assertTrue(suspendTime == totalTime); ref {totalTime, suspendTime} [113-113]
[m[m31.08.2022 - 15:15:23.323 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.StopWatchTest::testBadStates has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.323 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.StopWatchTest::testGetStartTime has 1 assertions: 
 Assert.assertTrue(watch.getStartTime() >= beforeStopWatch); ref {beforeStopWatch, Assert, watch} [215-215]
[m[m31.08.2022 - 15:15:23.323 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.StopWatchTest::testBooleanStates has 12 assertions: 
 assertFalse(watch.isStarted()); ref {watch} [231-231],
 assertFalse(watch.isSuspended()); ref {watch} [232-232],
 assertTrue(watch.isStopped()); ref {watch} [233-233],
 assertTrue(watch.isStarted()); ref {watch} [236-236],
 assertFalse(watch.isSuspended()); ref {watch} [237-237],
 assertFalse(watch.isStopped()); ref {watch} [238-238],
 assertTrue(watch.isStarted()); ref {watch} [241-241],
 assertTrue(watch.isSuspended()); ref {watch} [242-242],
 assertFalse(watch.isStopped()); ref {watch} [243-243],
 assertFalse(watch.isStarted()); ref {watch} [246-246],
 assertFalse(watch.isSuspended()); ref {watch} [247-247],
 assertTrue(watch.isStopped()); ref {watch} [248-248]
[m[m31.08.2022 - 15:15:23.324 [INFO ] ParsingStrategy.parseTestSuite() - Found 6 test cases
[m[m31.08.2022 - 15:15:23.324 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.ImmutablePairTest::testBasic has 8 assertions: 
 assertEquals(0, pair.left.intValue()); ref {pair, pair.left} [40-40],
 assertEquals(0, pair.getLeft().intValue()); ref {pair} [41-41],
 assertEquals("foo", pair.right); ref {pair.right, pair} [42-42],
 assertEquals("foo", pair.getRight()); ref {pair} [43-43],
 assertNull(pair2.left); ref {pair2.left, pair2} [45-45],
 assertNull(pair2.getLeft()); ref {pair2} [46-46],
 assertEquals("bar", pair2.right); ref {pair2.right, pair2} [47-47],
 assertEquals("bar", pair2.getRight()); ref {pair2} [48-48]
[m[m31.08.2022 - 15:15:23.324 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.ImmutablePairTest::testPairOf has 8 assertions: 
 assertEquals(0, pair.left.intValue()); ref {pair, pair.left} [54-54],
 assertEquals(0, pair.getLeft().intValue()); ref {pair} [55-55],
 assertEquals("foo", pair.right); ref {pair.right, pair} [56-56],
 assertEquals("foo", pair.getRight()); ref {pair} [57-57],
 assertNull(pair2.left); ref {pair2.left, pair2} [59-59],
 assertNull(pair2.getLeft()); ref {pair2} [60-60],
 assertEquals("bar", pair2.right); ref {pair2.right, pair2} [61-61],
 assertEquals("bar", pair2.getRight()); ref {pair2} [62-62]
[m[m31.08.2022 - 15:15:23.324 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.ImmutablePairTest::testEquals has 5 assertions: 
 assertEquals(ImmutablePair.of(null, "foo"), ImmutablePair.of(null, "foo")); ref {ImmutablePair} [67-67],
 assertFalse(ImmutablePair.of("foo", 0).equals(ImmutablePair.of("foo", null))); ref {ImmutablePair} [68-68],
 assertFalse(ImmutablePair.of("foo", "bar").equals(ImmutablePair.of("xyz", "bar"))); ref {ImmutablePair} [69-69],
 assertTrue(p.equals(p)); ref {p} [72-72],
 assertFalse(p.equals(new Object())); ref {p} [73-73]
[m[m31.08.2022 - 15:15:23.324 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.ImmutablePairTest::testHashCode has 1 assertions: 
 assertEquals(ImmutablePair.of(null, "foo").hashCode(), ImmutablePair.of(null, "foo").hashCode()); ref {ImmutablePair} [78-78]
[m[m31.08.2022 - 15:15:23.324 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.ImmutablePairTest::testToString has 4 assertions: 
 assertEquals("(null,null)", ImmutablePair.of(null, null).toString()); ref {ImmutablePair} [83-83],
 assertEquals("(null,two)", ImmutablePair.of(null, "two").toString()); ref {ImmutablePair} [84-84],
 assertEquals("(one,null)", ImmutablePair.of("one", null).toString()); ref {ImmutablePair} [85-85],
 assertEquals("(one,two)", ImmutablePair.of("one", "two").toString()); ref {ImmutablePair} [86-86]
[m[m31.08.2022 - 15:15:23.324 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.ImmutablePairTest::testSerialization has 2 assertions: 
 assertEquals(origPair, deserializedPair); ref {deserializedPair, origPair} [98-98],
 assertEquals(origPair.hashCode(), deserializedPair.hashCode()); ref {deserializedPair, origPair} [99-99]
[m[m31.08.2022 - 15:15:23.324 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.326 [INFO ] ParsingStrategy.parseTestSuite() - Found 11 test cases
[m[m31.08.2022 - 15:15:23.327 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomStringUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new RandomStringUtils()); ref {} [42-42],
 assertEquals(1, cons.length); ref {cons.length, cons} [44-44],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [45-45],
 assertTrue(Modifier.isPublic(RandomStringUtils.class.getModifiers())); ref {Modifier} [46-46],
 assertFalse(Modifier.isFinal(RandomStringUtils.class.getModifiers())); ref {Modifier} [47-47]
[m[m31.08.2022 - 15:15:23.327 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtils has 29 assertions: 
 assertEquals("random(50) length", 50, r1.length()); ref {r1} [57-57],
 assertEquals("random(50) length", 50, r2.length()); ref {r2} [59-59],
 assertTrue("!r1.equals(r2)", !r1.equals(r2)); ref {r2, r1} [60-60],
 assertEquals("randomAscii(50) length", 50, r1.length()); ref {r1} [63-63],
 assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); ref {i, r1} [65-65],
 assertTrue("!r1.equals(r2)", !r1.equals(r2)); ref {r2, r1} [68-68],
 assertEquals("randomAlphabetic(50)", 50, r1.length()); ref {r1} [71-71],
 assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); ref {Character, i, r1} [73-73],
 assertTrue("!r1.equals(r2)", !r1.equals(r2)); ref {r2, r1} [76-76],
 assertEquals("randomAlphanumeric(50)", 50, r1.length()); ref {r1} [79-79],
 assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); ref {Character, i, r1} [81-81],
 assertTrue("!r1.equals(r2)", !r1.equals(r2)); ref {r2, r1} [84-84],
 assertEquals("randomNumeric(50)", 50, r1.length()); ref {r1} [87-87],
 assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); ref {Character, i, r1} [89-89],
 assertTrue("!r1.equals(r2)", !r1.equals(r2)); ref {r2, r1} [92-92],
 assertEquals("random(50, \"abcdefg\")", 50, r1.length()); ref {r1} [96-96],
 assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); ref {set, i, r1} [98-98],
 assertTrue("!r1.equals(r2)", !r1.equals(r2)); ref {r2, r1} [101-101],
 assertEquals("random(50) length", 50, r1.length()); ref {r1} [104-104],
 assertEquals("random(50) length", 50, r2.length()); ref {r2} [106-106],
 assertTrue("!r1.equals(r2)", !r1.equals(r2)); ref {r2, r1} [107-107],
 assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); ref {r1} [111-111],
 assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); ref {set, i, r1} [113-113],
 assertTrue("!r1.equals(r2)", !r1.equals(r2)); ref {r2, r1} [116-116],
 assertEquals("random(50) length", 50, r1.length()); ref {r1} [119-119],
 assertEquals("random(50) length", 50, r2.length()); ref {r2} [121-121],
 assertTrue("!r1.equals(r2)", !r1.equals(r2)); ref {r2, r1} [122-122],
 assertEquals("r1.equals(r2)", r1, r2); ref {r2, r1} [127-127],
 assertEquals("random(0).equals(\"\")", "", r1); ref {r1} [130-130]
[m[m31.08.2022 - 15:15:23.327 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomStringUtilsTest::testLANG805 has 1 assertions: 
 assertEquals("aaa", RandomStringUtils.random(3, 0, 0, false, false, new char[] { 'a' }, new Random(seed))); ref {seed, RandomStringUtils} [136-136]
[m[m31.08.2022 - 15:15:23.327 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomStringUtilsTest::testLANG807 has 2 assertions: 
 assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); ref {msg} [146-146],
 assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); ref {msg} [147-147]
[m[m31.08.2022 - 15:15:23.327 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomStringUtilsTest::testExceptions has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.327 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomStringUtilsTest::testRandomAlphaNumeric has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.327 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomStringUtilsTest::testRandomNumeric has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.327 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomStringUtilsTest::testRandomAlphabetic has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.327 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomStringUtilsTest::testRandomAscii has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.327 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsHomog has 1 assertions: 
 // Perform chi-square test with df = 3-1 = 2, testing at .001 level
assertTrue("test homogeneity -- will fail about 1 in 1000 times", chiSquare(expected, counts) < 13.82); ref {counts, expected} [314-315]
[m[m31.08.2022 - 15:15:23.327 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomStringUtilsTest::testLang100 has 3 assertions: 
 assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); ref {Integer, c, i, o} [351-352],
 // compare length also
assertEquals(orig.length(), copy.length()); ref {orig, copy} [355-355],
 // just to be complete
assertEquals(orig, copy); ref {orig, copy} [357-357]
[m[m31.08.2022 - 15:15:23.327 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.330 [INFO ] ParsingStrategy.parseTestSuite() - Found 23 test cases
[m[m31.08.2022 - 15:15:23.330 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testConstructor has 1 assertions: 
 assertNotNull(MethodUtils.class.newInstance()); ref {} [152-152]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testInvokeMethod has 11 assertions: 
 assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); ref {ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY, MethodUtils, testBean} [157-158],
 assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo")); ref {MethodUtils, testBean} [159-159],
 assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null)); ref {MethodUtils, testBean} [160-161],
 assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); ref {MethodUtils, testBean} [162-163],
 assertEquals("foo(String)", MethodUtils.invokeMethod(testBean, "foo", "")); ref {MethodUtils, testBean} [164-165],
 assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", new Object())); ref {MethodUtils, testBean} [166-167],
 assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", Boolean.TRUE)); ref {Boolean.TRUE, MethodUtils, Boolean, testBean} [168-169],
 assertEquals("foo(Integer)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); ref {NumberUtils.INTEGER_ONE, MethodUtils, testBean, NumberUtils} [170-171],
 assertEquals("foo(int)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.BYTE_ONE)); ref {NumberUtils.BYTE_ONE, MethodUtils, testBean, NumberUtils} [172-173],
 assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.LONG_ONE)); ref {NumberUtils.LONG_ONE, MethodUtils, testBean, NumberUtils} [174-175],
 assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.DOUBLE_ONE)); ref {MethodUtils, NumberUtils.DOUBLE_ONE, testBean, NumberUtils} [176-177]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testInvokeExactMethod has 8 assertions: 
 assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); ref {ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY, MethodUtils, testBean} [182-183],
 assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo")); ref {MethodUtils, testBean} [184-184],
 assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null)); ref {MethodUtils, testBean} [185-186],
 assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); ref {MethodUtils, testBean} [187-188],
 assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, "foo", "")); ref {MethodUtils, testBean} [189-190],
 assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, "foo", new Object())); ref {MethodUtils, testBean} [191-192],
 assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); ref {NumberUtils.INTEGER_ONE, MethodUtils, testBean, NumberUtils} [193-194],
 assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, "foo", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); ref {MethodUtils, NumberUtils.DOUBLE_ONE, Double.TYPE, Double, testBean, NumberUtils} [195-197]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testInvokeStaticMethod has 10 assertions: 
 assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); ref {ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY, MethodUtils} [220-221],
 assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null)); ref {MethodUtils} [222-223],
 assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); ref {MethodUtils} [224-225],
 assertEquals("bar(String)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", "")); ref {MethodUtils} [226-227],
 assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", new Object())); ref {MethodUtils} [228-229],
 assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", Boolean.TRUE)); ref {Boolean.TRUE, MethodUtils, Boolean} [230-231],
 assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); ref {NumberUtils.INTEGER_ONE, MethodUtils, NumberUtils} [232-233],
 assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE)); ref {NumberUtils.BYTE_ONE, MethodUtils, NumberUtils} [234-235],
 assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE)); ref {NumberUtils.LONG_ONE, MethodUtils, NumberUtils} [236-237],
 assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.DOUBLE_ONE)); ref {MethodUtils, NumberUtils.DOUBLE_ONE, NumberUtils} [238-239]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testInvokeExactStaticMethod has 7 assertions: 
 assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); ref {ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY, MethodUtils} [250-251],
 assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null)); ref {MethodUtils} [252-253],
 assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); ref {MethodUtils} [254-255],
 assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", "")); ref {MethodUtils} [256-257],
 assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object())); ref {MethodUtils} [258-259],
 assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); ref {NumberUtils.INTEGER_ONE, MethodUtils, NumberUtils} [260-261],
 assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); ref {MethodUtils, NumberUtils.DOUBLE_ONE, Double.TYPE, Double, NumberUtils} [262-264]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetAccessibleInterfaceMethod has 2 assertions: 
 assertNotSame(accessibleMethod, method); ref {method, accessibleMethod} [292-292],
 assertSame(Mutable.class, accessibleMethod.getDeclaringClass()); ref {accessibleMethod} [293-293]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetAccessibleMethodPrivateInterface has 2 assertions: 
 assertNotNull(expected); ref {expected} [300-300],
 assertNull(actual); ref {actual} [302-302]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetAccessibleInterfaceMethodFromDescription has 1 assertions: 
 assertSame(Mutable.class, accessibleMethod.getDeclaringClass()); ref {accessibleMethod} [312-312]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetAccessiblePublicMethod has 1 assertions: 
 assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(MutableObject.class.getMethod("getValue", ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass()); ref {ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY, MethodUtils} [318-320]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetAccessiblePublicMethodFromDescription has 1 assertions: 
 assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(MutableObject.class, "getValue", ArrayUtils.EMPTY_CLASS_ARRAY).getDeclaringClass()); ref {ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY, MethodUtils} [325-327]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetAccessibleMethodInaccessible has 1 assertions: 
 assertNull(actual); ref {actual} [334-334]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetMatchingAccessibleMethod has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testNullArgument has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetOverrideHierarchyIncludingInterfaces has 6 assertions: 
 assertTrue(expected.hasNext()); ref {expected} [404-404],
 assertEquals(md.declaringClass, m.getDeclaringClass()); ref {md.declaringClass, md, m} [406-406],
 assertEquals(md.name, m.getName()); ref {md.name, md, m} [407-407],
 assertEquals(md.parameterTypes.length, m.getParameterTypes().length); ref {md, md.parameterTypes, m.getParameterTypes().length, m, md.parameterTypes.length} [408-408],
 assertTrue(TypeUtils.equals(md.parameterTypes[i], m.getGenericParameterTypes()[i])); ref {md, md.parameterTypes, i, TypeUtils, m} [410-410],
 assertFalse(expected.hasNext()); ref {expected} [413-413]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetOverrideHierarchyExcludingInterfaces has 6 assertions: 
 assertTrue(expected.hasNext()); ref {expected} [424-424],
 assertEquals(md.declaringClass, m.getDeclaringClass()); ref {md.declaringClass, md, m} [426-426],
 assertEquals(md.name, m.getName()); ref {md.name, md, m} [427-427],
 assertEquals(md.parameterTypes.length, m.getParameterTypes().length); ref {md, md.parameterTypes, m.getParameterTypes().length, m, md.parameterTypes.length} [428-428],
 assertTrue(TypeUtils.equals(md.parameterTypes[i], m.getGenericParameterTypes()[i])); ref {md, md.parameterTypes, i, TypeUtils, m} [430-430],
 assertFalse(expected.hasNext()); ref {expected} [433-433]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetMethodsWithAnnotation has 4 assertions: 
 assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class)); ref {MethodUtils} [439-439],
 assertEquals(2, methodsWithAnnotation.length); ref {methodsWithAnnotation, methodsWithAnnotation.length} [442-442],
 assertThat(methodsWithAnnotation, hasItemInArray(MethodUtilsTest.class.getMethod("testGetMethodsWithAnnotation"))); ref {methodsWithAnnotation} [443-443],
 assertThat(methodsWithAnnotation, hasItemInArray(MethodUtilsTest.class.getMethod("testGetMethodsListWithAnnotation"))); ref {methodsWithAnnotation} [444-444]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetMethodsWithAnnotationIllegalArgumentException1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetMethodsWithAnnotationIllegalArgumentException2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetMethodsWithAnnotationIllegalArgumentException3 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetMethodsListWithAnnotation has 3 assertions: 
 assertEquals(0, MethodUtils.getMethodsListWithAnnotation(Object.class, Annotated.class).size()); ref {MethodUtils} [465-465],
 assertEquals(2, methodWithAnnotation.size()); ref {methodWithAnnotation} [468-468],
 assertThat(methodWithAnnotation, hasItems(MethodUtilsTest.class.getMethod("testGetMethodsWithAnnotation"), MethodUtilsTest.class.getMethod("testGetMethodsListWithAnnotation"))); ref {methodWithAnnotation} [469-472]
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetMethodsListWithAnnotationIllegalArgumentException1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetMethodsListWithAnnotationIllegalArgumentException2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.331 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.MethodUtilsTest::testGetMethodsListWithAnnotationIllegalArgumentException3 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.parseTestSuite() - Found 17 test cases
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testAddInitializerNullName has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testAddInitializerNullInit has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testInitializeNoChildren has 3 assertions: 
 assertTrue("Wrong result of start()", initializer.start()); ref {initializer} [97-97],
 assertTrue("Got child initializers", res.initializerNames().isEmpty()); ref {res} [100-100],
 assertTrue("Executor not shutdown", initializer.getActiveExecutor().isShutdown()); ref {initializer} [101-102]
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testInitializeTempExec has 1 assertions: 
 assertTrue("Executor not shutdown", initializer.getActiveExecutor().isShutdown()); ref {initializer} [146-147]
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testInitializeExternalExec has 2 assertions: 
 assertEquals("Wrong executor", exec, initializer.getActiveExecutor()); ref {exec, initializer} [161-162],
 assertFalse("Executor was shutdown", exec.isShutdown()); ref {exec} [163-163]
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testInitializeChildWithExecutor has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testAddInitializerAfterStart has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testResultGetInitializerUnknown has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testResultGetResultObjectUnknown has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testResultGetExceptionUnknown has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testResultIsExceptionUnknown has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testResultInitializerNamesModify has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testInitializeRuntimeEx has 1 assertions: 
 assertEquals("Wrong exception", child.ex, ex); ref {ex, child.ex, child} [291-291]
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testInitializeEx has 3 assertions: 
 assertTrue("No exception flag", res.isException(CHILD_INIT)); ref {res, CHILD_INIT} [309-309],
 assertNull("Got a results object", res.getResultObject(CHILD_INIT)); ref {res, CHILD_INIT} [310-310],
 assertEquals("Wrong cause", child.ex, cex.getCause()); ref {cex, child.ex, child} [312-312]
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testInitializeResultsIsSuccessfulTrue has 1 assertions: 
 assertTrue("Wrong success flag", res.isSuccessful()); ref {res} [329-329]
[m[m31.08.2022 - 15:15:23.333 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testInitializeResultsIsSuccessfulFalse has 1 assertions: 
 assertFalse("Wrong success flag", res.isSuccessful()); ref {res} [347-347]
[m[m31.08.2022 - 15:15:23.334 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest::testInitializeNested has 2 assertions: 
 assertEquals("Wrong number of initializers", count, res2.initializerNames().size()); ref {res2, count} [376-377],
 assertTrue("Executor not shutdown", exec.isShutdown()); ref {exec} [381-381]
[m[m31.08.2022 - 15:15:23.339 [INFO ] ParsingStrategy.parseTestSuite() - Found 16 test cases
[m[m31.08.2022 - 15:15:23.339 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testClass has 2 assertions: 
 // class changed to non-public in 3.0
assertFalse(Modifier.isPublic(CharRange.class.getModifiers())); ref {Modifier} [44-44],
 assertTrue(Modifier.isFinal(CharRange.class.getModifiers())); ref {Modifier} [45-45]
[m[m31.08.2022 - 15:15:23.339 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testConstructorAccessors_is has 4 assertions: 
 assertEquals('a', rangea.getStart()); ref {rangea} [52-52],
 assertEquals('a', rangea.getEnd()); ref {rangea} [53-53],
 assertFalse(rangea.isNegated()); ref {rangea} [54-54],
 assertEquals("a", rangea.toString()); ref {rangea} [55-55]
[m[m31.08.2022 - 15:15:23.339 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testConstructorAccessors_isNot has 4 assertions: 
 assertEquals('a', rangea.getStart()); ref {rangea} [61-61],
 assertEquals('a', rangea.getEnd()); ref {rangea} [62-62],
 assertTrue(rangea.isNegated()); ref {rangea} [63-63],
 assertEquals("^a", rangea.toString()); ref {rangea} [64-64]
[m[m31.08.2022 - 15:15:23.339 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testConstructorAccessors_isIn_Same has 4 assertions: 
 assertEquals('a', rangea.getStart()); ref {rangea} [70-70],
 assertEquals('a', rangea.getEnd()); ref {rangea} [71-71],
 assertFalse(rangea.isNegated()); ref {rangea} [72-72],
 assertEquals("a", rangea.toString()); ref {rangea} [73-73]
[m[m31.08.2022 - 15:15:23.339 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testConstructorAccessors_isIn_Normal has 4 assertions: 
 assertEquals('a', rangea.getStart()); ref {rangea} [79-79],
 assertEquals('e', rangea.getEnd()); ref {rangea} [80-80],
 assertFalse(rangea.isNegated()); ref {rangea} [81-81],
 assertEquals("a-e", rangea.toString()); ref {rangea} [82-82]
[m[m31.08.2022 - 15:15:23.339 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testConstructorAccessors_isIn_Reversed has 4 assertions: 
 assertEquals('a', rangea.getStart()); ref {rangea} [88-88],
 assertEquals('e', rangea.getEnd()); ref {rangea} [89-89],
 assertFalse(rangea.isNegated()); ref {rangea} [90-90],
 assertEquals("a-e", rangea.toString()); ref {rangea} [91-91]
[m[m31.08.2022 - 15:15:23.339 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testConstructorAccessors_isNotIn_Same has 4 assertions: 
 assertEquals('a', rangea.getStart()); ref {rangea} [97-97],
 assertEquals('a', rangea.getEnd()); ref {rangea} [98-98],
 assertTrue(rangea.isNegated()); ref {rangea} [99-99],
 assertEquals("^a", rangea.toString()); ref {rangea} [100-100]
[m[m31.08.2022 - 15:15:23.339 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testConstructorAccessors_isNotIn_Normal has 4 assertions: 
 assertEquals('a', rangea.getStart()); ref {rangea} [106-106],
 assertEquals('e', rangea.getEnd()); ref {rangea} [107-107],
 assertTrue(rangea.isNegated()); ref {rangea} [108-108],
 assertEquals("^a-e", rangea.toString()); ref {rangea} [109-109]
[m[m31.08.2022 - 15:15:23.339 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testConstructorAccessors_isNotIn_Reversed has 4 assertions: 
 assertEquals('a', rangea.getStart()); ref {rangea} [115-115],
 assertEquals('e', rangea.getEnd()); ref {rangea} [116-116],
 assertTrue(rangea.isNegated()); ref {rangea} [117-117],
 assertEquals("^a-e", rangea.toString()); ref {rangea} [118-118]
[m[m31.08.2022 - 15:15:23.340 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testEquals_Object has 13 assertions: 
 assertFalse(rangea.equals(null)); ref {rangea} [128-128],
 assertTrue(rangea.equals(rangea)); ref {rangea} [130-130],
 assertTrue(rangea.equals(CharRange.is('a'))); ref {rangea, CharRange} [131-131],
 assertTrue(rangeae.equals(rangeae)); ref {rangeae} [132-132],
 assertTrue(rangeae.equals(CharRange.isIn('a', 'e'))); ref {rangeae, CharRange} [133-133],
 assertTrue(rangenotbf.equals(rangenotbf)); ref {rangenotbf} [134-134],
 assertTrue(rangenotbf.equals(CharRange.isIn('b', 'f'))); ref {rangenotbf, CharRange} [135-135],
 assertFalse(rangea.equals(rangeae)); ref {rangea, rangeae} [137-137],
 assertFalse(rangea.equals(rangenotbf)); ref {rangea, rangenotbf} [138-138],
 assertFalse(rangeae.equals(rangea)); ref {rangea, rangeae} [139-139],
 assertFalse(rangeae.equals(rangenotbf)); ref {rangeae, rangenotbf} [140-140],
 assertFalse(rangenotbf.equals(rangea)); ref {rangea, rangenotbf} [141-141],
 assertFalse(rangenotbf.equals(rangeae)); ref {rangenotbf, rangeae} [142-142]
[m[m31.08.2022 - 15:15:23.340 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testHashCode has 12 assertions: 
 assertTrue(rangea.hashCode() == rangea.hashCode()); ref {rangea} [151-151],
 assertTrue(rangea.hashCode() == CharRange.is('a').hashCode()); ref {rangea, CharRange} [152-152],
 assertTrue(rangeae.hashCode() == rangeae.hashCode()); ref {rangeae} [153-153],
 assertTrue(rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode()); ref {rangeae, CharRange} [154-154],
 assertTrue(rangenotbf.hashCode() == rangenotbf.hashCode()); ref {rangenotbf} [155-155],
 assertTrue(rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode()); ref {rangenotbf, CharRange} [156-156],
 assertFalse(rangea.hashCode() == rangeae.hashCode()); ref {rangea, rangeae} [158-158],
 assertFalse(rangea.hashCode() == rangenotbf.hashCode()); ref {rangea, rangenotbf} [159-159],
 assertFalse(rangeae.hashCode() == rangea.hashCode()); ref {rangea, rangeae} [160-160],
 assertFalse(rangeae.hashCode() == rangenotbf.hashCode()); ref {rangeae, rangenotbf} [161-161],
 assertFalse(rangenotbf.hashCode() == rangea.hashCode()); ref {rangea, rangenotbf} [162-162],
 assertFalse(rangenotbf.hashCode() == rangeae.hashCode()); ref {rangenotbf, rangeae} [163-163]
[m[m31.08.2022 - 15:15:23.340 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testContains_Char has 18 assertions: 
 assertFalse(range.contains('b')); ref {range} [170-170],
 assertTrue(range.contains('c')); ref {range} [171-171],
 assertFalse(range.contains('d')); ref {range} [172-172],
 assertFalse(range.contains('e')); ref {range} [173-173],
 assertFalse(range.contains('b')); ref {range} [176-176],
 assertTrue(range.contains('c')); ref {range} [177-177],
 assertTrue(range.contains('d')); ref {range} [178-178],
 assertFalse(range.contains('e')); ref {range} [179-179],
 assertFalse(range.contains('b')); ref {range} [182-182],
 assertTrue(range.contains('c')); ref {range} [183-183],
 assertTrue(range.contains('d')); ref {range} [184-184],
 assertFalse(range.contains('e')); ref {range} [185-185],
 assertTrue(range.contains('b')); ref {range} [188-188],
 assertFalse(range.contains('c')); ref {range} [189-189],
 assertFalse(range.contains('d')); ref {range} [190-190],
 assertTrue(range.contains('e')); ref {range} [191-191],
 assertTrue(range.contains((char) 0)); ref {range} [192-192],
 assertTrue(range.contains(Character.MAX_VALUE)); ref {Character.MAX_VALUE, Character, range} [193-193]
[m[m31.08.2022 - 15:15:23.340 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testContains_Charrange has 69 assertions: 
 // normal/normal
assertFalse(c.contains(b)); ref {b, c} [214-214],
 assertTrue(c.contains(c)); ref {c} [215-215],
 assertTrue(c.contains(c2)); ref {c, c2} [216-216],
 assertFalse(c.contains(d)); ref {c, d} [217-217],
 assertFalse(c.contains(cd)); ref {cd, c} [219-219],
 assertFalse(c.contains(bd)); ref {bd, c} [220-220],
 assertFalse(c.contains(bc)); ref {bc, c} [221-221],
 assertFalse(c.contains(ab)); ref {ab, c} [222-222],
 assertFalse(c.contains(de)); ref {de, c} [223-223],
 assertTrue(cd.contains(c)); ref {cd, c} [225-225],
 assertTrue(bd.contains(c)); ref {bd, c} [226-226],
 assertTrue(bc.contains(c)); ref {bc, c} [227-227],
 assertFalse(ab.contains(c)); ref {ab, c} [228-228],
 assertFalse(de.contains(c)); ref {de, c} [229-229],
 assertTrue(ae.contains(b)); ref {b, ae} [231-231],
 assertTrue(ae.contains(ab)); ref {ab, ae} [232-232],
 assertTrue(ae.contains(bc)); ref {bc, ae} [233-233],
 assertTrue(ae.contains(cd)); ref {cd, ae} [234-234],
 assertTrue(ae.contains(de)); ref {de, ae} [235-235],
 // normal/negated
assertFalse(c.contains(notc)); ref {c, notc} [250-250],
 assertFalse(c.contains(notbd)); ref {c, notbd} [251-251],
 assertTrue(all.contains(notc)); ref {all, notc} [252-252],
 assertTrue(all.contains(notbd)); ref {all, notbd} [253-253],
 assertFalse(allbutfirst.contains(notc)); ref {notc, allbutfirst} [254-254],
 assertFalse(allbutfirst.contains(notbd)); ref {notbd, allbutfirst} [255-255],
 // negated/normal
assertTrue(notc.contains(a)); ref {a, notc} [258-258],
 assertTrue(notc.contains(b)); ref {b, notc} [259-259],
 assertFalse(notc.contains(c)); ref {notc, c} [260-260],
 assertTrue(notc.contains(d)); ref {notc, d} [261-261],
 assertTrue(notc.contains(e)); ref {notc, e} [262-262],
 assertTrue(notc.contains(ab)); ref {ab, notc} [264-264],
 assertFalse(notc.contains(bc)); ref {bc, notc} [265-265],
 assertFalse(notc.contains(bd)); ref {bd, notc} [266-266],
 assertFalse(notc.contains(cd)); ref {cd, notc} [267-267],
 assertTrue(notc.contains(de)); ref {de, notc} [268-268],
 assertFalse(notc.contains(ae)); ref {notc, ae} [269-269],
 assertFalse(notc.contains(all)); ref {all, notc} [270-270],
 assertFalse(notc.contains(allbutfirst)); ref {notc, allbutfirst} [271-271],
 assertTrue(notbd.contains(a)); ref {a, notbd} [273-273],
 assertFalse(notbd.contains(b)); ref {b, notbd} [274-274],
 assertFalse(notbd.contains(c)); ref {c, notbd} [275-275],
 assertFalse(notbd.contains(d)); ref {d, notbd} [276-276],
 assertTrue(notbd.contains(e)); ref {e, notbd} [277-277],
 assertTrue(notcd.contains(ab)); ref {ab, notcd} [279-279],
 assertFalse(notcd.contains(bc)); ref {bc, notcd} [280-280],
 assertFalse(notcd.contains(bd)); ref {bd, notcd} [281-281],
 assertFalse(notcd.contains(cd)); ref {cd, notcd} [282-282],
 assertFalse(notcd.contains(de)); ref {de, notcd} [283-283],
 assertFalse(notcd.contains(ae)); ref {ae, notcd} [284-284],
 assertTrue(notcd.contains(ef)); ref {ef, notcd} [285-285],
 assertFalse(notcd.contains(all)); ref {all, notcd} [286-286],
 assertFalse(notcd.contains(allbutfirst)); ref {notcd, allbutfirst} [287-287],
 // negated/negated
assertFalse(notc.contains(notb)); ref {notc, notb} [290-290],
 assertTrue(notc.contains(notc)); ref {notc} [291-291],
 assertFalse(notc.contains(notd)); ref {notd, notc} [292-292],
 assertFalse(notc.contains(notab)); ref {notc, notab} [294-294],
 assertTrue(notc.contains(notbc)); ref {notc, notbc} [295-295],
 assertTrue(notc.contains(notbd)); ref {notc, notbd} [296-296],
 assertTrue(notc.contains(notcd)); ref {notc, notcd} [297-297],
 assertFalse(notc.contains(notde)); ref {notc, notde} [298-298],
 assertFalse(notbd.contains(notb)); ref {notbd, notb} [300-300],
 assertFalse(notbd.contains(notc)); ref {notc, notbd} [301-301],
 assertFalse(notbd.contains(notd)); ref {notd, notbd} [302-302],
 assertFalse(notbd.contains(notab)); ref {notab, notbd} [304-304],
 assertFalse(notbd.contains(notbc)); ref {notbc, notbd} [305-305],
 assertTrue(notbd.contains(notbd)); ref {notbd} [306-306],
 assertFalse(notbd.contains(notcd)); ref {notcd, notbd} [307-307],
 assertFalse(notbd.contains(notde)); ref {notde, notbd} [308-308],
 assertTrue(notbd.contains(notae)); ref {notae, notbd} [309-309]
[m[m31.08.2022 - 15:15:23.340 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testContainsNullArg has 1 assertions: 
 assertEquals("The Range must not be null", e.getMessage()); ref {e} [320-320]
[m[m31.08.2022 - 15:15:23.340 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testIterator has 27 assertions: 
 assertNotNull(aIt); ref {aIt} [334-334],
 assertTrue(aIt.hasNext()); ref {aIt} [335-335],
 assertEquals(Character.valueOf('a'), aIt.next()); ref {Character, aIt} [336-336],
 assertFalse(aIt.hasNext()); ref {aIt} [337-337],
 assertNotNull(adIt); ref {adIt} [340-340],
 assertTrue(adIt.hasNext()); ref {adIt} [341-341],
 assertEquals(Character.valueOf('a'), adIt.next()); ref {adIt, Character} [342-342],
 assertEquals(Character.valueOf('b'), adIt.next()); ref {adIt, Character} [343-343],
 assertEquals(Character.valueOf('c'), adIt.next()); ref {adIt, Character} [344-344],
 assertEquals(Character.valueOf('d'), adIt.next()); ref {adIt, Character} [345-345],
 assertFalse(adIt.hasNext()); ref {adIt} [346-346],
 assertNotNull(notaIt); ref {notaIt} [349-349],
 assertTrue(notaIt.hasNext()); ref {notaIt} [350-350],
 assertFalse('a' == c.charValue()); ref {c} [353-353],
 assertNotNull(emptySetIt); ref {emptySetIt} [357-357],
 assertFalse(emptySetIt.hasNext()); ref {emptySetIt} [358-358],
 assertTrue(true); ref {} [363-363],
 assertNotNull(notFirstIt); ref {notFirstIt} [367-367],
 assertTrue(notFirstIt.hasNext()); ref {notFirstIt} [368-368],
 assertEquals(Character.valueOf((char) 0), notFirstIt.next()); ref {Character, notFirstIt} [369-369],
 assertFalse(notFirstIt.hasNext()); ref {notFirstIt} [370-370],
 assertTrue(true); ref {} [375-375],
 assertNotNull(notLastIt); ref {notLastIt} [379-379],
 assertTrue(notLastIt.hasNext()); ref {notLastIt} [380-380],
 assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); ref {Character.MAX_VALUE, Character, notLastIt} [381-381],
 assertFalse(notLastIt.hasNext()); ref {notLastIt} [382-382],
 assertTrue(true); ref {} [387-387]
[m[m31.08.2022 - 15:15:23.340 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharRangeTest::testSerialization has 3 assertions: 
 assertEquals(range, SerializationUtils.clone(range)); ref {range, SerializationUtils} [395-395],
 assertEquals(range, SerializationUtils.clone(range)); ref {range, SerializationUtils} [397-397],
 assertEquals(range, SerializationUtils.clone(range)); ref {range, SerializationUtils} [399-399]
[m[m31.08.2022 - 15:15:23.350 [INFO ] ParsingStrategy.parseTestSuite() - Found 74 test cases
[m[m31.08.2022 - 15:15:23.350 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testConstructorEx1 has 1 assertions: 
 assertEquals("<null>", new ToStringBuilder(null).toString()); ref {} [56-56]
[m[m31.08.2022 - 15:15:23.350 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testConstructorEx2 has 1 assertions: 
 assertEquals("<null>", new ToStringBuilder(null, null).toString()); ref {} [61-61]
[m[m31.08.2022 - 15:15:23.350 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testConstructorEx3 has 1 assertions: 
 assertEquals("<null>", new ToStringBuilder(null, null, null).toString()); ref {} [67-67]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testGetSetDefault has 1 assertions: 
 assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle()); ref {ToStringBuilder, ToStringStyle, ToStringStyle.NO_FIELD_NAMES_STYLE} [76-76]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testSetDefaultEx has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testBlank has 1 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).toString()); ref {baseStr, base} [90-90]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionInteger has 1 assertions: 
 assertEquals(baseStr + "[value=5]", ToStringBuilder.reflectionToString(base)); ref {ToStringBuilder, baseStr, base} [98-98]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharacter has 1 assertions: 
 assertEquals(this.toBaseString(c) + "[value=A]", ToStringBuilder.reflectionToString(c)); ref {c, ToStringBuilder} [107-107]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBoolean has 2 assertions: 
 assertEquals(this.toBaseString(b) + "[value=true]", ToStringBuilder.reflectionToString(b)); ref {b, ToStringBuilder} [117-117],
 assertEquals(this.toBaseString(b) + "[value=false]", ToStringBuilder.reflectionToString(b)); ref {b, ToStringBuilder} [119-119]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray has 2 assertions: 
 assertEquals(baseString + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [161-161],
 assertReflectionArray("<null>", array); ref {array} [163-163]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray has 2 assertions: 
 assertEquals(baseString + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [170-170],
 assertReflectionArray("<null>", array); ref {array} [172-172]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray has 2 assertions: 
 assertEquals(baseString + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [179-179],
 assertReflectionArray("<null>", array); ref {array} [181-181]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray has 2 assertions: 
 assertEquals(baseString + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [188-188],
 assertReflectionArray("<null>", array); ref {array} [190-190]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray has 2 assertions: 
 assertEquals(baseString + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [197-197],
 assertReflectionArray("<null>", array); ref {array} [199-199]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray has 2 assertions: 
 assertEquals(baseString + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [206-206],
 assertReflectionArray("<null>", array); ref {array} [208-208]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray has 2 assertions: 
 assertEquals(baseString + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [215-215],
 assertReflectionArray("<null>", array); ref {array} [217-217]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray has 2 assertions: 
 assertEquals(baseString + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [224-224],
 assertReflectionArray("<null>", array); ref {array} [226-226]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray has 2 assertions: 
 assertEquals(baseString + "[{true,false,false}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [233-233],
 assertReflectionArray("<null>", array); ref {array} [235-235]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray has 2 assertions: 
 assertEquals(baseString + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [244-244],
 assertReflectionArray("<null>", array); ref {array} [246-246]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray has 2 assertions: 
 assertEquals(baseString + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [254-254],
 assertReflectionArray("<null>", array); ref {array} [256-256]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray has 2 assertions: 
 assertEquals(baseString + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [263-263],
 assertReflectionArray("<null>", array); ref {array} [265-265]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray has 2 assertions: 
 assertEquals(baseString + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [272-272],
 assertReflectionArray("<null>", array); ref {array} [274-274]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray has 2 assertions: 
 assertEquals(baseString + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [281-281],
 assertReflectionArray("<null>", array); ref {array} [283-283]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray has 2 assertions: 
 assertEquals(baseString + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [290-290],
 assertReflectionArray("<null>", array); ref {array} [292-292]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray has 2 assertions: 
 assertEquals(baseString + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [299-299],
 assertReflectionArray("<null>", array); ref {array} [301-301]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray has 3 assertions: 
 assertEquals(baseString + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [308-308],
 assertEquals(baseString + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array)); ref {baseString, array, ToStringBuilder} [309-309],
 assertReflectionArray("<null>", array); ref {array} [311-311]
[m[m31.08.2022 - 15:15:23.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchyArrayList has 2 assertions: 
 assertEquals(expectedWithTransients, toStringWithTransients); ref {toStringWithTransients, expectedWithTransients} [327-327],
 assertEquals(expectedWithoutTransients, toStringWithoutTransients); ref {expectedWithoutTransients, toStringWithoutTransients} [332-332]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy has 16 assertions: 
 assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA)); ref {baseString, baseA, ToStringBuilder} [340-340],
 assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); ref {baseString, baseA, ToStringBuilder} [341-341],
 assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); ref {baseString, baseA, ToStringBuilder} [342-342],
 assertEquals(baseString + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); ref {baseString, baseA, ToStringBuilder} [343-343],
 assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); ref {baseString, baseA, ToStringBuilder} [344-344],
 assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); ref {baseString, baseA, ToStringBuilder} [345-345],
 assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); ref {baseString, baseA, ToStringBuilder} [346-346],
 assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); ref {baseString, baseB, ToStringBuilder} [350-350],
 assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); ref {baseString, baseB, ToStringBuilder} [351-351],
 assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); ref {baseString, baseB, ToStringBuilder} [352-352],
 assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); ref {baseString, baseB, ToStringBuilder} [353-353],
 assertEquals(baseString + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); ref {baseString, baseB, ToStringBuilder} [354-354],
 assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); ref {baseString, baseB, ToStringBuilder} [355-355],
 assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); ref {baseString, baseB, ToStringBuilder} [356-356],
 assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); ref {baseString, baseB, ToStringBuilder} [357-357],
 assertEquals(baseString + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); ref {baseString, baseB, ToStringBuilder} [358-358]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testInnerClassReflection has 1 assertions: 
 assertEquals(toBaseString(outer) + "[inner=" + toBaseString(outer.inner) + "[]]", outer.toString()); ref {outer.inner, outer} [378-378]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle has 1 assertions: 
 assertEquals(this.toBaseString(objects) + "[{" + this.toBaseString(objects) + "}]", ToStringBuilder.reflectionToString(objects)); ref {objects, ToStringBuilder} [404-406]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2 has 2 assertions: 
 assertEquals(this.toBaseString(objects) + "[{{" + this.toBaseString(objects) + "}}]", ToStringBuilder.reflectionToString(objects)); ref {objects, ToStringBuilder} [418-420],
 assertEquals(this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2) + "}}]", ToStringBuilder.reflectionToString(objectsLevel2)); ref {ToStringBuilder, objectsLevel2} [421-423]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle has 1 assertions: 
 assertEquals(basicToString + "[{{" + basicToString + "," + basicToString + "},{" + basicToString + "," + basicToString + "}}]", ToStringBuilder.reflectionToString(objects)); ref {basicToString, objects, ToStringBuilder} [434-445]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle has 1 assertions: 
 assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString()); ref {simple} [532-532]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle has 1 assertions: 
 assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + "]", test.toString()); ref {test} [541-541]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle has 1 assertions: 
 assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + ",otherType=" + test.getOtherType().toString() + "]", test.toString()); ref {test} [551-551]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle has 1 assertions: 
 assertEquals(this.toBaseString(a) + "[b=" + this.toBaseString(b) + "[a=" + this.toBaseString(a) + "]]", a.toString()); ref {a, b} [564-566]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle has 2 assertions: 
 assertEquals(this.toBaseString(objects) + "[{" + this.toBaseString(simple) + "[o=" + this.toBaseString(objects) + "]" + "}]", ToStringBuilder.reflectionToString(objects)); ref {objects, ToStringBuilder, simple} [578-586],
 assertEquals(this.toBaseString(simple) + "[o={" + this.toBaseString(simple) + "}]", ToStringBuilder.reflectionToString(simple)); ref {ToStringBuilder, simple} [587-592]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testAppendSuper has 5 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); ref {baseStr, base} [603-603],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); ref {baseStr, base} [604-604],
 assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); ref {baseStr, base} [606-606],
 assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); ref {baseStr, base} [607-607],
 assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); ref {baseStr, base} [608-608]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testAppendToString has 5 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).appendToString("Integer@8888[]").toString()); ref {baseStr, base} [613-613],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendToString("Integer@8888[<null>]").toString()); ref {baseStr, base} [614-614],
 assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendToString("Integer@8888[]").append("a", "hello").toString()); ref {baseStr, base} [616-616],
 assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendToString("Integer@8888[<null>]").append("a", "hello").toString()); ref {baseStr, base} [617-617],
 assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendToString(null).append("a", "hello").toString()); ref {baseStr, base} [618-618]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testObject has 12 assertions: 
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); ref {baseStr, base} [625-625],
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); ref {i3, baseStr, base} [626-626],
 assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); ref {baseStr, base} [627-627],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); ref {i3, baseStr, base} [628-628],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); ref {i3, i4, baseStr, base} [629-629],
 assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); ref {i3, baseStr, base} [630-630],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); ref {baseStr, base} [631-631],
 assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); ref {baseStr, base} [632-632],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); ref {baseStr, base} [633-633],
 assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); ref {baseStr, base} [634-634],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); ref {baseStr, base} [635-635],
 assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); ref {baseStr, base} [636-636]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectBuild has 12 assertions: 
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).build()); ref {baseStr, base} [643-643],
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).build()); ref {i3, baseStr, base} [644-644],
 assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).build()); ref {baseStr, base} [645-645],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).build()); ref {i3, baseStr, base} [646-646],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).build()); ref {i3, i4, baseStr, base} [647-647],
 assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).build()); ref {i3, baseStr, base} [648-648],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).build()); ref {baseStr, base} [649-649],
 assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).build()); ref {baseStr, base} [650-650],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).build()); ref {baseStr, base} [651-651],
 assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).build()); ref {baseStr, base} [652-652],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).build()); ref {baseStr, base} [653-653],
 assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).build()); ref {baseStr, base} [654-654]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testLong has 3 assertions: 
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); ref {baseStr, base} [659-659],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); ref {baseStr, base} [660-660],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); ref {baseStr, base} [661-661]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testInt has 3 assertions: 
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((int) 3).toString()); ref {baseStr, base} [667-667],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (int) 3).toString()); ref {baseStr, base} [668-668],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (int) 3).append("b", (int) 4).toString()); ref {baseStr, base} [669-669]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testShort has 3 assertions: 
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString()); ref {baseStr, base} [674-674],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString()); ref {baseStr, base} [675-675],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b", (short) 4).toString()); ref {baseStr, base} [676-676]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testChar has 3 assertions: 
 assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); ref {baseStr, base} [681-681],
 assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); ref {baseStr, base} [682-682],
 assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); ref {baseStr, base} [683-683]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testByte has 3 assertions: 
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); ref {baseStr, base} [688-688],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); ref {baseStr, base} [689-689],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); ref {baseStr, base} [690-690]
[m[m31.08.2022 - 15:15:23.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testDouble has 3 assertions: 
 assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); ref {baseStr, base} [696-696],
 assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); ref {baseStr, base} [697-697],
 assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); ref {baseStr, base} [698-698]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testFloat has 3 assertions: 
 assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); ref {baseStr, base} [703-703],
 assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); ref {baseStr, base} [704-704],
 assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); ref {baseStr, base} [705-705]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testBoolean has 3 assertions: 
 assertEquals(baseStr + "[true]", new ToStringBuilder(base).append(true).toString()); ref {baseStr, base} [710-710],
 assertEquals(baseStr + "[a=true]", new ToStringBuilder(base).append("a", true).toString()); ref {baseStr, base} [711-711],
 assertEquals(baseStr + "[a=true,b=false]", new ToStringBuilder(base).append("a", true).append("b", false).toString()); ref {baseStr, base} [712-712]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectArray has 4 assertions: 
 assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [719-719],
 assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [720-720],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [722-722],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [723-723]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testLongArray has 4 assertions: 
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [729-729],
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [730-730],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [732-732],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [733-733]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testIntArray has 4 assertions: 
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [739-739],
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [740-740],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [742-742],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [743-743]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testShortArray has 4 assertions: 
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [749-749],
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [750-750],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [752-752],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [753-753]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testByteArray has 4 assertions: 
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [759-759],
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [760-760],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [762-762],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [763-763]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testCharArray has 4 assertions: 
 assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [769-769],
 assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [770-770],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [772-772],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [773-773]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testDoubleArray has 4 assertions: 
 assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [779-779],
 assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [780-780],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [782-782],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [783-783]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testFloatArray has 4 assertions: 
 assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [789-789],
 assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [790-790],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [792-792],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [793-793]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testBooleanArray has 4 assertions: 
 assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [799-799],
 assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [800-800],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [802-802],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [803-803]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testLongArrayArray has 4 assertions: 
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [809-809],
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [810-810],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [812-812],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [813-813]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testIntArrayArray has 4 assertions: 
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [819-819],
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [820-820],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [822-822],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [823-823]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testShortArrayArray has 4 assertions: 
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [829-829],
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [830-830],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [832-832],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [833-833]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testByteArrayArray has 4 assertions: 
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [839-839],
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [840-840],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [842-842],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [843-843]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testCharArrayArray has 4 assertions: 
 assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [849-849],
 assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [850-850],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [852-852],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [853-853]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testDoubleArrayArray has 4 assertions: 
 assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [859-859],
 assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [860-860],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [862-862],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [863-863]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testFloatArrayArray has 4 assertions: 
 assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [869-869],
 assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [870-870],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [872-872],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [873-873]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testBooleanArrayArray has 4 assertions: 
 assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [879-879],
 assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [880-880],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [882-882],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [883-883]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle has 1 assertions: 
 assertEquals(expected, a.toString()); ref {a, expected} [894-894]
[m[m31.08.2022 - 15:15:23.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionStatics has 4 assertions: 
 assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); ref {instance1, ReflectionToStringBuilder} [909-911],
 assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, true, true, SimpleReflectionStaticFieldsFixture.class)); ref {instance1, ReflectionToStringBuilder} [912-914],
 assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); ref {instance1} [915-917],
 assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); ref {instance1} [918-920]
[m[m31.08.2022 - 15:15:23.354 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionStatics has 4 assertions: 
 assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class)); ref {instance1, ReflectionToStringBuilder} [929-931],
 assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]", ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class)); ref {instance1, ReflectionToStringBuilder} [932-934],
 assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); ref {instance1} [935-937],
 assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); ref {instance1} [938-940]
[m[m31.08.2022 - 15:15:23.354 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testInheritedReflectionStatics has 4 assertions: 
 assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); ref {instance1, ReflectionToStringBuilder} [949-951],
 assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); ref {instance1, ReflectionToStringBuilder} [952-954],
 assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); ref {instance1} [955-957],
 assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); ref {instance1} [958-960]
[m[m31.08.2022 - 15:15:23.354 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::test_setUpToClass_valid has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.354 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::test_setUpToClass_invalid has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.354 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionNull has 1 assertions: 
 assertEquals("<null>", ReflectionToStringBuilder.toString(null)); ref {ReflectionToStringBuilder} [1050-1050]
[m[m31.08.2022 - 15:15:23.354 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringBuilderTest::testAppendToStringUsingMultiLineStyle has 1 assertions: 
 assertEquals(testBuilder.toString().indexOf("testInt=31337"), -1); ref {testBuilder} [1070-1070]
[m[m31.08.2022 - 15:15:23.354 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.354 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 15:15:23.355 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.LookupTranslatorTest::testBasicLookup has 2 assertions: 
 assertEquals("Incorrect codepoint consumption", 3, result); ref {result} [38-38],
 assertEquals("Incorrect value", "two", out.toString()); ref {out} [39-39]
[m[m31.08.2022 - 15:15:23.355 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.LookupTranslatorTest::testLang882 has 2 assertions: 
 assertEquals("Incorrect codepoint consumption", 3, result); ref {result} [48-48],
 assertEquals("Incorrect value", "two", out.toString()); ref {out} [49-49]
[m[m31.08.2022 - 15:15:23.356 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:23.356 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.StandardToStringStyleTest::testBlank has 1 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).toString()); ref {baseStr, base} [68-68]
[m[m31.08.2022 - 15:15:23.356 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.StandardToStringStyleTest::testAppendSuper has 5 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); ref {baseStr, base} [73-73],
 assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").toString()); ref {baseStr, base} [74-74],
 assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); ref {baseStr, base} [76-76],
 assertEquals(baseStr + "[%NULL%,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").append("a", "hello").toString()); ref {baseStr, base} [77-77],
 assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); ref {baseStr, base} [78-78]
[m[m31.08.2022 - 15:15:23.356 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.StandardToStringStyleTest::testObject has 12 assertions: 
 assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) null).toString()); ref {baseStr, base} [85-85],
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); ref {i3, baseStr, base} [86-86],
 assertEquals(baseStr + "[a=%NULL%]", new ToStringBuilder(base).append("a", (Object) null).toString()); ref {baseStr, base} [87-87],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); ref {i3, baseStr, base} [88-88],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); ref {i3, i4, baseStr, base} [89-89],
 assertEquals(baseStr + "[a=%Integer%]", new ToStringBuilder(base).append("a", i3, false).toString()); ref {i3, baseStr, base} [90-90],
 assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); ref {baseStr, base} [91-91],
 assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); ref {baseStr, base} [92-92],
 assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); ref {baseStr, base} [93-93],
 assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); ref {baseStr, base} [94-94],
 assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); ref {baseStr, base} [95-95],
 assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); ref {baseStr, base} [96-96]
[m[m31.08.2022 - 15:15:23.356 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.StandardToStringStyleTest::testPerson has 1 assertions: 
 assertEquals(pBaseStr + "[name=Suzy Queue,age=19,smoker=false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); ref {p, p.age, p.smoker, p.name, pBaseStr} [106-106]
[m[m31.08.2022 - 15:15:23.356 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.StandardToStringStyleTest::testLong has 3 assertions: 
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); ref {baseStr, base} [111-111],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); ref {baseStr, base} [112-112],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); ref {baseStr, base} [113-113]
[m[m31.08.2022 - 15:15:23.356 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.StandardToStringStyleTest::testObjectArray has 4 assertions: 
 assertEquals(baseStr + "[[%NULL%, 5, [3, 6]]]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [119-119],
 assertEquals(baseStr + "[[%NULL%, 5, [3, 6]]]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [120-120],
 assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [122-122],
 assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [123-123]
[m[m31.08.2022 - 15:15:23.356 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.StandardToStringStyleTest::testLongArray has 4 assertions: 
 assertEquals(baseStr + "[[1, 2, -3, 4]]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [129-129],
 assertEquals(baseStr + "[[1, 2, -3, 4]]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [130-130],
 assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [132-132],
 assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [133-133]
[m[m31.08.2022 - 15:15:23.356 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.StandardToStringStyleTest::testLongArrayArray has 4 assertions: 
 assertEquals(baseStr + "[[[1, 2], %NULL%, [5]]]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [139-139],
 assertEquals(baseStr + "[[[1, 2], %NULL%, [5]]]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [140-140],
 assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [142-142],
 assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [143-143]
[m[m31.08.2022 - 15:15:23.357 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 15:15:23.357 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.OctalUnescaperTest::testBetween has 12 assertions: 
 assertEquals("Failed to unescape octal characters via the between method", "\45", result); ref {result} [35-35],
 assertEquals("Failed to unescape octal characters via the between method", "\377", result); ref {result} [39-39],
 assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); ref {result} [43-43],
 assertEquals("Failed to unescape octal characters via the between method", "\37" + "8 and", result); ref {result} [47-47],
 assertEquals("Failed to unescape octal characters via the between method", "\37" + "8", result); ref {result} [51-51],
 assertEquals("Failed to unescape octal characters via the between method", "\1", result); ref {result} [55-55],
 assertEquals("Failed to unescape octal characters via the between method", "\036", result); ref {result} [59-59],
 assertEquals("Failed to unescape octal characters via the between method", "\036" + "5", result); ref {result} [63-63],
 assertEquals("Failed to unescape octal characters via the between method", "\003", result); ref {result} [67-67],
 assertEquals("Failed to unescape octal characters via the between method", "\000" + "3", result); ref {result} [71-71],
 assertEquals("Failed to unescape octal characters via the between method", "\279", result); ref {result} [75-75],
 assertEquals("Failed to ignore an out of range octal character via the between method", "\\999", result); ref {result} [79-79]
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.parseTestSuite() - Found 17 test cases
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testConstructors has 5 assertions: 
 assertEquals(0, new MutableLong().longValue()); ref {} [33-33],
 assertEquals(1, new MutableLong(1).longValue()); ref {} [35-35],
 assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); ref {Long} [37-37],
 assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); ref {} [38-38],
 assertEquals(2, new MutableLong("2").longValue()); ref {} [40-40]
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testConstructorNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testGetSet has 8 assertions: 
 assertEquals(0, new MutableLong().longValue()); ref {} [52-52],
 assertEquals(Long.valueOf(0), new MutableLong().getValue()); ref {Long} [53-53],
 assertEquals(1, mutNum.longValue()); ref {mutNum} [56-56],
 assertEquals(Long.valueOf(1), mutNum.getValue()); ref {Long, mutNum} [57-57],
 assertEquals(2, mutNum.longValue()); ref {mutNum} [60-60],
 assertEquals(Long.valueOf(2), mutNum.getValue()); ref {Long, mutNum} [61-61],
 assertEquals(3, mutNum.longValue()); ref {mutNum} [64-64],
 assertEquals(Long.valueOf(3), mutNum.getValue()); ref {Long, mutNum} [65-65]
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testSetNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testEquals has 10 assertions: 
 assertTrue(mutNumA.equals(mutNumA)); ref {mutNumA} [80-80],
 assertTrue(mutNumA.equals(mutNumB)); ref {mutNumA, mutNumB} [81-81],
 assertTrue(mutNumB.equals(mutNumA)); ref {mutNumA, mutNumB} [82-82],
 assertTrue(mutNumB.equals(mutNumB)); ref {mutNumB} [83-83],
 assertFalse(mutNumA.equals(mutNumC)); ref {mutNumA, mutNumC} [84-84],
 assertFalse(mutNumB.equals(mutNumC)); ref {mutNumB, mutNumC} [85-85],
 assertTrue(mutNumC.equals(mutNumC)); ref {mutNumC} [86-86],
 assertFalse(mutNumA.equals(null)); ref {mutNumA} [87-87],
 assertFalse(mutNumA.equals(Long.valueOf(0))); ref {mutNumA, Long} [88-88],
 assertFalse(mutNumA.equals("0")); ref {mutNumA} [89-89]
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testHashCode has 4 assertions: 
 assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); ref {mutNumA} [98-98],
 assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); ref {mutNumA, mutNumB} [99-99],
 assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); ref {mutNumA, mutNumC} [100-100],
 assertTrue(mutNumA.hashCode() == Long.valueOf(0).hashCode()); ref {mutNumA, Long} [101-101]
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testCompareTo has 3 assertions: 
 assertEquals(0, mutNum.compareTo(new MutableLong(0))); ref {mutNum} [108-108],
 assertEquals(+1, mutNum.compareTo(new MutableLong(-1))); ref {mutNum} [109-109],
 assertEquals(-1, mutNum.compareTo(new MutableLong(1))); ref {mutNum} [110-110]
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testCompareToNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testPrimitiveValues has 6 assertions: 
 assertEquals(1.0F, mutNum.floatValue(), 0); ref {mutNum} [123-123],
 assertEquals(1.0, mutNum.doubleValue(), 0); ref {mutNum} [124-124],
 assertEquals((byte) 1, mutNum.byteValue()); ref {mutNum} [125-125],
 assertEquals((short) 1, mutNum.shortValue()); ref {mutNum} [126-126],
 assertEquals(1, mutNum.intValue()); ref {mutNum} [127-127],
 assertEquals(1L, mutNum.longValue()); ref {mutNum} [128-128]
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testToLong has 2 assertions: 
 assertEquals(Long.valueOf(0L), new MutableLong(0L).toLong()); ref {Long} [133-133],
 assertEquals(Long.valueOf(123L), new MutableLong(123L).toLong()); ref {Long} [134-134]
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testIncrement has 2 assertions: 
 assertEquals(2, mutNum.intValue()); ref {mutNum} [142-142],
 assertEquals(2L, mutNum.longValue()); ref {mutNum} [143-143]
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testDecrement has 2 assertions: 
 assertEquals(0, mutNum.intValue()); ref {mutNum} [151-151],
 assertEquals(0L, mutNum.longValue()); ref {mutNum} [152-152]
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testAddValuePrimitive has 2 assertions: 
 assertEquals(2, mutNum.intValue()); ref {mutNum} [160-160],
 assertEquals(2L, mutNum.longValue()); ref {mutNum} [161-161]
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testAddValueObject has 2 assertions: 
 assertEquals(2, mutNum.intValue()); ref {mutNum} [169-169],
 assertEquals(2L, mutNum.longValue()); ref {mutNum} [170-170]
[m[m31.08.2022 - 15:15:23.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testSubtractValuePrimitive has 2 assertions: 
 assertEquals(0, mutNum.intValue()); ref {mutNum} [178-178],
 assertEquals(0L, mutNum.longValue()); ref {mutNum} [179-179]
[m[m31.08.2022 - 15:15:23.360 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testSubtractValueObject has 2 assertions: 
 assertEquals(0, mutNum.intValue()); ref {mutNum} [187-187],
 assertEquals(0L, mutNum.longValue()); ref {mutNum} [188-188]
[m[m31.08.2022 - 15:15:23.360 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableLongTest::testToString has 3 assertions: 
 assertEquals("0", new MutableLong(0).toString()); ref {} [193-193],
 assertEquals("10", new MutableLong(10).toString()); ref {} [194-194],
 assertEquals("-123", new MutableLong(-123).toString()); ref {} [195-195]
[m[m31.08.2022 - 15:15:23.360 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.361 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:23.361 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DefaultToStringStyleTest::testBlank has 1 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).toString()); ref {baseStr, base} [53-53]
[m[m31.08.2022 - 15:15:23.361 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DefaultToStringStyleTest::testAppendSuper has 5 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); ref {baseStr, base} [58-58],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); ref {baseStr, base} [59-59],
 assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); ref {baseStr, base} [61-61],
 assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); ref {baseStr, base} [62-62],
 assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); ref {baseStr, base} [63-63]
[m[m31.08.2022 - 15:15:23.361 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DefaultToStringStyleTest::testObject has 12 assertions: 
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); ref {baseStr, base} [70-70],
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); ref {i3, baseStr, base} [71-71],
 assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); ref {baseStr, base} [72-72],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); ref {i3, baseStr, base} [73-73],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); ref {i3, i4, baseStr, base} [74-74],
 assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); ref {i3, baseStr, base} [75-75],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); ref {baseStr, base} [76-76],
 assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); ref {baseStr, base} [77-77],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); ref {baseStr, base} [78-78],
 assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); ref {baseStr, base} [79-79],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); ref {baseStr, base} [80-80],
 assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); ref {baseStr, base} [81-81]
[m[m31.08.2022 - 15:15:23.361 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DefaultToStringStyleTest::testPerson has 1 assertions: 
 assertEquals(pBaseStr + "[name=John Doe,age=33,smoker=false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); ref {p, p.age, p.smoker, p.name, pBaseStr} [91-91]
[m[m31.08.2022 - 15:15:23.361 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DefaultToStringStyleTest::testLong has 3 assertions: 
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); ref {baseStr, base} [96-96],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); ref {baseStr, base} [97-97],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); ref {baseStr, base} [98-98]
[m[m31.08.2022 - 15:15:23.362 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DefaultToStringStyleTest::testObjectArray has 4 assertions: 
 assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [104-104],
 assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [105-105],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [107-107],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [108-108]
[m[m31.08.2022 - 15:15:23.362 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DefaultToStringStyleTest::testLongArray has 4 assertions: 
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [114-114],
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [115-115],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [117-117],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [118-118]
[m[m31.08.2022 - 15:15:23.362 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DefaultToStringStyleTest::testLongArrayArray has 4 assertions: 
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [124-124],
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [125-125],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [127-127],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [128-128]
[m[m31.08.2022 - 15:15:23.364 [INFO ] ParsingStrategy.parseTestSuite() - Found 5 test cases
[m[m31.08.2022 - 15:15:23.364 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.FormattableUtilsTest::testDefaultAppend has 10 assertions: 
 assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1).toString()); ref {FormattableUtils} [35-35],
 assertEquals("fo", FormattableUtils.append("foo", new Formatter(), 0, -1, 2).toString()); ref {FormattableUtils} [36-36],
 assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1).toString()); ref {FormattableUtils} [37-37],
 assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1).toString()); ref {FormattableUtils} [38-38],
 assertEquals(" fo", FormattableUtils.append("foo", new Formatter(), 0, 3, 2).toString()); ref {FormattableUtils} [39-39],
 assertEquals("   fo", FormattableUtils.append("foo", new Formatter(), 0, 5, 2).toString()); ref {FormattableUtils} [40-40],
 assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1).toString()); ref {FormattableUtils, LEFT_JUSTIFY} [41-41],
 assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1).toString()); ref {FormattableUtils, LEFT_JUSTIFY} [42-42],
 assertEquals("fo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2).toString()); ref {FormattableUtils, LEFT_JUSTIFY} [43-43],
 assertEquals("fo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2).toString()); ref {FormattableUtils, LEFT_JUSTIFY} [44-44]
[m[m31.08.2022 - 15:15:23.364 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.FormattableUtilsTest::testAlternatePadCharacter has 10 assertions: 
 assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, pad).toString()); ref {FormattableUtils, pad} [50-50],
 assertEquals("fo", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, pad).toString()); ref {FormattableUtils, pad} [51-51],
 assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, pad).toString()); ref {FormattableUtils, pad} [52-52],
 assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, pad).toString()); ref {FormattableUtils, pad} [53-53],
 assertEquals("_fo", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, pad).toString()); ref {FormattableUtils, pad} [54-54],
 assertEquals("___fo", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, pad).toString()); ref {FormattableUtils, pad} [55-55],
 assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, pad).toString()); ref {FormattableUtils, pad, LEFT_JUSTIFY} [56-56],
 assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, pad).toString()); ref {FormattableUtils, pad, LEFT_JUSTIFY} [57-57],
 assertEquals("fo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, pad).toString()); ref {FormattableUtils, pad, LEFT_JUSTIFY} [58-58],
 assertEquals("fo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, pad).toString()); ref {FormattableUtils, pad, LEFT_JUSTIFY} [59-59]
[m[m31.08.2022 - 15:15:23.364 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.FormattableUtilsTest::testEllipsis has 20 assertions: 
 assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "*").toString()); ref {FormattableUtils} [64-64],
 assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "*").toString()); ref {FormattableUtils} [65-65],
 assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "*").toString()); ref {FormattableUtils} [66-66],
 assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "*").toString()); ref {FormattableUtils} [67-67],
 assertEquals(" f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "*").toString()); ref {FormattableUtils} [68-68],
 assertEquals("   f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "*").toString()); ref {FormattableUtils} [69-69],
 assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [70-70],
 assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [71-71],
 assertEquals("f* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [72-72],
 assertEquals("f*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [73-73],
 assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "+*").toString()); ref {FormattableUtils} [75-75],
 assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "+*").toString()); ref {FormattableUtils} [76-76],
 assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "+*").toString()); ref {FormattableUtils} [77-77],
 assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "+*").toString()); ref {FormattableUtils} [78-78],
 assertEquals(" +*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "+*").toString()); ref {FormattableUtils} [79-79],
 assertEquals("   +*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "+*").toString()); ref {FormattableUtils} [80-80],
 assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "+*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [81-81],
 assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "+*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [82-82],
 assertEquals("+* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "+*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [83-83],
 assertEquals("+*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "+*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [84-84]
[m[m31.08.2022 - 15:15:23.364 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.FormattableUtilsTest::testIllegalEllipsis has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.364 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.FormattableUtilsTest::testAlternatePadCharAndEllipsis has 20 assertions: 
 assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "*").toString()); ref {FormattableUtils} [94-94],
 assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "*").toString()); ref {FormattableUtils} [95-95],
 assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "*").toString()); ref {FormattableUtils} [96-96],
 assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "*").toString()); ref {FormattableUtils} [97-97],
 assertEquals("_f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "*").toString()); ref {FormattableUtils} [98-98],
 assertEquals("___f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "*").toString()); ref {FormattableUtils} [99-99],
 assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [100-100],
 assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [101-101],
 assertEquals("f*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [102-102],
 assertEquals("f*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [103-103],
 assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "+*").toString()); ref {FormattableUtils} [105-105],
 assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "+*").toString()); ref {FormattableUtils} [106-106],
 assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "+*").toString()); ref {FormattableUtils} [107-107],
 assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "+*").toString()); ref {FormattableUtils} [108-108],
 assertEquals("_+*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "+*").toString()); ref {FormattableUtils} [109-109],
 assertEquals("___+*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "+*").toString()); ref {FormattableUtils} [110-110],
 assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "+*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [111-111],
 assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "+*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [112-112],
 assertEquals("+*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "+*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [113-113],
 assertEquals("+*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "+*").toString()); ref {FormattableUtils, LEFT_JUSTIFY} [114-114]
[m[m31.08.2022 - 15:15:23.366 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:23.366 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutableTripleTest::testBasic has 6 assertions: 
 assertEquals(0, triple.getLeft().intValue()); ref {triple} [40-40],
 assertEquals("foo", triple.getMiddle()); ref {triple} [41-41],
 assertEquals(Boolean.FALSE, triple.getRight()); ref {triple, Boolean.FALSE, Boolean} [42-42],
 assertNull(triple2.getLeft()); ref {triple2} [44-44],
 assertEquals("bar", triple2.getMiddle()); ref {triple2} [45-45],
 assertEquals("hello", triple2.getRight()); ref {triple2} [46-46]
[m[m31.08.2022 - 15:15:23.366 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutableTripleTest::testDefault has 3 assertions: 
 assertNull(triple.getLeft()); ref {triple} [52-52],
 assertNull(triple.getMiddle()); ref {triple} [53-53],
 assertNull(triple.getRight()); ref {triple} [54-54]
[m[m31.08.2022 - 15:15:23.366 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutableTripleTest::testMutate has 3 assertions: 
 assertEquals(42, triple.getLeft().intValue()); ref {triple} [63-63],
 assertEquals("bar", triple.getMiddle()); ref {triple} [64-64],
 assertEquals(Boolean.FALSE, triple.getRight()); ref {triple, Boolean.FALSE, Boolean} [65-65]
[m[m31.08.2022 - 15:15:23.366 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutableTripleTest::testTripleOf has 6 assertions: 
 assertEquals(0, triple.getLeft().intValue()); ref {triple} [71-71],
 assertEquals("foo", triple.getMiddle()); ref {triple} [72-72],
 assertEquals(Boolean.TRUE, triple.getRight()); ref {Boolean.TRUE, triple, Boolean} [73-73],
 assertNull(triple2.getLeft()); ref {triple2} [75-75],
 assertEquals("bar", triple2.getMiddle()); ref {triple2} [76-76],
 assertEquals("hello", triple2.getRight()); ref {triple2} [77-77]
[m[m31.08.2022 - 15:15:23.366 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutableTripleTest::testEquals has 6 assertions: 
 assertEquals(MutableTriple.of(null, "foo", "baz"), MutableTriple.of(null, "foo", "baz")); ref {MutableTriple} [82-82],
 assertFalse(MutableTriple.of("foo", 0, Boolean.TRUE).equals(MutableTriple.of("foo", null, Boolean.TRUE))); ref {MutableTriple, Boolean.TRUE, Boolean} [83-83],
 assertFalse(MutableTriple.of("foo", "bar", "baz").equals(MutableTriple.of("xyz", "bar", "baz"))); ref {MutableTriple} [84-84],
 assertFalse(MutableTriple.of("foo", "bar", "baz").equals(MutableTriple.of("foo", "bar", "blo"))); ref {MutableTriple} [85-85],
 assertTrue(p.equals(p)); ref {p} [88-88],
 assertFalse(p.equals(new Object())); ref {p} [89-89]
[m[m31.08.2022 - 15:15:23.366 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutableTripleTest::testHashCode has 1 assertions: 
 assertEquals(MutableTriple.of(null, "foo", "baz").hashCode(), MutableTriple.of(null, "foo", "baz").hashCode()); ref {MutableTriple} [94-94]
[m[m31.08.2022 - 15:15:23.366 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutableTripleTest::testToString has 7 assertions: 
 assertEquals("(null,null,null)", MutableTriple.of(null, null, null).toString()); ref {MutableTriple} [99-99],
 assertEquals("(null,two,null)", MutableTriple.of(null, "two", null).toString()); ref {MutableTriple} [100-100],
 assertEquals("(one,null,null)", MutableTriple.of("one", null, null).toString()); ref {MutableTriple} [101-101],
 assertEquals("(one,two,null)", MutableTriple.of("one", "two", null).toString()); ref {MutableTriple} [102-102],
 assertEquals("(null,two,three)", MutableTriple.of(null, "two", "three").toString()); ref {MutableTriple} [103-103],
 assertEquals("(one,null,three)", MutableTriple.of("one", null, "three").toString()); ref {MutableTriple} [104-104],
 assertEquals("(one,two,three)", MutableTriple.of("one", "two", "three").toString()); ref {MutableTriple} [105-105]
[m[m31.08.2022 - 15:15:23.366 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.tuple.MutableTripleTest::testSerialization has 2 assertions: 
 assertEquals(origTriple, deserializedTriple); ref {origTriple, deserializedTriple} [117-117],
 assertEquals(origTriple.hashCode(), deserializedTriple.hashCode()); ref {origTriple, deserializedTriple} [118-118]
[m[m31.08.2022 - 15:15:23.367 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 15:15:23.367 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSequenceUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new CharSequenceUtils()); ref {} [41-41],
 assertEquals(1, cons.length); ref {cons.length, cons} [43-43],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [44-44],
 assertTrue(Modifier.isPublic(CharSequenceUtils.class.getModifiers())); ref {Modifier} [45-45],
 assertFalse(Modifier.isFinal(CharSequenceUtils.class.getModifiers())); ref {Modifier} [46-46]
[m[m31.08.2022 - 15:15:23.367 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSequenceUtilsTest::testSubSequence has 12 assertions: 
 // 
// null input
// 
Assert.assertEquals(null, CharSequenceUtils.subSequence(null, -1)); ref {CharSequenceUtils, Assert} [55-55],
 Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 0)); ref {CharSequenceUtils, Assert} [56-56],
 Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 1)); ref {CharSequenceUtils, Assert} [57-57],
 // 
// non-null input
// 
Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0)); ref {CharSequenceUtils, Assert, StringUtils, StringUtils.EMPTY} [61-61],
 Assert.assertEquals("012", CharSequenceUtils.subSequence("012", 0)); ref {CharSequenceUtils, Assert} [62-62],
 Assert.assertEquals("12", CharSequenceUtils.subSequence("012", 1)); ref {CharSequenceUtils, Assert} [63-63],
 Assert.assertEquals("2", CharSequenceUtils.subSequence("012", 2)); ref {CharSequenceUtils, Assert} [64-64],
 Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence("012", 3)); ref {CharSequenceUtils, Assert, StringUtils, StringUtils.EMPTY} [65-65],
 Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, -1)); ref {CharSequenceUtils, Assert, StringUtils, StringUtils.EMPTY} [70-70],
 Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); ref {Assert} [71-71],
 Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, 1)); ref {CharSequenceUtils, Assert, StringUtils, StringUtils.EMPTY} [76-76],
 Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); ref {Assert} [77-77]
[m[m31.08.2022 - 15:15:23.368 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:23.368 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoClassNameToStringStyleTest::testBlank has 1 assertions: 
 assertEquals("[]", new ToStringBuilder(base).toString()); ref {base} [52-52]
[m[m31.08.2022 - 15:15:23.368 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoClassNameToStringStyleTest::testAppendSuper has 5 assertions: 
 assertEquals("[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); ref {base} [57-57],
 assertEquals("[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); ref {base} [58-58],
 assertEquals("[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); ref {base} [60-60],
 assertEquals("[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); ref {base} [61-61],
 assertEquals("[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); ref {base} [62-62]
[m[m31.08.2022 - 15:15:23.369 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoClassNameToStringStyleTest::testObject has 12 assertions: 
 assertEquals("[<null>]", new ToStringBuilder(base).append((Object) null).toString()); ref {base} [69-69],
 assertEquals("[3]", new ToStringBuilder(base).append(i3).toString()); ref {i3, base} [70-70],
 assertEquals("[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); ref {base} [71-71],
 assertEquals("[a=3]", new ToStringBuilder(base).append("a", i3).toString()); ref {i3, base} [72-72],
 assertEquals("[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); ref {i3, i4, base} [73-73],
 assertEquals("[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); ref {i3, base} [74-74],
 assertEquals("[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); ref {base} [75-75],
 assertEquals("[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); ref {base} [76-76],
 assertEquals("[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); ref {base} [77-77],
 assertEquals("[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); ref {base} [78-78],
 assertEquals("[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); ref {base} [79-79],
 assertEquals("[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); ref {base} [80-80]
[m[m31.08.2022 - 15:15:23.369 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoClassNameToStringStyleTest::testPerson has 1 assertions: 
 assertEquals("[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); ref {p, p.age, p.smoker, p.name} [89-89]
[m[m31.08.2022 - 15:15:23.369 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoClassNameToStringStyleTest::testLong has 3 assertions: 
 assertEquals("[3]", new ToStringBuilder(base).append(3L).toString()); ref {base} [94-94],
 assertEquals("[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); ref {base} [95-95],
 assertEquals("[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); ref {base} [96-96]
[m[m31.08.2022 - 15:15:23.369 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoClassNameToStringStyleTest::testObjectArray has 4 assertions: 
 assertEquals("[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); ref {array, base} [102-102],
 assertEquals("[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, base} [103-103],
 assertEquals("[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, base} [105-105],
 assertEquals("[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, base} [106-106]
[m[m31.08.2022 - 15:15:23.369 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoClassNameToStringStyleTest::testLongArray has 4 assertions: 
 assertEquals("[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); ref {array, base} [112-112],
 assertEquals("[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, base} [113-113],
 assertEquals("[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, base} [115-115],
 assertEquals("[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, base} [116-116]
[m[m31.08.2022 - 15:15:23.369 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoClassNameToStringStyleTest::testLongArrayArray has 4 assertions: 
 assertEquals("[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); ref {array, base} [122-122],
 assertEquals("[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, base} [123-123],
 assertEquals("[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, base} [125-125],
 assertEquals("[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, base} [126-126]
[m[m31.08.2022 - 15:15:23.372 [INFO ] ParsingStrategy.parseTestSuite() - Found 22 test cases
[m[m31.08.2022 - 15:15:23.372 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testRoundYear has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.372 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testRoundMonth has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.372 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testRoundSemiMonth has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.372 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testRoundDate has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.372 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testRoundDayOfMonth has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.372 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testRoundAmPm has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.372 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testRoundHourOfDay has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.372 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testRoundHour has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testRoundMinute has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testRoundSecond has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testRoundMilliSecond has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testTruncateYear has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testTruncateMonth has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testTruncateSemiMonth has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testTruncateDate has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testTruncateDayOfMonth has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testTruncateAmPm has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testTruncateHour has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testTruncateHourOfDay has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testTruncateMinute has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testTruncateSecond has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.373 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsRoundingTest::testTruncateMilliSecond has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.396 [INFO ] ParsingStrategy.parseTestSuite() - Found 57 test cases
[m[m31.08.2022 - 15:15:23.396 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new ClassUtils()); ref {} [63-63],
 assertEquals(1, cons.length); ref {cons.length, cons} [65-65],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [66-66],
 assertTrue(Modifier.isPublic(ClassUtils.class.getModifiers())); ref {Modifier} [67-67],
 assertFalse(Modifier.isFinal(ClassUtils.class.getModifiers())); ref {Modifier} [68-68]
[m[m31.08.2022 - 15:15:23.396 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getShortClassName_Object has 7 assertions: 
 assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); ref {ClassUtils} [74-74],
 assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); ref {ClassUtils} [75-75],
 assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); ref {ClassUtils} [76-76],
 assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>")); ref {ClassUtils} [77-77],
 assertEquals("ClassUtilsTest.1", ClassUtils.getShortClassName(new Object() {
}, "<null>")); ref {ClassUtils} [81-81],
 assertEquals("ClassUtilsTest.1Named", ClassUtils.getShortClassName(new Named(), "<null>")); ref {ClassUtils} [82-82],
 assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); ref {ClassUtils} [83-83]
[m[m31.08.2022 - 15:15:23.396 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getShortClassName_Class has 27 assertions: 
 assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class)); ref {ClassUtils} [88-88],
 assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class)); ref {ClassUtils} [89-89],
 assertEquals("", ClassUtils.getShortClassName((Class<?>) null)); ref {ClassUtils} [90-90],
 // LANG-535
assertEquals("String[]", ClassUtils.getShortClassName(String[].class)); ref {ClassUtils} [93-93],
 assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class)); ref {ClassUtils} [94-94],
 // Primitives
assertEquals("boolean", ClassUtils.getShortClassName(boolean.class)); ref {ClassUtils} [97-97],
 assertEquals("byte", ClassUtils.getShortClassName(byte.class)); ref {ClassUtils} [98-98],
 assertEquals("char", ClassUtils.getShortClassName(char.class)); ref {ClassUtils} [99-99],
 assertEquals("short", ClassUtils.getShortClassName(short.class)); ref {ClassUtils} [100-100],
 assertEquals("int", ClassUtils.getShortClassName(int.class)); ref {ClassUtils} [101-101],
 assertEquals("long", ClassUtils.getShortClassName(long.class)); ref {ClassUtils} [102-102],
 assertEquals("float", ClassUtils.getShortClassName(float.class)); ref {ClassUtils} [103-103],
 assertEquals("double", ClassUtils.getShortClassName(double.class)); ref {ClassUtils} [104-104],
 // Primitive Arrays
assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class)); ref {ClassUtils} [107-107],
 assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class)); ref {ClassUtils} [108-108],
 assertEquals("char[]", ClassUtils.getShortClassName(char[].class)); ref {ClassUtils} [109-109],
 assertEquals("short[]", ClassUtils.getShortClassName(short[].class)); ref {ClassUtils} [110-110],
 assertEquals("int[]", ClassUtils.getShortClassName(int[].class)); ref {ClassUtils} [111-111],
 assertEquals("long[]", ClassUtils.getShortClassName(long[].class)); ref {ClassUtils} [112-112],
 assertEquals("float[]", ClassUtils.getShortClassName(float[].class)); ref {ClassUtils} [113-113],
 assertEquals("double[]", ClassUtils.getShortClassName(double[].class)); ref {ClassUtils} [114-114],
 // Arrays of arrays of ...
assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class)); ref {ClassUtils} [117-117],
 assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class)); ref {ClassUtils} [118-118],
 assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class)); ref {ClassUtils} [119-119],
 assertEquals("ClassUtilsTest.2", ClassUtils.getShortClassName(new Object() {
}.getClass())); ref {ClassUtils} [123-123],
 assertEquals("ClassUtilsTest.2Named", ClassUtils.getShortClassName(Named.class)); ref {ClassUtils} [124-124],
 assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(Inner.class)); ref {ClassUtils} [125-125]
[m[m31.08.2022 - 15:15:23.396 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getShortClassName_String has 4 assertions: 
 assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName())); ref {ClassUtils} [132-132],
 assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName())); ref {ClassUtils} [133-133],
 assertEquals("", ClassUtils.getShortClassName((String) null)); ref {ClassUtils} [134-134],
 assertEquals("", ClassUtils.getShortClassName("")); ref {ClassUtils} [135-135]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getSimpleName_Class has 26 assertions: 
 assertEquals("ClassUtils", ClassUtils.getSimpleName(ClassUtils.class)); ref {ClassUtils} [140-140],
 assertEquals("Entry", ClassUtils.getSimpleName(Map.Entry.class)); ref {ClassUtils} [141-141],
 assertEquals("", ClassUtils.getSimpleName((Class<?>) null)); ref {ClassUtils} [142-142],
 // LANG-535
assertEquals("String[]", ClassUtils.getSimpleName(String[].class)); ref {ClassUtils} [145-145],
 assertEquals("Entry[]", ClassUtils.getSimpleName(Map.Entry[].class)); ref {ClassUtils} [146-146],
 // Primitives
assertEquals("boolean", ClassUtils.getSimpleName(boolean.class)); ref {ClassUtils} [149-149],
 assertEquals("byte", ClassUtils.getSimpleName(byte.class)); ref {ClassUtils} [150-150],
 assertEquals("char", ClassUtils.getSimpleName(char.class)); ref {ClassUtils} [151-151],
 assertEquals("short", ClassUtils.getSimpleName(short.class)); ref {ClassUtils} [152-152],
 assertEquals("int", ClassUtils.getSimpleName(int.class)); ref {ClassUtils} [153-153],
 assertEquals("long", ClassUtils.getSimpleName(long.class)); ref {ClassUtils} [154-154],
 assertEquals("float", ClassUtils.getSimpleName(float.class)); ref {ClassUtils} [155-155],
 assertEquals("double", ClassUtils.getSimpleName(double.class)); ref {ClassUtils} [156-156],
 // Primitive Arrays
assertEquals("boolean[]", ClassUtils.getSimpleName(boolean[].class)); ref {ClassUtils} [159-159],
 assertEquals("byte[]", ClassUtils.getSimpleName(byte[].class)); ref {ClassUtils} [160-160],
 assertEquals("char[]", ClassUtils.getSimpleName(char[].class)); ref {ClassUtils} [161-161],
 assertEquals("short[]", ClassUtils.getSimpleName(short[].class)); ref {ClassUtils} [162-162],
 assertEquals("int[]", ClassUtils.getSimpleName(int[].class)); ref {ClassUtils} [163-163],
 assertEquals("long[]", ClassUtils.getSimpleName(long[].class)); ref {ClassUtils} [164-164],
 assertEquals("float[]", ClassUtils.getSimpleName(float[].class)); ref {ClassUtils} [165-165],
 assertEquals("double[]", ClassUtils.getSimpleName(double[].class)); ref {ClassUtils} [166-166],
 // Arrays of arrays of ...
assertEquals("String[][]", ClassUtils.getSimpleName(String[][].class)); ref {ClassUtils} [169-169],
 assertEquals("String[][][]", ClassUtils.getSimpleName(String[][][].class)); ref {ClassUtils} [170-170],
 assertEquals("String[][][][]", ClassUtils.getSimpleName(String[][][][].class)); ref {ClassUtils} [171-171],
 assertEquals("", ClassUtils.getSimpleName(new Object() {
}.getClass())); ref {ClassUtils} [175-175],
 assertEquals("Named", ClassUtils.getSimpleName(Named.class)); ref {ClassUtils} [176-176]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getSimpleName_Object has 4 assertions: 
 assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); ref {ClassUtils} [181-181],
 assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); ref {ClassUtils} [182-182],
 assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); ref {ClassUtils} [183-183],
 assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>")); ref {ClassUtils} [184-184]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getPackageName_Object has 3 assertions: 
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new ClassUtils(), "<null>")); ref {ClassUtils} [190-190],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Inner(), "<null>")); ref {ClassUtils} [191-191],
 assertEquals("<null>", ClassUtils.getPackageName(null, "<null>")); ref {ClassUtils} [192-192]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getPackageName_Class has 17 assertions: 
 assertEquals("java.lang", ClassUtils.getPackageName(String.class)); ref {ClassUtils} [197-197],
 assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class)); ref {ClassUtils} [198-198],
 assertEquals("", ClassUtils.getPackageName((Class<?>) null)); ref {ClassUtils} [199-199],
 // LANG-535
assertEquals("java.lang", ClassUtils.getPackageName(String[].class)); ref {ClassUtils} [202-202],
 // Primitive Arrays
assertEquals("", ClassUtils.getPackageName(boolean[].class)); ref {ClassUtils} [205-205],
 assertEquals("", ClassUtils.getPackageName(byte[].class)); ref {ClassUtils} [206-206],
 assertEquals("", ClassUtils.getPackageName(char[].class)); ref {ClassUtils} [207-207],
 assertEquals("", ClassUtils.getPackageName(short[].class)); ref {ClassUtils} [208-208],
 assertEquals("", ClassUtils.getPackageName(int[].class)); ref {ClassUtils} [209-209],
 assertEquals("", ClassUtils.getPackageName(long[].class)); ref {ClassUtils} [210-210],
 assertEquals("", ClassUtils.getPackageName(float[].class)); ref {ClassUtils} [211-211],
 assertEquals("", ClassUtils.getPackageName(double[].class)); ref {ClassUtils} [212-212],
 // Arrays of arrays of ...
assertEquals("java.lang", ClassUtils.getPackageName(String[][].class)); ref {ClassUtils} [215-215],
 assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class)); ref {ClassUtils} [216-216],
 assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class)); ref {ClassUtils} [217-217],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Object() {
}.getClass())); ref {ClassUtils} [221-222],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(Named.class)); ref {ClassUtils} [223-223]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getPackageName_String has 4 assertions: 
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); ref {ClassUtils} [228-228],
 assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); ref {ClassUtils} [229-229],
 assertEquals("", ClassUtils.getPackageName((String) null)); ref {ClassUtils} [230-230],
 assertEquals("", ClassUtils.getPackageName("")); ref {ClassUtils} [231-231]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getAbbreviatedName_Class has 6 assertions: 
 assertEquals("", ClassUtils.getAbbreviatedName((Class<?>) null, 1)); ref {ClassUtils} [237-237],
 assertEquals("j.l.String", ClassUtils.getAbbreviatedName(String.class, 1)); ref {ClassUtils} [238-238],
 assertEquals("j.l.String", ClassUtils.getAbbreviatedName(String.class, 5)); ref {ClassUtils} [239-239],
 assertEquals("j.lang.String", ClassUtils.getAbbreviatedName(String.class, 13)); ref {ClassUtils} [240-240],
 assertEquals("j.lang.String", ClassUtils.getAbbreviatedName(String.class, 15)); ref {ClassUtils} [241-241],
 assertEquals("java.lang.String", ClassUtils.getAbbreviatedName(String.class, 20)); ref {ClassUtils} [242-242]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getAbbreviatedName_Class_ZeroLen has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getAbbreviatedName_Class_NegativeLen has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getAbbreviatedName_String has 3 assertions: 
 assertEquals("", ClassUtils.getAbbreviatedName((String) null, 1)); ref {ClassUtils} [257-257],
 assertEquals("WithoutPackage", ClassUtils.getAbbreviatedName("WithoutPackage", 1)); ref {ClassUtils} [258-258],
 assertEquals("j.l.String", ClassUtils.getAbbreviatedName("java.lang.String", 1)); ref {ClassUtils} [259-259]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getAllSuperclasses_Class has 4 assertions: 
 assertEquals(2, list.size()); ref {list} [266-266],
 assertEquals(CX.class, list.get(0)); ref {list} [267-267],
 assertEquals(Object.class, list.get(1)); ref {list} [268-268],
 assertEquals(null, ClassUtils.getAllSuperclasses(null)); ref {ClassUtils} [270-270]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getAllInterfaces_Class has 8 assertions: 
 assertEquals(6, list.size()); ref {list} [276-276],
 assertEquals(IB.class, list.get(0)); ref {list} [277-277],
 assertEquals(IC.class, list.get(1)); ref {list} [278-278],
 assertEquals(ID.class, list.get(2)); ref {list} [279-279],
 assertEquals(IE.class, list.get(3)); ref {list} [280-280],
 assertEquals(IF.class, list.get(4)); ref {list} [281-281],
 assertEquals(IA.class, list.get(5)); ref {list} [282-282],
 assertEquals(null, ClassUtils.getAllInterfaces(null)); ref {ClassUtils} [284-284]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_convertClassNamesToClasses_List has 6 assertions: 
 assertEquals(0, result.size()); ref {result} [309-309],
 assertEquals(3, result.size()); ref {result} [315-315],
 assertEquals(String.class, result.get(0)); ref {result} [316-316],
 assertEquals(null, result.get(1)); ref {result} [317-317],
 assertEquals(Object.class, result.get(2)); ref {result} [318-318],
 assertEquals(null, ClassUtils.convertClassNamesToClasses(null)); ref {ClassUtils} [328-328]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_convertClassesToClassNames_List has 6 assertions: 
 assertEquals(0, result.size()); ref {result} [335-335],
 assertEquals(3, result.size()); ref {result} [341-341],
 assertEquals("java.lang.String", result.get(0)); ref {result} [342-342],
 assertEquals(null, result.get(1)); ref {result} [343-343],
 assertEquals("java.lang.Object", result.get(2)); ref {result} [344-344],
 assertEquals(null, ClassUtils.convertClassesToClassNames(null)); ref {ClassUtils} [354-354]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_isInnerClass_Class has 6 assertions: 
 assertTrue(ClassUtils.isInnerClass(Inner.class)); ref {ClassUtils} [360-360],
 assertTrue(ClassUtils.isInnerClass(Map.Entry.class)); ref {ClassUtils} [361-361],
 assertTrue(ClassUtils.isInnerClass(new Cloneable() {
}.getClass())); ref {ClassUtils} [362-363],
 assertFalse(ClassUtils.isInnerClass(this.getClass())); ref {ClassUtils} [364-364],
 assertFalse(ClassUtils.isInnerClass(String.class)); ref {ClassUtils} [365-365],
 assertFalse(ClassUtils.isInnerClass(null)); ref {ClassUtils} [366-366]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_isAssignable_ClassArray_ClassArray has 15 assertions: 
 assertFalse(ClassUtils.isAssignable(array1, array2)); ref {array2, array1, ClassUtils} [379-379],
 assertFalse(ClassUtils.isAssignable(null, array2)); ref {array2, ClassUtils} [380-380],
 assertTrue(ClassUtils.isAssignable(null, array0)); ref {array0, ClassUtils} [381-381],
 assertTrue(ClassUtils.isAssignable(array0, array0)); ref {array0, ClassUtils} [382-382],
 // assertTrue(ClassUtils.isAssignable(array0, null));
// explicit cast to avoid warning
assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); ref {array0, ClassUtils} [384-384],
 assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null)); ref {ClassUtils} [385-385],
 assertFalse(ClassUtils.isAssignable(array1, array1s)); ref {array1s, array1, ClassUtils} [387-387],
 assertTrue(ClassUtils.isAssignable(array1s, array1s)); ref {array1s, ClassUtils} [388-388],
 assertTrue(ClassUtils.isAssignable(array1s, array1)); ref {array1s, array1, ClassUtils} [389-389],
 assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers)); ref {autoboxing, arrayPrimitives, ClassUtils, arrayWrappers} [393-393],
 assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives)); ref {autoboxing, arrayPrimitives, ClassUtils, arrayWrappers} [394-394],
 assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1)); ref {array1, arrayPrimitives, ClassUtils} [395-395],
 assertFalse(ClassUtils.isAssignable(arrayWrappers, array1)); ref {array1, ClassUtils, arrayWrappers} [396-396],
 assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, array2)); ref {autoboxing, array2, arrayPrimitives, ClassUtils} [397-397],
 assertTrue(ClassUtils.isAssignable(arrayWrappers, array2)); ref {array2, ClassUtils, arrayWrappers} [398-398]
[m[m31.08.2022 - 15:15:23.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_isAssignable_ClassArray_ClassArray_Autoboxing has 15 assertions: 
 assertFalse(ClassUtils.isAssignable(array1, array2, true)); ref {array2, array1, ClassUtils} [410-410],
 assertFalse(ClassUtils.isAssignable(null, array2, true)); ref {array2, ClassUtils} [411-411],
 assertTrue(ClassUtils.isAssignable(null, array0, true)); ref {array0, ClassUtils} [412-412],
 assertTrue(ClassUtils.isAssignable(array0, array0, true)); ref {array0, ClassUtils} [413-413],
 assertTrue(ClassUtils.isAssignable(array0, null, true)); ref {array0, ClassUtils} [414-414],
 assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, true)); ref {ClassUtils} [415-415],
 assertFalse(ClassUtils.isAssignable(array1, array1s, true)); ref {array1s, array1, ClassUtils} [417-417],
 assertTrue(ClassUtils.isAssignable(array1s, array1s, true)); ref {array1s, ClassUtils} [418-418],
 assertTrue(ClassUtils.isAssignable(array1s, array1, true)); ref {array1s, array1, ClassUtils} [419-419],
 assertTrue(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, true)); ref {arrayPrimitives, ClassUtils, arrayWrappers} [421-421],
 assertTrue(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, true)); ref {arrayPrimitives, ClassUtils, arrayWrappers} [422-422],
 assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, true)); ref {array1, arrayPrimitives, ClassUtils} [423-423],
 assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, true)); ref {array1, ClassUtils, arrayWrappers} [424-424],
 assertTrue(ClassUtils.isAssignable(arrayPrimitives, array2, true)); ref {array2, arrayPrimitives, ClassUtils} [425-425],
 assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, true)); ref {array2, ClassUtils, arrayWrappers} [426-426]
[m[m31.08.2022 - 15:15:23.398 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_isAssignable_ClassArray_ClassArray_NoAutoboxing has 15 assertions: 
 assertFalse(ClassUtils.isAssignable(array1, array2, false)); ref {array2, array1, ClassUtils} [438-438],
 assertFalse(ClassUtils.isAssignable(null, array2, false)); ref {array2, ClassUtils} [439-439],
 assertTrue(ClassUtils.isAssignable(null, array0, false)); ref {array0, ClassUtils} [440-440],
 assertTrue(ClassUtils.isAssignable(array0, array0, false)); ref {array0, ClassUtils} [441-441],
 assertTrue(ClassUtils.isAssignable(array0, null, false)); ref {array0, ClassUtils} [442-442],
 assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false)); ref {ClassUtils} [443-443],
 assertFalse(ClassUtils.isAssignable(array1, array1s, false)); ref {array1s, array1, ClassUtils} [445-445],
 assertTrue(ClassUtils.isAssignable(array1s, array1s, false)); ref {array1s, ClassUtils} [446-446],
 assertTrue(ClassUtils.isAssignable(array1s, array1, false)); ref {array1s, array1, ClassUtils} [447-447],
 assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false)); ref {arrayPrimitives, ClassUtils, arrayWrappers} [449-449],
 assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false)); ref {arrayPrimitives, ClassUtils, arrayWrappers} [450-450],
 assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false)); ref {array1, arrayPrimitives, ClassUtils} [451-451],
 assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false)); ref {array1, ClassUtils, arrayWrappers} [452-452],
 assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false)); ref {array2, ClassUtils, arrayWrappers} [453-453],
 assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false)); ref {array2, arrayPrimitives, ClassUtils} [454-454]
[m[m31.08.2022 - 15:15:23.398 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_isAssignable has 20 assertions: 
 assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); ref {ClassUtils} [459-459],
 assertFalse(ClassUtils.isAssignable(String.class, null)); ref {ClassUtils} [460-460],
 assertTrue(ClassUtils.isAssignable(null, Object.class)); ref {ClassUtils} [462-462],
 assertTrue(ClassUtils.isAssignable(null, Integer.class)); ref {ClassUtils} [463-463],
 assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); ref {Integer.TYPE, Integer, ClassUtils} [464-464],
 assertTrue(ClassUtils.isAssignable(String.class, Object.class)); ref {ClassUtils} [465-465],
 assertTrue(ClassUtils.isAssignable(String.class, String.class)); ref {ClassUtils} [466-466],
 assertFalse(ClassUtils.isAssignable(Object.class, String.class)); ref {ClassUtils} [467-467],
 assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); ref {Integer.TYPE, Integer, autoboxing, ClassUtils} [471-471],
 assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); ref {Integer.TYPE, Integer, autoboxing, ClassUtils} [472-472],
 assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); ref {Integer.TYPE, Integer, autoboxing, ClassUtils} [473-473],
 assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); ref {autoboxing, ClassUtils} [474-474],
 assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); ref {Integer.TYPE, Integer, ClassUtils} [475-475],
 assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); ref {ClassUtils} [476-476],
 assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); ref {autoboxing, Boolean.TYPE, Boolean, ClassUtils} [477-477],
 assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); ref {autoboxing, Boolean.TYPE, Boolean, ClassUtils} [478-478],
 assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); ref {autoboxing, Boolean.TYPE, Boolean, ClassUtils} [479-479],
 assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); ref {autoboxing, ClassUtils} [480-480],
 assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); ref {Boolean.TYPE, Boolean, ClassUtils} [481-481],
 assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); ref {ClassUtils} [482-482]
[m[m31.08.2022 - 15:15:23.398 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_isAssignable_Autoboxing has 19 assertions: 
 assertFalse(ClassUtils.isAssignable((Class<?>) null, null, true)); ref {ClassUtils} [487-487],
 assertFalse(ClassUtils.isAssignable(String.class, null, true)); ref {ClassUtils} [488-488],
 assertTrue(ClassUtils.isAssignable(null, Object.class, true)); ref {ClassUtils} [490-490],
 assertTrue(ClassUtils.isAssignable(null, Integer.class, true)); ref {ClassUtils} [491-491],
 assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, true)); ref {Integer.TYPE, Integer, ClassUtils} [492-492],
 assertTrue(ClassUtils.isAssignable(String.class, Object.class, true)); ref {ClassUtils} [493-493],
 assertTrue(ClassUtils.isAssignable(String.class, String.class, true)); ref {ClassUtils} [494-494],
 assertFalse(ClassUtils.isAssignable(Object.class, String.class, true)); ref {ClassUtils} [495-495],
 assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class, true)); ref {Integer.TYPE, Integer, ClassUtils} [496-496],
 assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class, true)); ref {Integer.TYPE, Integer, ClassUtils} [497-497],
 assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true)); ref {Integer.TYPE, Integer, ClassUtils} [498-498],
 assertTrue(ClassUtils.isAssignable(Integer.class, Object.class, true)); ref {ClassUtils} [499-499],
 assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, true)); ref {Integer.TYPE, Integer, ClassUtils} [500-500],
 assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, true)); ref {ClassUtils} [501-501],
 assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, true)); ref {Boolean.TYPE, Boolean, ClassUtils} [502-502],
 assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true)); ref {Boolean.TYPE, Boolean, ClassUtils} [503-503],
 assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, true)); ref {ClassUtils} [504-504],
 assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, true)); ref {Boolean.TYPE, Boolean, ClassUtils} [505-505],
 assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true)); ref {ClassUtils} [506-506]
[m[m31.08.2022 - 15:15:23.398 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_isAssignable_NoAutoboxing has 19 assertions: 
 assertFalse(ClassUtils.isAssignable((Class<?>) null, null, false)); ref {ClassUtils} [511-511],
 assertFalse(ClassUtils.isAssignable(String.class, null, false)); ref {ClassUtils} [512-512],
 assertTrue(ClassUtils.isAssignable(null, Object.class, false)); ref {ClassUtils} [514-514],
 assertTrue(ClassUtils.isAssignable(null, Integer.class, false)); ref {ClassUtils} [515-515],
 assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, false)); ref {Integer.TYPE, Integer, ClassUtils} [516-516],
 assertTrue(ClassUtils.isAssignable(String.class, Object.class, false)); ref {ClassUtils} [517-517],
 assertTrue(ClassUtils.isAssignable(String.class, String.class, false)); ref {ClassUtils} [518-518],
 assertFalse(ClassUtils.isAssignable(Object.class, String.class, false)); ref {ClassUtils} [519-519],
 assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class, false)); ref {Integer.TYPE, Integer, ClassUtils} [520-520],
 assertFalse(ClassUtils.isAssignable(Integer.TYPE, Object.class, false)); ref {Integer.TYPE, Integer, ClassUtils} [521-521],
 assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE, false)); ref {Integer.TYPE, Integer, ClassUtils} [522-522],
 assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, false)); ref {Integer.TYPE, Integer, ClassUtils} [523-523],
 assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, false)); ref {ClassUtils} [524-524],
 assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, false)); ref {Boolean.TYPE, Boolean, ClassUtils} [525-525],
 assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Object.class, false)); ref {Boolean.TYPE, Boolean, ClassUtils} [526-526],
 assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, false)); ref {Boolean.TYPE, Boolean, ClassUtils} [527-527],
 assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, false)); ref {ClassUtils} [528-528],
 assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, false)); ref {Boolean.TYPE, Boolean, ClassUtils} [529-529],
 assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, false)); ref {ClassUtils} [530-530]
[m[m31.08.2022 - 15:15:23.398 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_isAssignable_Widening has 64 assertions: 
 // test byte conversions
assertFalse("byte -> char", ClassUtils.isAssignable(Byte.TYPE, Character.TYPE)); ref {Character.TYPE, Character, Byte, ClassUtils, Byte.TYPE} [536-536],
 assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE)); ref {Byte, ClassUtils, Byte.TYPE} [537-537],
 assertTrue("byte -> short", ClassUtils.isAssignable(Byte.TYPE, Short.TYPE)); ref {Byte, Short.TYPE, ClassUtils, Byte.TYPE, Short} [538-538],
 assertTrue("byte -> int", ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE)); ref {Integer.TYPE, Integer, Byte, ClassUtils, Byte.TYPE} [539-539],
 assertTrue("byte -> long", ClassUtils.isAssignable(Byte.TYPE, Long.TYPE)); ref {Byte, Long, ClassUtils, Byte.TYPE, Long.TYPE} [540-540],
 assertTrue("byte -> float", ClassUtils.isAssignable(Byte.TYPE, Float.TYPE)); ref {Float, Byte, Float.TYPE, ClassUtils, Byte.TYPE} [541-541],
 assertTrue("byte -> double", ClassUtils.isAssignable(Byte.TYPE, Double.TYPE)); ref {Byte, Double.TYPE, Double, ClassUtils, Byte.TYPE} [542-542],
 assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE)); ref {Boolean.TYPE, Byte, Boolean, ClassUtils, Byte.TYPE} [543-543],
 // test short conversions
assertFalse("short -> char", ClassUtils.isAssignable(Short.TYPE, Character.TYPE)); ref {Character.TYPE, Character, Short.TYPE, ClassUtils, Short} [546-546],
 assertFalse("short -> byte", ClassUtils.isAssignable(Short.TYPE, Byte.TYPE)); ref {Byte, Short.TYPE, ClassUtils, Short, Byte.TYPE} [547-547],
 assertTrue("short -> short", ClassUtils.isAssignable(Short.TYPE, Short.TYPE)); ref {Short.TYPE, ClassUtils, Short} [548-548],
 assertTrue("short -> int", ClassUtils.isAssignable(Short.TYPE, Integer.TYPE)); ref {Integer.TYPE, Integer, Short.TYPE, ClassUtils, Short} [549-549],
 assertTrue("short -> long", ClassUtils.isAssignable(Short.TYPE, Long.TYPE)); ref {Long, Short.TYPE, ClassUtils, Short, Long.TYPE} [550-550],
 assertTrue("short -> float", ClassUtils.isAssignable(Short.TYPE, Float.TYPE)); ref {Float, Float.TYPE, Short.TYPE, ClassUtils, Short} [551-551],
 assertTrue("short -> double", ClassUtils.isAssignable(Short.TYPE, Double.TYPE)); ref {Short.TYPE, Double.TYPE, Double, ClassUtils, Short} [552-552],
 assertFalse("short -> boolean", ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE)); ref {Boolean.TYPE, Short.TYPE, Boolean, ClassUtils, Short} [553-553],
 // test char conversions
assertTrue("char -> char", ClassUtils.isAssignable(Character.TYPE, Character.TYPE)); ref {Character.TYPE, Character, ClassUtils} [556-556],
 assertFalse("char -> byte", ClassUtils.isAssignable(Character.TYPE, Byte.TYPE)); ref {Character.TYPE, Character, Byte, ClassUtils, Byte.TYPE} [557-557],
 assertFalse("char -> short", ClassUtils.isAssignable(Character.TYPE, Short.TYPE)); ref {Character.TYPE, Character, Short.TYPE, ClassUtils, Short} [558-558],
 assertTrue("char -> int", ClassUtils.isAssignable(Character.TYPE, Integer.TYPE)); ref {Integer.TYPE, Integer, Character.TYPE, Character, ClassUtils} [559-559],
 assertTrue("char -> long", ClassUtils.isAssignable(Character.TYPE, Long.TYPE)); ref {Character.TYPE, Character, Long, ClassUtils, Long.TYPE} [560-560],
 assertTrue("char -> float", ClassUtils.isAssignable(Character.TYPE, Float.TYPE)); ref {Character.TYPE, Float, Character, Float.TYPE, ClassUtils} [561-561],
 assertTrue("char -> double", ClassUtils.isAssignable(Character.TYPE, Double.TYPE)); ref {Character.TYPE, Character, Double.TYPE, Double, ClassUtils} [562-562],
 assertFalse("char -> boolean", ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE)); ref {Character.TYPE, Character, Boolean.TYPE, Boolean, ClassUtils} [563-563],
 // test int conversions
assertFalse("int -> char", ClassUtils.isAssignable(Integer.TYPE, Character.TYPE)); ref {Integer.TYPE, Integer, Character.TYPE, Character, ClassUtils} [566-566],
 assertFalse("int -> byte", ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE)); ref {Integer.TYPE, Integer, Byte, ClassUtils, Byte.TYPE} [567-567],
 assertFalse("int -> short", ClassUtils.isAssignable(Integer.TYPE, Short.TYPE)); ref {Integer.TYPE, Integer, Short.TYPE, ClassUtils, Short} [568-568],
 assertTrue("int -> int", ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); ref {Integer.TYPE, Integer, ClassUtils} [569-569],
 assertTrue("int -> long", ClassUtils.isAssignable(Integer.TYPE, Long.TYPE)); ref {Integer.TYPE, Integer, Long, ClassUtils, Long.TYPE} [570-570],
 assertTrue("int -> float", ClassUtils.isAssignable(Integer.TYPE, Float.TYPE)); ref {Integer.TYPE, Integer, Float, Float.TYPE, ClassUtils} [571-571],
 assertTrue("int -> double", ClassUtils.isAssignable(Integer.TYPE, Double.TYPE)); ref {Integer.TYPE, Integer, Double.TYPE, Double, ClassUtils} [572-572],
 assertFalse("int -> boolean", ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE)); ref {Integer.TYPE, Integer, Boolean.TYPE, Boolean, ClassUtils} [573-573],
 // test long conversions
assertFalse("long -> char", ClassUtils.isAssignable(Long.TYPE, Character.TYPE)); ref {Character.TYPE, Character, Long, ClassUtils, Long.TYPE} [576-576],
 assertFalse("long -> byte", ClassUtils.isAssignable(Long.TYPE, Byte.TYPE)); ref {Byte, Long, ClassUtils, Byte.TYPE, Long.TYPE} [577-577],
 assertFalse("long -> short", ClassUtils.isAssignable(Long.TYPE, Short.TYPE)); ref {Long, Short.TYPE, ClassUtils, Short, Long.TYPE} [578-578],
 assertFalse("long -> int", ClassUtils.isAssignable(Long.TYPE, Integer.TYPE)); ref {Integer.TYPE, Integer, Long, ClassUtils, Long.TYPE} [579-579],
 assertTrue("long -> long", ClassUtils.isAssignable(Long.TYPE, Long.TYPE)); ref {Long, ClassUtils, Long.TYPE} [580-580],
 assertTrue("long -> float", ClassUtils.isAssignable(Long.TYPE, Float.TYPE)); ref {Float, Long, Float.TYPE, ClassUtils, Long.TYPE} [581-581],
 assertTrue("long -> double", ClassUtils.isAssignable(Long.TYPE, Double.TYPE)); ref {Long, Double.TYPE, Double, ClassUtils, Long.TYPE} [582-582],
 assertFalse("long -> boolean", ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE)); ref {Boolean.TYPE, Long, Boolean, ClassUtils, Long.TYPE} [583-583],
 // test float conversions
assertFalse("float -> char", ClassUtils.isAssignable(Float.TYPE, Character.TYPE)); ref {Float, Character.TYPE, Character, Float.TYPE, ClassUtils} [586-586],
 assertFalse("float -> byte", ClassUtils.isAssignable(Float.TYPE, Byte.TYPE)); ref {Float, Byte, Float.TYPE, ClassUtils, Byte.TYPE} [587-587],
 assertFalse("float -> short", ClassUtils.isAssignable(Float.TYPE, Short.TYPE)); ref {Float, Float.TYPE, Short.TYPE, ClassUtils, Short} [588-588],
 assertFalse("float -> int", ClassUtils.isAssignable(Float.TYPE, Integer.TYPE)); ref {Integer.TYPE, Integer, Float, Float.TYPE, ClassUtils} [589-589],
 assertFalse("float -> long", ClassUtils.isAssignable(Float.TYPE, Long.TYPE)); ref {Float, Float.TYPE, Long, ClassUtils, Long.TYPE} [590-590],
 assertTrue("float -> float", ClassUtils.isAssignable(Float.TYPE, Float.TYPE)); ref {Float, Float.TYPE, ClassUtils} [591-591],
 assertTrue("float -> double", ClassUtils.isAssignable(Float.TYPE, Double.TYPE)); ref {Float, Float.TYPE, Double.TYPE, Double, ClassUtils} [592-592],
 assertFalse("float -> boolean", ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE)); ref {Float, Boolean.TYPE, Float.TYPE, Boolean, ClassUtils} [593-593],
 // test double conversions
assertFalse("double -> char", ClassUtils.isAssignable(Double.TYPE, Character.TYPE)); ref {Character.TYPE, Character, Double.TYPE, Double, ClassUtils} [596-596],
 assertFalse("double -> byte", ClassUtils.isAssignable(Double.TYPE, Byte.TYPE)); ref {Byte, Double.TYPE, Double, ClassUtils, Byte.TYPE} [597-597],
 assertFalse("double -> short", ClassUtils.isAssignable(Double.TYPE, Short.TYPE)); ref {Short.TYPE, Double.TYPE, Double, ClassUtils, Short} [598-598],
 assertFalse("double -> int", ClassUtils.isAssignable(Double.TYPE, Integer.TYPE)); ref {Integer.TYPE, Integer, Double.TYPE, Double, ClassUtils} [599-599],
 assertFalse("double -> long", ClassUtils.isAssignable(Double.TYPE, Long.TYPE)); ref {Long, Double.TYPE, Double, ClassUtils, Long.TYPE} [600-600],
 assertFalse("double -> float", ClassUtils.isAssignable(Double.TYPE, Float.TYPE)); ref {Float, Float.TYPE, Double.TYPE, Double, ClassUtils} [601-601],
 assertTrue("double -> double", ClassUtils.isAssignable(Double.TYPE, Double.TYPE)); ref {Double.TYPE, Double, ClassUtils} [602-602],
 assertFalse("double -> boolean", ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE)); ref {Boolean.TYPE, Double.TYPE, Boolean, Double, ClassUtils} [603-603],
 // test boolean conversions
assertFalse("boolean -> char", ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE)); ref {Character.TYPE, Character, Boolean.TYPE, Boolean, ClassUtils} [606-606],
 assertFalse("boolean -> byte", ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE)); ref {Boolean.TYPE, Byte, Boolean, ClassUtils, Byte.TYPE} [607-607],
 assertFalse("boolean -> short", ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE)); ref {Boolean.TYPE, Short.TYPE, Boolean, ClassUtils, Short} [608-608],
 assertFalse("boolean -> int", ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE)); ref {Integer.TYPE, Integer, Boolean.TYPE, Boolean, ClassUtils} [609-609],
 assertFalse("boolean -> long", ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE)); ref {Boolean.TYPE, Long, Boolean, ClassUtils, Long.TYPE} [610-610],
 assertFalse("boolean -> float", ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE)); ref {Float, Boolean.TYPE, Float.TYPE, Boolean, ClassUtils} [611-611],
 assertFalse("boolean -> double", ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE)); ref {Boolean.TYPE, Boolean, Double.TYPE, Double, ClassUtils} [612-612],
 assertTrue("boolean -> boolean", ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); ref {Boolean.TYPE, Boolean, ClassUtils} [613-613]
[m[m31.08.2022 - 15:15:23.398 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_isAssignable_DefaultUnboxing_Widening has 64 assertions: 
 // test byte conversions
assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE)); ref {Character.TYPE, Character, ClassUtils} [621-621],
 assertEquals("byte -> byte", autoboxing, ClassUtils.isAssignable(Byte.class, Byte.TYPE)); ref {autoboxing, Byte, ClassUtils, Byte.TYPE} [622-622],
 assertEquals("byte -> short", autoboxing, ClassUtils.isAssignable(Byte.class, Short.TYPE)); ref {autoboxing, Short.TYPE, ClassUtils, Short} [623-623],
 assertEquals("byte -> int", autoboxing, ClassUtils.isAssignable(Byte.class, Integer.TYPE)); ref {Integer.TYPE, Integer, autoboxing, ClassUtils} [624-624],
 assertEquals("byte -> long", autoboxing, ClassUtils.isAssignable(Byte.class, Long.TYPE)); ref {autoboxing, Long, ClassUtils, Long.TYPE} [625-625],
 assertEquals("byte -> float", autoboxing, ClassUtils.isAssignable(Byte.class, Float.TYPE)); ref {Float, autoboxing, Float.TYPE, ClassUtils} [626-626],
 assertEquals("byte -> double", autoboxing, ClassUtils.isAssignable(Byte.class, Double.TYPE)); ref {autoboxing, Double.TYPE, Double, ClassUtils} [627-627],
 assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE)); ref {Boolean.TYPE, Boolean, ClassUtils} [628-628],
 // test short conversions
assertFalse("short -> char", ClassUtils.isAssignable(Short.class, Character.TYPE)); ref {Character.TYPE, Character, ClassUtils} [631-631],
 assertFalse("short -> byte", ClassUtils.isAssignable(Short.class, Byte.TYPE)); ref {Byte, ClassUtils, Byte.TYPE} [632-632],
 assertEquals("short -> short", autoboxing, ClassUtils.isAssignable(Short.class, Short.TYPE)); ref {autoboxing, Short.TYPE, ClassUtils, Short} [633-633],
 assertEquals("short -> int", autoboxing, ClassUtils.isAssignable(Short.class, Integer.TYPE)); ref {Integer.TYPE, Integer, autoboxing, ClassUtils} [634-634],
 assertEquals("short -> long", autoboxing, ClassUtils.isAssignable(Short.class, Long.TYPE)); ref {autoboxing, Long, ClassUtils, Long.TYPE} [635-635],
 assertEquals("short -> float", autoboxing, ClassUtils.isAssignable(Short.class, Float.TYPE)); ref {Float, autoboxing, Float.TYPE, ClassUtils} [636-636],
 assertEquals("short -> double", autoboxing, ClassUtils.isAssignable(Short.class, Double.TYPE)); ref {autoboxing, Double.TYPE, Double, ClassUtils} [637-637],
 assertFalse("short -> boolean", ClassUtils.isAssignable(Short.class, Boolean.TYPE)); ref {Boolean.TYPE, Boolean, ClassUtils} [638-638],
 // test char conversions
assertEquals("char -> char", autoboxing, ClassUtils.isAssignable(Character.class, Character.TYPE)); ref {Character.TYPE, autoboxing, Character, ClassUtils} [641-641],
 assertFalse("char -> byte", ClassUtils.isAssignable(Character.class, Byte.TYPE)); ref {Byte, ClassUtils, Byte.TYPE} [642-642],
 assertFalse("char -> short", ClassUtils.isAssignable(Character.class, Short.TYPE)); ref {Short.TYPE, ClassUtils, Short} [643-643],
 assertEquals("char -> int", autoboxing, ClassUtils.isAssignable(Character.class, Integer.TYPE)); ref {Integer.TYPE, Integer, autoboxing, ClassUtils} [644-644],
 assertEquals("char -> long", autoboxing, ClassUtils.isAssignable(Character.class, Long.TYPE)); ref {autoboxing, Long, ClassUtils, Long.TYPE} [645-645],
 assertEquals("char -> float", autoboxing, ClassUtils.isAssignable(Character.class, Float.TYPE)); ref {Float, autoboxing, Float.TYPE, ClassUtils} [646-646],
 assertEquals("char -> double", autoboxing, ClassUtils.isAssignable(Character.class, Double.TYPE)); ref {autoboxing, Double.TYPE, Double, ClassUtils} [647-647],
 assertFalse("char -> boolean", ClassUtils.isAssignable(Character.class, Boolean.TYPE)); ref {Boolean.TYPE, Boolean, ClassUtils} [648-648],
 // test int conversions
assertFalse("int -> char", ClassUtils.isAssignable(Integer.class, Character.TYPE)); ref {Character.TYPE, Character, ClassUtils} [651-651],
 assertFalse("int -> byte", ClassUtils.isAssignable(Integer.class, Byte.TYPE)); ref {Byte, ClassUtils, Byte.TYPE} [652-652],
 assertFalse("int -> short", ClassUtils.isAssignable(Integer.class, Short.TYPE)); ref {Short.TYPE, ClassUtils, Short} [653-653],
 assertEquals("int -> int", autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); ref {Integer.TYPE, Integer, autoboxing, ClassUtils} [654-654],
 assertEquals("int -> long", autoboxing, ClassUtils.isAssignable(Integer.class, Long.TYPE)); ref {autoboxing, Long, ClassUtils, Long.TYPE} [655-655],
 assertEquals("int -> float", autoboxing, ClassUtils.isAssignable(Integer.class, Float.TYPE)); ref {Float, autoboxing, Float.TYPE, ClassUtils} [656-656],
 assertEquals("int -> double", autoboxing, ClassUtils.isAssignable(Integer.class, Double.TYPE)); ref {autoboxing, Double.TYPE, Double, ClassUtils} [657-657],
 assertFalse("int -> boolean", ClassUtils.isAssignable(Integer.class, Boolean.TYPE)); ref {Boolean.TYPE, Boolean, ClassUtils} [658-658],
 // test long conversions
assertFalse("long -> char", ClassUtils.isAssignable(Long.class, Character.TYPE)); ref {Character.TYPE, Character, ClassUtils} [661-661],
 assertFalse("long -> byte", ClassUtils.isAssignable(Long.class, Byte.TYPE)); ref {Byte, ClassUtils, Byte.TYPE} [662-662],
 assertFalse("long -> short", ClassUtils.isAssignable(Long.class, Short.TYPE)); ref {Short.TYPE, ClassUtils, Short} [663-663],
 assertFalse("long -> int", ClassUtils.isAssignable(Long.class, Integer.TYPE)); ref {Integer.TYPE, Integer, ClassUtils} [664-664],
 assertEquals("long -> long", autoboxing, ClassUtils.isAssignable(Long.class, Long.TYPE)); ref {autoboxing, Long, ClassUtils, Long.TYPE} [665-665],
 assertEquals("long -> float", autoboxing, ClassUtils.isAssignable(Long.class, Float.TYPE)); ref {Float, autoboxing, Float.TYPE, ClassUtils} [666-666],
 assertEquals("long -> double", autoboxing, ClassUtils.isAssignable(Long.class, Double.TYPE)); ref {autoboxing, Double.TYPE, Double, ClassUtils} [667-667],
 assertFalse("long -> boolean", ClassUtils.isAssignable(Long.class, Boolean.TYPE)); ref {Boolean.TYPE, Boolean, ClassUtils} [668-668],
 // test float conversions
assertFalse("float -> char", ClassUtils.isAssignable(Float.class, Character.TYPE)); ref {Character.TYPE, Character, ClassUtils} [671-671],
 assertFalse("float -> byte", ClassUtils.isAssignable(Float.class, Byte.TYPE)); ref {Byte, ClassUtils, Byte.TYPE} [672-672],
 assertFalse("float -> short", ClassUtils.isAssignable(Float.class, Short.TYPE)); ref {Short.TYPE, ClassUtils, Short} [673-673],
 assertFalse("float -> int", ClassUtils.isAssignable(Float.class, Integer.TYPE)); ref {Integer.TYPE, Integer, ClassUtils} [674-674],
 assertFalse("float -> long", ClassUtils.isAssignable(Float.class, Long.TYPE)); ref {Long, ClassUtils, Long.TYPE} [675-675],
 assertEquals("float -> float", autoboxing, ClassUtils.isAssignable(Float.class, Float.TYPE)); ref {Float, autoboxing, Float.TYPE, ClassUtils} [676-676],
 assertEquals("float -> double", autoboxing, ClassUtils.isAssignable(Float.class, Double.TYPE)); ref {autoboxing, Double.TYPE, Double, ClassUtils} [677-677],
 assertFalse("float -> boolean", ClassUtils.isAssignable(Float.class, Boolean.TYPE)); ref {Boolean.TYPE, Boolean, ClassUtils} [678-678],
 // test double conversions
assertFalse("double -> char", ClassUtils.isAssignable(Double.class, Character.TYPE)); ref {Character.TYPE, Character, ClassUtils} [681-681],
 assertFalse("double -> byte", ClassUtils.isAssignable(Double.class, Byte.TYPE)); ref {Byte, ClassUtils, Byte.TYPE} [682-682],
 assertFalse("double -> short", ClassUtils.isAssignable(Double.class, Short.TYPE)); ref {Short.TYPE, ClassUtils, Short} [683-683],
 assertFalse("double -> int", ClassUtils.isAssignable(Double.class, Integer.TYPE)); ref {Integer.TYPE, Integer, ClassUtils} [684-684],
 assertFalse("double -> long", ClassUtils.isAssignable(Double.class, Long.TYPE)); ref {Long, ClassUtils, Long.TYPE} [685-685],
 assertFalse("double -> float", ClassUtils.isAssignable(Double.class, Float.TYPE)); ref {Float, Float.TYPE, ClassUtils} [686-686],
 assertEquals("double -> double", autoboxing, ClassUtils.isAssignable(Double.class, Double.TYPE)); ref {autoboxing, Double.TYPE, Double, ClassUtils} [687-687],
 assertFalse("double -> boolean", ClassUtils.isAssignable(Double.class, Boolean.TYPE)); ref {Boolean.TYPE, Boolean, ClassUtils} [688-688],
 // test boolean conversions
assertFalse("boolean -> char", ClassUtils.isAssignable(Boolean.class, Character.TYPE)); ref {Character.TYPE, Character, ClassUtils} [691-691],
 assertFalse("boolean -> byte", ClassUtils.isAssignable(Boolean.class, Byte.TYPE)); ref {Byte, ClassUtils, Byte.TYPE} [692-692],
 assertFalse("boolean -> short", ClassUtils.isAssignable(Boolean.class, Short.TYPE)); ref {Short.TYPE, ClassUtils, Short} [693-693],
 assertFalse("boolean -> int", ClassUtils.isAssignable(Boolean.class, Integer.TYPE)); ref {Integer.TYPE, Integer, ClassUtils} [694-694],
 assertFalse("boolean -> long", ClassUtils.isAssignable(Boolean.class, Long.TYPE)); ref {Long, ClassUtils, Long.TYPE} [695-695],
 assertFalse("boolean -> float", ClassUtils.isAssignable(Boolean.class, Float.TYPE)); ref {Float, Float.TYPE, ClassUtils} [696-696],
 assertFalse("boolean -> double", ClassUtils.isAssignable(Boolean.class, Double.TYPE)); ref {Double.TYPE, Double, ClassUtils} [697-697],
 assertEquals("boolean -> boolean", autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); ref {autoboxing, Boolean.TYPE, Boolean, ClassUtils} [698-698]
[m[m31.08.2022 - 15:15:23.399 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_isAssignable_Unboxing_Widening has 64 assertions: 
 // test byte conversions
assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); ref {Character.TYPE, Character, ClassUtils} [704-704],
 assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); ref {Byte, ClassUtils, Byte.TYPE} [705-705],
 assertTrue("byte -> short", ClassUtils.isAssignable(Byte.class, Short.TYPE, true)); ref {Short.TYPE, ClassUtils, Short} [706-706],
 assertTrue("byte -> int", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true)); ref {Integer.TYPE, Integer, ClassUtils} [707-707],
 assertTrue("byte -> long", ClassUtils.isAssignable(Byte.class, Long.TYPE, true)); ref {Long, ClassUtils, Long.TYPE} [708-708],
 assertTrue("byte -> float", ClassUtils.isAssignable(Byte.class, Float.TYPE, true)); ref {Float, Float.TYPE, ClassUtils} [709-709],
 assertTrue("byte -> double", ClassUtils.isAssignable(Byte.class, Double.TYPE, true)); ref {Double.TYPE, Double, ClassUtils} [710-710],
 assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true)); ref {Boolean.TYPE, Boolean, ClassUtils} [711-711],
 // test short conversions
assertFalse("short -> char", ClassUtils.isAssignable(Short.class, Character.TYPE, true)); ref {Character.TYPE, Character, ClassUtils} [714-714],
 assertFalse("short -> byte", ClassUtils.isAssignable(Short.class, Byte.TYPE, true)); ref {Byte, ClassUtils, Byte.TYPE} [715-715],
 assertTrue("short -> short", ClassUtils.isAssignable(Short.class, Short.TYPE, true)); ref {Short.TYPE, ClassUtils, Short} [716-716],
 assertTrue("short -> int", ClassUtils.isAssignable(Short.class, Integer.TYPE, true)); ref {Integer.TYPE, Integer, ClassUtils} [717-717],
 assertTrue("short -> long", ClassUtils.isAssignable(Short.class, Long.TYPE, true)); ref {Long, ClassUtils, Long.TYPE} [718-718],
 assertTrue("short -> float", ClassUtils.isAssignable(Short.class, Float.TYPE, true)); ref {Float, Float.TYPE, ClassUtils} [719-719],
 assertTrue("short -> double", ClassUtils.isAssignable(Short.class, Double.TYPE, true)); ref {Double.TYPE, Double, ClassUtils} [720-720],
 assertFalse("short -> boolean", ClassUtils.isAssignable(Short.class, Boolean.TYPE, true)); ref {Boolean.TYPE, Boolean, ClassUtils} [721-721],
 // test char conversions
assertTrue("char -> char", ClassUtils.isAssignable(Character.class, Character.TYPE, true)); ref {Character.TYPE, Character, ClassUtils} [724-724],
 assertFalse("char -> byte", ClassUtils.isAssignable(Character.class, Byte.TYPE, true)); ref {Byte, ClassUtils, Byte.TYPE} [725-725],
 assertFalse("char -> short", ClassUtils.isAssignable(Character.class, Short.TYPE, true)); ref {Short.TYPE, ClassUtils, Short} [726-726],
 assertTrue("char -> int", ClassUtils.isAssignable(Character.class, Integer.TYPE, true)); ref {Integer.TYPE, Integer, ClassUtils} [727-727],
 assertTrue("char -> long", ClassUtils.isAssignable(Character.class, Long.TYPE, true)); ref {Long, ClassUtils, Long.TYPE} [728-728],
 assertTrue("char -> float", ClassUtils.isAssignable(Character.class, Float.TYPE, true)); ref {Float, Float.TYPE, ClassUtils} [729-729],
 assertTrue("char -> double", ClassUtils.isAssignable(Character.class, Double.TYPE, true)); ref {Double.TYPE, Double, ClassUtils} [730-730],
 assertFalse("char -> boolean", ClassUtils.isAssignable(Character.class, Boolean.TYPE, true)); ref {Boolean.TYPE, Boolean, ClassUtils} [731-731],
 // test int conversions
assertFalse("int -> char", ClassUtils.isAssignable(Integer.class, Character.TYPE, true)); ref {Character.TYPE, Character, ClassUtils} [734-734],
 assertFalse("int -> byte", ClassUtils.isAssignable(Integer.class, Byte.TYPE, true)); ref {Byte, ClassUtils, Byte.TYPE} [735-735],
 assertFalse("int -> short", ClassUtils.isAssignable(Integer.class, Short.TYPE, true)); ref {Short.TYPE, ClassUtils, Short} [736-736],
 assertTrue("int -> int", ClassUtils.isAssignable(Integer.class, Integer.TYPE, true)); ref {Integer.TYPE, Integer, ClassUtils} [737-737],
 assertTrue("int -> long", ClassUtils.isAssignable(Integer.class, Long.TYPE, true)); ref {Long, ClassUtils, Long.TYPE} [738-738],
 assertTrue("int -> float", ClassUtils.isAssignable(Integer.class, Float.TYPE, true)); ref {Float, Float.TYPE, ClassUtils} [739-739],
 assertTrue("int -> double", ClassUtils.isAssignable(Integer.class, Double.TYPE, true)); ref {Double.TYPE, Double, ClassUtils} [740-740],
 assertFalse("int -> boolean", ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true)); ref {Boolean.TYPE, Boolean, ClassUtils} [741-741],
 // test long conversions
assertFalse("long -> char", ClassUtils.isAssignable(Long.class, Character.TYPE, true)); ref {Character.TYPE, Character, ClassUtils} [744-744],
 assertFalse("long -> byte", ClassUtils.isAssignable(Long.class, Byte.TYPE, true)); ref {Byte, ClassUtils, Byte.TYPE} [745-745],
 assertFalse("long -> short", ClassUtils.isAssignable(Long.class, Short.TYPE, true)); ref {Short.TYPE, ClassUtils, Short} [746-746],
 assertFalse("long -> int", ClassUtils.isAssignable(Long.class, Integer.TYPE, true)); ref {Integer.TYPE, Integer, ClassUtils} [747-747],
 assertTrue("long -> long", ClassUtils.isAssignable(Long.class, Long.TYPE, true)); ref {Long, ClassUtils, Long.TYPE} [748-748],
 assertTrue("long -> float", ClassUtils.isAssignable(Long.class, Float.TYPE, true)); ref {Float, Float.TYPE, ClassUtils} [749-749],
 assertTrue("long -> double", ClassUtils.isAssignable(Long.class, Double.TYPE, true)); ref {Double.TYPE, Double, ClassUtils} [750-750],
 assertFalse("long -> boolean", ClassUtils.isAssignable(Long.class, Boolean.TYPE, true)); ref {Boolean.TYPE, Boolean, ClassUtils} [751-751],
 // test float conversions
assertFalse("float -> char", ClassUtils.isAssignable(Float.class, Character.TYPE, true)); ref {Character.TYPE, Character, ClassUtils} [754-754],
 assertFalse("float -> byte", ClassUtils.isAssignable(Float.class, Byte.TYPE, true)); ref {Byte, ClassUtils, Byte.TYPE} [755-755],
 assertFalse("float -> short", ClassUtils.isAssignable(Float.class, Short.TYPE, true)); ref {Short.TYPE, ClassUtils, Short} [756-756],
 assertFalse("float -> int", ClassUtils.isAssignable(Float.class, Integer.TYPE, true)); ref {Integer.TYPE, Integer, ClassUtils} [757-757],
 assertFalse("float -> long", ClassUtils.isAssignable(Float.class, Long.TYPE, true)); ref {Long, ClassUtils, Long.TYPE} [758-758],
 assertTrue("float -> float", ClassUtils.isAssignable(Float.class, Float.TYPE, true)); ref {Float, Float.TYPE, ClassUtils} [759-759],
 assertTrue("float -> double", ClassUtils.isAssignable(Float.class, Double.TYPE, true)); ref {Double.TYPE, Double, ClassUtils} [760-760],
 assertFalse("float -> boolean", ClassUtils.isAssignable(Float.class, Boolean.TYPE, true)); ref {Boolean.TYPE, Boolean, ClassUtils} [761-761],
 // test double conversions
assertFalse("double -> char", ClassUtils.isAssignable(Double.class, Character.TYPE, true)); ref {Character.TYPE, Character, ClassUtils} [764-764],
 assertFalse("double -> byte", ClassUtils.isAssignable(Double.class, Byte.TYPE, true)); ref {Byte, ClassUtils, Byte.TYPE} [765-765],
 assertFalse("double -> short", ClassUtils.isAssignable(Double.class, Short.TYPE, true)); ref {Short.TYPE, ClassUtils, Short} [766-766],
 assertFalse("double -> int", ClassUtils.isAssignable(Double.class, Integer.TYPE, true)); ref {Integer.TYPE, Integer, ClassUtils} [767-767],
 assertFalse("double -> long", ClassUtils.isAssignable(Double.class, Long.TYPE, true)); ref {Long, ClassUtils, Long.TYPE} [768-768],
 assertFalse("double -> float", ClassUtils.isAssignable(Double.class, Float.TYPE, true)); ref {Float, Float.TYPE, ClassUtils} [769-769],
 assertTrue("double -> double", ClassUtils.isAssignable(Double.class, Double.TYPE, true)); ref {Double.TYPE, Double, ClassUtils} [770-770],
 assertFalse("double -> boolean", ClassUtils.isAssignable(Double.class, Boolean.TYPE, true)); ref {Boolean.TYPE, Boolean, ClassUtils} [771-771],
 // test boolean conversions
assertFalse("boolean -> char", ClassUtils.isAssignable(Boolean.class, Character.TYPE, true)); ref {Character.TYPE, Character, ClassUtils} [774-774],
 assertFalse("boolean -> byte", ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true)); ref {Byte, ClassUtils, Byte.TYPE} [775-775],
 assertFalse("boolean -> short", ClassUtils.isAssignable(Boolean.class, Short.TYPE, true)); ref {Short.TYPE, ClassUtils, Short} [776-776],
 assertFalse("boolean -> int", ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true)); ref {Integer.TYPE, Integer, ClassUtils} [777-777],
 assertFalse("boolean -> long", ClassUtils.isAssignable(Boolean.class, Long.TYPE, true)); ref {Long, ClassUtils, Long.TYPE} [778-778],
 assertFalse("boolean -> float", ClassUtils.isAssignable(Boolean.class, Float.TYPE, true)); ref {Float, Float.TYPE, ClassUtils} [779-779],
 assertFalse("boolean -> double", ClassUtils.isAssignable(Boolean.class, Double.TYPE, true)); ref {Double.TYPE, Double, ClassUtils} [780-780],
 assertTrue("boolean -> boolean", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true)); ref {Boolean.TYPE, Boolean, ClassUtils} [781-781]
[m[m31.08.2022 - 15:15:23.399 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testIsPrimitiveOrWrapper has 21 assertions: 
 // test primitive wrapper classes
assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); ref {ClassUtils} [788-788],
 assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); ref {ClassUtils} [789-789],
 assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); ref {ClassUtils} [790-790],
 assertTrue("Short.class", ClassUtils.isPrimitiveOrWrapper(Short.class)); ref {ClassUtils} [791-791],
 assertTrue("Integer.class", ClassUtils.isPrimitiveOrWrapper(Integer.class)); ref {ClassUtils} [792-792],
 assertTrue("Long.class", ClassUtils.isPrimitiveOrWrapper(Long.class)); ref {ClassUtils} [793-793],
 assertTrue("Double.class", ClassUtils.isPrimitiveOrWrapper(Double.class)); ref {ClassUtils} [794-794],
 assertTrue("Float.class", ClassUtils.isPrimitiveOrWrapper(Float.class)); ref {ClassUtils} [795-795],
 // test primitive classes
assertTrue("boolean", ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE)); ref {Boolean.TYPE, Boolean, ClassUtils} [798-798],
 assertTrue("byte", ClassUtils.isPrimitiveOrWrapper(Byte.TYPE)); ref {Byte, ClassUtils, Byte.TYPE} [799-799],
 assertTrue("char", ClassUtils.isPrimitiveOrWrapper(Character.TYPE)); ref {Character.TYPE, Character, ClassUtils} [800-800],
 assertTrue("short", ClassUtils.isPrimitiveOrWrapper(Short.TYPE)); ref {Short.TYPE, ClassUtils, Short} [801-801],
 assertTrue("int", ClassUtils.isPrimitiveOrWrapper(Integer.TYPE)); ref {Integer.TYPE, Integer, ClassUtils} [802-802],
 assertTrue("long", ClassUtils.isPrimitiveOrWrapper(Long.TYPE)); ref {Long, ClassUtils, Long.TYPE} [803-803],
 assertTrue("double", ClassUtils.isPrimitiveOrWrapper(Double.TYPE)); ref {Double.TYPE, Double, ClassUtils} [804-804],
 assertTrue("float", ClassUtils.isPrimitiveOrWrapper(Float.TYPE)); ref {Float, Float.TYPE, ClassUtils} [805-805],
 assertTrue("Void.TYPE", ClassUtils.isPrimitiveOrWrapper(Void.TYPE)); ref {Void.TYPE, Void, ClassUtils} [806-806],
 // others
assertFalse("null", ClassUtils.isPrimitiveOrWrapper(null)); ref {ClassUtils} [809-809],
 assertFalse("Void.class", ClassUtils.isPrimitiveOrWrapper(Void.class)); ref {ClassUtils} [810-810],
 assertFalse("String.class", ClassUtils.isPrimitiveOrWrapper(String.class)); ref {ClassUtils} [811-811],
 assertFalse("this.getClass()", ClassUtils.isPrimitiveOrWrapper(this.getClass())); ref {ClassUtils} [812-812]
[m[m31.08.2022 - 15:15:23.399 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testIsPrimitiveWrapper has 21 assertions: 
 // test primitive wrapper classes
assertTrue("Boolean.class", ClassUtils.isPrimitiveWrapper(Boolean.class)); ref {ClassUtils} [819-819],
 assertTrue("Byte.class", ClassUtils.isPrimitiveWrapper(Byte.class)); ref {ClassUtils} [820-820],
 assertTrue("Character.class", ClassUtils.isPrimitiveWrapper(Character.class)); ref {ClassUtils} [821-821],
 assertTrue("Short.class", ClassUtils.isPrimitiveWrapper(Short.class)); ref {ClassUtils} [822-822],
 assertTrue("Integer.class", ClassUtils.isPrimitiveWrapper(Integer.class)); ref {ClassUtils} [823-823],
 assertTrue("Long.class", ClassUtils.isPrimitiveWrapper(Long.class)); ref {ClassUtils} [824-824],
 assertTrue("Double.class", ClassUtils.isPrimitiveWrapper(Double.class)); ref {ClassUtils} [825-825],
 assertTrue("Float.class", ClassUtils.isPrimitiveWrapper(Float.class)); ref {ClassUtils} [826-826],
 // test primitive classes
assertFalse("boolean", ClassUtils.isPrimitiveWrapper(Boolean.TYPE)); ref {Boolean.TYPE, Boolean, ClassUtils} [829-829],
 assertFalse("byte", ClassUtils.isPrimitiveWrapper(Byte.TYPE)); ref {Byte, ClassUtils, Byte.TYPE} [830-830],
 assertFalse("char", ClassUtils.isPrimitiveWrapper(Character.TYPE)); ref {Character.TYPE, Character, ClassUtils} [831-831],
 assertFalse("short", ClassUtils.isPrimitiveWrapper(Short.TYPE)); ref {Short.TYPE, ClassUtils, Short} [832-832],
 assertFalse("int", ClassUtils.isPrimitiveWrapper(Integer.TYPE)); ref {Integer.TYPE, Integer, ClassUtils} [833-833],
 assertFalse("long", ClassUtils.isPrimitiveWrapper(Long.TYPE)); ref {Long, ClassUtils, Long.TYPE} [834-834],
 assertFalse("double", ClassUtils.isPrimitiveWrapper(Double.TYPE)); ref {Double.TYPE, Double, ClassUtils} [835-835],
 assertFalse("float", ClassUtils.isPrimitiveWrapper(Float.TYPE)); ref {Float, Float.TYPE, ClassUtils} [836-836],
 // others
assertFalse("null", ClassUtils.isPrimitiveWrapper(null)); ref {ClassUtils} [839-839],
 assertFalse("Void.class", ClassUtils.isPrimitiveWrapper(Void.class)); ref {ClassUtils} [840-840],
 assertFalse("Void.TYPE", ClassUtils.isPrimitiveWrapper(Void.TYPE)); ref {Void.TYPE, Void, ClassUtils} [841-841],
 assertFalse("String.class", ClassUtils.isPrimitiveWrapper(String.class)); ref {ClassUtils} [842-842],
 assertFalse("this.getClass()", ClassUtils.isPrimitiveWrapper(this.getClass())); ref {ClassUtils} [843-843]
[m[m31.08.2022 - 15:15:23.399 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testPrimitiveToWrapper has 12 assertions: 
 // test primitive classes
assertEquals("boolean -> Boolean.class", Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE)); ref {Boolean.TYPE, Boolean, ClassUtils} [850-851],
 assertEquals("byte -> Byte.class", Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE)); ref {Byte, ClassUtils, Byte.TYPE} [852-853],
 assertEquals("char -> Character.class", Character.class, ClassUtils.primitiveToWrapper(Character.TYPE)); ref {Character.TYPE, Character, ClassUtils} [854-855],
 assertEquals("short -> Short.class", Short.class, ClassUtils.primitiveToWrapper(Short.TYPE)); ref {Short.TYPE, ClassUtils, Short} [856-857],
 assertEquals("int -> Integer.class", Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE)); ref {Integer.TYPE, Integer, ClassUtils} [858-859],
 assertEquals("long -> Long.class", Long.class, ClassUtils.primitiveToWrapper(Long.TYPE)); ref {Long, ClassUtils, Long.TYPE} [860-861],
 assertEquals("double -> Double.class", Double.class, ClassUtils.primitiveToWrapper(Double.TYPE)); ref {Double.TYPE, Double, ClassUtils} [862-863],
 assertEquals("float -> Float.class", Float.class, ClassUtils.primitiveToWrapper(Float.TYPE)); ref {Float, Float.TYPE, ClassUtils} [864-865],
 // test a few other classes
assertEquals("String.class -> String.class", String.class, ClassUtils.primitiveToWrapper(String.class)); ref {ClassUtils} [868-869],
 assertEquals("ClassUtils.class -> ClassUtils.class", org.apache.commons.lang3.ClassUtils.class, ClassUtils.primitiveToWrapper(org.apache.commons.lang3.ClassUtils.class)); ref {ClassUtils} [870-872],
 assertEquals("Void.TYPE -> Void.TYPE", Void.TYPE, ClassUtils.primitiveToWrapper(Void.TYPE)); ref {Void.TYPE, Void, ClassUtils} [873-874],
 // test null
assertNull("null -> null", ClassUtils.primitiveToWrapper(null)); ref {ClassUtils} [877-878]
[m[m31.08.2022 - 15:15:23.399 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testPrimitivesToWrappers has 6 assertions: 
 // test null
// assertNull("null -> null", ClassUtils.primitivesToWrappers(null)); // generates warning
// equivalent cast to avoid warning
assertNull("null -> null", ClassUtils.primitivesToWrappers((Class<?>[]) null)); ref {ClassUtils} [885-885],
 // Other possible casts for null
assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers())); ref {ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY, Arrays, ClassUtils} [887-887],
 assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[] { null }, castNull)); ref {castNull, Arrays} [889-889],
 // test empty array is returned unchanged
// TODO this is not documented
assertArrayEquals("empty -> empty", ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY)); ref {ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils} [892-893],
 assertEquals(primitive + " -> " + expectedWrapper, expectedWrapper, wrappers[i]); ref {primitive, wrappers, i, expectedWrapper} [908-908],
 // This used to return the exact same array, but no longer does.
assertNotSame("unmodified", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives)); ref {noPrimitives, ClassUtils} [916-916]
[m[m31.08.2022 - 15:15:23.399 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testWrapperToPrimitive has 2 assertions: 
 assertFalse("Still primitive", wrapperCls.isPrimitive()); ref {wrapperCls} [928-928],
 assertEquals(wrapperCls + " -> " + primitive, primitive, ClassUtils.wrapperToPrimitive(wrapperCls)); ref {primitive, wrapperCls, ClassUtils} [929-930]
[m[m31.08.2022 - 15:15:23.399 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testWrapperToPrimitiveNoWrapper has 1 assertions: 
 assertNull("Wrong result for non wrapper class", ClassUtils.wrapperToPrimitive(String.class)); ref {ClassUtils} [936-936]
[m[m31.08.2022 - 15:15:23.399 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testWrapperToPrimitiveNull has 1 assertions: 
 assertNull("Wrong result for null class", ClassUtils.wrapperToPrimitive(null)); ref {ClassUtils} [941-941]
[m[m31.08.2022 - 15:15:23.399 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testWrappersToPrimitives has 2 assertions: 
 // now test the result
assertEquals("Wrong length of result array", classes.length, primitives.length); ref {primitives, primitives.length, classes.length, classes} [955-955],
 assertEquals(classes[i] + " -> " + expectedPrimitive, expectedPrimitive, primitives[i]); ref {expectedPrimitive, primitives, classes, i} [958-959]
[m[m31.08.2022 - 15:15:23.399 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testWrappersToPrimitivesNull has 3 assertions: 
 // assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives(null)); // generates warning
// equivalent cast
assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives((Class<?>[]) null)); ref {ClassUtils} [966-966],
 // Other possible casts for null
assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.wrappersToPrimitives())); ref {ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY, Arrays, ClassUtils} [968-968],
 assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[] { null }, castNull)); ref {castNull, Arrays} [970-970]
[m[m31.08.2022 - 15:15:23.399 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testWrappersToPrimitivesEmpty has 1 assertions: 
 assertArrayEquals("Wrong result for empty input", empty, ClassUtils.wrappersToPrimitives(empty)); ref {ClassUtils, empty} [976-976]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testGetClassClassNotFound has 3 assertions: 
 assertGetClassThrowsClassNotFound("bool"); ref {} [981-981],
 assertGetClassThrowsClassNotFound("bool[]"); ref {} [982-982],
 assertGetClassThrowsClassNotFound("integer[]"); ref {} [983-983]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testGetClassInvalidArguments has 7 assertions: 
 assertGetClassThrowsNullPointerException(null); ref {} [988-988],
 assertGetClassThrowsClassNotFound("[][][]"); ref {} [989-989],
 assertGetClassThrowsClassNotFound("[[]"); ref {} [990-990],
 assertGetClassThrowsClassNotFound("["); ref {} [991-991],
 assertGetClassThrowsClassNotFound("java.lang.String]["); ref {} [992-992],
 assertGetClassThrowsClassNotFound(".hello.world"); ref {} [993-993],
 assertGetClassThrowsClassNotFound("hello..world"); ref {} [994-994]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testWithInterleavingWhitespace has 4 assertions: 
 assertEquals(int[].class, ClassUtils.getClass(" int [ ] ")); ref {ClassUtils} [999-999],
 assertEquals(long[].class, ClassUtils.getClass("\rlong\t[\n]\r")); ref {ClassUtils} [1000-1000],
 assertEquals(short[].class, ClassUtils.getClass("\tshort                \t\t[]")); ref {ClassUtils} [1001-1001],
 assertEquals(byte[].class, ClassUtils.getClass("byte[\t\t\n\r]   ")); ref {ClassUtils} [1002-1002]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testGetInnerClass has 4 assertions: 
 assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested")); ref {ClassUtils} [1007-1007],
 assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested")); ref {ClassUtils} [1008-1008],
 assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested")); ref {ClassUtils} [1009-1009],
 assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested")); ref {ClassUtils} [1010-1010]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testGetClassByNormalNameArrays has 13 assertions: 
 assertEquals(int[].class, ClassUtils.getClass("int[]")); ref {ClassUtils} [1015-1015],
 assertEquals(long[].class, ClassUtils.getClass("long[]")); ref {ClassUtils} [1016-1016],
 assertEquals(short[].class, ClassUtils.getClass("short[]")); ref {ClassUtils} [1017-1017],
 assertEquals(byte[].class, ClassUtils.getClass("byte[]")); ref {ClassUtils} [1018-1018],
 assertEquals(char[].class, ClassUtils.getClass("char[]")); ref {ClassUtils} [1019-1019],
 assertEquals(float[].class, ClassUtils.getClass("float[]")); ref {ClassUtils} [1020-1020],
 assertEquals(double[].class, ClassUtils.getClass("double[]")); ref {ClassUtils} [1021-1021],
 assertEquals(boolean[].class, ClassUtils.getClass("boolean[]")); ref {ClassUtils} [1022-1022],
 assertEquals(String[].class, ClassUtils.getClass("java.lang.String[]")); ref {ClassUtils} [1023-1023],
 assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("java.util.Map.Entry[]")); ref {ClassUtils} [1024-1024],
 assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("java.util.Map$Entry[]")); ref {ClassUtils} [1025-1025],
 assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("[Ljava.util.Map.Entry;")); ref {ClassUtils} [1026-1026],
 assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("[Ljava.util.Map$Entry;")); ref {ClassUtils} [1027-1027]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testGetClassByNormalNameArrays2D has 9 assertions: 
 assertEquals(int[][].class, ClassUtils.getClass("int[][]")); ref {ClassUtils} [1032-1032],
 assertEquals(long[][].class, ClassUtils.getClass("long[][]")); ref {ClassUtils} [1033-1033],
 assertEquals(short[][].class, ClassUtils.getClass("short[][]")); ref {ClassUtils} [1034-1034],
 assertEquals(byte[][].class, ClassUtils.getClass("byte[][]")); ref {ClassUtils} [1035-1035],
 assertEquals(char[][].class, ClassUtils.getClass("char[][]")); ref {ClassUtils} [1036-1036],
 assertEquals(float[][].class, ClassUtils.getClass("float[][]")); ref {ClassUtils} [1037-1037],
 assertEquals(double[][].class, ClassUtils.getClass("double[][]")); ref {ClassUtils} [1038-1038],
 assertEquals(boolean[][].class, ClassUtils.getClass("boolean[][]")); ref {ClassUtils} [1039-1039],
 assertEquals(String[][].class, ClassUtils.getClass("java.lang.String[][]")); ref {ClassUtils} [1040-1040]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testGetClassWithArrayClasses2D has 9 assertions: 
 assertGetClassReturnsClass(String[][].class); ref {} [1045-1045],
 assertGetClassReturnsClass(int[][].class); ref {} [1046-1046],
 assertGetClassReturnsClass(long[][].class); ref {} [1047-1047],
 assertGetClassReturnsClass(short[][].class); ref {} [1048-1048],
 assertGetClassReturnsClass(byte[][].class); ref {} [1049-1049],
 assertGetClassReturnsClass(char[][].class); ref {} [1050-1050],
 assertGetClassReturnsClass(float[][].class); ref {} [1051-1051],
 assertGetClassReturnsClass(double[][].class); ref {} [1052-1052],
 assertGetClassReturnsClass(boolean[][].class); ref {} [1053-1053]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testGetClassWithArrayClasses has 9 assertions: 
 assertGetClassReturnsClass(String[].class); ref {} [1058-1058],
 assertGetClassReturnsClass(int[].class); ref {} [1059-1059],
 assertGetClassReturnsClass(long[].class); ref {} [1060-1060],
 assertGetClassReturnsClass(short[].class); ref {} [1061-1061],
 assertGetClassReturnsClass(byte[].class); ref {} [1062-1062],
 assertGetClassReturnsClass(char[].class); ref {} [1063-1063],
 assertGetClassReturnsClass(float[].class); ref {} [1064-1064],
 assertGetClassReturnsClass(double[].class); ref {} [1065-1065],
 assertGetClassReturnsClass(boolean[].class); ref {} [1066-1066]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testGetClassRawPrimitives has 8 assertions: 
 assertEquals(int.class, ClassUtils.getClass("int")); ref {ClassUtils} [1071-1071],
 assertEquals(long.class, ClassUtils.getClass("long")); ref {ClassUtils} [1072-1072],
 assertEquals(short.class, ClassUtils.getClass("short")); ref {ClassUtils} [1073-1073],
 assertEquals(byte.class, ClassUtils.getClass("byte")); ref {ClassUtils} [1074-1074],
 assertEquals(char.class, ClassUtils.getClass("char")); ref {ClassUtils} [1075-1075],
 assertEquals(float.class, ClassUtils.getClass("float")); ref {ClassUtils} [1076-1076],
 assertEquals(double.class, ClassUtils.getClass("double")); ref {ClassUtils} [1077-1077],
 assertEquals(boolean.class, ClassUtils.getClass("boolean")); ref {ClassUtils} [1078-1078]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testShowJavaBug has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testGetPublicMethod has 2 assertions: 
 assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers())); ref {Modifier, isEmptyMethod} [1123-1123],
 assertEquals(Object.class.getMethod("toString", new Class[0]), toStringMethod); ref {toStringMethod} [1133-1133]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testToClass_object has 6 assertions: 
 // assertNull(ClassUtils.toClass(null)); // generates warning
// equivalent explicit cast
assertNull(ClassUtils.toClass((Object[]) null)); ref {ClassUtils} [1139-1139],
 // Additional varargs tests
assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass())); ref {ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY, Arrays, ClassUtils} [1142-1142],
 assertTrue("(Object)null -> [null]", Arrays.equals(new Object[] { null }, castNull)); ref {castNull, Arrays} [1144-1144],
 assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY)); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils} [1146-1146],
 assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class }, ClassUtils.toClass(new Object[] { "Test", Integer.valueOf(1), Double.valueOf(99d) }))); ref {Integer, Arrays, Double, ClassUtils} [1148-1149],
 assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class }, ClassUtils.toClass(new Object[] { "Test", null, Double.valueOf(99d) }))); ref {Arrays, Double, ClassUtils} [1151-1152]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getShortCanonicalName_Object has 9 assertions: 
 assertEquals("<null>", ClassUtils.getShortCanonicalName(null, "<null>")); ref {ClassUtils} [1157-1157],
 assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(new ClassUtils(), "<null>")); ref {ClassUtils} [1158-1158],
 assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(new ClassUtils[0], "<null>")); ref {ClassUtils} [1159-1159],
 assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], "<null>")); ref {ClassUtils} [1160-1160],
 assertEquals("int[]", ClassUtils.getShortCanonicalName(new int[0], "<null>")); ref {ClassUtils} [1161-1161],
 assertEquals("int[][]", ClassUtils.getShortCanonicalName(new int[0][0], "<null>")); ref {ClassUtils} [1162-1162],
 assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName(new Object() {
}, "<null>")); ref {ClassUtils} [1166-1166],
 assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName(new Named(), "<null>")); ref {ClassUtils} [1167-1167],
 assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(new Inner(), "<null>")); ref {ClassUtils} [1168-1168]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getShortCanonicalName_Class has 8 assertions: 
 assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(ClassUtils.class)); ref {ClassUtils} [1173-1173],
 assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(ClassUtils[].class)); ref {ClassUtils} [1174-1174],
 assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(ClassUtils[][].class)); ref {ClassUtils} [1175-1175],
 assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class)); ref {ClassUtils} [1176-1176],
 assertEquals("int[][]", ClassUtils.getShortCanonicalName(int[][].class)); ref {ClassUtils} [1177-1177],
 assertEquals("ClassUtilsTest.7", ClassUtils.getShortCanonicalName(new Object() {
}.getClass())); ref {ClassUtils} [1181-1181],
 assertEquals("ClassUtilsTest.6Named", ClassUtils.getShortCanonicalName(Named.class)); ref {ClassUtils} [1182-1182],
 assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(Inner.class)); ref {ClassUtils} [1183-1183]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getShortCanonicalName_String has 12 assertions: 
 assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); ref {ClassUtils} [1188-1188],
 assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); ref {ClassUtils} [1189-1189],
 assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); ref {ClassUtils} [1190-1190],
 assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); ref {ClassUtils} [1191-1191],
 assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); ref {ClassUtils} [1192-1192],
 assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); ref {ClassUtils} [1193-1193],
 assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); ref {ClassUtils} [1194-1194],
 assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); ref {ClassUtils} [1195-1195],
 assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); ref {ClassUtils} [1196-1196],
 // Inner types
assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); ref {ClassUtils} [1199-1199],
 assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); ref {ClassUtils} [1200-1200],
 assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); ref {ClassUtils} [1201-1201]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getPackageCanonicalName_Object has 9 assertions: 
 assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); ref {ClassUtils} [1206-1206],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); ref {ClassUtils} [1207-1207],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); ref {ClassUtils} [1208-1208],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); ref {ClassUtils} [1209-1209],
 assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); ref {ClassUtils} [1210-1210],
 assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); ref {ClassUtils} [1211-1211],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() {
}, "<null>")); ref {ClassUtils} [1215-1215],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>")); ref {ClassUtils} [1216-1216],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>")); ref {ClassUtils} [1217-1217]
[m[m31.08.2022 - 15:15:23.400 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getPackageCanonicalName_Class has 8 assertions: 
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils.class)); ref {ClassUtils} [1222-1222],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils[].class)); ref {ClassUtils} [1223-1223],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils[][].class)); ref {ClassUtils} [1224-1224],
 assertEquals("", ClassUtils.getPackageCanonicalName(int[].class)); ref {ClassUtils} [1225-1225],
 assertEquals("", ClassUtils.getPackageCanonicalName(int[][].class)); ref {ClassUtils} [1226-1226],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() {
}.getClass())); ref {ClassUtils} [1230-1230],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(Named.class)); ref {ClassUtils} [1231-1231],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(Inner.class)); ref {ClassUtils} [1232-1232]
[m[m31.08.2022 - 15:15:23.401 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::test_getPackageCanonicalName_String has 12 assertions: 
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtils")); ref {ClassUtils} [1237-1238],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); ref {ClassUtils} [1239-1240],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); ref {ClassUtils} [1241-1242],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtils[]")); ref {ClassUtils} [1243-1244],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); ref {ClassUtils} [1245-1246],
 assertEquals("", ClassUtils.getPackageCanonicalName("[I")); ref {ClassUtils} [1247-1247],
 assertEquals("", ClassUtils.getPackageCanonicalName("[[I")); ref {ClassUtils} [1248-1248],
 assertEquals("", ClassUtils.getPackageCanonicalName("int[]")); ref {ClassUtils} [1249-1249],
 assertEquals("", ClassUtils.getPackageCanonicalName("int[][]")); ref {ClassUtils} [1250-1250],
 // Inner types
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); ref {ClassUtils} [1253-1253],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); ref {ClassUtils} [1254-1254],
 assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); ref {ClassUtils} [1255-1255]
[m[m31.08.2022 - 15:15:23.401 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testHierarchyIncludingInterfaces has 5 assertions: 
 assertEquals(StringParameterizedChild.class, iter.next()); ref {iter} [1262-1262],
 assertEquals(GenericParent.class, iter.next()); ref {iter} [1263-1263],
 assertEquals(GenericConsumer.class, iter.next()); ref {iter} [1264-1264],
 assertEquals(Object.class, iter.next()); ref {iter} [1265-1265],
 assertFalse(iter.hasNext()); ref {iter} [1266-1266]
[m[m31.08.2022 - 15:15:23.401 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassUtilsTest::testHierarchyExcludingInterfaces has 4 assertions: 
 assertEquals(StringParameterizedChild.class, iter.next()); ref {iter} [1272-1272],
 assertEquals(GenericParent.class, iter.next()); ref {iter} [1273-1273],
 assertEquals(Object.class, iter.next()); ref {iter} [1274-1274],
 assertFalse(iter.hasNext()); ref {iter} [1275-1275]
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.parseTestSuite() - Found 12 test cases
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleTest::testSetArrayStart has 1 assertions: 
 assertEquals("", style.getArrayStart()); ref {style} [40-40]
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleTest::testSetArrayEnd has 1 assertions: 
 assertEquals("", style.getArrayEnd()); ref {style} [47-47]
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleTest::testSetArraySeparator has 1 assertions: 
 assertEquals("", style.getArraySeparator()); ref {style} [54-54]
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleTest::testSetContentStart has 1 assertions: 
 assertEquals("", style.getContentStart()); ref {style} [61-61]
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleTest::testSetContentEnd has 1 assertions: 
 assertEquals("", style.getContentEnd()); ref {style} [68-68]
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleTest::testSetFieldNameValueSeparator has 1 assertions: 
 assertEquals("", style.getFieldNameValueSeparator()); ref {style} [75-75]
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleTest::testSetFieldSeparator has 1 assertions: 
 assertEquals("", style.getFieldSeparator()); ref {style} [82-82]
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleTest::testSetNullText has 1 assertions: 
 assertEquals("", style.getNullText()); ref {style} [89-89]
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleTest::testSetSizeStartText has 1 assertions: 
 assertEquals("", style.getSizeStartText()); ref {style} [96-96]
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleTest::testSetSizeEndText has 1 assertions: 
 assertEquals("", style.getSizeEndText()); ref {style} [103-103]
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleTest::testSetSummaryObjectStartText has 1 assertions: 
 assertEquals("", style.getSummaryObjectStartText()); ref {style} [110-110]
[m[m31.08.2022 - 15:15:23.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ToStringStyleTest::testSetSummaryObjectEndText has 1 assertions: 
 assertEquals("", style.getSummaryObjectEndText()); ref {style} [117-117]
[m[m31.08.2022 - 15:15:23.406 [INFO ] ParsingStrategy.parseTestSuite() - Found 40 test cases
[m[m31.08.2022 - 15:15:23.406 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceSimple has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.406 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceSolo has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.406 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceNoVariables has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.406 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.406 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceEmpty has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.406 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceChangedMap has 1 assertions: 
 assertEquals("The quick brown fox jumps over the moon.", sub.replace("The ${animal} jumps over the ${target}.")); ref {sub} [105-105]
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceUnknownKey has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceAdjacentAtStart has 1 assertions: 
 assertEquals("GBP12.50 charged", sub.replace("${code}${amount} charged")); ref {sub} [125-125]
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceAdjacentAtEnd has 1 assertions: 
 assertEquals("Amount is GBP12.50", sub.replace("Amount is ${code}${amount}")); ref {sub} [136-136]
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceRecursive has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceEscaping has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceSoloEscaping has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceComplexEscaping has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceNoPrefixNoSuffix has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceIncompletePrefix has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplacePrefixNoSuffix has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceNoPrefixSuffix has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceEmptyKeys has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceToIdentical has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testCyclicReplacement has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceWeirdPattens has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplacePartialString_noReplace has 1 assertions: 
 assertEquals("${animal} jumps", sub.replace("The ${animal} jumps over the ${target}.", 4, 15)); ref {sub} [298-298]
[m[m31.08.2022 - 15:15:23.407 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceInVariable has 3 assertions: 
 assertEquals("Wrong result (1)", "The mouse jumps over the lazy dog.", sub.replace("The ${animal.${species}} jumps over the ${target}.")); ref {sub} [311-314],
 assertEquals("Wrong result (2)", "The fox jumps over the lazy dog.", sub.replace("The ${animal.${species}} jumps over the ${target}.")); ref {sub} [316-319],
 assertEquals("Wrong result (3)", "The fox jumps over the lazy dog.", sub.replace("The fox jumps over the lazy dog.")); ref {sub} [320-323]
[m[m31.08.2022 - 15:15:23.408 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceInVariableDisabled has 2 assertions: 
 assertEquals("Wrong result (1)", "The ${animal.${species}} jumps over the lazy dog.", sub.replace("The ${animal.${species}} jumps over the ${target}.")); ref {sub} [335-338],
 assertEquals("Wrong result (2)", "The ${animal.${species:-1}} jumps over the lazy dog.", sub.replace("The ${animal.${species:-1}} jumps over the ${target}.")); ref {sub} [339-342]
[m[m31.08.2022 - 15:15:23.408 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testReplaceInVariableRecursive has 2 assertions: 
 assertEquals("Wrong result (1)", "The white mouse jumps over the lazy dog.", sub.replace("The ${animal.${species.${color}}} jumps over the ${target}.")); ref {sub} [357-360],
 assertEquals("Wrong result (2)", "The brown fox jumps over the lazy dog.", sub.replace("The brown}} jumps over the ${target}.")); ref {sub} [361-364]
[m[m31.08.2022 - 15:15:23.408 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testDefaultValueDelimiters has 6 assertions: 
 assertEquals("The fox jumps over the lazy dog. 1234567890.", sub.replace("The ${animal} jumps over the lazy ${target}. 1234567890.")); ref {sub} [374-375],
 assertEquals("The fox jumps over the lazy dog. 1234567890.", sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number?:1234567890}.")); ref {sub} [378-379],
 assertEquals("The fox jumps over the lazy dog. 1234567890.", sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number||1234567890}.")); ref {sub} [382-383],
 assertEquals("The fox jumps over the lazy dog. 1234567890.", sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}.")); ref {sub} [386-387],
 assertEquals("The fox jumps over the lazy dog. ${undefined.number!1234567890}.", sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}.")); ref {sub} [391-392],
 assertEquals("The fox jumps over the lazy dog. ${undefined.number!1234567890}.", sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}.")); ref {sub} [396-397]
[m[m31.08.2022 - 15:15:23.410 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testResolveVariable has 6 assertions: 
 final StrSubstitutor sub = new StrSubstitutor(map) {

    @Override
    protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
        assertEquals("name", variableName);
        assertSame(builder, buf);
        assertEquals(3, startPos);
        assertEquals(10, endPos);
        return "jakarta";
    }
}; ref {buf, variableName, builder, map, startPos, endPos} [409-418],
 assertEquals("name", variableName); ref {variableName} [412-412],
 assertSame(builder, buf); ref {buf, builder} [413-413],
 assertEquals(3, startPos); ref {startPos} [414-414],
 assertEquals(10, endPos); ref {endPos} [415-415],
 assertEquals("Hi jakarta!", builder.toString()); ref {builder} [420-420]
[m[m31.08.2022 - 15:15:23.410 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testConstructorNoArgs has 1 assertions: 
 assertEquals("Hi ${name}", sub.replace("Hi ${name}")); ref {sub} [430-430]
[m[m31.08.2022 - 15:15:23.410 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testConstructorMapPrefixSuffix has 1 assertions: 
 assertEquals("Hi < commons", sub.replace("Hi $< <name>")); ref {sub} [441-441]
[m[m31.08.2022 - 15:15:23.410 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testConstructorMapFull has 2 assertions: 
 assertEquals("Hi < commons", sub.replace("Hi !< <name>")); ref {sub} [452-452],
 assertEquals("Hi < commons", sub.replace("Hi !< <name2||commons>")); ref {sub} [454-454]
[m[m31.08.2022 - 15:15:23.410 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testGetSetEscape has 2 assertions: 
 assertEquals('$', sub.getEscapeChar()); ref {sub} [464-464],
 assertEquals('<', sub.getEscapeChar()); ref {sub} [466-466]
[m[m31.08.2022 - 15:15:23.410 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testGetSetPrefix has 6 assertions: 
 assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); ref {sub} [475-475],
 assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher); ref {sub} [477-477],
 assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); ref {sub} [480-480],
 assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); ref {sub} [487-487],
 assertSame(matcher, sub.getVariablePrefixMatcher()); ref {sub, matcher} [491-491],
 assertSame(matcher, sub.getVariablePrefixMatcher()); ref {sub, matcher} [498-498]
[m[m31.08.2022 - 15:15:23.410 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testGetSetSuffix has 6 assertions: 
 assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); ref {sub} [507-507],
 assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher); ref {sub} [509-509],
 assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); ref {sub} [512-512],
 assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); ref {sub} [519-519],
 assertSame(matcher, sub.getVariableSuffixMatcher()); ref {sub, matcher} [523-523],
 assertSame(matcher, sub.getVariableSuffixMatcher()); ref {sub, matcher} [530-530]
[m[m31.08.2022 - 15:15:23.410 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testGetSetValueDelimiter has 6 assertions: 
 assertTrue(sub.getValueDelimiterMatcher() instanceof StrMatcher.StringMatcher); ref {sub} [539-539],
 assertTrue(sub.getValueDelimiterMatcher() instanceof StrMatcher.CharMatcher); ref {sub} [541-541],
 assertTrue(sub.getValueDelimiterMatcher() instanceof StrMatcher.StringMatcher); ref {sub} [544-544],
 assertNull(sub.getValueDelimiterMatcher()); ref {sub} [546-546],
 assertSame(matcher, sub.getValueDelimiterMatcher()); ref {sub, matcher} [550-550],
 assertNull(sub.getValueDelimiterMatcher()); ref {sub} [552-552]
[m[m31.08.2022 - 15:15:23.410 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testStaticReplace has 1 assertions: 
 assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); ref {StrSubstitutor, map} [563-563]
[m[m31.08.2022 - 15:15:23.410 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testStaticReplacePrefixSuffix has 1 assertions: 
 assertEquals("Hi commons!", StrSubstitutor.replace("Hi <name>!", map, "<", ">")); ref {StrSubstitutor, map} [573-573]
[m[m31.08.2022 - 15:15:23.410 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testStaticReplaceSystemProperties has 1 assertions: 
 assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties("Hi ${user.name}, you are " + "working with ${os.name}, your home " + "directory is ${user.home}.")); ref {StrSubstitutor, buf} [587-589]
[m[m31.08.2022 - 15:15:23.411 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testLANG1055 has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [601-601]
[m[m31.08.2022 - 15:15:23.411 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testSubstituteDefaultProperties has 1 assertions: 
 assertEquals("It works!", StrSubstitutor.replace(org, props)); ref {StrSubstitutor, org, props} [615-615]
[m[m31.08.2022 - 15:15:23.411 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrSubstitutorTest::testSamePrefixAndSuffix has 2 assertions: 
 assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); ref {StrSubstitutor, map} [624-624],
 assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); ref {StrSubstitutor, map} [625-625]
[m[m31.08.2022 - 15:15:23.412 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:23.412 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.SimpleToStringStyleTest::testBlank has 1 assertions: 
 assertEquals("", new ToStringBuilder(base).toString()); ref {base} [52-52]
[m[m31.08.2022 - 15:15:23.413 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.SimpleToStringStyleTest::testAppendSuper has 5 assertions: 
 assertEquals("", new ToStringBuilder(base).appendSuper("").toString()); ref {base} [57-57],
 assertEquals("<null>", new ToStringBuilder(base).appendSuper("<null>").toString()); ref {base} [58-58],
 assertEquals("hello", new ToStringBuilder(base).appendSuper("").append("a", "hello").toString()); ref {base} [60-60],
 assertEquals("<null>,hello", new ToStringBuilder(base).appendSuper("<null>").append("a", "hello").toString()); ref {base} [61-61],
 assertEquals("hello", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); ref {base} [62-62]
[m[m31.08.2022 - 15:15:23.413 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.SimpleToStringStyleTest::testObject has 12 assertions: 
 assertEquals("<null>", new ToStringBuilder(base).append((Object) null).toString()); ref {base} [69-69],
 assertEquals("3", new ToStringBuilder(base).append(i3).toString()); ref {i3, base} [70-70],
 assertEquals("<null>", new ToStringBuilder(base).append("a", (Object) null).toString()); ref {base} [71-71],
 assertEquals("3", new ToStringBuilder(base).append("a", i3).toString()); ref {i3, base} [72-72],
 assertEquals("3,4", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); ref {i3, i4, base} [73-73],
 assertEquals("<Integer>", new ToStringBuilder(base).append("a", i3, false).toString()); ref {i3, base} [74-74],
 assertEquals("<size=0>", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); ref {base} [75-75],
 assertEquals("[]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); ref {base} [76-76],
 assertEquals("<size=0>", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); ref {base} [77-77],
 assertEquals("{}", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); ref {base} [78-78],
 assertEquals("<size=0>", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); ref {base} [79-79],
 assertEquals("{}", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); ref {base} [80-80]
[m[m31.08.2022 - 15:15:23.413 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.SimpleToStringStyleTest::testPerson has 1 assertions: 
 assertEquals("Jane Q. Public,47,false", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); ref {p, p.age, p.smoker, p.name} [89-89]
[m[m31.08.2022 - 15:15:23.413 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.SimpleToStringStyleTest::testLong has 3 assertions: 
 assertEquals("3", new ToStringBuilder(base).append(3L).toString()); ref {base} [94-94],
 assertEquals("3", new ToStringBuilder(base).append("a", 3L).toString()); ref {base} [95-95],
 assertEquals("3,4", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); ref {base} [96-96]
[m[m31.08.2022 - 15:15:23.413 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.SimpleToStringStyleTest::testObjectArray has 4 assertions: 
 assertEquals("{<null>,5,{3,6}}", new ToStringBuilder(base).append(array).toString()); ref {array, base} [102-102],
 assertEquals("{<null>,5,{3,6}}", new ToStringBuilder(base).append((Object) array).toString()); ref {array, base} [103-103],
 assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); ref {array, base} [105-105],
 assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); ref {array, base} [106-106]
[m[m31.08.2022 - 15:15:23.413 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.SimpleToStringStyleTest::testLongArray has 4 assertions: 
 assertEquals("{1,2,-3,4}", new ToStringBuilder(base).append(array).toString()); ref {array, base} [112-112],
 assertEquals("{1,2,-3,4}", new ToStringBuilder(base).append((Object) array).toString()); ref {array, base} [113-113],
 assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); ref {array, base} [115-115],
 assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); ref {array, base} [116-116]
[m[m31.08.2022 - 15:15:23.413 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.SimpleToStringStyleTest::testLongArrayArray has 4 assertions: 
 assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); ref {array, base} [122-122],
 assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); ref {array, base} [123-123],
 assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); ref {array, base} [125-125],
 assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); ref {array, base} [126-126]
[m[m31.08.2022 - 15:15:23.413 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.416 [INFO ] ParsingStrategy.parseTestSuite() - Found 10 test cases
[m[m31.08.2022 - 15:15:23.416 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateFormatUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new DateFormatUtils()); ref {} [39-39],
 assertEquals(1, cons.length); ref {cons.length, cons} [41-41],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [42-42],
 assertTrue(Modifier.isPublic(DateFormatUtils.class.getModifiers())); ref {Modifier} [43-43],
 assertFalse(Modifier.isFinal(DateFormatUtils.class.getModifiers())); ref {Modifier} [44-44]
[m[m31.08.2022 - 15:15:23.416 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateFormatUtilsTest::testFormat has 4 assertions: 
 assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); ref {c, DateFormatUtils, buffer} [62-62],
 assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH")); ref {c, DateFormatUtils, buffer} [64-64],
 assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); ref {Locale.US, Locale, c, DateFormatUtils, buffer} [66-66],
 assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH", Locale.US)); ref {Locale.US, Locale, c, DateFormatUtils, buffer} [68-68]
[m[m31.08.2022 - 15:15:23.416 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateFormatUtilsTest::testFormatCalendar has 4 assertions: 
 assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); ref {c, DateFormatUtils, buffer} [86-86],
 assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); ref {c, DateFormatUtils, buffer} [88-88],
 assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); ref {Locale.US, Locale, c, DateFormatUtils, buffer} [90-90],
 assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); ref {Locale.US, Locale, c, DateFormatUtils, buffer} [92-92]
[m[m31.08.2022 - 15:15:23.416 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateFormatUtilsTest::testFormatUTC has 4 assertions: 
 assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); ref {c, DateFormatUtils.ISO_DATETIME_FORMAT, DateFormatUtils} [99-99],
 assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); ref {c, DateFormatUtils.ISO_DATETIME_FORMAT, DateFormatUtils} [101-101],
 assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); ref {Locale.US, Locale, c, DateFormatUtils.ISO_DATETIME_FORMAT, DateFormatUtils} [103-103],
 assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); ref {Locale.US, Locale, c, DateFormatUtils.ISO_DATETIME_FORMAT, DateFormatUtils} [105-105]
[m[m31.08.2022 - 15:15:23.416 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateFormatUtilsTest::testDateTimeISO has 8 assertions: 
 assertEquals("2002-02-23T09:11:12", text); ref {text} [115-115],
 assertEquals("2002-02-23T09:11:12", text); ref {text} [118-118],
 assertEquals("2002-02-23T09:11:12", text); ref {text} [120-120],
 assertEquals("2002-02-23T09:11:12-03:00", text); ref {text} [124-124],
 assertEquals("2002-02-23T09:11:12-03:00", text); ref {text} [127-127],
 assertEquals("2002-02-23T09:11:12-03:00", text); ref {text} [129-129],
 assertEquals("2002-02-23T09:11:12Z", text); ref {text} [135-135],
 assertEquals(utcCal.getTime(), date); ref {date, utcCal} [137-137]
[m[m31.08.2022 - 15:15:23.416 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateFormatUtilsTest::testDateISO has 6 assertions: 
 assertEquals("2002-02-23", text); ref {text} [147-147],
 assertEquals("2002-02-23", text); ref {text} [150-150],
 assertEquals("2002-02-23", text); ref {text} [152-152],
 assertEquals("2002-02-23-03:00", text); ref {text} [156-156],
 assertEquals("2002-02-23-03:00", text); ref {text} [159-159],
 assertEquals("2002-02-23-03:00", text); ref {text} [161-161]
[m[m31.08.2022 - 15:15:23.416 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateFormatUtilsTest::testTimeISO has 6 assertions: 
 assertEquals("T10:11:12", text); ref {text} [171-171],
 assertEquals("T10:11:12", text); ref {text} [174-174],
 assertEquals("T10:11:12", text); ref {text} [176-176],
 assertEquals("T10:11:12-03:00", text); ref {text} [180-180],
 assertEquals("T10:11:12-03:00", text); ref {text} [183-183],
 assertEquals("T10:11:12-03:00", text); ref {text} [185-185]
[m[m31.08.2022 - 15:15:23.416 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateFormatUtilsTest::testTimeNoTISO has 6 assertions: 
 assertEquals("10:11:12", text); ref {text} [195-195],
 assertEquals("10:11:12", text); ref {text} [198-198],
 assertEquals("10:11:12", text); ref {text} [200-200],
 assertEquals("10:11:12-03:00", text); ref {text} [204-204],
 assertEquals("10:11:12-03:00", text); ref {text} [207-207],
 assertEquals("10:11:12-03:00", text); ref {text} [209-209]
[m[m31.08.2022 - 15:15:23.416 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateFormatUtilsTest::testSMTP has 4 assertions: 
 assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); ref {text} [220-220],
 assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); ref {text} [224-224],
 assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); ref {text} [226-226],
 assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); ref {text} [232-232]
[m[m31.08.2022 - 15:15:23.416 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateFormatUtilsTest::testLANG1000 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.417 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m31.08.2022 - 15:15:23.417 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemoverTest::testValidCharacters has 3 assertions: 
 assertEquals(false, subject.translate(0xd7ff, writer)); ref {subject, writer} [36-36],
 assertEquals(false, subject.translate(0xe000, writer)); ref {subject, writer} [37-37],
 assertEquals(0, writer.size()); ref {writer} [38-38]
[m[m31.08.2022 - 15:15:23.417 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemoverTest::testInvalidCharacters has 3 assertions: 
 assertEquals(true, subject.translate(0xd800, writer)); ref {subject, writer} [43-43],
 assertEquals(true, subject.translate(0xdfff, writer)); ref {subject, writer} [44-44],
 assertEquals(0, writer.size()); ref {writer} [45-45]
[m[m31.08.2022 - 15:15:23.417 [INFO ] ParsingStrategy.parseTestSuite() - Found 5 test cases
[m[m31.08.2022 - 15:15:23.417 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrLookupTest::testNoneLookup has 3 assertions: 
 assertEquals(null, StrLookup.noneLookup().lookup(null)); ref {StrLookup} [38-38],
 assertEquals(null, StrLookup.noneLookup().lookup("")); ref {StrLookup} [39-39],
 assertEquals(null, StrLookup.noneLookup().lookup("any")); ref {StrLookup} [40-40]
[m[m31.08.2022 - 15:15:23.418 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrLookupTest::testSystemProperiesLookup has 3 assertions: 
 assertEquals(System.getProperty("os.name"), StrLookup.systemPropertiesLookup().lookup("os.name")); ref {StrLookup, System} [45-45],
 assertEquals(null, StrLookup.systemPropertiesLookup().lookup("")); ref {StrLookup} [46-46],
 assertEquals(null, StrLookup.systemPropertiesLookup().lookup("other")); ref {StrLookup} [47-47]
[m[m31.08.2022 - 15:15:23.418 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrLookupTest::testSystemPropertiesLookupNotSingleton has 3 assertions: 
 assertEquals(originalOsName, properties1.lookup(osName)); ref {originalOsName, properties1, osName} [62-62],
 assertEquals(originalOsName, properties1.lookup(osName)); ref {originalOsName, properties1, osName} [68-68],
 assertEquals(differentOsName, properties2.lookup(osName)); ref {properties2, differentOsName, osName} [69-69]
[m[m31.08.2022 - 15:15:23.418 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrLookupTest::testMapLookup has 5 assertions: 
 assertEquals("value", StrLookup.mapLookup(map).lookup("key")); ref {StrLookup, map} [77-77],
 assertEquals("2", StrLookup.mapLookup(map).lookup("number")); ref {StrLookup, map} [78-78],
 assertEquals(null, StrLookup.mapLookup(map).lookup(null)); ref {StrLookup, map} [79-79],
 assertEquals(null, StrLookup.mapLookup(map).lookup("")); ref {StrLookup, map} [80-80],
 assertEquals(null, StrLookup.mapLookup(map).lookup("other")); ref {StrLookup, map} [81-81]
[m[m31.08.2022 - 15:15:23.418 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrLookupTest::testMapLookup_nullMap has 3 assertions: 
 assertEquals(null, StrLookup.mapLookup(map).lookup(null)); ref {StrLookup, map} [87-87],
 assertEquals(null, StrLookup.mapLookup(map).lookup("")); ref {StrLookup, map} [88-88],
 assertEquals(null, StrLookup.mapLookup(map).lookup("any")); ref {StrLookup, map} [89-89]
[m[m31.08.2022 - 15:15:23.418 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 15:15:23.418 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ReflectionToStringBuilderMutateInspectConcurrencyTest::testConcurrency has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.418 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.418 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.426 [INFO ] ParsingStrategy.parseTestSuite() - Found 55 test cases
[m[m31.08.2022 - 15:15:23.426 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::test1 has 2 assertions: 
 assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); ref {expected.length, expected, ArrayUtils, tokens, tokens.length} [60-60],
 assertEquals("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", expected[i], tokens[i]); ref {expected, i, tokens} [62-63]
[m[m31.08.2022 - 15:15:23.426 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::test2 has 2 assertions: 
 assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); ref {expected.length, expected, ArrayUtils, tokens, tokens.length} [81-81],
 assertEquals("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", expected[i], tokens[i]); ref {expected, i, tokens} [83-84]
[m[m31.08.2022 - 15:15:23.426 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::test3 has 2 assertions: 
 assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); ref {expected.length, expected, ArrayUtils, tokens, tokens.length} [102-102],
 assertEquals("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", expected[i], tokens[i]); ref {expected, i, tokens} [104-105]
[m[m31.08.2022 - 15:15:23.426 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::test4 has 2 assertions: 
 assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); ref {expected.length, expected, ArrayUtils, tokens, tokens.length} [123-123],
 assertEquals("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", expected[i], tokens[i]); ref {expected, i, tokens} [125-126]
[m[m31.08.2022 - 15:15:23.426 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::test5 has 2 assertions: 
 assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); ref {expected.length, expected, ArrayUtils, tokens, tokens.length} [145-145],
 assertEquals("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", expected[i], tokens[i]); ref {expected, i, tokens} [147-148]
[m[m31.08.2022 - 15:15:23.426 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::test6 has 3 assertions: 
 assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); ref {expected.length, expected, ArrayUtils, tokens, tokens.length} [179-179],
 assertTrue("could not cycle through entire token list" + " using the 'hasNext' and 'next' methods", nextCount == expected.length); ref {expected.length, expected, nextCount} [181-182],
 assertTrue("could not cycle through entire token list" + " using the 'hasPrevious' and 'previous' methods", prevCount == expected.length); ref {prevCount, expected.length, expected} [184-185]
[m[m31.08.2022 - 15:15:23.426 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::test7 has 2 assertions: 
 assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); ref {expected.length, expected, ArrayUtils, tokens, tokens.length} [202-202],
 assertEquals("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", expected[i], tokens[i]); ref {expected, i, tokens} [204-205]
[m[m31.08.2022 - 15:15:23.426 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::test8 has 2 assertions: 
 assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); ref {expected.length, expected, ArrayUtils, tokens, tokens.length} [223-223],
 assertEquals("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", expected[i], tokens[i]); ref {expected, i, tokens} [225-226]
[m[m31.08.2022 - 15:15:23.426 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasic1 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [235-235],
 assertEquals("b", tok.next()); ref {tok} [236-236],
 assertEquals("c", tok.next()); ref {tok} [237-237],
 assertFalse(tok.hasNext()); ref {tok} [238-238]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasic2 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [245-245],
 assertEquals("b", tok.next()); ref {tok} [246-246],
 assertEquals("c", tok.next()); ref {tok} [247-247],
 assertFalse(tok.hasNext()); ref {tok} [248-248]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasic3 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [255-255],
 assertEquals("b\u0001", tok.next()); ref {tok} [256-256],
 assertEquals("c", tok.next()); ref {tok} [257-257],
 assertFalse(tok.hasNext()); ref {tok} [258-258]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasic4 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [265-265],
 assertEquals("\"b\"", tok.next()); ref {tok} [266-266],
 assertEquals("c", tok.next()); ref {tok} [267-267],
 assertFalse(tok.hasNext()); ref {tok} [268-268]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasic5 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [275-275],
 assertEquals("b'", tok.next()); ref {tok} [276-276],
 assertEquals("c", tok.next()); ref {tok} [277-277],
 assertFalse(tok.hasNext()); ref {tok} [278-278]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicDelim1 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [285-285],
 assertEquals("b", tok.next()); ref {tok} [286-286],
 assertEquals("c", tok.next()); ref {tok} [287-287],
 assertFalse(tok.hasNext()); ref {tok} [288-288]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicDelim2 has 2 assertions: 
 assertEquals("a:b:c", tok.next()); ref {tok} [295-295],
 assertFalse(tok.hasNext()); ref {tok} [296-296]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicEmpty1 has 5 assertions: 
 assertEquals("a", tok.next()); ref {tok} [304-304],
 assertEquals("", tok.next()); ref {tok} [305-305],
 assertEquals("b", tok.next()); ref {tok} [306-306],
 assertEquals("c", tok.next()); ref {tok} [307-307],
 assertFalse(tok.hasNext()); ref {tok} [308-308]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicEmpty2 has 5 assertions: 
 assertEquals("a", tok.next()); ref {tok} [317-317],
 assertEquals(null, tok.next()); ref {tok} [318-318],
 assertEquals("b", tok.next()); ref {tok} [319-319],
 assertEquals("c", tok.next()); ref {tok} [320-320],
 assertFalse(tok.hasNext()); ref {tok} [321-321]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicQuoted1 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [328-328],
 assertEquals("b", tok.next()); ref {tok} [329-329],
 assertEquals("c", tok.next()); ref {tok} [330-330],
 assertFalse(tok.hasNext()); ref {tok} [331-331]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicQuoted2 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [340-340],
 assertEquals("b", tok.next()); ref {tok} [341-341],
 assertEquals(null, tok.next()); ref {tok} [342-342],
 assertFalse(tok.hasNext()); ref {tok} [343-343]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicQuoted3 has 3 assertions: 
 assertEquals("a", tok.next()); ref {tok} [352-352],
 assertEquals("b'c", tok.next()); ref {tok} [353-353],
 assertFalse(tok.hasNext()); ref {tok} [354-354]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicQuoted4 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [364-364],
 assertEquals("b c", tok.next()); ref {tok} [365-365],
 assertEquals("d", tok.next()); ref {tok} [366-366],
 assertFalse(tok.hasNext()); ref {tok} [367-367]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicQuoted5 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [377-377],
 assertEquals("bxc", tok.next()); ref {tok} [378-378],
 assertEquals("d", tok.next()); ref {tok} [379-379],
 assertFalse(tok.hasNext()); ref {tok} [380-380]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicQuoted6 has 3 assertions: 
 assertEquals("a", tok.next()); ref {tok} [388-388],
 assertEquals("b\"c:d", tok.next()); ref {tok} [389-389],
 assertFalse(tok.hasNext()); ref {tok} [390-390]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicQuoted7 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [398-398],
 assertEquals("There's a reason here", tok.next()); ref {tok} [399-399],
 assertEquals("b", tok.next()); ref {tok} [400-400],
 assertFalse(tok.hasNext()); ref {tok} [401-401]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicQuotedTrimmed1 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [411-411],
 assertEquals("b", tok.next()); ref {tok} [412-412],
 assertEquals(null, tok.next()); ref {tok} [413-413],
 assertFalse(tok.hasNext()); ref {tok} [414-414]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicTrimmed1 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [424-424],
 assertEquals("b", tok.next()); ref {tok} [425-425],
 assertEquals(null, tok.next()); ref {tok} [426-426],
 assertFalse(tok.hasNext()); ref {tok} [427-427]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicTrimmed2 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [437-437],
 assertEquals("b", tok.next()); ref {tok} [438-438],
 assertEquals(null, tok.next()); ref {tok} [439-439],
 assertFalse(tok.hasNext()); ref {tok} [440-440]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicIgnoreTrimmed1 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [451-451],
 assertEquals("bc", tok.next()); ref {tok} [452-452],
 assertEquals(null, tok.next()); ref {tok} [453-453],
 assertFalse(tok.hasNext()); ref {tok} [454-454]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicIgnoreTrimmed2 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [465-465],
 assertEquals("bc", tok.next()); ref {tok} [466-466],
 assertEquals(null, tok.next()); ref {tok} [467-467],
 assertFalse(tok.hasNext()); ref {tok} [468-468]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicIgnoreTrimmed3 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [478-478],
 assertEquals("  bc  ", tok.next()); ref {tok} [479-479],
 assertEquals("  ", tok.next()); ref {tok} [480-480],
 assertFalse(tok.hasNext()); ref {tok} [481-481]
[m[m31.08.2022 - 15:15:23.427 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testBasicIgnoreTrimmed4 has 4 assertions: 
 assertEquals("a", tok.next()); ref {tok} [492-492],
 assertEquals("bIGNOREcd", tok.next()); ref {tok} [493-493],
 assertEquals(null, tok.next()); ref {tok} [494-494],
 assertFalse(tok.hasNext()); ref {tok} [495-495]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testListArray has 2 assertions: 
 assertEquals(Arrays.asList(array), list); ref {array, Arrays, list} [506-506],
 assertEquals(3, list.size()); ref {list} [507-507]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testCSVEmpty has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testCSVSimple has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testCSVSimpleNeedsTrim has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testGetContent has 3 assertions: 
 assertEquals(input, tok.getContent()); ref {input, tok} [550-550],
 assertEquals(input, tok.getContent()); ref {input, tok} [553-553],
 assertEquals(null, tok.getContent()); ref {tok} [556-556]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testChaining has 13 assertions: 
 assertEquals(tok, tok.reset()); ref {tok} [563-563],
 assertEquals(tok, tok.reset("")); ref {tok} [564-564],
 assertEquals(tok, tok.reset(new char[0])); ref {tok} [565-565],
 assertEquals(tok, tok.setDelimiterChar(' ')); ref {tok} [566-566],
 assertEquals(tok, tok.setDelimiterString(" ")); ref {tok} [567-567],
 assertEquals(tok, tok.setDelimiterMatcher(null)); ref {tok} [568-568],
 assertEquals(tok, tok.setQuoteChar(' ')); ref {tok} [569-569],
 assertEquals(tok, tok.setQuoteMatcher(null)); ref {tok} [570-570],
 assertEquals(tok, tok.setIgnoredChar(' ')); ref {tok} [571-571],
 assertEquals(tok, tok.setIgnoredMatcher(null)); ref {tok} [572-572],
 assertEquals(tok, tok.setTrimmerMatcher(null)); ref {tok} [573-573],
 assertEquals(tok, tok.setEmptyTokenAsNull(false)); ref {tok} [574-574],
 assertEquals(tok, tok.setIgnoreEmptyTokens(false)); ref {tok} [575-575]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testCloneNotSupportedException has 1 assertions: 
 assertNull(notCloned); ref {notCloned} [590-590]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testCloneNull has 4 assertions: 
 // Start sanity check
assertEquals(null, tokenizer.nextToken()); ref {tokenizer} [597-597],
 assertEquals(null, tokenizer.nextToken()); ref {tokenizer} [599-599],
 assertEquals(null, tokenizer.nextToken()); ref {tokenizer} [603-603],
 assertEquals(null, clonedTokenizer.nextToken()); ref {clonedTokenizer} [604-604]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testCloneReset has 4 assertions: 
 // Start sanity check
assertEquals("a", tokenizer.nextToken()); ref {tokenizer} [612-612],
 assertEquals("a", tokenizer.nextToken()); ref {tokenizer} [614-614],
 assertEquals("b", tokenizer.nextToken()); ref {tokenizer} [619-619],
 assertEquals("a", clonedTokenizer.nextToken()); ref {clonedTokenizer} [620-620]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testConstructor_String has 5 assertions: 
 assertEquals("a", tok.next()); ref {tok} [627-627],
 assertEquals("b", tok.next()); ref {tok} [628-628],
 assertFalse(tok.hasNext()); ref {tok} [629-629],
 assertFalse(tok.hasNext()); ref {tok} [632-632],
 assertFalse(tok.hasNext()); ref {tok} [635-635]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testConstructor_String_char has 6 assertions: 
 assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); ref {tok} [642-642],
 assertEquals("a", tok.next()); ref {tok} [643-643],
 assertEquals("b", tok.next()); ref {tok} [644-644],
 assertFalse(tok.hasNext()); ref {tok} [645-645],
 assertFalse(tok.hasNext()); ref {tok} [648-648],
 assertFalse(tok.hasNext()); ref {tok} [651-651]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testConstructor_String_char_char has 7 assertions: 
 assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); ref {tok} [658-658],
 assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); ref {tok} [659-659],
 assertEquals("a", tok.next()); ref {tok} [660-660],
 assertEquals("b", tok.next()); ref {tok} [661-661],
 assertFalse(tok.hasNext()); ref {tok} [662-662],
 assertFalse(tok.hasNext()); ref {tok} [665-665],
 assertFalse(tok.hasNext()); ref {tok} [668-668]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testConstructor_charArray has 5 assertions: 
 assertEquals("a", tok.next()); ref {tok} [675-675],
 assertEquals("b", tok.next()); ref {tok} [676-676],
 assertFalse(tok.hasNext()); ref {tok} [677-677],
 assertFalse(tok.hasNext()); ref {tok} [680-680],
 assertFalse(tok.hasNext()); ref {tok} [683-683]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testConstructor_charArray_char has 6 assertions: 
 assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); ref {tok} [690-690],
 assertEquals("a", tok.next()); ref {tok} [691-691],
 assertEquals("b", tok.next()); ref {tok} [692-692],
 assertFalse(tok.hasNext()); ref {tok} [693-693],
 assertFalse(tok.hasNext()); ref {tok} [696-696],
 assertFalse(tok.hasNext()); ref {tok} [699-699]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testConstructor_charArray_char_char has 7 assertions: 
 assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); ref {tok} [706-706],
 assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); ref {tok} [707-707],
 assertEquals("a", tok.next()); ref {tok} [708-708],
 assertEquals("b", tok.next()); ref {tok} [709-709],
 assertFalse(tok.hasNext()); ref {tok} [710-710],
 assertFalse(tok.hasNext()); ref {tok} [713-713],
 assertFalse(tok.hasNext()); ref {tok} [716-716]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testReset has 8 assertions: 
 assertEquals("a", tok.next()); ref {tok} [723-723],
 assertEquals("b", tok.next()); ref {tok} [724-724],
 assertEquals("c", tok.next()); ref {tok} [725-725],
 assertFalse(tok.hasNext()); ref {tok} [726-726],
 assertEquals("a", tok.next()); ref {tok} [729-729],
 assertEquals("b", tok.next()); ref {tok} [730-730],
 assertEquals("c", tok.next()); ref {tok} [731-731],
 assertFalse(tok.hasNext()); ref {tok} [732-732]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testReset_String has 4 assertions: 
 assertEquals("d", tok.next()); ref {tok} [740-740],
 assertEquals("e", tok.next()); ref {tok} [741-741],
 assertFalse(tok.hasNext()); ref {tok} [742-742],
 assertFalse(tok.hasNext()); ref {tok} [745-745]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testReset_charArray has 3 assertions: 
 assertEquals("abc", tok.next()); ref {tok} [755-755],
 assertFalse(tok.hasNext()); ref {tok} [756-756],
 assertFalse(tok.hasNext()); ref {tok} [759-759]
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testTSV has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.428 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testTSVEmpty has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.429 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testIteration has 13 assertions: 
 assertFalse(tkn.hasPrevious()); ref {tkn} [803-803],
 assertTrue(tkn.hasNext()); ref {tkn} [808-808],
 assertEquals("a", tkn.next()); ref {tkn} [810-810],
 assertTrue(tkn.hasPrevious()); ref {tkn} [823-823],
 assertTrue(tkn.hasNext()); ref {tkn} [824-824],
 assertEquals("b", tkn.next()); ref {tkn} [826-826],
 assertTrue(tkn.hasPrevious()); ref {tkn} [827-827],
 assertTrue(tkn.hasNext()); ref {tkn} [828-828],
 assertEquals("c", tkn.next()); ref {tkn} [830-830],
 assertTrue(tkn.hasPrevious()); ref {tkn} [831-831],
 assertFalse(tkn.hasNext()); ref {tkn} [832-832],
 assertTrue(tkn.hasPrevious()); ref {tkn} [838-838],
 assertFalse(tkn.hasNext()); ref {tkn} [839-839]
[m[m31.08.2022 - 15:15:23.429 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testTokenizeSubclassInputChange has 2 assertions: 
 assertEquals("x", tkn.next()); ref {tkn} [851-851],
 assertEquals("y", tkn.next()); ref {tkn} [852-852]
[m[m31.08.2022 - 15:15:23.429 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testTokenizeSubclassOutputChange has 3 assertions: 
 assertEquals("c", tkn.next()); ref {tkn} [866-866],
 assertEquals("b", tkn.next()); ref {tkn} [867-867],
 assertEquals("a", tkn.next()); ref {tkn} [868-868]
[m[m31.08.2022 - 15:15:23.429 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.StrTokenizerTest::testToString has 2 assertions: 
 assertEquals("StrTokenizer[not tokenized yet]", tkn.toString()); ref {tkn} [875-875],
 assertEquals("StrTokenizer[a, b, c, d, e]", tkn.toString()); ref {tkn} [877-877]
[m[m31.08.2022 - 15:15:23.434 [INFO ] ParsingStrategy.parseTestSuite() - Found 57 test cases
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testNullDate has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testNullCalendar has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testInvalidFragmentWithDate has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testInvalidFragmentWithCalendar has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondFragmentInLargerUnitWithDate has 5 assertions: 
 assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND)); ref {Calendar.MILLISECOND, Calendar, aDate, DateUtils} [160-160],
 assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND)); ref {Calendar.MILLISECOND, Calendar, aDate, DateUtils} [161-161],
 assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND)); ref {Calendar.MILLISECOND, Calendar, aDate, DateUtils} [162-162],
 assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND)); ref {Calendar.MILLISECOND, Calendar, aDate, DateUtils} [163-163],
 assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND)); ref {Calendar.MILLISECOND, Calendar, aDate, DateUtils} [164-164]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondFragmentInLargerUnitWithCalendar has 5 assertions: 
 assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND)); ref {Calendar.MILLISECOND, Calendar, aCalendar, DateUtils} [169-169],
 assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND)); ref {Calendar.MILLISECOND, Calendar, aCalendar, DateUtils} [170-170],
 assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND)); ref {Calendar.MILLISECOND, Calendar, aCalendar, DateUtils} [171-171],
 assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND)); ref {Calendar.MILLISECOND, Calendar, aCalendar, DateUtils} [172-172],
 assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND)); ref {Calendar.MILLISECOND, Calendar, aCalendar, DateUtils} [173-173]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testSecondFragmentInLargerUnitWithDate has 4 assertions: 
 assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND)); ref {Calendar, aDate, DateUtils, Calendar.SECOND} [178-178],
 assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND)); ref {Calendar, aDate, DateUtils, Calendar.SECOND} [179-179],
 assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND)); ref {Calendar, aDate, DateUtils, Calendar.SECOND} [180-180],
 assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND)); ref {Calendar, aDate, DateUtils, Calendar.SECOND} [181-181]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testSecondFragmentInLargerUnitWithCalendar has 4 assertions: 
 assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND)); ref {Calendar, aCalendar, DateUtils, Calendar.SECOND} [186-186],
 assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND)); ref {Calendar, aCalendar, DateUtils, Calendar.SECOND} [187-187],
 assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND)); ref {Calendar, aCalendar, DateUtils, Calendar.SECOND} [188-188],
 assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND)); ref {Calendar, aCalendar, DateUtils, Calendar.SECOND} [189-189]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMinuteFragmentInLargerUnitWithDate has 3 assertions: 
 assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); ref {Calendar, aDate, DateUtils, Calendar.MINUTE} [194-194],
 assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); ref {Calendar, aDate, DateUtils, Calendar.MINUTE} [195-195],
 assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); ref {Calendar, aDate, DateUtils, Calendar.MINUTE} [196-196]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMinuteFragmentInLargerUnitWithCalendar has 3 assertions: 
 assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE)); ref {Calendar, aCalendar, DateUtils, Calendar.MINUTE} [201-201],
 assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE)); ref {Calendar, aCalendar, DateUtils, Calendar.MINUTE} [202-202],
 assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE)); ref {Calendar, aCalendar, DateUtils, Calendar.MINUTE} [203-203]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testHourOfDayFragmentInLargerUnitWithDate has 2 assertions: 
 assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY)); ref {Calendar, aDate, Calendar.HOUR_OF_DAY, DateUtils} [208-208],
 assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY)); ref {Calendar, aDate, Calendar.HOUR_OF_DAY, DateUtils} [209-209]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testHourOfDayFragmentInLargerUnitWithCalendar has 2 assertions: 
 assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY)); ref {Calendar, aCalendar, Calendar.HOUR_OF_DAY, DateUtils} [214-214],
 assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY)); ref {Calendar, aCalendar, Calendar.HOUR_OF_DAY, DateUtils} [215-215]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testDayOfYearFragmentInLargerUnitWithDate has 1 assertions: 
 assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR)); ref {Calendar, aDate, DateUtils, Calendar.DAY_OF_YEAR} [220-220]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testDayOfYearFragmentInLargerUnitWithCalendar has 1 assertions: 
 assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR)); ref {Calendar, aCalendar, DateUtils, Calendar.DAY_OF_YEAR} [225-225]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testDateFragmentInLargerUnitWithDate has 1 assertions: 
 assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE)); ref {Calendar.DATE, Calendar, aDate, DateUtils} [230-230]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testDateFragmentInLargerUnitWithCalendar has 1 assertions: 
 assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE)); ref {Calendar.DATE, Calendar, aCalendar, DateUtils} [235-235]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondsOfSecondWithDate has 1 assertions: 
 assertEquals(millis, testResult); ref {millis, testResult} [243-243]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondsOfSecondWithCalendar has 2 assertions: 
 assertEquals(millis, testResult); ref {millis, testResult} [249-249],
 assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult); ref {Calendar.MILLISECOND, Calendar, aCalendar, testResult} [250-250]
[m[m31.08.2022 - 15:15:23.435 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondsOfMinuteWithDate has 1 assertions: 
 assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult); ref {seconds, millis, DateUtils.MILLIS_PER_SECOND, DateUtils, testResult} [258-258]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondsOfMinuteWithCalender has 1 assertions: 
 assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult); ref {seconds, millis, DateUtils.MILLIS_PER_SECOND, DateUtils, testResult} [264-264]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testSecondsofMinuteWithDate has 1 assertions: 
 assertEquals(seconds, testResult); ref {seconds, testResult} [270-270]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testSecondsofMinuteWithCalendar has 2 assertions: 
 assertEquals(seconds, testResult); ref {seconds, testResult} [276-276],
 assertEquals(aCalendar.get(Calendar.SECOND), testResult); ref {Calendar, aCalendar, testResult, Calendar.SECOND} [277-277]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondsOfHourWithDate has 1 assertions: 
 assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult); ref {seconds, minutes, millis, DateUtils.MILLIS_PER_SECOND, DateUtils, DateUtils.MILLIS_PER_MINUTE, testResult} [285-285]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondsOfHourWithCalendar has 1 assertions: 
 assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult); ref {seconds, minutes, millis, DateUtils.MILLIS_PER_SECOND, DateUtils, DateUtils.MILLIS_PER_MINUTE, testResult} [291-291]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testSecondsofHourWithDate has 1 assertions: 
 assertEquals(seconds + (minutes * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND), testResult); ref {seconds, minutes, DateUtils.MILLIS_PER_MINUTE, DateUtils, DateUtils.MILLIS_PER_SECOND, testResult} [297-301]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testSecondsofHourWithCalendar has 1 assertions: 
 assertEquals(seconds + (minutes * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND), testResult); ref {seconds, minutes, DateUtils.MILLIS_PER_MINUTE, DateUtils, DateUtils.MILLIS_PER_SECOND, testResult} [307-311]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMinutesOfHourWithDate has 1 assertions: 
 assertEquals(minutes, testResult); ref {minutes, testResult} [317-317]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMinutesOfHourWithCalendar has 1 assertions: 
 assertEquals(minutes, testResult); ref {minutes, testResult} [323-323]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondsOfDayWithDate has 2 assertions: 
 assertEquals(expectedValue, testresult); ref {testresult, expectedValue} [331-331],
 assertEquals(expectedValue, testresult); ref {testresult, expectedValue} [333-333]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondsOfDayWithCalendar has 2 assertions: 
 assertEquals(expectedValue, testresult); ref {testresult, expectedValue} [340-340],
 assertEquals(expectedValue, testresult); ref {testresult, expectedValue} [342-342]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testSecondsOfDayWithDate has 2 assertions: 
 assertEquals(expectedValue, testresult); ref {testresult, expectedValue} [349-349],
 assertEquals(expectedValue, testresult); ref {testresult, expectedValue} [351-351]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testSecondsOfDayWithCalendar has 2 assertions: 
 assertEquals(expectedValue, testresult); ref {testresult, expectedValue} [358-358],
 assertEquals(expectedValue, testresult); ref {testresult, expectedValue} [360-360]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMinutesOfDayWithDate has 2 assertions: 
 assertEquals(expectedValue, testResult); ref {expectedValue, testResult} [367-367],
 assertEquals(expectedValue, testResult); ref {expectedValue, testResult} [369-369]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMinutesOfDayWithCalendar has 2 assertions: 
 assertEquals(expectedValue, testResult); ref {expectedValue, testResult} [376-376],
 assertEquals(expectedValue, testResult); ref {expectedValue, testResult} [378-378]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testHoursOfDayWithDate has 2 assertions: 
 assertEquals(expectedValue, testResult); ref {expectedValue, testResult} [385-385],
 assertEquals(expectedValue, testResult); ref {expectedValue, testResult} [387-387]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testHoursOfDayWithCalendar has 2 assertions: 
 assertEquals(expectedValue, testResult); ref {expectedValue, testResult} [394-394],
 assertEquals(expectedValue, testResult); ref {expectedValue, testResult} [396-396]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondsOfMonthWithDate has 1 assertions: 
 assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY), testResult); ref {seconds, hours, minutes, days, millis, DateUtils.MILLIS_PER_SECOND, DateUtils, DateUtils.MILLIS_PER_MINUTE, DateUtils.MILLIS_PER_DAY, testResult, DateUtils.MILLIS_PER_HOUR} [404-406]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondsOfMonthWithCalendar has 1 assertions: 
 assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY), testResult); ref {seconds, hours, minutes, days, millis, DateUtils.MILLIS_PER_SECOND, DateUtils, DateUtils.MILLIS_PER_MINUTE, DateUtils.MILLIS_PER_DAY, testResult, DateUtils.MILLIS_PER_HOUR} [412-414]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testSecondsOfMonthWithDate has 1 assertions: 
 assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); ref {seconds, hours, minutes, days, DateUtils.MILLIS_PER_MINUTE, DateUtils, DateUtils.MILLIS_PER_DAY, DateUtils.MILLIS_PER_SECOND, testResult, DateUtils.MILLIS_PER_HOUR} [420-425]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testSecondsOfMonthWithCalendar has 1 assertions: 
 assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); ref {seconds, hours, minutes, days, DateUtils.MILLIS_PER_MINUTE, DateUtils, DateUtils.MILLIS_PER_DAY, DateUtils.MILLIS_PER_SECOND, testResult, DateUtils.MILLIS_PER_HOUR} [431-436]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMinutesOfMonthWithDate has 1 assertions: 
 assertEquals(minutes + ((hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_MINUTE, testResult); ref {hours, minutes, days, DateUtils, DateUtils.MILLIS_PER_DAY, DateUtils.MILLIS_PER_MINUTE, testResult, DateUtils.MILLIS_PER_HOUR} [442-445]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMinutesOfMonthWithCalendar has 1 assertions: 
 assertEquals(minutes + ((hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_MINUTE, testResult); ref {hours, minutes, days, DateUtils, DateUtils.MILLIS_PER_DAY, DateUtils.MILLIS_PER_MINUTE, testResult, DateUtils.MILLIS_PER_HOUR} [451-453]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testHoursOfMonthWithDate has 1 assertions: 
 assertEquals(hours + (((days - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_HOUR, testResult); ref {hours, days, DateUtils.MILLIS_PER_DAY, DateUtils, testResult, DateUtils.MILLIS_PER_HOUR} [459-461]
[m[m31.08.2022 - 15:15:23.436 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testHoursOfMonthWithCalendar has 1 assertions: 
 assertEquals(hours + (((days - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_HOUR, testResult); ref {hours, days, DateUtils.MILLIS_PER_DAY, DateUtils, testResult, DateUtils.MILLIS_PER_HOUR} [467-469]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondsOfYearWithDate has 1 assertions: 
 assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY), testResult); ref {hours, minutes, Calendar, DateUtils, DateUtils.MILLIS_PER_HOUR, cal, seconds, millis, DateUtils.MILLIS_PER_SECOND, DateUtils.MILLIS_PER_MINUTE, Calendar.DAY_OF_YEAR, DateUtils.MILLIS_PER_DAY, testResult} [478-480]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMillisecondsOfYearWithCalendar has 1 assertions: 
 assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY), testResult); ref {hours, minutes, Calendar, DateUtils, DateUtils.MILLIS_PER_HOUR, seconds, aCalendar, millis, DateUtils.MILLIS_PER_SECOND, DateUtils.MILLIS_PER_MINUTE, Calendar.DAY_OF_YEAR, DateUtils.MILLIS_PER_DAY, testResult} [486-488]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testSecondsOfYearWithDate has 1 assertions: 
 assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); ref {seconds, hours, minutes, Calendar, DateUtils.MILLIS_PER_MINUTE, DateUtils, Calendar.DAY_OF_YEAR, DateUtils.MILLIS_PER_DAY, DateUtils.MILLIS_PER_SECOND, testResult, DateUtils.MILLIS_PER_HOUR, cal} [496-501]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testSecondsOfYearWithCalendar has 1 assertions: 
 assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); ref {seconds, hours, minutes, Calendar, aCalendar, DateUtils.MILLIS_PER_MINUTE, DateUtils, Calendar.DAY_OF_YEAR, DateUtils.MILLIS_PER_DAY, DateUtils.MILLIS_PER_SECOND, testResult, DateUtils.MILLIS_PER_HOUR} [507-512]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMinutesOfYearWithDate has 1 assertions: 
 assertEquals(minutes + ((hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_MINUTE, testResult); ref {hours, minutes, Calendar, DateUtils, Calendar.DAY_OF_YEAR, DateUtils.MILLIS_PER_DAY, DateUtils.MILLIS_PER_MINUTE, testResult, DateUtils.MILLIS_PER_HOUR, cal} [520-523]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMinutesOfYearWithCalendar has 1 assertions: 
 assertEquals(minutes + ((hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_MINUTE, testResult); ref {hours, minutes, Calendar, aCalendar, DateUtils, Calendar.DAY_OF_YEAR, DateUtils.MILLIS_PER_DAY, DateUtils.MILLIS_PER_MINUTE, testResult, DateUtils.MILLIS_PER_HOUR} [529-531]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testMinutesOfYearWithWrongOffsetBugWithCalendar has 1 assertions: 
 assertEquals(0, testResult); ref {testResult} [544-544]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testHoursOfYearWithDate has 1 assertions: 
 assertEquals(hours + (((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_HOUR, testResult); ref {hours, Calendar, Calendar.DAY_OF_YEAR, DateUtils.MILLIS_PER_DAY, DateUtils, testResult, DateUtils.MILLIS_PER_HOUR, cal} [552-554]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testHoursOfYearWithCalendar has 1 assertions: 
 assertEquals(hours + (((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_HOUR, testResult); ref {hours, Calendar, aCalendar, Calendar.DAY_OF_YEAR, DateUtils.MILLIS_PER_DAY, DateUtils, testResult, DateUtils.MILLIS_PER_HOUR} [560-562]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testDaysOfMonthWithCalendar has 1 assertions: 
 assertEquals(days, testResult); ref {days, testResult} [568-568]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testDaysOfMonthWithDate has 1 assertions: 
 assertEquals(cal.get(Calendar.DAY_OF_MONTH), testResult); ref {Calendar, Calendar.DAY_OF_MONTH, testResult, cal} [576-576]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testDaysOfYearWithCalendar has 1 assertions: 
 assertEquals(aCalendar.get(Calendar.DAY_OF_YEAR), testResult); ref {Calendar, aCalendar, Calendar.DAY_OF_YEAR, testResult} [582-582]
[m[m31.08.2022 - 15:15:23.437 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DateUtilsFragmentTest::testDaysOfYearWithDate has 1 assertions: 
 assertEquals(cal.get(Calendar.DAY_OF_YEAR), testResult); ref {Calendar, Calendar.DAY_OF_YEAR, testResult, cal} [590-590]
[m[m31.08.2022 - 15:15:23.439 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:23.439 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest::testBlank has 1 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).toString()); ref {baseStr, base} [53-53]
[m[m31.08.2022 - 15:15:23.439 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest::testAppendSuper has 5 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); ref {baseStr, base} [58-58],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); ref {baseStr, base} [59-59],
 assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); ref {baseStr, base} [61-61],
 assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); ref {baseStr, base} [62-62],
 assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); ref {baseStr, base} [63-63]
[m[m31.08.2022 - 15:15:23.439 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest::testObject has 12 assertions: 
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); ref {baseStr, base} [70-70],
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); ref {i3, baseStr, base} [71-71],
 assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); ref {baseStr, base} [72-72],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); ref {i3, baseStr, base} [73-73],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); ref {i3, i4, baseStr, base} [74-74],
 assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); ref {i3, baseStr, base} [75-75],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); ref {baseStr, base} [76-76],
 assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); ref {baseStr, base} [77-77],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); ref {baseStr, base} [78-78],
 assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); ref {baseStr, base} [79-79],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); ref {baseStr, base} [80-80],
 assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); ref {baseStr, base} [81-81]
[m[m31.08.2022 - 15:15:23.439 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest::testPerson has 1 assertions: 
 assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); ref {p, p.age, p.smoker, p.name, pBaseStr} [91-91]
[m[m31.08.2022 - 15:15:23.439 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest::testLong has 3 assertions: 
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); ref {baseStr, base} [96-96],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); ref {baseStr, base} [97-97],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); ref {baseStr, base} [98-98]
[m[m31.08.2022 - 15:15:23.439 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest::testObjectArray has 4 assertions: 
 assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [104-104],
 assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [105-105],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [107-107],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [108-108]
[m[m31.08.2022 - 15:15:23.440 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest::testLongArray has 4 assertions: 
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [114-114],
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [115-115],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [117-117],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [118-118]
[m[m31.08.2022 - 15:15:23.440 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest::testLongArrayArray has 4 assertions: 
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [124-124],
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [125-125],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [127-127],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [128-128]
[m[m31.08.2022 - 15:15:23.440 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m31.08.2022 - 15:15:23.440 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConstantInitializerTest::testGetObject has 1 assertions: 
 assertEquals("Wrong object", VALUE, init.getObject()); ref {init, VALUE} [66-66]
[m[m31.08.2022 - 15:15:23.440 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConstantInitializerTest::testGet has 1 assertions: 
 assertEquals("Wrong object", VALUE, init.get()); ref {init, VALUE} [76-76]
[m[m31.08.2022 - 15:15:23.440 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConstantInitializerTest::testEqualsTrue has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.440 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConstantInitializerTest::testEqualsFalse has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.440 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConstantInitializerTest::testEqualsWithOtherObjects has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.440 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConstantInitializerTest::testToString has 1 assertions: 
 assertTrue("Wrong string: " + s, pattern.matcher(s).matches()); ref {s, pattern} [124-124]
[m[m31.08.2022 - 15:15:23.440 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.ConstantInitializerTest::testToStringNull has 1 assertions: 
 assertTrue("Object not found: " + s, s.indexOf("object = null") > 0); ref {s} [133-133]
[m[m31.08.2022 - 15:15:23.442 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:23.442 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.RecursiveToStringStyleTest::testBlank has 1 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).toString()); ref {baseStr, base} [52-52]
[m[m31.08.2022 - 15:15:23.442 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.RecursiveToStringStyleTest::testAppendSuper has 5 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); ref {baseStr, base} [57-57],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); ref {baseStr, base} [58-58],
 assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); ref {baseStr, base} [60-60],
 assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); ref {baseStr, base} [61-61],
 assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); ref {baseStr, base} [62-62]
[m[m31.08.2022 - 15:15:23.442 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.RecursiveToStringStyleTest::testObject has 12 assertions: 
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); ref {baseStr, base} [69-69],
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); ref {i3, baseStr, base} [70-70],
 assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); ref {baseStr, base} [71-71],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); ref {i3, baseStr, base} [72-72],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); ref {i3, i4, baseStr, base} [73-73],
 assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); ref {i3, baseStr, base} [74-74],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); ref {baseStr, base} [75-75],
 assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); ref {baseStr, base} [76-76],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); ref {baseStr, base} [77-77],
 assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); ref {baseStr, base} [78-78],
 assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); ref {baseStr, base} [79-79],
 assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); ref {baseStr, base} [80-80]
[m[m31.08.2022 - 15:15:23.442 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.RecursiveToStringStyleTest::testPerson has 1 assertions: 
 assertEquals(pBaseStr + "[name=John Doe,age=33,smoker=false,job=" + pJobStr + "[title=Manager]]", new ReflectionToStringBuilder(p, new RecursiveToStringStyle()).toString()); ref {p, pBaseStr, pJobStr} [93-94]
[m[m31.08.2022 - 15:15:23.442 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.RecursiveToStringStyleTest::testLong has 3 assertions: 
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); ref {baseStr, base} [99-99],
 assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); ref {baseStr, base} [100-100],
 assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); ref {baseStr, base} [101-101]
[m[m31.08.2022 - 15:15:23.442 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.RecursiveToStringStyleTest::testObjectArray has 4 assertions: 
 assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [107-107],
 assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [108-108],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [110-110],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [111-111]
[m[m31.08.2022 - 15:15:23.442 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.RecursiveToStringStyleTest::testLongArray has 4 assertions: 
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [117-117],
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [118-118],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [120-120],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [121-121]
[m[m31.08.2022 - 15:15:23.443 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.RecursiveToStringStyleTest::testLongArrayArray has 4 assertions: 
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [127-127],
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [128-128],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [130-130],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [131-131]
[m[m31.08.2022 - 15:15:23.443 [INFO ] ParsingStrategy.parseTestSuite() - Found 23 test cases
[m[m31.08.2022 - 15:15:23.443 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextBytesNegative has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.443 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextIntNegative has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.443 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextLongNegative has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.443 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextDoubleNegative has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextFloatNegative has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextIntLowerGreaterUpper has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextLongLowerGreaterUpper has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextDoubleLowerGreaterUpper has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextFloatLowerGreaterUpper has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testZeroLengthNextBytes has 1 assertions: 
 assertArrayEquals(new byte[0], RandomUtils.nextBytes(0)); ref {RandomUtils} [88-88]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextBytes has 1 assertions: 
 assertEquals(20, result.length); ref {result, result.length} [97-97]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextIntMinimalRange has 1 assertions: 
 assertEquals(42, RandomUtils.nextInt(42, 42)); ref {RandomUtils} [105-105]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextInt has 1 assertions: 
 assertTrue(result >= 33 && result < 42); ref {result} [114-114]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextDoubleMinimalRange has 1 assertions: 
 assertEquals(42.1, RandomUtils.nextDouble(42.1, 42.1), DELTA); ref {RandomUtils, DELTA} [122-122]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextFloatMinimalRange has 1 assertions: 
 assertEquals(42.1f, RandomUtils.nextFloat(42.1f, 42.1f), DELTA); ref {RandomUtils, DELTA} [130-130]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextDouble has 1 assertions: 
 assertTrue(result >= 33d && result <= 42d); ref {result} [139-139]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextFloat has 1 assertions: 
 assertTrue(result >= 33f && result <= 42f); ref {result} [148-148]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextLongMinimalRange has 1 assertions: 
 assertEquals(42L, RandomUtils.nextLong(42L, 42L)); ref {RandomUtils} [156-156]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testNextLong has 1 assertions: 
 assertTrue(result >= 33L && result < 42L); ref {result} [165-165]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testExtremeRangeInt has 1 assertions: 
 assertTrue(result >= 0 && result < Integer.MAX_VALUE); ref {result, Integer, Integer.MAX_VALUE} [175-175]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testExtremeRangeLong has 1 assertions: 
 assertTrue(result >= 0 && result < Long.MAX_VALUE); ref {result, Long.MAX_VALUE, Long} [184-184]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testExtremeRangeFloat has 1 assertions: 
 assertTrue(result >= 0f && result <= Float.MAX_VALUE); ref {result, Float, Float.MAX_VALUE} [193-193]
[m[m31.08.2022 - 15:15:23.444 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.RandomUtilsTest::testExtremeRangeDouble has 1 assertions: 
 assertTrue(result >= 0 && result <= Double.MAX_VALUE); ref {result, Double.MAX_VALUE, Double} [202-202]
[m[m31.08.2022 - 15:15:23.500 [INFO ] ParsingStrategy.parseTestSuite() - Found 205 test cases
[m[m31.08.2022 - 15:15:23.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new ArrayUtils()); ref {} [41-41],
 assertEquals(1, cons.length); ref {cons.length, cons} [43-43],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [44-44],
 assertTrue(Modifier.isPublic(ArrayUtils.class.getModifiers())); ref {Modifier} [45-45],
 assertFalse(Modifier.isFinal(ArrayUtils.class.getModifiers())); ref {Modifier} [46-46]
[m[m31.08.2022 - 15:15:23.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToString has 10 assertions: 
 assertEquals("{}", ArrayUtils.toString(null)); ref {ArrayUtils} [52-52],
 assertEquals("{}", ArrayUtils.toString(new Object[0])); ref {ArrayUtils} [53-53],
 assertEquals("{}", ArrayUtils.toString(new String[0])); ref {ArrayUtils} [54-54],
 assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); ref {ArrayUtils} [55-55],
 assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); ref {ArrayUtils} [56-56],
 assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); ref {ArrayUtils} [58-58],
 assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); ref {ArrayUtils} [59-59],
 assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); ref {ArrayUtils} [60-60],
 assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); ref {ArrayUtils} [61-61],
 assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); ref {ArrayUtils} [62-62]
[m[m31.08.2022 - 15:15:23.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testHashCode has 5 assertions: 
 assertTrue(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1)); ref {ArrayUtils, array1} [70-70],
 assertFalse(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2)); ref {ArrayUtils, array2, array1} [71-71],
 assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3)); ref {ArrayUtils, array3} [75-75],
 assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4)); ref {ArrayUtils, array4, array3} [76-76],
 assertTrue(ArrayUtils.hashCode(arrayB) == ArrayUtils.hashCode(arrayA)); ref {ArrayUtils, arrayB, arrayA} [80-80]
[m[m31.08.2022 - 15:15:23.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsEquals has 12 assertions: 
 this.assertIsEquals(larray1, larray2, larray3); ref {larray3, larray1, larray2} [101-101],
 this.assertIsEquals(iarray1, iarray2, iarray3); ref {iarray1, iarray2, iarray3} [106-106],
 this.assertIsEquals(sarray1, sarray2, sarray3); ref {sarray2, sarray3, sarray1} [111-111],
 this.assertIsEquals(farray1, farray2, farray3); ref {farray2, farray1, farray3} [116-116],
 this.assertIsEquals(darray1, darray2, darray3); ref {darray1, darray2, darray3} [121-121],
 this.assertIsEquals(byteArray1, byteArray2, byteArray3); ref {byteArray3, byteArray1, byteArray2} [126-126],
 this.assertIsEquals(charArray1, charArray2, charArray3); ref {charArray3, charArray1, charArray2} [131-131],
 this.assertIsEquals(barray1, barray2, barray3); ref {barray3, barray1, barray2} [136-136],
 assertTrue(ArrayUtils.isEquals(array3, array3)); ref {ArrayUtils, array3} [140-140],
 assertTrue(ArrayUtils.isEquals(array3, array4)); ref {ArrayUtils, array4, array3} [141-141],
 assertTrue(ArrayUtils.isEquals(null, null)); ref {ArrayUtils} [143-143],
 assertFalse(ArrayUtils.isEquals(null, array4)); ref {ArrayUtils, array4} [144-144]
[m[m31.08.2022 - 15:15:23.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testArrayCreation has 3 assertions: 
 assertEquals(2, array.length); ref {array, array.length} [155-155],
 assertEquals("foo", array[0]); ref {array} [156-156],
 assertEquals("bar", array[1]); ref {array} [157-157]
[m[m31.08.2022 - 15:15:23.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testArrayCreationWithGeneralReturnType has 1 assertions: 
 assertTrue(obj instanceof String[]); ref {obj} [167-167]
[m[m31.08.2022 - 15:15:23.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testArrayCreationWithDifferentTypes has 3 assertions: 
 assertEquals(2, array.length); ref {array, array.length} [177-177],
 assertEquals(Integer.valueOf(42), array[0]); ref {Integer, array} [178-178],
 assertEquals(Double.valueOf(Math.PI), array[1]); ref {array, Math.PI, Math, Double} [179-179]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndirectArrayCreation has 3 assertions: 
 assertEquals(2, array.length); ref {array, array.length} [189-189],
 assertEquals("foo", array[0]); ref {array} [190-190],
 assertEquals("bar", array[1]); ref {array} [191-191]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testEmptyArrayCreation has 1 assertions: 
 assertEquals(0, array.length); ref {array, array.length} [201-201]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndirectEmptyArrayCreation has 1 assertions: 
 assertEquals(0, array.length); ref {array, array.length} [211-211]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToMap has 4 assertions: 
 assertEquals("bar", map.get("foo")); ref {map} [224-224],
 assertEquals("world", map.get("hello")); ref {map} [225-225],
 assertEquals(null, ArrayUtils.toMap(null)); ref {ArrayUtils} [227-227],
 assertEquals("bar", map.get("foo")); ref {map} [263-263]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testClone has 8 assertions: 
 assertArrayEquals(null, ArrayUtils.clone((Object[]) null)); ref {ArrayUtils} [269-269],
 assertTrue(Arrays.equals(original1, cloned1)); ref {Arrays, original1, cloned1} [272-272],
 assertTrue(original1 != cloned1); ref {original1, cloned1} [273-273],
 assertTrue(Arrays.equals(original1, cloned1)); ref {Arrays, original1, cloned1} [278-278],
 assertTrue(original1 != cloned1); ref {original1, cloned1} [279-279],
 assertSame(original1[0], cloned1[0]); ref {original1, cloned1} [280-280],
 assertSame(original1[1], cloned1[1]); ref {original1, cloned1} [281-281],
 assertSame(original1[2], cloned1[2]); ref {original1, cloned1} [282-282]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testCloneBoolean has 3 assertions: 
 assertEquals(null, ArrayUtils.clone((boolean[]) null)); ref {ArrayUtils} [287-287],
 assertTrue(Arrays.equals(original, cloned)); ref {cloned, original, Arrays} [290-290],
 assertTrue(original != cloned); ref {cloned, original} [291-291]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testCloneLong has 3 assertions: 
 assertEquals(null, ArrayUtils.clone((long[]) null)); ref {ArrayUtils} [296-296],
 assertTrue(Arrays.equals(original, cloned)); ref {cloned, original, Arrays} [299-299],
 assertTrue(original != cloned); ref {cloned, original} [300-300]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testCloneInt has 3 assertions: 
 assertEquals(null, ArrayUtils.clone((int[]) null)); ref {ArrayUtils} [305-305],
 assertTrue(Arrays.equals(original, cloned)); ref {cloned, original, Arrays} [308-308],
 assertTrue(original != cloned); ref {cloned, original} [309-309]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testCloneShort has 3 assertions: 
 assertEquals(null, ArrayUtils.clone((short[]) null)); ref {ArrayUtils} [314-314],
 assertTrue(Arrays.equals(original, cloned)); ref {cloned, original, Arrays} [317-317],
 assertTrue(original != cloned); ref {cloned, original} [318-318]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testCloneChar has 3 assertions: 
 assertEquals(null, ArrayUtils.clone((char[]) null)); ref {ArrayUtils} [323-323],
 assertTrue(Arrays.equals(original, cloned)); ref {cloned, original, Arrays} [326-326],
 assertTrue(original != cloned); ref {cloned, original} [327-327]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testCloneByte has 3 assertions: 
 assertEquals(null, ArrayUtils.clone((byte[]) null)); ref {ArrayUtils} [332-332],
 assertTrue(Arrays.equals(original, cloned)); ref {cloned, original, Arrays} [335-335],
 assertTrue(original != cloned); ref {cloned, original} [336-336]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testCloneDouble has 3 assertions: 
 assertEquals(null, ArrayUtils.clone((double[]) null)); ref {ArrayUtils} [341-341],
 assertTrue(Arrays.equals(original, cloned)); ref {cloned, original, Arrays} [344-344],
 assertTrue(original != cloned); ref {cloned, original} [345-345]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testCloneFloat has 3 assertions: 
 assertEquals(null, ArrayUtils.clone((float[]) null)); ref {ArrayUtils} [350-350],
 assertTrue(Arrays.equals(original, cloned)); ref {cloned, original, Arrays} [353-353],
 assertTrue(original != cloned); ref {cloned, original} [354-354]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyBooleanNull has 1 assertions: 
 assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null)); ref {ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [362-362]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyBooleanEmptyArray has 2 assertions: 
 assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result); ref {result, ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [369-369],
 assertNotSame(empty, result); ref {result, empty} [370-370]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyBoolean has 1 assertions: 
 assertEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [376-376]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyLongNull has 1 assertions: 
 assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.nullToEmpty((long[]) null)); ref {ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY} [381-381]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyLongEmptyArray has 2 assertions: 
 assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, result); ref {result, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY} [388-388],
 assertNotSame(empty, result); ref {result, empty} [389-389]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyLong has 1 assertions: 
 assertEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [395-395]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyIntNull has 1 assertions: 
 assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null)); ref {ArrayUtils, ArrayUtils.EMPTY_INT_ARRAY} [400-400]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyIntEmptyArray has 2 assertions: 
 assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result); ref {result, ArrayUtils, ArrayUtils.EMPTY_INT_ARRAY} [407-407],
 assertNotSame(empty, result); ref {result, empty} [408-408]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyInt has 1 assertions: 
 assertEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [414-414]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyShortNull has 1 assertions: 
 assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); ref {ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils} [419-419]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyShortEmptyArray has 2 assertions: 
 assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); ref {result, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils} [426-426],
 assertNotSame(empty, result); ref {result, empty} [427-427]
[m[m31.08.2022 - 15:15:23.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyShort has 1 assertions: 
 assertEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [433-433]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyCharNull has 1 assertions: 
 assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.nullToEmpty((char[]) null)); ref {ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY} [438-438]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyCharEmptyArray has 2 assertions: 
 assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, result); ref {result, ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY} [445-445],
 assertNotSame(empty, result); ref {result, empty} [446-446]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyChar has 1 assertions: 
 assertEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [452-452]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyByteNull has 1 assertions: 
 assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.nullToEmpty((byte[]) null)); ref {ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils} [457-457]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyByteEmptyArray has 2 assertions: 
 assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, result); ref {result, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils} [464-464],
 assertNotSame(empty, result); ref {result, empty} [465-465]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyByte has 1 assertions: 
 assertEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [471-471]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyDoubleNull has 1 assertions: 
 assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null)); ref {ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils} [476-476]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyDoubleEmptyArray has 2 assertions: 
 assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result); ref {result, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils} [483-483],
 assertNotSame(empty, result); ref {result, empty} [484-484]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyDouble has 1 assertions: 
 assertEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [490-490]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyFloatNull has 1 assertions: 
 assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.nullToEmpty((float[]) null)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils} [495-495]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyFloatEmptyArray has 2 assertions: 
 assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, result); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, result, ArrayUtils} [502-502],
 assertNotSame(empty, result); ref {result, empty} [503-503]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyFloat has 1 assertions: 
 assertEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [509-509]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyObjectNull has 1 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null)); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils} [514-514]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyObjectEmptyArray has 2 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result); ref {result, ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils} [521-521],
 assertNotSame(empty, result); ref {result, empty} [522-522]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyObject has 1 assertions: 
 assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [528-528]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyClassNull has 1 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.nullToEmpty((Class<?>[]) null)); ref {ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY} [533-533]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyClassEmptyArray has 2 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, result); ref {result, ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY} [540-540],
 assertNotSame(empty, result); ref {result, empty} [541-541]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyClass has 1 assertions: 
 assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [547-547]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyStringNull has 1 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null)); ref {ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils} [552-552]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyStringEmptyArray has 2 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, result); ref {result, ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils} [559-559],
 assertNotSame(empty, result); ref {result, empty} [560-560]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyString has 1 assertions: 
 assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [566-566]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyBooleanObjectNull has 1 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null)); ref {ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY} [571-571]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyBooleanObjectEmptyArray has 2 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result); ref {result, ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY} [578-578],
 assertNotSame(empty, result); ref {result, empty} [579-579]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyBooleanObject has 1 assertions: 
 assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [585-585]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyLongObjectNull has 1 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null)); ref {ArrayUtils, ArrayUtils.EMPTY_LONG_OBJECT_ARRAY} [590-590]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyLongObjectEmptyArray has 2 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result); ref {result, ArrayUtils, ArrayUtils.EMPTY_LONG_OBJECT_ARRAY} [597-597],
 assertNotSame(empty, result); ref {result, empty} [598-598]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyLongObject has 1 assertions: 
 assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [605-605]
[m[m31.08.2022 - 15:15:23.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyIntObjectNull has 1 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null)); ref {ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils} [610-610]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyIntObjectEmptyArray has 2 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result); ref {result, ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils} [617-617],
 assertNotSame(empty, result); ref {result, empty} [618-618]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyIntObject has 1 assertions: 
 assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [624-624]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyShortObjectNull has 1 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null)); ref {ArrayUtils, ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY} [629-629]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyShortObjectEmptyArray has 2 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result); ref {result, ArrayUtils, ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY} [636-636],
 assertNotSame(empty, result); ref {result, empty} [637-637]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyShortObject has 1 assertions: 
 assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [644-644]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNUllToEmptyCharObjectNull has 1 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null)); ref {ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils} [649-649]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyCharObjectEmptyArray has 2 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result); ref {result, ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils} [656-656],
 assertNotSame(empty, result); ref {result, empty} [657-657]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyCharObject has 1 assertions: 
 assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [663-663]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyByteObjectNull has 1 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null)); ref {ArrayUtils, ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY} [668-668]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyByteObjectEmptyArray has 2 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result); ref {result, ArrayUtils, ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY} [675-675],
 assertNotSame(empty, result); ref {result, empty} [676-676]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyByteObject has 1 assertions: 
 assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [682-682]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyDoubleObjectNull has 1 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); ref {ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils} [687-687]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyDoubleObjectEmptyArray has 2 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result); ref {result, ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils} [694-694],
 assertNotSame(empty, result); ref {result, empty} [695-695]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyDoubleObject has 1 assertions: 
 assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [701-701]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyFloatObjectNull has 1 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null)); ref {ArrayUtils, ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY} [706-706]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyFloatObjectEmptyArray has 2 assertions: 
 assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result); ref {result, ArrayUtils, ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY} [713-713],
 assertNotSame(empty, result); ref {result, empty} [714-714]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testNullToEmptyFloatObject has 1 assertions: 
 assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); ref {original, ArrayUtils} [720-720]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSubarrayObject has 15 assertions: 
 assertEquals("0 start, mid end", "abcd", StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4))); ref {objectArray, StringUtils, ArrayUtils} [730-731],
 assertEquals("0 start, length end", "abcdef", StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length))); ref {objectArray, StringUtils, ArrayUtils, objectArray.length} [732-733],
 assertEquals("mid start, mid end", "bcd", StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4))); ref {objectArray, StringUtils, ArrayUtils} [734-735],
 assertEquals("mid start, length end", "bcdef", StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length))); ref {objectArray, StringUtils, ArrayUtils, objectArray.length} [736-737],
 assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); ref {nullArray, ArrayUtils} [739-739],
 assertEquals("empty array", "", StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2))); ref {ArrayUtils.EMPTY_OBJECT_ARRAY, StringUtils, ArrayUtils} [740-741],
 assertEquals("start > end", "", StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2))); ref {objectArray, StringUtils, ArrayUtils} [742-743],
 assertEquals("start == end", "", StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3))); ref {objectArray, StringUtils, ArrayUtils} [744-745],
 assertEquals("start undershoot, normal end", "abcd", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4))); ref {objectArray, StringUtils, ArrayUtils} [746-747],
 assertEquals("start overshoot, any end", "", StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4))); ref {objectArray, StringUtils, ArrayUtils} [748-749],
 assertEquals("normal start, end overshoot", "cdef", StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33))); ref {objectArray, StringUtils, ArrayUtils} [750-751],
 assertEquals("start undershoot, end overshoot", "abcdef", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12))); ref {objectArray, StringUtils, ArrayUtils} [752-753],
 assertSame("Object type", Object.class, ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType()); ref {objectArray, ArrayUtils} [759-760],
 assertSame("java.util.Date type", java.util.Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType()); ref {ArrayUtils, dateArray} [761-762],
 assertNotSame("java.sql.Date type", java.sql.Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType()); ref {ArrayUtils, dateArray} [763-764]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSubarrayLong has 17 assertions: 
 assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); ref {leftSubarray, array, ArrayUtils} [781-783],
 assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); ref {array, ArrayUtils, array.length} [785-787],
 assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); ref {array, ArrayUtils, midSubarray} [789-791],
 assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); ref {array, rightSubarray, ArrayUtils, array.length} [793-795],
 assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); ref {nullArray, ArrayUtils} [798-798],
 assertEquals("empty array", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2)); ref {ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY} [800-801],
 assertEquals("start > end", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 2)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY} [803-804],
 assertEquals("start == end", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY} [806-807],
 assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); ref {leftSubarray, array, ArrayUtils} [809-811],
 assertEquals("start overshoot, any end", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 33, 4)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY} [813-815],
 assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); ref {array, rightSubarray, ArrayUtils} [817-819],
 assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); ref {array, ArrayUtils} [821-823],
 // empty-return tests
assertSame("empty array, object test", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2)); ref {ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY} [827-829],
 assertSame("start > end, object test", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 1)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY} [831-833],
 assertSame("start == end, object test", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY} [835-837],
 assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 8733, 4)); ref {array, ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY} [839-841],
 // array type tests
assertSame("long type", long.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); ref {array, ArrayUtils} [845-846]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSubarrayInt has 17 assertions: 
 assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); ref {leftSubarray, array, ArrayUtils} [859-861],
 assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); ref {array, ArrayUtils, array.length} [863-865],
 assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); ref {array, ArrayUtils, midSubarray} [867-869],
 assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); ref {array, rightSubarray, ArrayUtils, array.length} [871-873],
 assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); ref {nullArray, ArrayUtils} [876-876],
 assertEquals("empty array", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2)); ref {ArrayUtils, ArrayUtils.EMPTY_INT_ARRAY} [878-879],
 assertEquals("start > end", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 2)); ref {array, ArrayUtils, ArrayUtils.EMPTY_INT_ARRAY} [881-882],
 assertEquals("start == end", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils, ArrayUtils.EMPTY_INT_ARRAY} [884-885],
 assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); ref {leftSubarray, array, ArrayUtils} [887-889],
 assertEquals("start overshoot, any end", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 33, 4)); ref {array, ArrayUtils, ArrayUtils.EMPTY_INT_ARRAY} [891-893],
 assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); ref {array, rightSubarray, ArrayUtils} [895-897],
 assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); ref {array, ArrayUtils} [899-901],
 // empty-return tests
assertSame("empty array, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2)); ref {ArrayUtils, ArrayUtils.EMPTY_INT_ARRAY} [905-907],
 assertSame("start > end, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 1)); ref {array, ArrayUtils, ArrayUtils.EMPTY_INT_ARRAY} [909-911],
 assertSame("start == end, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils, ArrayUtils.EMPTY_INT_ARRAY} [913-915],
 assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 8733, 4)); ref {array, ArrayUtils, ArrayUtils.EMPTY_INT_ARRAY} [917-919],
 // array type tests
assertSame("int type", int.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); ref {array, ArrayUtils} [923-924]
[m[m31.08.2022 - 15:15:23.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSubarrayShort has 17 assertions: 
 assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); ref {leftSubarray, array, ArrayUtils} [937-939],
 assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); ref {array, ArrayUtils, array.length} [941-943],
 assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); ref {array, ArrayUtils, midSubarray} [945-947],
 assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); ref {array, rightSubarray, ArrayUtils, array.length} [949-951],
 assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); ref {nullArray, ArrayUtils} [954-954],
 assertEquals("empty array", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2)); ref {ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils} [956-957],
 assertEquals("start > end", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 2)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils} [959-960],
 assertEquals("start == end", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils} [962-963],
 assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); ref {leftSubarray, array, ArrayUtils} [965-967],
 assertEquals("start overshoot, any end", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 33, 4)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils} [969-971],
 assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); ref {array, rightSubarray, ArrayUtils} [973-975],
 assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); ref {array, ArrayUtils} [977-979],
 // empty-return tests
assertSame("empty array, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2)); ref {ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils} [983-985],
 assertSame("start > end, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 1)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils} [987-989],
 assertSame("start == end, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils} [991-993],
 assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 8733, 4)); ref {array, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils} [995-997],
 // array type tests
assertSame("short type", short.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); ref {array, ArrayUtils} [1001-1002]
[m[m31.08.2022 - 15:15:23.504 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSubarrChar has 17 assertions: 
 assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); ref {leftSubarray, array, ArrayUtils} [1015-1017],
 assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); ref {array, ArrayUtils, array.length} [1019-1021],
 assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); ref {array, ArrayUtils, midSubarray} [1023-1025],
 assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); ref {array, rightSubarray, ArrayUtils, array.length} [1027-1029],
 assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); ref {nullArray, ArrayUtils} [1032-1032],
 assertEquals("empty array", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2)); ref {ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY} [1034-1035],
 assertEquals("start > end", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 2)); ref {array, ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY} [1037-1038],
 assertEquals("start == end", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY} [1040-1041],
 assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); ref {leftSubarray, array, ArrayUtils} [1043-1045],
 assertEquals("start overshoot, any end", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 33, 4)); ref {array, ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY} [1047-1049],
 assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); ref {array, rightSubarray, ArrayUtils} [1051-1053],
 assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); ref {array, ArrayUtils} [1055-1057],
 // empty-return tests
assertSame("empty array, object test", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2)); ref {ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY} [1061-1063],
 assertSame("start > end, object test", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 1)); ref {array, ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY} [1065-1067],
 assertSame("start == end, object test", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY} [1069-1071],
 assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 8733, 4)); ref {array, ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY} [1073-1075],
 // array type tests
assertSame("char type", char.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); ref {array, ArrayUtils} [1079-1080]
[m[m31.08.2022 - 15:15:23.504 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSubarrayByte has 17 assertions: 
 assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); ref {leftSubarray, array, ArrayUtils} [1093-1095],
 assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); ref {array, ArrayUtils, array.length} [1097-1099],
 assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); ref {array, ArrayUtils, midSubarray} [1101-1103],
 assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); ref {array, rightSubarray, ArrayUtils, array.length} [1105-1107],
 assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); ref {nullArray, ArrayUtils} [1110-1110],
 assertEquals("empty array", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); ref {ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils} [1112-1113],
 assertEquals("start > end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 2)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils} [1115-1116],
 assertEquals("start == end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils} [1118-1119],
 assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); ref {leftSubarray, array, ArrayUtils} [1121-1123],
 assertEquals("start overshoot, any end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 33, 4)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils} [1125-1127],
 assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); ref {array, rightSubarray, ArrayUtils} [1129-1131],
 assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); ref {array, ArrayUtils} [1133-1135],
 // empty-return tests
assertSame("empty array, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); ref {ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils} [1139-1141],
 assertSame("start > end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 1)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils} [1143-1145],
 assertSame("start == end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils} [1147-1149],
 assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 8733, 4)); ref {array, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils} [1151-1153],
 // array type tests
assertSame("byte type", byte.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); ref {array, ArrayUtils} [1157-1158]
[m[m31.08.2022 - 15:15:23.504 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSubarrayDouble has 17 assertions: 
 assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); ref {leftSubarray, array, ArrayUtils} [1171-1173],
 assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); ref {array, ArrayUtils, array.length} [1175-1177],
 assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); ref {array, ArrayUtils, midSubarray} [1179-1181],
 assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); ref {array, rightSubarray, ArrayUtils, array.length} [1183-1185],
 assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); ref {nullArray, ArrayUtils} [1188-1188],
 assertEquals("empty array", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2)); ref {ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils} [1190-1191],
 assertEquals("start > end", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 2)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils} [1193-1194],
 assertEquals("start == end", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils} [1196-1197],
 assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); ref {leftSubarray, array, ArrayUtils} [1199-1201],
 assertEquals("start overshoot, any end", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 33, 4)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils} [1203-1205],
 assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); ref {array, rightSubarray, ArrayUtils} [1207-1209],
 assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); ref {array, ArrayUtils} [1211-1213],
 // empty-return tests
assertSame("empty array, object test", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2)); ref {ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils} [1217-1219],
 assertSame("start > end, object test", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 1)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils} [1221-1223],
 assertSame("start == end, object test", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils} [1225-1227],
 assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 8733, 4)); ref {array, ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils} [1229-1231],
 // array type tests
assertSame("double type", double.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); ref {array, ArrayUtils} [1235-1236]
[m[m31.08.2022 - 15:15:23.504 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSubarrayFloat has 17 assertions: 
 assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); ref {leftSubarray, array, ArrayUtils} [1249-1251],
 assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); ref {array, ArrayUtils, array.length} [1253-1255],
 assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); ref {array, ArrayUtils, midSubarray} [1257-1259],
 assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); ref {array, rightSubarray, ArrayUtils, array.length} [1261-1263],
 assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); ref {nullArray, ArrayUtils} [1266-1266],
 assertEquals("empty array", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils} [1268-1269],
 assertEquals("start > end", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 2)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils} [1271-1272],
 assertEquals("start == end", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils} [1274-1275],
 assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); ref {leftSubarray, array, ArrayUtils} [1277-1279],
 assertEquals("start overshoot, any end", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 33, 4)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils} [1281-1283],
 assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); ref {array, rightSubarray, ArrayUtils} [1285-1287],
 assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); ref {array, ArrayUtils} [1289-1291],
 // empty-return tests
assertSame("empty array, object test", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils} [1295-1297],
 assertSame("start > end, object test", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 1)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils} [1299-1301],
 assertSame("start == end, object test", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils} [1303-1305],
 assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 8733, 4)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, array, ArrayUtils} [1307-1309],
 // array type tests
assertSame("float type", float.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); ref {array, ArrayUtils} [1313-1314]
[m[m31.08.2022 - 15:15:23.504 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSubarrayBoolean has 17 assertions: 
 assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); ref {leftSubarray, array, ArrayUtils} [1327-1329],
 assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); ref {array, ArrayUtils, array.length} [1331-1333],
 assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); ref {array, ArrayUtils, midSubarray} [1335-1337],
 assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); ref {array, rightSubarray, ArrayUtils, array.length} [1339-1341],
 assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); ref {nullArray, ArrayUtils} [1344-1344],
 assertEquals("empty array", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2)); ref {ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [1346-1347],
 assertEquals("start > end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 2)); ref {array, ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [1349-1350],
 assertEquals("start == end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [1352-1353],
 assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); ref {leftSubarray, array, ArrayUtils} [1355-1357],
 assertEquals("start overshoot, any end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 33, 4)); ref {array, ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [1359-1361],
 assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); ref {array, rightSubarray, ArrayUtils} [1363-1365],
 assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); ref {array, ArrayUtils} [1367-1369],
 // empty-return tests
assertSame("empty array, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2)); ref {ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [1373-1375],
 assertSame("start > end, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 1)); ref {array, ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [1377-1379],
 assertSame("start == end, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3)); ref {array, ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [1381-1383],
 assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 8733, 4)); ref {array, ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [1385-1387],
 // array type tests
assertSame("boolean type", boolean.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); ref {array, ArrayUtils} [1391-1392]
[m[m31.08.2022 - 15:15:23.504 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSameLength has 16 assertions: 
 assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); ref {nullArray, ArrayUtils} [1404-1404],
 assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); ref {nullArray, ArrayUtils, emptyArray} [1405-1405],
 assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); ref {oneArray, nullArray, ArrayUtils} [1406-1406],
 assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); ref {nullArray, ArrayUtils, twoArray} [1407-1407],
 assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); ref {nullArray, ArrayUtils, emptyArray} [1409-1409],
 assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); ref {ArrayUtils, emptyArray} [1410-1410],
 assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); ref {oneArray, ArrayUtils, emptyArray} [1411-1411],
 assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); ref {ArrayUtils, emptyArray, twoArray} [1412-1412],
 assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); ref {oneArray, nullArray, ArrayUtils} [1414-1414],
 assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); ref {oneArray, ArrayUtils, emptyArray} [1415-1415],
 assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); ref {oneArray, ArrayUtils} [1416-1416],
 assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); ref {oneArray, ArrayUtils, twoArray} [1417-1417],
 assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); ref {nullArray, ArrayUtils, twoArray} [1419-1419],
 assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); ref {ArrayUtils, emptyArray, twoArray} [1420-1420],
 assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); ref {oneArray, ArrayUtils, twoArray} [1421-1421],
 assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); ref {ArrayUtils, twoArray} [1422-1422]
[m[m31.08.2022 - 15:15:23.504 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSameLengthBoolean has 16 assertions: 
 assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); ref {nullArray, ArrayUtils} [1432-1432],
 assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); ref {nullArray, ArrayUtils, emptyArray} [1433-1433],
 assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); ref {oneArray, nullArray, ArrayUtils} [1434-1434],
 assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); ref {nullArray, ArrayUtils, twoArray} [1435-1435],
 assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); ref {nullArray, ArrayUtils, emptyArray} [1437-1437],
 assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); ref {ArrayUtils, emptyArray} [1438-1438],
 assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); ref {oneArray, ArrayUtils, emptyArray} [1439-1439],
 assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); ref {ArrayUtils, emptyArray, twoArray} [1440-1440],
 assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); ref {oneArray, nullArray, ArrayUtils} [1442-1442],
 assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); ref {oneArray, ArrayUtils, emptyArray} [1443-1443],
 assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); ref {oneArray, ArrayUtils} [1444-1444],
 assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); ref {oneArray, ArrayUtils, twoArray} [1445-1445],
 assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); ref {nullArray, ArrayUtils, twoArray} [1447-1447],
 assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); ref {ArrayUtils, emptyArray, twoArray} [1448-1448],
 assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); ref {oneArray, ArrayUtils, twoArray} [1449-1449],
 assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); ref {ArrayUtils, twoArray} [1450-1450]
[m[m31.08.2022 - 15:15:23.504 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSameLengthLong has 16 assertions: 
 assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); ref {nullArray, ArrayUtils} [1460-1460],
 assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); ref {nullArray, ArrayUtils, emptyArray} [1461-1461],
 assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); ref {oneArray, nullArray, ArrayUtils} [1462-1462],
 assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); ref {nullArray, ArrayUtils, twoArray} [1463-1463],
 assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); ref {nullArray, ArrayUtils, emptyArray} [1465-1465],
 assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); ref {ArrayUtils, emptyArray} [1466-1466],
 assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); ref {oneArray, ArrayUtils, emptyArray} [1467-1467],
 assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); ref {ArrayUtils, emptyArray, twoArray} [1468-1468],
 assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); ref {oneArray, nullArray, ArrayUtils} [1470-1470],
 assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); ref {oneArray, ArrayUtils, emptyArray} [1471-1471],
 assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); ref {oneArray, ArrayUtils} [1472-1472],
 assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); ref {oneArray, ArrayUtils, twoArray} [1473-1473],
 assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); ref {nullArray, ArrayUtils, twoArray} [1475-1475],
 assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); ref {ArrayUtils, emptyArray, twoArray} [1476-1476],
 assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); ref {oneArray, ArrayUtils, twoArray} [1477-1477],
 assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); ref {ArrayUtils, twoArray} [1478-1478]
[m[m31.08.2022 - 15:15:23.504 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSameLengthInt has 16 assertions: 
 assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); ref {nullArray, ArrayUtils} [1488-1488],
 assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); ref {nullArray, ArrayUtils, emptyArray} [1489-1489],
 assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); ref {oneArray, nullArray, ArrayUtils} [1490-1490],
 assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); ref {nullArray, ArrayUtils, twoArray} [1491-1491],
 assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); ref {nullArray, ArrayUtils, emptyArray} [1493-1493],
 assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); ref {ArrayUtils, emptyArray} [1494-1494],
 assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); ref {oneArray, ArrayUtils, emptyArray} [1495-1495],
 assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); ref {ArrayUtils, emptyArray, twoArray} [1496-1496],
 assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); ref {oneArray, nullArray, ArrayUtils} [1498-1498],
 assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); ref {oneArray, ArrayUtils, emptyArray} [1499-1499],
 assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); ref {oneArray, ArrayUtils} [1500-1500],
 assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); ref {oneArray, ArrayUtils, twoArray} [1501-1501],
 assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); ref {nullArray, ArrayUtils, twoArray} [1503-1503],
 assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); ref {ArrayUtils, emptyArray, twoArray} [1504-1504],
 assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); ref {oneArray, ArrayUtils, twoArray} [1505-1505],
 assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); ref {ArrayUtils, twoArray} [1506-1506]
[m[m31.08.2022 - 15:15:23.504 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSameLengthShort has 16 assertions: 
 assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); ref {nullArray, ArrayUtils} [1516-1516],
 assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); ref {nullArray, ArrayUtils, emptyArray} [1517-1517],
 assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); ref {oneArray, nullArray, ArrayUtils} [1518-1518],
 assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); ref {nullArray, ArrayUtils, twoArray} [1519-1519],
 assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); ref {nullArray, ArrayUtils, emptyArray} [1521-1521],
 assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); ref {ArrayUtils, emptyArray} [1522-1522],
 assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); ref {oneArray, ArrayUtils, emptyArray} [1523-1523],
 assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); ref {ArrayUtils, emptyArray, twoArray} [1524-1524],
 assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); ref {oneArray, nullArray, ArrayUtils} [1526-1526],
 assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); ref {oneArray, ArrayUtils, emptyArray} [1527-1527],
 assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); ref {oneArray, ArrayUtils} [1528-1528],
 assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); ref {oneArray, ArrayUtils, twoArray} [1529-1529],
 assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); ref {nullArray, ArrayUtils, twoArray} [1531-1531],
 assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); ref {ArrayUtils, emptyArray, twoArray} [1532-1532],
 assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); ref {oneArray, ArrayUtils, twoArray} [1533-1533],
 assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); ref {ArrayUtils, twoArray} [1534-1534]
[m[m31.08.2022 - 15:15:23.504 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSameLengthChar has 16 assertions: 
 assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); ref {nullArray, ArrayUtils} [1544-1544],
 assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); ref {nullArray, ArrayUtils, emptyArray} [1545-1545],
 assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); ref {oneArray, nullArray, ArrayUtils} [1546-1546],
 assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); ref {nullArray, ArrayUtils, twoArray} [1547-1547],
 assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); ref {nullArray, ArrayUtils, emptyArray} [1549-1549],
 assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); ref {ArrayUtils, emptyArray} [1550-1550],
 assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); ref {oneArray, ArrayUtils, emptyArray} [1551-1551],
 assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); ref {ArrayUtils, emptyArray, twoArray} [1552-1552],
 assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); ref {oneArray, nullArray, ArrayUtils} [1554-1554],
 assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); ref {oneArray, ArrayUtils, emptyArray} [1555-1555],
 assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); ref {oneArray, ArrayUtils} [1556-1556],
 assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); ref {oneArray, ArrayUtils, twoArray} [1557-1557],
 assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); ref {nullArray, ArrayUtils, twoArray} [1559-1559],
 assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); ref {ArrayUtils, emptyArray, twoArray} [1560-1560],
 assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); ref {oneArray, ArrayUtils, twoArray} [1561-1561],
 assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); ref {ArrayUtils, twoArray} [1562-1562]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSameLengthByte has 16 assertions: 
 assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); ref {nullArray, ArrayUtils} [1572-1572],
 assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); ref {nullArray, ArrayUtils, emptyArray} [1573-1573],
 assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); ref {oneArray, nullArray, ArrayUtils} [1574-1574],
 assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); ref {nullArray, ArrayUtils, twoArray} [1575-1575],
 assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); ref {nullArray, ArrayUtils, emptyArray} [1577-1577],
 assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); ref {ArrayUtils, emptyArray} [1578-1578],
 assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); ref {oneArray, ArrayUtils, emptyArray} [1579-1579],
 assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); ref {ArrayUtils, emptyArray, twoArray} [1580-1580],
 assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); ref {oneArray, nullArray, ArrayUtils} [1582-1582],
 assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); ref {oneArray, ArrayUtils, emptyArray} [1583-1583],
 assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); ref {oneArray, ArrayUtils} [1584-1584],
 assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); ref {oneArray, ArrayUtils, twoArray} [1585-1585],
 assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); ref {nullArray, ArrayUtils, twoArray} [1587-1587],
 assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); ref {ArrayUtils, emptyArray, twoArray} [1588-1588],
 assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); ref {oneArray, ArrayUtils, twoArray} [1589-1589],
 assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); ref {ArrayUtils, twoArray} [1590-1590]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSameLengthDouble has 16 assertions: 
 assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); ref {nullArray, ArrayUtils} [1600-1600],
 assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); ref {nullArray, ArrayUtils, emptyArray} [1601-1601],
 assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); ref {oneArray, nullArray, ArrayUtils} [1602-1602],
 assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); ref {nullArray, ArrayUtils, twoArray} [1603-1603],
 assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); ref {nullArray, ArrayUtils, emptyArray} [1605-1605],
 assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); ref {ArrayUtils, emptyArray} [1606-1606],
 assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); ref {oneArray, ArrayUtils, emptyArray} [1607-1607],
 assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); ref {ArrayUtils, emptyArray, twoArray} [1608-1608],
 assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); ref {oneArray, nullArray, ArrayUtils} [1610-1610],
 assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); ref {oneArray, ArrayUtils, emptyArray} [1611-1611],
 assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); ref {oneArray, ArrayUtils} [1612-1612],
 assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); ref {oneArray, ArrayUtils, twoArray} [1613-1613],
 assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); ref {nullArray, ArrayUtils, twoArray} [1615-1615],
 assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); ref {ArrayUtils, emptyArray, twoArray} [1616-1616],
 assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); ref {oneArray, ArrayUtils, twoArray} [1617-1617],
 assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); ref {ArrayUtils, twoArray} [1618-1618]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSameLengthFloat has 16 assertions: 
 assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); ref {nullArray, ArrayUtils} [1628-1628],
 assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); ref {nullArray, ArrayUtils, emptyArray} [1629-1629],
 assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); ref {oneArray, nullArray, ArrayUtils} [1630-1630],
 assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); ref {nullArray, ArrayUtils, twoArray} [1631-1631],
 assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); ref {nullArray, ArrayUtils, emptyArray} [1633-1633],
 assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); ref {ArrayUtils, emptyArray} [1634-1634],
 assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); ref {oneArray, ArrayUtils, emptyArray} [1635-1635],
 assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); ref {ArrayUtils, emptyArray, twoArray} [1636-1636],
 assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); ref {oneArray, nullArray, ArrayUtils} [1638-1638],
 assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); ref {oneArray, ArrayUtils, emptyArray} [1639-1639],
 assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); ref {oneArray, ArrayUtils} [1640-1640],
 assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); ref {oneArray, ArrayUtils, twoArray} [1641-1641],
 assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); ref {nullArray, ArrayUtils, twoArray} [1643-1643],
 assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); ref {ArrayUtils, emptyArray, twoArray} [1644-1644],
 assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); ref {oneArray, ArrayUtils, twoArray} [1645-1645],
 assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); ref {ArrayUtils, twoArray} [1646-1646]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testSameType has 5 assertions: 
 assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0])); ref {ArrayUtils} [1665-1665],
 assertFalse(ArrayUtils.isSameType(new String[0], new Object[0])); ref {ArrayUtils} [1666-1666],
 assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0])); ref {ArrayUtils} [1667-1667],
 assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0])); ref {ArrayUtils} [1668-1668],
 assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0])); ref {ArrayUtils} [1669-1669]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverse has 8 assertions: 
 assertEquals(array[0], str3); ref {str3, array} [1682-1682],
 assertEquals(array[1], str2); ref {array, str2} [1683-1683],
 assertEquals(array[2], str1); ref {array, str1} [1684-1684],
 assertEquals(array[0], str4); ref {array, str4} [1688-1688],
 assertEquals(array[1], str3); ref {str3, array} [1689-1689],
 assertEquals(array[2], str2); ref {array, str2} [1690-1690],
 assertEquals(array[3], str1); ref {array, str1} [1691-1691],
 assertArrayEquals(null, array); ref {array} [1695-1695]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseLong has 4 assertions: 
 assertEquals(array[0], 3L); ref {array} [1702-1702],
 assertEquals(array[1], 2L); ref {array} [1703-1703],
 assertEquals(array[2], 1L); ref {array} [1704-1704],
 assertEquals(null, array); ref {array} [1708-1708]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseInt has 4 assertions: 
 assertEquals(array[0], 3); ref {array} [1715-1715],
 assertEquals(array[1], 2); ref {array} [1716-1716],
 assertEquals(array[2], 1); ref {array} [1717-1717],
 assertEquals(null, array); ref {array} [1721-1721]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseShort has 4 assertions: 
 assertEquals(array[0], 3); ref {array} [1728-1728],
 assertEquals(array[1], 2); ref {array} [1729-1729],
 assertEquals(array[2], 1); ref {array} [1730-1730],
 assertEquals(null, array); ref {array} [1734-1734]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseChar has 4 assertions: 
 assertEquals(array[0], 'C'); ref {array} [1741-1741],
 assertEquals(array[1], 'f'); ref {array} [1742-1742],
 assertEquals(array[2], 'a'); ref {array} [1743-1743],
 assertEquals(null, array); ref {array} [1747-1747]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseByte has 4 assertions: 
 assertEquals(array[0], 4); ref {array} [1754-1754],
 assertEquals(array[1], 3); ref {array} [1755-1755],
 assertEquals(array[2], 2); ref {array} [1756-1756],
 assertEquals(null, array); ref {array} [1760-1760]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseDouble has 4 assertions: 
 assertEquals(array[0], 0.5d, 0.0d); ref {array} [1767-1767],
 assertEquals(array[1], 0.4d, 0.0d); ref {array} [1768-1768],
 assertEquals(array[2], 0.3d, 0.0d); ref {array} [1769-1769],
 assertEquals(null, array); ref {array} [1773-1773]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseFloat has 4 assertions: 
 assertEquals(array[0], 0.5f, 0.0f); ref {array} [1780-1780],
 assertEquals(array[1], 0.4f, 0.0f); ref {array} [1781-1781],
 assertEquals(array[2], 0.3f, 0.0f); ref {array} [1782-1782],
 assertEquals(null, array); ref {array} [1786-1786]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseBoolean has 4 assertions: 
 assertTrue(array[0]); ref {array} [1793-1793],
 assertFalse(array[1]); ref {array} [1794-1794],
 assertFalse(array[2]); ref {array} [1795-1795],
 assertEquals(null, array); ref {array} [1799-1799]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseBooleanRange has 13 assertions: 
 assertTrue(array[0]); ref {array} [1807-1807],
 assertFalse(array[1]); ref {array} [1808-1808],
 assertFalse(array[2]); ref {array} [1809-1809],
 assertFalse(array[0]); ref {array} [1813-1813],
 assertFalse(array[1]); ref {array} [1814-1814],
 assertTrue(array[2]); ref {array} [1815-1815],
 assertTrue(array[0]); ref {array} [1819-1819],
 assertFalse(array[1]); ref {array} [1820-1820],
 assertFalse(array[2]); ref {array} [1821-1821],
 assertTrue(array[0]); ref {array} [1825-1825],
 assertFalse(array[1]); ref {array} [1826-1826],
 assertFalse(array[2]); ref {array} [1827-1827],
 assertEquals(null, array); ref {array} [1831-1831]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseByteRange has 13 assertions: 
 assertEquals(3, array[0]); ref {array} [1839-1839],
 assertEquals(2, array[1]); ref {array} [1840-1840],
 assertEquals(1, array[2]); ref {array} [1841-1841],
 assertEquals(2, array[0]); ref {array} [1845-1845],
 assertEquals(1, array[1]); ref {array} [1846-1846],
 assertEquals(3, array[2]); ref {array} [1847-1847],
 assertEquals(3, array[0]); ref {array} [1851-1851],
 assertEquals(2, array[1]); ref {array} [1852-1852],
 assertEquals(1, array[2]); ref {array} [1853-1853],
 assertEquals(3, array[0]); ref {array} [1857-1857],
 assertEquals(2, array[1]); ref {array} [1858-1858],
 assertEquals(1, array[2]); ref {array} [1859-1859],
 assertEquals(null, array); ref {array} [1863-1863]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseCharRange has 13 assertions: 
 assertEquals(3, array[0]); ref {array} [1871-1871],
 assertEquals(2, array[1]); ref {array} [1872-1872],
 assertEquals(1, array[2]); ref {array} [1873-1873],
 assertEquals(2, array[0]); ref {array} [1877-1877],
 assertEquals(1, array[1]); ref {array} [1878-1878],
 assertEquals(3, array[2]); ref {array} [1879-1879],
 assertEquals(3, array[0]); ref {array} [1883-1883],
 assertEquals(2, array[1]); ref {array} [1884-1884],
 assertEquals(1, array[2]); ref {array} [1885-1885],
 assertEquals(3, array[0]); ref {array} [1889-1889],
 assertEquals(2, array[1]); ref {array} [1890-1890],
 assertEquals(1, array[2]); ref {array} [1891-1891],
 assertEquals(null, array); ref {array} [1895-1895]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseDoubleRange has 13 assertions: 
 assertEquals(3, array[0], 0); ref {array} [1903-1903],
 assertEquals(2, array[1], 0); ref {array} [1904-1904],
 assertEquals(1, array[2], 0); ref {array} [1905-1905],
 assertEquals(2, array[0], 0); ref {array} [1909-1909],
 assertEquals(1, array[1], 0); ref {array} [1910-1910],
 assertEquals(3, array[2], 0); ref {array} [1911-1911],
 assertEquals(3, array[0], 0); ref {array} [1915-1915],
 assertEquals(2, array[1], 0); ref {array} [1916-1916],
 assertEquals(1, array[2], 0); ref {array} [1917-1917],
 assertEquals(3, array[0], 0); ref {array} [1921-1921],
 assertEquals(2, array[1], 0); ref {array} [1922-1922],
 assertEquals(1, array[2], 0); ref {array} [1923-1923],
 assertEquals(null, array); ref {array} [1927-1927]
[m[m31.08.2022 - 15:15:23.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseFloatRange has 13 assertions: 
 assertEquals(3, array[0], 0); ref {array} [1935-1935],
 assertEquals(2, array[1], 0); ref {array} [1936-1936],
 assertEquals(1, array[2], 0); ref {array} [1937-1937],
 assertEquals(2, array[0], 0); ref {array} [1941-1941],
 assertEquals(1, array[1], 0); ref {array} [1942-1942],
 assertEquals(3, array[2], 0); ref {array} [1943-1943],
 assertEquals(3, array[0], 0); ref {array} [1947-1947],
 assertEquals(2, array[1], 0); ref {array} [1948-1948],
 assertEquals(1, array[2], 0); ref {array} [1949-1949],
 assertEquals(3, array[0], 0); ref {array} [1953-1953],
 assertEquals(2, array[1], 0); ref {array} [1954-1954],
 assertEquals(1, array[2], 0); ref {array} [1955-1955],
 assertEquals(null, array); ref {array} [1959-1959]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseIntRange has 13 assertions: 
 assertEquals(3, array[0]); ref {array} [1967-1967],
 assertEquals(2, array[1]); ref {array} [1968-1968],
 assertEquals(1, array[2]); ref {array} [1969-1969],
 assertEquals(2, array[0]); ref {array} [1973-1973],
 assertEquals(1, array[1]); ref {array} [1974-1974],
 assertEquals(3, array[2]); ref {array} [1975-1975],
 assertEquals(3, array[0]); ref {array} [1979-1979],
 assertEquals(2, array[1]); ref {array} [1980-1980],
 assertEquals(1, array[2]); ref {array} [1981-1981],
 assertEquals(3, array[0]); ref {array} [1985-1985],
 assertEquals(2, array[1]); ref {array} [1986-1986],
 assertEquals(1, array[2]); ref {array} [1987-1987],
 assertEquals(null, array); ref {array} [1991-1991]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseLongRange has 13 assertions: 
 assertEquals(3, array[0]); ref {array} [1999-1999],
 assertEquals(2, array[1]); ref {array} [2000-2000],
 assertEquals(1, array[2]); ref {array} [2001-2001],
 assertEquals(2, array[0]); ref {array} [2005-2005],
 assertEquals(1, array[1]); ref {array} [2006-2006],
 assertEquals(3, array[2]); ref {array} [2007-2007],
 assertEquals(3, array[0]); ref {array} [2011-2011],
 assertEquals(2, array[1]); ref {array} [2012-2012],
 assertEquals(1, array[2]); ref {array} [2013-2013],
 assertEquals(3, array[0]); ref {array} [2017-2017],
 assertEquals(2, array[1]); ref {array} [2018-2018],
 assertEquals(1, array[2]); ref {array} [2019-2019],
 assertEquals(null, array); ref {array} [2023-2023]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseShortRange has 13 assertions: 
 assertEquals(3, array[0]); ref {array} [2031-2031],
 assertEquals(2, array[1]); ref {array} [2032-2032],
 assertEquals(1, array[2]); ref {array} [2033-2033],
 assertEquals(2, array[0]); ref {array} [2037-2037],
 assertEquals(1, array[1]); ref {array} [2038-2038],
 assertEquals(3, array[2]); ref {array} [2039-2039],
 assertEquals(3, array[0]); ref {array} [2043-2043],
 assertEquals(2, array[1]); ref {array} [2044-2044],
 assertEquals(1, array[2]); ref {array} [2045-2045],
 assertEquals(3, array[0]); ref {array} [2049-2049],
 assertEquals(2, array[1]); ref {array} [2050-2050],
 assertEquals(1, array[2]); ref {array} [2051-2051],
 assertEquals(null, array); ref {array} [2055-2055]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testReverseObjectRange has 13 assertions: 
 assertEquals("3", array[0]); ref {array} [2063-2063],
 assertEquals("2", array[1]); ref {array} [2064-2064],
 assertEquals("1", array[2]); ref {array} [2065-2065],
 assertEquals("2", array[0]); ref {array} [2069-2069],
 assertEquals("1", array[1]); ref {array} [2070-2070],
 assertEquals("3", array[2]); ref {array} [2071-2071],
 assertEquals("3", array[0]); ref {array} [2075-2075],
 assertEquals("2", array[1]); ref {array} [2076-2076],
 assertEquals("1", array[2]); ref {array} [2077-2077],
 assertEquals("3", array[0]); ref {array} [2081-2081],
 assertEquals("2", array[1]); ref {array} [2082-2082],
 assertEquals("1", array[2]); ref {array} [2083-2083],
 assertEquals(null, array); ref {array} [2087-2087]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOf has 9 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(null, null)); ref {ArrayUtils} [2095-2095],
 assertEquals(-1, ArrayUtils.indexOf(null, "0")); ref {ArrayUtils} [2096-2096],
 assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); ref {ArrayUtils} [2097-2097],
 assertEquals(0, ArrayUtils.indexOf(array, "0")); ref {array, ArrayUtils} [2098-2098],
 assertEquals(1, ArrayUtils.indexOf(array, "1")); ref {array, ArrayUtils} [2099-2099],
 assertEquals(2, ArrayUtils.indexOf(array, "2")); ref {array, ArrayUtils} [2100-2100],
 assertEquals(3, ArrayUtils.indexOf(array, "3")); ref {array, ArrayUtils} [2101-2101],
 assertEquals(4, ArrayUtils.indexOf(array, null)); ref {array, ArrayUtils} [2102-2102],
 assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); ref {array, ArrayUtils} [2103-2103]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfWithStartIndex has 12 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(null, null, 2)); ref {ArrayUtils} [2109-2109],
 assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0", 0)); ref {ArrayUtils} [2110-2110],
 assertEquals(-1, ArrayUtils.indexOf(null, "0", 2)); ref {ArrayUtils} [2111-2111],
 assertEquals(5, ArrayUtils.indexOf(array, "0", 2)); ref {array, ArrayUtils} [2112-2112],
 assertEquals(-1, ArrayUtils.indexOf(array, "1", 2)); ref {array, ArrayUtils} [2113-2113],
 assertEquals(2, ArrayUtils.indexOf(array, "2", 2)); ref {array, ArrayUtils} [2114-2114],
 assertEquals(3, ArrayUtils.indexOf(array, "3", 2)); ref {array, ArrayUtils} [2115-2115],
 assertEquals(4, ArrayUtils.indexOf(array, null, 2)); ref {array, ArrayUtils} [2116-2116],
 assertEquals(-1, ArrayUtils.indexOf(array, "notInArray", 2)); ref {array, ArrayUtils} [2117-2117],
 assertEquals(4, ArrayUtils.indexOf(array, null, -1)); ref {array, ArrayUtils} [2119-2119],
 assertEquals(-1, ArrayUtils.indexOf(array, null, 8)); ref {array, ArrayUtils} [2120-2120],
 assertEquals(-1, ArrayUtils.indexOf(array, "0", 8)); ref {array, ArrayUtils} [2121-2121]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOf has 8 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); ref {ArrayUtils} [2127-2127],
 assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); ref {ArrayUtils} [2128-2128],
 assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); ref {array, ArrayUtils} [2129-2129],
 assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); ref {array, ArrayUtils} [2130-2130],
 assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); ref {array, ArrayUtils} [2131-2131],
 assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); ref {array, ArrayUtils} [2132-2132],
 assertEquals(4, ArrayUtils.lastIndexOf(array, null)); ref {array, ArrayUtils} [2133-2133],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); ref {array, ArrayUtils} [2134-2134]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfWithStartIndex has 12 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2)); ref {ArrayUtils} [2140-2140],
 assertEquals(-1, ArrayUtils.lastIndexOf(null, "0", 2)); ref {ArrayUtils} [2141-2141],
 assertEquals(0, ArrayUtils.lastIndexOf(array, "0", 2)); ref {array, ArrayUtils} [2142-2142],
 assertEquals(1, ArrayUtils.lastIndexOf(array, "1", 2)); ref {array, ArrayUtils} [2143-2143],
 assertEquals(2, ArrayUtils.lastIndexOf(array, "2", 2)); ref {array, ArrayUtils} [2144-2144],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", 2)); ref {array, ArrayUtils} [2145-2145],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", -1)); ref {array, ArrayUtils} [2146-2146],
 assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5)); ref {array, ArrayUtils} [2147-2147],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2)); ref {array, ArrayUtils} [2148-2148],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray", 5)); ref {array, ArrayUtils} [2149-2149],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1)); ref {array, ArrayUtils} [2151-2151],
 assertEquals(5, ArrayUtils.lastIndexOf(array, "0", 88)); ref {array, ArrayUtils} [2152-2152]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testContains has 8 assertions: 
 assertFalse(ArrayUtils.contains(null, null)); ref {ArrayUtils} [2158-2158],
 assertFalse(ArrayUtils.contains(null, "1")); ref {ArrayUtils} [2159-2159],
 assertTrue(ArrayUtils.contains(array, "0")); ref {array, ArrayUtils} [2160-2160],
 assertTrue(ArrayUtils.contains(array, "1")); ref {array, ArrayUtils} [2161-2161],
 assertTrue(ArrayUtils.contains(array, "2")); ref {array, ArrayUtils} [2162-2162],
 assertTrue(ArrayUtils.contains(array, "3")); ref {array, ArrayUtils} [2163-2163],
 assertTrue(ArrayUtils.contains(array, null)); ref {array, ArrayUtils} [2164-2164],
 assertFalse(ArrayUtils.contains(array, "notInArray")); ref {array, ArrayUtils} [2165-2165]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfLong has 6 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, 0)); ref {array, ArrayUtils} [2172-2172],
 assertEquals(0, ArrayUtils.indexOf(array, 0)); ref {array, ArrayUtils} [2174-2174],
 assertEquals(1, ArrayUtils.indexOf(array, 1)); ref {array, ArrayUtils} [2175-2175],
 assertEquals(2, ArrayUtils.indexOf(array, 2)); ref {array, ArrayUtils} [2176-2176],
 assertEquals(3, ArrayUtils.indexOf(array, 3)); ref {array, ArrayUtils} [2177-2177],
 assertEquals(-1, ArrayUtils.indexOf(array, 99)); ref {array, ArrayUtils} [2178-2178]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfLongWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); ref {array, ArrayUtils} [2184-2184],
 assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); ref {array, ArrayUtils} [2186-2186],
 assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); ref {array, ArrayUtils} [2187-2187],
 assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); ref {array, ArrayUtils} [2188-2188],
 assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); ref {array, ArrayUtils} [2189-2189],
 assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); ref {array, ArrayUtils} [2190-2190],
 assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); ref {array, ArrayUtils} [2191-2191],
 assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); ref {array, ArrayUtils} [2192-2192]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfLong has 6 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); ref {array, ArrayUtils} [2198-2198],
 assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); ref {array, ArrayUtils} [2200-2200],
 assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); ref {array, ArrayUtils} [2201-2201],
 assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); ref {array, ArrayUtils} [2202-2202],
 assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); ref {array, ArrayUtils} [2203-2203],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); ref {array, ArrayUtils} [2204-2204]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfLongWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); ref {array, ArrayUtils} [2210-2210],
 assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); ref {array, ArrayUtils} [2212-2212],
 assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); ref {array, ArrayUtils} [2213-2213],
 assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); ref {array, ArrayUtils} [2214-2214],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); ref {array, ArrayUtils} [2215-2215],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); ref {array, ArrayUtils} [2216-2216],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4)); ref {array, ArrayUtils} [2217-2217],
 assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); ref {array, ArrayUtils} [2218-2218]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testContainsLong has 6 assertions: 
 assertFalse(ArrayUtils.contains(array, 1)); ref {array, ArrayUtils} [2224-2224],
 assertTrue(ArrayUtils.contains(array, 0)); ref {array, ArrayUtils} [2226-2226],
 assertTrue(ArrayUtils.contains(array, 1)); ref {array, ArrayUtils} [2227-2227],
 assertTrue(ArrayUtils.contains(array, 2)); ref {array, ArrayUtils} [2228-2228],
 assertTrue(ArrayUtils.contains(array, 3)); ref {array, ArrayUtils} [2229-2229],
 assertFalse(ArrayUtils.contains(array, 99)); ref {array, ArrayUtils} [2230-2230]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfInt has 6 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, 0)); ref {array, ArrayUtils} [2237-2237],
 assertEquals(0, ArrayUtils.indexOf(array, 0)); ref {array, ArrayUtils} [2239-2239],
 assertEquals(1, ArrayUtils.indexOf(array, 1)); ref {array, ArrayUtils} [2240-2240],
 assertEquals(2, ArrayUtils.indexOf(array, 2)); ref {array, ArrayUtils} [2241-2241],
 assertEquals(3, ArrayUtils.indexOf(array, 3)); ref {array, ArrayUtils} [2242-2242],
 assertEquals(-1, ArrayUtils.indexOf(array, 99)); ref {array, ArrayUtils} [2243-2243]
[m[m31.08.2022 - 15:15:23.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfIntWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); ref {array, ArrayUtils} [2249-2249],
 assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); ref {array, ArrayUtils} [2251-2251],
 assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); ref {array, ArrayUtils} [2252-2252],
 assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); ref {array, ArrayUtils} [2253-2253],
 assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); ref {array, ArrayUtils} [2254-2254],
 assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); ref {array, ArrayUtils} [2255-2255],
 assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); ref {array, ArrayUtils} [2256-2256],
 assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); ref {array, ArrayUtils} [2257-2257]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfInt has 6 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); ref {array, ArrayUtils} [2263-2263],
 assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); ref {array, ArrayUtils} [2265-2265],
 assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); ref {array, ArrayUtils} [2266-2266],
 assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); ref {array, ArrayUtils} [2267-2267],
 assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); ref {array, ArrayUtils} [2268-2268],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); ref {array, ArrayUtils} [2269-2269]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfIntWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); ref {array, ArrayUtils} [2275-2275],
 assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); ref {array, ArrayUtils} [2277-2277],
 assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); ref {array, ArrayUtils} [2278-2278],
 assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); ref {array, ArrayUtils} [2279-2279],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); ref {array, ArrayUtils} [2280-2280],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); ref {array, ArrayUtils} [2281-2281],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); ref {array, ArrayUtils} [2282-2282],
 assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); ref {array, ArrayUtils} [2283-2283]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testContainsInt has 6 assertions: 
 assertFalse(ArrayUtils.contains(array, 1)); ref {array, ArrayUtils} [2289-2289],
 assertTrue(ArrayUtils.contains(array, 0)); ref {array, ArrayUtils} [2291-2291],
 assertTrue(ArrayUtils.contains(array, 1)); ref {array, ArrayUtils} [2292-2292],
 assertTrue(ArrayUtils.contains(array, 2)); ref {array, ArrayUtils} [2293-2293],
 assertTrue(ArrayUtils.contains(array, 3)); ref {array, ArrayUtils} [2294-2294],
 assertFalse(ArrayUtils.contains(array, 99)); ref {array, ArrayUtils} [2295-2295]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfShort has 6 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, (short) 0)); ref {array, ArrayUtils} [2302-2302],
 assertEquals(0, ArrayUtils.indexOf(array, (short) 0)); ref {array, ArrayUtils} [2304-2304],
 assertEquals(1, ArrayUtils.indexOf(array, (short) 1)); ref {array, ArrayUtils} [2305-2305],
 assertEquals(2, ArrayUtils.indexOf(array, (short) 2)); ref {array, ArrayUtils} [2306-2306],
 assertEquals(3, ArrayUtils.indexOf(array, (short) 3)); ref {array, ArrayUtils} [2307-2307],
 assertEquals(-1, ArrayUtils.indexOf(array, (short) 99)); ref {array, ArrayUtils} [2308-2308]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfShortWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2)); ref {array, ArrayUtils} [2314-2314],
 assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2)); ref {array, ArrayUtils} [2316-2316],
 assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2)); ref {array, ArrayUtils} [2317-2317],
 assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2)); ref {array, ArrayUtils} [2318-2318],
 assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2)); ref {array, ArrayUtils} [2319-2319],
 assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1)); ref {array, ArrayUtils} [2320-2320],
 assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0)); ref {array, ArrayUtils} [2321-2321],
 assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6)); ref {array, ArrayUtils} [2322-2322]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfShort has 6 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0)); ref {array, ArrayUtils} [2328-2328],
 assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0)); ref {array, ArrayUtils} [2330-2330],
 assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1)); ref {array, ArrayUtils} [2331-2331],
 assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2)); ref {array, ArrayUtils} [2332-2332],
 assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3)); ref {array, ArrayUtils} [2333-2333],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); ref {array, ArrayUtils} [2334-2334]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfShortWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2)); ref {array, ArrayUtils} [2340-2340],
 assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2)); ref {array, ArrayUtils} [2342-2342],
 assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2)); ref {array, ArrayUtils} [2343-2343],
 assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2)); ref {array, ArrayUtils} [2344-2344],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2)); ref {array, ArrayUtils} [2345-2345],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1)); ref {array, ArrayUtils} [2346-2346],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); ref {array, ArrayUtils} [2347-2347],
 assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88)); ref {array, ArrayUtils} [2348-2348]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testContainsShort has 6 assertions: 
 assertFalse(ArrayUtils.contains(array, (short) 1)); ref {array, ArrayUtils} [2354-2354],
 assertTrue(ArrayUtils.contains(array, (short) 0)); ref {array, ArrayUtils} [2356-2356],
 assertTrue(ArrayUtils.contains(array, (short) 1)); ref {array, ArrayUtils} [2357-2357],
 assertTrue(ArrayUtils.contains(array, (short) 2)); ref {array, ArrayUtils} [2358-2358],
 assertTrue(ArrayUtils.contains(array, (short) 3)); ref {array, ArrayUtils} [2359-2359],
 assertFalse(ArrayUtils.contains(array, (short) 99)); ref {array, ArrayUtils} [2360-2360]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfChar has 6 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, 'a')); ref {array, ArrayUtils} [2367-2367],
 assertEquals(0, ArrayUtils.indexOf(array, 'a')); ref {array, ArrayUtils} [2369-2369],
 assertEquals(1, ArrayUtils.indexOf(array, 'b')); ref {array, ArrayUtils} [2370-2370],
 assertEquals(2, ArrayUtils.indexOf(array, 'c')); ref {array, ArrayUtils} [2371-2371],
 assertEquals(3, ArrayUtils.indexOf(array, 'd')); ref {array, ArrayUtils} [2372-2372],
 assertEquals(-1, ArrayUtils.indexOf(array, 'e')); ref {array, ArrayUtils} [2373-2373]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfCharWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2)); ref {array, ArrayUtils} [2379-2379],
 assertEquals(4, ArrayUtils.indexOf(array, 'a', 2)); ref {array, ArrayUtils} [2381-2381],
 assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2)); ref {array, ArrayUtils} [2382-2382],
 assertEquals(2, ArrayUtils.indexOf(array, 'c', 2)); ref {array, ArrayUtils} [2383-2383],
 assertEquals(3, ArrayUtils.indexOf(array, 'd', 2)); ref {array, ArrayUtils} [2384-2384],
 assertEquals(3, ArrayUtils.indexOf(array, 'd', -1)); ref {array, ArrayUtils} [2385-2385],
 assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0)); ref {array, ArrayUtils} [2386-2386],
 assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6)); ref {array, ArrayUtils} [2387-2387]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfChar has 6 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a')); ref {array, ArrayUtils} [2393-2393],
 assertEquals(4, ArrayUtils.lastIndexOf(array, 'a')); ref {array, ArrayUtils} [2395-2395],
 assertEquals(1, ArrayUtils.lastIndexOf(array, 'b')); ref {array, ArrayUtils} [2396-2396],
 assertEquals(2, ArrayUtils.lastIndexOf(array, 'c')); ref {array, ArrayUtils} [2397-2397],
 assertEquals(3, ArrayUtils.lastIndexOf(array, 'd')); ref {array, ArrayUtils} [2398-2398],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e')); ref {array, ArrayUtils} [2399-2399]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfCharWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2)); ref {array, ArrayUtils} [2405-2405],
 assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2)); ref {array, ArrayUtils} [2407-2407],
 assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2)); ref {array, ArrayUtils} [2408-2408],
 assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2)); ref {array, ArrayUtils} [2409-2409],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2)); ref {array, ArrayUtils} [2410-2410],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1)); ref {array, ArrayUtils} [2411-2411],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e')); ref {array, ArrayUtils} [2412-2412],
 assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88)); ref {array, ArrayUtils} [2413-2413]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testContainsChar has 6 assertions: 
 assertFalse(ArrayUtils.contains(array, 'b')); ref {array, ArrayUtils} [2419-2419],
 assertTrue(ArrayUtils.contains(array, 'a')); ref {array, ArrayUtils} [2421-2421],
 assertTrue(ArrayUtils.contains(array, 'b')); ref {array, ArrayUtils} [2422-2422],
 assertTrue(ArrayUtils.contains(array, 'c')); ref {array, ArrayUtils} [2423-2423],
 assertTrue(ArrayUtils.contains(array, 'd')); ref {array, ArrayUtils} [2424-2424],
 assertFalse(ArrayUtils.contains(array, 'e')); ref {array, ArrayUtils} [2425-2425]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfByte has 6 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0)); ref {array, ArrayUtils} [2432-2432],
 assertEquals(0, ArrayUtils.indexOf(array, (byte) 0)); ref {array, ArrayUtils} [2434-2434],
 assertEquals(1, ArrayUtils.indexOf(array, (byte) 1)); ref {array, ArrayUtils} [2435-2435],
 assertEquals(2, ArrayUtils.indexOf(array, (byte) 2)); ref {array, ArrayUtils} [2436-2436],
 assertEquals(3, ArrayUtils.indexOf(array, (byte) 3)); ref {array, ArrayUtils} [2437-2437],
 assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99)); ref {array, ArrayUtils} [2438-2438]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfByteWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2)); ref {array, ArrayUtils} [2444-2444],
 assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2)); ref {array, ArrayUtils} [2446-2446],
 assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2)); ref {array, ArrayUtils} [2447-2447],
 assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2)); ref {array, ArrayUtils} [2448-2448],
 assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2)); ref {array, ArrayUtils} [2449-2449],
 assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1)); ref {array, ArrayUtils} [2450-2450],
 assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0)); ref {array, ArrayUtils} [2451-2451],
 assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6)); ref {array, ArrayUtils} [2452-2452]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfByte has 6 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0)); ref {array, ArrayUtils} [2458-2458],
 assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0)); ref {array, ArrayUtils} [2460-2460],
 assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1)); ref {array, ArrayUtils} [2461-2461],
 assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2)); ref {array, ArrayUtils} [2462-2462],
 assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3)); ref {array, ArrayUtils} [2463-2463],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); ref {array, ArrayUtils} [2464-2464]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfByteWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); ref {array, ArrayUtils} [2470-2470],
 assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); ref {array, ArrayUtils} [2472-2472],
 assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); ref {array, ArrayUtils} [2473-2473],
 assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); ref {array, ArrayUtils} [2474-2474],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); ref {array, ArrayUtils} [2475-2475],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); ref {array, ArrayUtils} [2476-2476],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); ref {array, ArrayUtils} [2477-2477],
 assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); ref {array, ArrayUtils} [2478-2478]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testContainsByte has 6 assertions: 
 assertFalse(ArrayUtils.contains(array, (byte) 1)); ref {array, ArrayUtils} [2484-2484],
 assertTrue(ArrayUtils.contains(array, (byte) 0)); ref {array, ArrayUtils} [2486-2486],
 assertTrue(ArrayUtils.contains(array, (byte) 1)); ref {array, ArrayUtils} [2487-2487],
 assertTrue(ArrayUtils.contains(array, (byte) 2)); ref {array, ArrayUtils} [2488-2488],
 assertTrue(ArrayUtils.contains(array, (byte) 3)); ref {array, ArrayUtils} [2489-2489],
 assertFalse(ArrayUtils.contains(array, (byte) 99)); ref {array, ArrayUtils} [2490-2490]
[m[m31.08.2022 - 15:15:23.507 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfDouble has 8 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 0)); ref {array, ArrayUtils} [2498-2498],
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 0)); ref {array, ArrayUtils} [2500-2500],
 assertEquals(0, ArrayUtils.indexOf(array, (double) 0)); ref {array, ArrayUtils} [2502-2502],
 assertEquals(1, ArrayUtils.indexOf(array, (double) 1)); ref {array, ArrayUtils} [2503-2503],
 assertEquals(2, ArrayUtils.indexOf(array, (double) 2)); ref {array, ArrayUtils} [2504-2504],
 assertEquals(3, ArrayUtils.indexOf(array, (double) 3)); ref {array, ArrayUtils} [2505-2505],
 assertEquals(3, ArrayUtils.indexOf(array, (double) 3, -1)); ref {array, ArrayUtils} [2506-2506],
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 99)); ref {array, ArrayUtils} [2507-2507]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfDoubleTolerance has 6 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); ref {array, ArrayUtils} [2514-2514],
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); ref {array, ArrayUtils} [2516-2516],
 assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3)); ref {array, ArrayUtils} [2518-2518],
 assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35)); ref {array, ArrayUtils} [2519-2519],
 assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0)); ref {array, ArrayUtils} [2520-2520],
 assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001)); ref {array, ArrayUtils} [2521-2521]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfDoubleWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2)); ref {array, ArrayUtils} [2528-2528],
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2)); ref {array, ArrayUtils} [2530-2530],
 assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2)); ref {array, ArrayUtils} [2532-2532],
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 1, 2)); ref {array, ArrayUtils} [2533-2533],
 assertEquals(2, ArrayUtils.indexOf(array, (double) 2, 2)); ref {array, ArrayUtils} [2534-2534],
 assertEquals(3, ArrayUtils.indexOf(array, (double) 3, 2)); ref {array, ArrayUtils} [2535-2535],
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0)); ref {array, ArrayUtils} [2536-2536],
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6)); ref {array, ArrayUtils} [2537-2537]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfDoubleWithStartIndexTolerance has 10 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); ref {array, ArrayUtils} [2544-2544],
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); ref {array, ArrayUtils} [2546-2546],
 assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3)); ref {array, ArrayUtils} [2548-2548],
 assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3)); ref {array, ArrayUtils} [2549-2549],
 assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3)); ref {array, ArrayUtils} [2550-2550],
 assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35)); ref {array, ArrayUtils} [2551-2551],
 assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0)); ref {array, ArrayUtils} [2552-2552],
 assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001)); ref {array, ArrayUtils} [2553-2553],
 assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0)); ref {array, ArrayUtils} [2554-2554],
 assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001)); ref {array, ArrayUtils} [2555-2555]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfDouble has 7 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); ref {array, ArrayUtils} [2562-2562],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); ref {array, ArrayUtils} [2564-2564],
 assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0)); ref {array, ArrayUtils} [2566-2566],
 assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1)); ref {array, ArrayUtils} [2567-2567],
 assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2)); ref {array, ArrayUtils} [2568-2568],
 assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3)); ref {array, ArrayUtils} [2569-2569],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); ref {array, ArrayUtils} [2570-2570]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfDoubleTolerance has 6 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); ref {array, ArrayUtils} [2577-2577],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); ref {array, ArrayUtils} [2579-2579],
 assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); ref {array, ArrayUtils} [2581-2581],
 assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); ref {array, ArrayUtils} [2582-2582],
 assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); ref {array, ArrayUtils} [2583-2583],
 assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001)); ref {array, ArrayUtils} [2584-2584]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfDoubleWithStartIndex has 9 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2)); ref {array, ArrayUtils} [2591-2591],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2)); ref {array, ArrayUtils} [2593-2593],
 assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2)); ref {array, ArrayUtils} [2595-2595],
 assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2)); ref {array, ArrayUtils} [2596-2596],
 assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2)); ref {array, ArrayUtils} [2597-2597],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2)); ref {array, ArrayUtils} [2598-2598],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1)); ref {array, ArrayUtils} [2599-2599],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); ref {array, ArrayUtils} [2600-2600],
 assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88)); ref {array, ArrayUtils} [2601-2601]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfDoubleWithStartIndexTolerance has 9 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); ref {array, ArrayUtils} [2608-2608],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); ref {array, ArrayUtils} [2610-2610],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0)); ref {array, ArrayUtils} [2612-2612],
 assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3)); ref {array, ArrayUtils} [2614-2614],
 assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3)); ref {array, ArrayUtils} [2615-2615],
 assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35)); ref {array, ArrayUtils} [2616-2616],
 assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0)); ref {array, ArrayUtils, array.length} [2617-2617],
 assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001)); ref {array, ArrayUtils, array.length} [2618-2618],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0)); ref {array, ArrayUtils} [2619-2619]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testContainsDouble has 6 assertions: 
 assertFalse(ArrayUtils.contains(array, (double) 1)); ref {array, ArrayUtils} [2626-2626],
 assertTrue(ArrayUtils.contains(array, (double) 0)); ref {array, ArrayUtils} [2628-2628],
 assertTrue(ArrayUtils.contains(array, (double) 1)); ref {array, ArrayUtils} [2629-2629],
 assertTrue(ArrayUtils.contains(array, (double) 2)); ref {array, ArrayUtils} [2630-2630],
 assertTrue(ArrayUtils.contains(array, (double) 3)); ref {array, ArrayUtils} [2631-2631],
 assertFalse(ArrayUtils.contains(array, (double) 99)); ref {array, ArrayUtils} [2632-2632]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testContainsDoubleTolerance has 5 assertions: 
 assertFalse(ArrayUtils.contains(array, (double) 1, (double) 0)); ref {array, ArrayUtils} [2639-2639],
 assertFalse(ArrayUtils.contains(array, (double) 4.0, (double) 0.33)); ref {array, ArrayUtils} [2641-2641],
 assertFalse(ArrayUtils.contains(array, (double) 2.5, (double) 0.49)); ref {array, ArrayUtils} [2642-2642],
 assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.50)); ref {array, ArrayUtils} [2643-2643],
 assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.51)); ref {array, ArrayUtils} [2644-2644]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfFloat has 7 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, (float) 0)); ref {array, ArrayUtils} [2652-2652],
 assertEquals(-1, ArrayUtils.indexOf(array, (float) 0)); ref {array, ArrayUtils} [2654-2654],
 assertEquals(0, ArrayUtils.indexOf(array, (float) 0)); ref {array, ArrayUtils} [2656-2656],
 assertEquals(1, ArrayUtils.indexOf(array, (float) 1)); ref {array, ArrayUtils} [2657-2657],
 assertEquals(2, ArrayUtils.indexOf(array, (float) 2)); ref {array, ArrayUtils} [2658-2658],
 assertEquals(3, ArrayUtils.indexOf(array, (float) 3)); ref {array, ArrayUtils} [2659-2659],
 assertEquals(-1, ArrayUtils.indexOf(array, (float) 99)); ref {array, ArrayUtils} [2660-2660]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfFloatWithStartIndex has 9 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); ref {array, ArrayUtils} [2667-2667],
 assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); ref {array, ArrayUtils} [2669-2669],
 assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2)); ref {array, ArrayUtils} [2671-2671],
 assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2)); ref {array, ArrayUtils} [2672-2672],
 assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2)); ref {array, ArrayUtils} [2673-2673],
 assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2)); ref {array, ArrayUtils} [2674-2674],
 assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1)); ref {array, ArrayUtils} [2675-2675],
 assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0)); ref {array, ArrayUtils} [2676-2676],
 assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6)); ref {array, ArrayUtils} [2677-2677]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfFloat has 7 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); ref {array, ArrayUtils} [2684-2684],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); ref {array, ArrayUtils} [2686-2686],
 assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); ref {array, ArrayUtils} [2688-2688],
 assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); ref {array, ArrayUtils} [2689-2689],
 assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); ref {array, ArrayUtils} [2690-2690],
 assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); ref {array, ArrayUtils} [2691-2691],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); ref {array, ArrayUtils} [2692-2692]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfFloatWithStartIndex has 9 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2)); ref {array, ArrayUtils} [2699-2699],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2)); ref {array, ArrayUtils} [2701-2701],
 assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2)); ref {array, ArrayUtils} [2703-2703],
 assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2)); ref {array, ArrayUtils} [2704-2704],
 assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2)); ref {array, ArrayUtils} [2705-2705],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2)); ref {array, ArrayUtils} [2706-2706],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, -1)); ref {array, ArrayUtils} [2707-2707],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); ref {array, ArrayUtils} [2708-2708],
 assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88)); ref {array, ArrayUtils} [2709-2709]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testContainsFloat has 6 assertions: 
 assertFalse(ArrayUtils.contains(array, (float) 1)); ref {array, ArrayUtils} [2716-2716],
 assertTrue(ArrayUtils.contains(array, (float) 0)); ref {array, ArrayUtils} [2718-2718],
 assertTrue(ArrayUtils.contains(array, (float) 1)); ref {array, ArrayUtils} [2719-2719],
 assertTrue(ArrayUtils.contains(array, (float) 2)); ref {array, ArrayUtils} [2720-2720],
 assertTrue(ArrayUtils.contains(array, (float) 3)); ref {array, ArrayUtils} [2721-2721],
 assertFalse(ArrayUtils.contains(array, (float) 99)); ref {array, ArrayUtils} [2722-2722]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfBoolean has 5 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, true)); ref {array, ArrayUtils} [2729-2729],
 assertEquals(-1, ArrayUtils.indexOf(array, true)); ref {array, ArrayUtils} [2731-2731],
 assertEquals(0, ArrayUtils.indexOf(array, true)); ref {array, ArrayUtils} [2733-2733],
 assertEquals(1, ArrayUtils.indexOf(array, false)); ref {array, ArrayUtils} [2734-2734],
 assertEquals(-1, ArrayUtils.indexOf(array, false)); ref {array, ArrayUtils} [2736-2736]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIndexOfBooleanWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); ref {array, ArrayUtils} [2742-2742],
 assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); ref {array, ArrayUtils} [2744-2744],
 assertEquals(2, ArrayUtils.indexOf(array, true, 1)); ref {array, ArrayUtils} [2746-2746],
 assertEquals(-1, ArrayUtils.indexOf(array, false, 2)); ref {array, ArrayUtils} [2747-2747],
 assertEquals(1, ArrayUtils.indexOf(array, false, 0)); ref {array, ArrayUtils} [2748-2748],
 assertEquals(1, ArrayUtils.indexOf(array, false, -1)); ref {array, ArrayUtils} [2749-2749],
 assertEquals(-1, ArrayUtils.indexOf(array, false, 0)); ref {array, ArrayUtils} [2751-2751],
 assertEquals(-1, ArrayUtils.indexOf(array, false, -1)); ref {array, ArrayUtils} [2752-2752]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfBoolean has 5 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); ref {array, ArrayUtils} [2758-2758],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); ref {array, ArrayUtils} [2760-2760],
 assertEquals(2, ArrayUtils.lastIndexOf(array, true)); ref {array, ArrayUtils} [2762-2762],
 assertEquals(1, ArrayUtils.lastIndexOf(array, false)); ref {array, ArrayUtils} [2763-2763],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); ref {array, ArrayUtils} [2765-2765]
[m[m31.08.2022 - 15:15:23.508 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testLastIndexOfBooleanWithStartIndex has 8 assertions: 
 assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); ref {array, ArrayUtils} [2771-2771],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); ref {array, ArrayUtils} [2773-2773],
 assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2)); ref {array, ArrayUtils} [2775-2775],
 assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1)); ref {array, ArrayUtils} [2776-2776],
 assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2)); ref {array, ArrayUtils} [2777-2777],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); ref {array, ArrayUtils} [2778-2778],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2)); ref {array, ArrayUtils} [2780-2780],
 assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); ref {array, ArrayUtils} [2781-2781]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testContainsBoolean has 5 assertions: 
 assertFalse(ArrayUtils.contains(array, true)); ref {array, ArrayUtils} [2787-2787],
 assertTrue(ArrayUtils.contains(array, true)); ref {array, ArrayUtils} [2789-2789],
 assertTrue(ArrayUtils.contains(array, false)); ref {array, ArrayUtils} [2790-2790],
 assertTrue(ArrayUtils.contains(array, true)); ref {array, ArrayUtils} [2792-2792],
 assertFalse(ArrayUtils.contains(array, false)); ref {array, ArrayUtils} [2793-2793]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_boolean has 3 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(b)); ref {b, ArrayUtils} [2801-2801],
 assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0])); ref {ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [2802-2802],
 assertTrue(Arrays.equals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }))); ref {Boolean.TRUE, Boolean.FALSE, ArrayUtils, Arrays, Boolean} [2803-2806]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_boolean_boolean has 5 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(null, false)); ref {ArrayUtils} [2816-2816],
 assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false)); ref {ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_ARRAY} [2817-2817],
 assertTrue(Arrays.equals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, false))); ref {Boolean.TRUE, Boolean.FALSE, ArrayUtils, Arrays, Boolean} [2818-2821],
 assertTrue(Arrays.equals(new boolean[] { true, false, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, false))); ref {Boolean.TRUE, Boolean.FALSE, ArrayUtils, Arrays, Boolean} [2822-2825],
 assertTrue(Arrays.equals(new boolean[] { true, true, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, true))); ref {Boolean.TRUE, Boolean.FALSE, ArrayUtils, Arrays, Boolean} [2826-2829]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToObject_boolean has 3 assertions: 
 assertArrayEquals(null, ArrayUtils.toObject(b)); ref {b, ArrayUtils} [2835-2835],
 assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0])); ref {ArrayUtils, ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY} [2836-2836],
 assertTrue(Arrays.equals(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, ArrayUtils.toObject(new boolean[] { true, false, true }))); ref {Boolean.TRUE, Boolean.FALSE, ArrayUtils, Arrays, Boolean} [2837-2840]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_char has 3 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(b)); ref {b, ArrayUtils} [2848-2848],
 assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0])); ref {ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY} [2850-2850],
 assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }))); ref {Character.MAX_VALUE, Character.MIN_VALUE, Character, ArrayUtils, Arrays} [2852-2856]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_char_char has 4 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); ref {b, Character.MIN_VALUE, Character, ArrayUtils} [2867-2867],
 assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0], (char) 0)); ref {ArrayUtils, ArrayUtils.EMPTY_CHAR_ARRAY} [2869-2870],
 assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }, Character.MIN_VALUE))); ref {Character.MAX_VALUE, Character.MIN_VALUE, Character, ArrayUtils, Arrays} [2872-2877],
 assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), null, new Character('0') }, Character.MAX_VALUE))); ref {Character.MAX_VALUE, Character.MIN_VALUE, Character, ArrayUtils, Arrays} [2879-2883]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToObject_char has 3 assertions: 
 assertArrayEquals(null, ArrayUtils.toObject(b)); ref {b, ArrayUtils} [2889-2889],
 assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.toObject(new char[0])); ref {ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils} [2891-2892],
 assertTrue(Arrays.equals(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }, ArrayUtils.toObject(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }))); ref {Character.MAX_VALUE, Character.MIN_VALUE, Character, ArrayUtils, Arrays} [2894-2899]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_byte has 3 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(b)); ref {b, ArrayUtils} [2907-2907],
 assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); ref {ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils} [2909-2909],
 assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }))); ref {Byte.MAX_VALUE, Byte, ArrayUtils, Arrays, Byte.MIN_VALUE} [2911-2915]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_byte_byte has 4 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); ref {b, Byte, ArrayUtils, Byte.MIN_VALUE} [2926-2926],
 assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0], (byte) 1)); ref {ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils} [2928-2929],
 assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, Byte.MIN_VALUE))); ref {Byte.MAX_VALUE, Byte, ArrayUtils, Arrays, Byte.MIN_VALUE} [2931-2936],
 assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null, Byte.valueOf((byte) 9999999) }, Byte.MAX_VALUE))); ref {Byte.MAX_VALUE, Byte, ArrayUtils, Arrays, Byte.MIN_VALUE} [2938-2942]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToObject_byte has 3 assertions: 
 assertArrayEquals(null, ArrayUtils.toObject(b)); ref {b, ArrayUtils} [2948-2948],
 assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.toObject(new byte[0])); ref {ArrayUtils, ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY} [2950-2951],
 assertTrue(Arrays.equals(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, ArrayUtils.toObject(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }))); ref {Byte.MAX_VALUE, Byte, ArrayUtils, Arrays, Byte.MIN_VALUE} [2953-2958]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_short has 3 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(b)); ref {b, ArrayUtils} [2966-2966],
 assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0])); ref {ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils} [2968-2968],
 assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }))); ref {Short.MIN_VALUE, ArrayUtils, Arrays, Short.MAX_VALUE, Short} [2970-2974]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_short_short has 4 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE)); ref {s, Short.MIN_VALUE, ArrayUtils, Short} [2985-2985],
 assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], Short.MIN_VALUE)); ref {Short.MIN_VALUE, ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils, Short} [2987-2988],
 assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, Short.MIN_VALUE))); ref {Short.MIN_VALUE, ArrayUtils, Arrays, Short.MAX_VALUE, Short} [2990-2994],
 assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null, Short.valueOf((short) 9999999) }, Short.MAX_VALUE))); ref {Short.MIN_VALUE, ArrayUtils, Arrays, Short.MAX_VALUE, Short} [2996-3000]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToObject_short has 3 assertions: 
 assertArrayEquals(null, ArrayUtils.toObject(b)); ref {b, ArrayUtils} [3006-3006],
 assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.toObject(new short[0])); ref {ArrayUtils, ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY} [3008-3009],
 assertTrue(Arrays.equals(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, ArrayUtils.toObject(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }))); ref {Short.MIN_VALUE, ArrayUtils, Arrays, Short.MAX_VALUE, Short} [3011-3016]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_int has 3 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(b)); ref {b, ArrayUtils} [3024-3024],
 assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); ref {ArrayUtils, ArrayUtils.EMPTY_INT_ARRAY} [3025-3025],
 assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }))); ref {Integer, ArrayUtils, Integer.MAX_VALUE, Arrays, Integer.MIN_VALUE} [3026-3030]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_int_int has 4 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE)); ref {Integer, ArrayUtils, l, Integer.MIN_VALUE} [3041-3041],
 assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0], 1)); ref {ArrayUtils, ArrayUtils.EMPTY_INT_ARRAY} [3042-3043],
 assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, 1))); ref {Integer, ArrayUtils, Integer.MAX_VALUE, Arrays, Integer.MIN_VALUE} [3044-3047],
 assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null, Integer.valueOf(9999999) }, Integer.MAX_VALUE))); ref {Integer, ArrayUtils, Integer.MAX_VALUE, Arrays, Integer.MIN_VALUE} [3048-3052]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_intNull has 1 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE)); ref {Integer, iArray, ArrayUtils, Integer.MIN_VALUE} [3058-3058]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToObject_int has 3 assertions: 
 assertArrayEquals(null, ArrayUtils.toObject(b)); ref {b, ArrayUtils} [3064-3064],
 assertSame(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.toObject(new int[0])); ref {ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils} [3066-3068],
 assertTrue(Arrays.equals(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, ArrayUtils.toObject(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }))); ref {Integer, ArrayUtils, Integer.MAX_VALUE, Arrays, Integer.MIN_VALUE} [3070-3077]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_long has 3 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(b)); ref {b, ArrayUtils} [3085-3085],
 assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0])); ref {ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY} [3087-3088],
 assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }))); ref {Long.MAX_VALUE, Long, ArrayUtils, Long.MIN_VALUE, Arrays} [3090-3094]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_long_long has 4 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE)); ref {ArrayUtils, Long, Long.MIN_VALUE, l} [3105-3105],
 assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0], 1)); ref {ArrayUtils, ArrayUtils.EMPTY_LONG_ARRAY} [3107-3108],
 assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, 1))); ref {Long.MAX_VALUE, Long, ArrayUtils, Long.MIN_VALUE, Arrays} [3110-3113],
 assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null, Long.valueOf(9999999) }, Long.MAX_VALUE))); ref {Long.MAX_VALUE, Long, ArrayUtils, Long.MIN_VALUE, Arrays} [3115-3119]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToObject_long has 3 assertions: 
 assertArrayEquals(null, ArrayUtils.toObject(b)); ref {b, ArrayUtils} [3125-3125],
 assertSame(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.toObject(new long[0])); ref {ArrayUtils, ArrayUtils.EMPTY_LONG_OBJECT_ARRAY} [3127-3129],
 assertTrue(Arrays.equals(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, ArrayUtils.toObject(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }))); ref {Long.MAX_VALUE, Long, ArrayUtils, Long.MIN_VALUE, Arrays} [3131-3138]
[m[m31.08.2022 - 15:15:23.509 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_float has 3 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(b)); ref {b, ArrayUtils} [3146-3146],
 assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.toPrimitive(new Float[0])); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils} [3148-3149],
 assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }))); ref {Float, Float.MAX_VALUE, ArrayUtils, Float.MIN_VALUE, Arrays} [3151-3155]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_float_float has 4 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); ref {Float, ArrayUtils, Float.MIN_VALUE, l} [3166-3166],
 assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.toPrimitive(new Float[0], 1)); ref {ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils} [3168-3169],
 assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, 1))); ref {Float, Float.MAX_VALUE, ArrayUtils, Float.MIN_VALUE, Arrays} [3171-3174],
 assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null, Float.valueOf(9999999) }, Float.MAX_VALUE))); ref {Float, Float.MAX_VALUE, ArrayUtils, Float.MIN_VALUE, Arrays} [3176-3180]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToObject_float has 3 assertions: 
 assertArrayEquals(null, ArrayUtils.toObject(b)); ref {b, ArrayUtils} [3186-3186],
 assertSame(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.toObject(new float[0])); ref {ArrayUtils, ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY} [3188-3190],
 assertTrue(Arrays.equals(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, ArrayUtils.toObject(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }))); ref {Float, Float.MAX_VALUE, ArrayUtils, Float.MIN_VALUE, Arrays} [3192-3199]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_double has 3 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(b)); ref {b, ArrayUtils} [3207-3207],
 assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0])); ref {ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils} [3209-3210],
 assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }))); ref {ArrayUtils, Double.MIN_VALUE, Double.MAX_VALUE, Arrays, Double} [3212-3216]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToPrimitive_double_double has 4 assertions: 
 assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE)); ref {ArrayUtils, Double.MIN_VALUE, l, Double} [3227-3227],
 assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0], 1)); ref {ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils} [3229-3230],
 assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, 1))); ref {ArrayUtils, Double.MIN_VALUE, Double.MAX_VALUE, Arrays, Double} [3232-3235],
 assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), null, Double.valueOf(9999999) }, Double.MAX_VALUE))); ref {ArrayUtils, Double.MIN_VALUE, Double.MAX_VALUE, Arrays, Double} [3237-3241]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testToObject_double has 3 assertions: 
 assertArrayEquals(null, ArrayUtils.toObject(b)); ref {b, ArrayUtils} [3247-3247],
 assertSame(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.toObject(new double[0])); ref {ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils} [3249-3251],
 assertTrue(Arrays.equals(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, ArrayUtils.toObject(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }))); ref {ArrayUtils, Double.MIN_VALUE, Double.MAX_VALUE, Arrays, Double} [3253-3260]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsEmptyObject has 3 assertions: 
 assertTrue(ArrayUtils.isEmpty((Object[]) null)); ref {ArrayUtils} [3271-3271],
 assertTrue(ArrayUtils.isEmpty(emptyArray)); ref {ArrayUtils, emptyArray} [3272-3272],
 assertFalse(ArrayUtils.isEmpty(notEmptyArray)); ref {notEmptyArray, ArrayUtils} [3273-3273]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsEmptyPrimitives has 24 assertions: 
 assertTrue(ArrayUtils.isEmpty((long[]) null)); ref {ArrayUtils} [3290-3290],
 assertTrue(ArrayUtils.isEmpty(emptyLongArray)); ref {emptyLongArray, ArrayUtils} [3291-3291],
 assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); ref {notEmptyLongArray, ArrayUtils} [3292-3292],
 assertTrue(ArrayUtils.isEmpty((int[]) null)); ref {ArrayUtils} [3296-3296],
 assertTrue(ArrayUtils.isEmpty(emptyIntArray)); ref {emptyIntArray, ArrayUtils} [3297-3297],
 assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); ref {notEmptyIntArray, ArrayUtils} [3298-3298],
 assertTrue(ArrayUtils.isEmpty((short[]) null)); ref {ArrayUtils} [3302-3302],
 assertTrue(ArrayUtils.isEmpty(emptyShortArray)); ref {emptyShortArray, ArrayUtils} [3303-3303],
 assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); ref {ArrayUtils, notEmptyShortArray} [3304-3304],
 assertTrue(ArrayUtils.isEmpty((char[]) null)); ref {ArrayUtils} [3308-3308],
 assertTrue(ArrayUtils.isEmpty(emptyCharArray)); ref {ArrayUtils, emptyCharArray} [3309-3309],
 assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); ref {notEmptyCharArray, ArrayUtils} [3310-3310],
 assertTrue(ArrayUtils.isEmpty((byte[]) null)); ref {ArrayUtils} [3314-3314],
 assertTrue(ArrayUtils.isEmpty(emptyByteArray)); ref {emptyByteArray, ArrayUtils} [3315-3315],
 assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); ref {notEmptyByteArray, ArrayUtils} [3316-3316],
 assertTrue(ArrayUtils.isEmpty((double[]) null)); ref {ArrayUtils} [3320-3320],
 assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); ref {emptyDoubleArray, ArrayUtils} [3321-3321],
 assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); ref {ArrayUtils, notEmptyDoubleArray} [3322-3322],
 assertTrue(ArrayUtils.isEmpty((float[]) null)); ref {ArrayUtils} [3326-3326],
 assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); ref {emptyFloatArray, ArrayUtils} [3327-3327],
 assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); ref {ArrayUtils, notEmptyFloatArray} [3328-3328],
 assertTrue(ArrayUtils.isEmpty((boolean[]) null)); ref {ArrayUtils} [3332-3332],
 assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); ref {emptyBooleanArray, ArrayUtils} [3333-3333],
 assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); ref {ArrayUtils, notEmptyBooleanArray} [3334-3334]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsNotEmptyObject has 3 assertions: 
 assertFalse(ArrayUtils.isNotEmpty((Object[]) null)); ref {ArrayUtils} [3344-3344],
 assertFalse(ArrayUtils.isNotEmpty(emptyArray)); ref {ArrayUtils, emptyArray} [3345-3345],
 assertTrue(ArrayUtils.isNotEmpty(notEmptyArray)); ref {notEmptyArray, ArrayUtils} [3346-3346]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsNotEmptyPrimitives has 24 assertions: 
 assertFalse(ArrayUtils.isNotEmpty((long[]) null)); ref {ArrayUtils} [3363-3363],
 assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); ref {emptyLongArray, ArrayUtils} [3364-3364],
 assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); ref {notEmptyLongArray, ArrayUtils} [3365-3365],
 assertFalse(ArrayUtils.isNotEmpty((int[]) null)); ref {ArrayUtils} [3369-3369],
 assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); ref {emptyIntArray, ArrayUtils} [3370-3370],
 assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); ref {notEmptyIntArray, ArrayUtils} [3371-3371],
 assertFalse(ArrayUtils.isNotEmpty((short[]) null)); ref {ArrayUtils} [3375-3375],
 assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); ref {emptyShortArray, ArrayUtils} [3376-3376],
 assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); ref {ArrayUtils, notEmptyShortArray} [3377-3377],
 assertFalse(ArrayUtils.isNotEmpty((char[]) null)); ref {ArrayUtils} [3381-3381],
 assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); ref {ArrayUtils, emptyCharArray} [3382-3382],
 assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); ref {notEmptyCharArray, ArrayUtils} [3383-3383],
 assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); ref {ArrayUtils} [3387-3387],
 assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); ref {emptyByteArray, ArrayUtils} [3388-3388],
 assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); ref {notEmptyByteArray, ArrayUtils} [3389-3389],
 assertFalse(ArrayUtils.isNotEmpty((double[]) null)); ref {ArrayUtils} [3393-3393],
 assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); ref {emptyDoubleArray, ArrayUtils} [3394-3394],
 assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); ref {ArrayUtils, notEmptyDoubleArray} [3395-3395],
 assertFalse(ArrayUtils.isNotEmpty((float[]) null)); ref {ArrayUtils} [3399-3399],
 assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); ref {emptyFloatArray, ArrayUtils} [3400-3400],
 assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); ref {ArrayUtils, notEmptyFloatArray} [3401-3401],
 assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); ref {ArrayUtils} [3405-3405],
 assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); ref {emptyBooleanArray, ArrayUtils} [3406-3406],
 assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); ref {ArrayUtils, notEmptyBooleanArray} [3407-3407]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testGetLength has 25 assertions: 
 assertEquals(0, ArrayUtils.getLength(null)); ref {ArrayUtils} [3412-3412],
 assertEquals(0, ArrayUtils.getLength((Object[]) null)); ref {ArrayUtils} [3416-3416],
 assertEquals(0, ArrayUtils.getLength(emptyObjectArray)); ref {emptyObjectArray, ArrayUtils} [3417-3417],
 assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray)); ref {ArrayUtils, notEmptyObjectArray} [3418-3418],
 assertEquals(0, ArrayUtils.getLength((int[]) null)); ref {ArrayUtils} [3422-3422],
 assertEquals(0, ArrayUtils.getLength(emptyIntArray)); ref {emptyIntArray, ArrayUtils} [3423-3423],
 assertEquals(1, ArrayUtils.getLength(notEmptyIntArray)); ref {notEmptyIntArray, ArrayUtils} [3424-3424],
 assertEquals(0, ArrayUtils.getLength((short[]) null)); ref {ArrayUtils} [3428-3428],
 assertEquals(0, ArrayUtils.getLength(emptyShortArray)); ref {emptyShortArray, ArrayUtils} [3429-3429],
 assertEquals(1, ArrayUtils.getLength(notEmptyShortArray)); ref {ArrayUtils, notEmptyShortArray} [3430-3430],
 assertEquals(0, ArrayUtils.getLength((char[]) null)); ref {ArrayUtils} [3434-3434],
 assertEquals(0, ArrayUtils.getLength(emptyCharArray)); ref {ArrayUtils, emptyCharArray} [3435-3435],
 assertEquals(1, ArrayUtils.getLength(notEmptyCharArray)); ref {notEmptyCharArray, ArrayUtils} [3436-3436],
 assertEquals(0, ArrayUtils.getLength((byte[]) null)); ref {ArrayUtils} [3440-3440],
 assertEquals(0, ArrayUtils.getLength(emptyByteArray)); ref {emptyByteArray, ArrayUtils} [3441-3441],
 assertEquals(1, ArrayUtils.getLength(notEmptyByteArray)); ref {notEmptyByteArray, ArrayUtils} [3442-3442],
 assertEquals(0, ArrayUtils.getLength((double[]) null)); ref {ArrayUtils} [3446-3446],
 assertEquals(0, ArrayUtils.getLength(emptyDoubleArray)); ref {emptyDoubleArray, ArrayUtils} [3447-3447],
 assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray)); ref {ArrayUtils, notEmptyDoubleArray} [3448-3448],
 assertEquals(0, ArrayUtils.getLength((float[]) null)); ref {ArrayUtils} [3452-3452],
 assertEquals(0, ArrayUtils.getLength(emptyFloatArray)); ref {emptyFloatArray, ArrayUtils} [3453-3453],
 assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray)); ref {ArrayUtils, notEmptyFloatArray} [3454-3454],
 assertEquals(0, ArrayUtils.getLength((boolean[]) null)); ref {ArrayUtils} [3458-3458],
 assertEquals(0, ArrayUtils.getLength(emptyBooleanArray)); ref {emptyBooleanArray, ArrayUtils} [3459-3459],
 assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray)); ref {ArrayUtils, notEmptyBooleanArray} [3460-3460]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsSorted has 4 assertions: 
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3471-3471],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3474-3474],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3477-3477],
 assertFalse(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3480-3480]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsSortedComparator has 4 assertions: 
 assertTrue(ArrayUtils.isSorted(array, c)); ref {c, array, ArrayUtils} [3492-3492],
 assertTrue(ArrayUtils.isSorted(array, c)); ref {c, array, ArrayUtils} [3495-3495],
 assertTrue(ArrayUtils.isSorted(array, c)); ref {c, array, ArrayUtils} [3498-3498],
 assertFalse(ArrayUtils.isSorted(array, c)); ref {c, array, ArrayUtils} [3501-3501]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsSortedNullComparator has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsSortedInt has 4 assertions: 
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3512-3512],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3515-3515],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3518-3518],
 assertFalse(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3521-3521]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsSortedFloat has 4 assertions: 
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3527-3527],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3530-3530],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3533-3533],
 assertFalse(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3536-3536]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsSortedLong has 4 assertions: 
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3542-3542],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3545-3545],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3548-3548],
 assertFalse(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3551-3551]
[m[m31.08.2022 - 15:15:23.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsSortedDouble has 4 assertions: 
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3557-3557],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3560-3560],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3563-3563],
 assertFalse(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3566-3566]
[m[m31.08.2022 - 15:15:23.511 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsSortedChar has 4 assertions: 
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3572-3572],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3575-3575],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3578-3578],
 assertFalse(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3581-3581]
[m[m31.08.2022 - 15:15:23.511 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsSortedByte has 4 assertions: 
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3587-3587],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3590-3590],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3593-3593],
 assertFalse(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3596-3596]
[m[m31.08.2022 - 15:15:23.511 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsSortedShort has 4 assertions: 
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3602-3602],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3605-3605],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3608-3608],
 assertFalse(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3611-3611]
[m[m31.08.2022 - 15:15:23.511 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ArrayUtilsTest::testIsSortedBool has 4 assertions: 
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3617-3617],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3620-3620],
 assertTrue(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3623-3623],
 assertFalse(ArrayUtils.isSorted(array)); ref {array, ArrayUtils} [3626-3626]
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.parseTestSuite() - Found 15 test cases
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testInit has 7 assertions: 
 assertEquals("Wrong service", service, semaphore.getExecutorService()); ref {service, semaphore} [60-60],
 assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); ref {PERIOD, semaphore} [61-61],
 assertEquals("Wrong unit", UNIT, semaphore.getUnit()); ref {UNIT, semaphore} [62-62],
 assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); ref {semaphore} [63-64],
 assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); ref {semaphore} [65-66],
 assertFalse("Already shutdown", semaphore.isShutdown()); ref {semaphore} [67-67],
 assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); ref {semaphore, LIMIT} [68-68]
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testInitInvalidPeriod has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testInitDefaultService has 3 assertions: 
 assertFalse("Wrong periodic task policy", exec.getContinueExistingPeriodicTasksAfterShutdownPolicy()); ref {exec} [89-90],
 assertFalse("Wrong delayed task policy", exec.getExecuteExistingDelayedTasksAfterShutdownPolicy()); ref {exec} [91-92],
 assertFalse("Already shutdown", exec.isShutdown()); ref {exec} [93-93]
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testStartTimer has 1 assertions: 
 assertNotNull("No future returned", future); ref {future} [107-107]
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testShutdownOwnExecutor has 2 assertions: 
 assertTrue("Not shutdown", semaphore.isShutdown()); ref {semaphore} [128-128],
 assertTrue("Executor not shutdown", semaphore.getExecutorService().isShutdown()); ref {semaphore} [129-130]
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testShutdownSharedExecutorNoTask has 1 assertions: 
 assertTrue("Not shutdown", semaphore.isShutdown()); ref {semaphore} [145-145]
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testShutdownSharedExecutorTask has 1 assertions: 
 assertTrue("Not shutdown", semaphore.isShutdown()); ref {semaphore} [180-180]
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testShutdownMultipleTimes has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testAcquireLimit has 3 assertions: 
 // now the semaphore's limit should be reached and the thread blocked
assertEquals("Wrong semaphore count", count - 1, semaphore.getAcquireCount()); ref {count, semaphore} [229-230],
 assertEquals("Wrong semaphore count (2)", 1, semaphore.getAcquireCount()); ref {semaphore} [235-236],
 assertEquals("Wrong acquire() count", count - 1, semaphore.getLastAcquiresPerPeriod()); ref {count, semaphore} [237-238]
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testAcquireMultipleThreads has 2 assertions: 
 assertEquals("Wrong count", 1, semaphore.getAcquireCount()); ref {semaphore} [268-268],
 assertEquals("Wrong acquire count", 1, semaphore.getLastAcquiresPerPeriod()); ref {semaphore} [271-272]
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testAcquireNoLimit has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testPassAfterShutdown has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testAcquireMultiplePeriods has 1 assertions: 
 assertTrue("End of period not reached", semaphore.getPeriodEnds() > 0); ref {semaphore} [335-335]
[m[m31.08.2022 - 15:15:23.514 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testGetAverageCallsPerPeriod has 2 assertions: 
 assertEquals("Wrong average (1)", 1.0, semaphore.getAverageCallsPerPeriod(), .005); ref {semaphore} [354-355],
 assertEquals("Wrong average (2)", 1.5, semaphore.getAverageCallsPerPeriod(), .005); ref {semaphore} [359-360]
[m[m31.08.2022 - 15:15:23.515 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testGetAvailablePermits has 2 assertions: 
 assertEquals("Wrong available count at " + i, LIMIT - i, semaphore.getAvailablePermits()); ref {i, semaphore, LIMIT} [379-380],
 assertEquals("Wrong available count in new period", LIMIT, semaphore.getAvailablePermits()); ref {semaphore, LIMIT} [384-385]
[m[m31.08.2022 - 15:15:23.515 [INFO ] ParsingStrategy.parseTestSuite() - Found 4 test cases
[m[m31.08.2022 - 15:15:23.515 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeLiteralTest::testBasic has 2 assertions: 
 assertTrue(TypeUtils.equals(String.class, new TypeLiteral<String>() {
}.value)); ref {TypeUtils, new TypeLiteral<String>() {
}.value} [31-31],
 assertTrue(TypeUtils.equals(TypeUtils.parameterize(List.class, String.class), new TypeLiteral<List<String>>() {
}.value)); ref {new TypeLiteral<List<String>>() {
}.value, TypeUtils} [32-33]
[m[m31.08.2022 - 15:15:23.515 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeLiteralTest::testTyped has 2 assertions: 
 assertTrue(TypeUtils.equals(String.class, stringType.getType())); ref {stringType, TypeUtils} [39-39],
 assertTrue(TypeUtils.equals(TypeUtils.parameterize(List.class, String.class), listOfStringType.getType())); ref {listOfStringType, TypeUtils} [41-41]
[m[m31.08.2022 - 15:15:23.515 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeLiteralTest::testEquals has 3 assertions: 
 assertEquals(new TypeLiteral<String>() {
}, new TypeLiteral<String>() {
}); ref {} [46-46],
 assertEquals(new TypeLiteral<List<String>>() {
}, new TypeLiteral<List<String>>() {
}); ref {} [47-47],
 assertNotEquals(new TypeLiteral<String>() {
}, new TypeLiteral<List<String>>() {
}); ref {} [48-48]
[m[m31.08.2022 - 15:15:23.515 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.TypeLiteralTest::testRaw has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.515 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.516 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m31.08.2022 - 15:15:23.516 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.ConstructorUtilsTest::testConstructor has 1 assertions: 
 assertNotNull(MethodUtils.class.newInstance()); ref {} [97-97]
[m[m31.08.2022 - 15:15:23.516 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.ConstructorUtilsTest::testInvokeConstructor has 10 assertions: 
 assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); ref {ConstructorUtils, ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY} [102-103],
 assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); ref {ConstructorUtils} [104-105],
 assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); ref {ConstructorUtils} [106-106],
 assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); ref {ConstructorUtils} [107-108],
 assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); ref {ConstructorUtils} [109-110],
 assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); ref {Boolean.TRUE, ConstructorUtils, Boolean} [111-112],
 assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); ref {NumberUtils.INTEGER_ONE, ConstructorUtils, NumberUtils} [113-114],
 assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); ref {NumberUtils.BYTE_ONE, ConstructorUtils, NumberUtils} [115-116],
 assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); ref {NumberUtils.LONG_ONE, ConstructorUtils, NumberUtils} [117-118],
 assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); ref {ConstructorUtils, NumberUtils.DOUBLE_ONE, NumberUtils} [119-120]
[m[m31.08.2022 - 15:15:23.516 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.ConstructorUtilsTest::testInvokeExactConstructor has 6 assertions: 
 assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); ref {ConstructorUtils, ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY} [125-126],
 assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString()); ref {ConstructorUtils} [127-128],
 assertEquals("(String)", ConstructorUtils.invokeExactConstructor(TestBean.class, "").toString()); ref {ConstructorUtils} [129-130],
 assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString()); ref {ConstructorUtils} [131-132],
 assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); ref {NumberUtils.INTEGER_ONE, ConstructorUtils, NumberUtils} [133-134],
 assertEquals("(double)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }).toString()); ref {ConstructorUtils, NumberUtils.DOUBLE_ONE, Double.TYPE, Double, NumberUtils} [135-137]
[m[m31.08.2022 - 15:15:23.516 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.ConstructorUtilsTest::testGetAccessibleConstructor has 3 assertions: 
 assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY))); ref {ConstructorUtils, ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY} [161-162],
 assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY))); ref {ConstructorUtils, ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY} [163-164],
 assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.PublicInnerClass.class)); ref {ConstructorUtils} [165-165]
[m[m31.08.2022 - 15:15:23.516 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.ConstructorUtilsTest::testGetAccessibleConstructorFromDescription has 2 assertions: 
 assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class, ArrayUtils.EMPTY_CLASS_ARRAY)); ref {ConstructorUtils, ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY} [170-171],
 assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY)); ref {ConstructorUtils, ArrayUtils, ArrayUtils.EMPTY_CLASS_ARRAY} [172-173]
[m[m31.08.2022 - 15:15:23.516 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.ConstructorUtilsTest::testGetMatchingAccessibleMethod has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.517 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.ConstructorUtilsTest::testNullArgument has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.517 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.518 [INFO ] ParsingStrategy.parseTestSuite() - Found 15 test cases
[m[m31.08.2022 - 15:15:23.518 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testBuildDefaults has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.518 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testBuildNamingPatternNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.518 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testBuildWrappedFactoryNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.518 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testBuildUncaughtExceptionHandlerNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.518 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testBuilderReset has 1 assertions: 
 assertNotSame("Wrapped factory not reset", wrappedFactory, factory.getWrappedFactory()); ref {factory, wrappedFactory} [112-113]
[m[m31.08.2022 - 15:15:23.518 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testBuilderResetAfterBuild has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.518 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testNewThreadNamingPattern has 2 assertions: 
 assertEquals("Wrong thread name", String.format(PATTERN, Long.valueOf(i + 1)), t.getName()); ref {PATTERN, t, Long, i, String} [143-144],
 assertEquals("Wrong thread count", i + 1, factory.getThreadCount()); ref {factory, i} [145-145]
[m[m31.08.2022 - 15:15:23.518 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testNewThreadNoNamingPattern has 2 assertions: 
 assertSame("Wrong thread", t, factory.newThread(r)); ref {factory, r, t} [163-163],
 assertEquals("Name was changed", name, t.getName()); ref {t, name} [164-164]
[m[m31.08.2022 - 15:15:23.518 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testNewThreadDaemonTrue has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.519 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testNewThreadDaemonFalse has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.519 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testNewThreadNoDaemonFlag has 4 assertions: 
 assertSame("Wrong thread 1", t1, factory.newThread(r1)); ref {factory, t1, r1} [218-218],
 assertTrue("No daemon thread", t1.isDaemon()); ref {t1} [219-219],
 assertSame("Wrong thread 2", t2, factory.newThread(r2)); ref {r2, factory, t2} [220-220],
 assertFalse("A daemon thread", t2.isDaemon()); ref {t2} [221-221]
[m[m31.08.2022 - 15:15:23.519 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testNewThreadPriority has 2 assertions: 
 assertSame("Wrong thread", t, factory.newThread(r)); ref {factory, r, t} [238-238],
 assertEquals("Wrong priority", priority, t.getPriority()); ref {t, priority} [239-239]
[m[m31.08.2022 - 15:15:23.519 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testNewThreadNoPriority has 2 assertions: 
 assertSame("Wrong thread", t, factory.newThread(r)); ref {factory, r, t} [257-257],
 assertEquals("Wrong priority", orgPriority, t.getPriority()); ref {orgPriority, t} [258-258]
[m[m31.08.2022 - 15:15:23.519 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testNewThreadExHandler has 2 assertions: 
 assertSame("Wrong thread", t, factory.newThread(r)); ref {factory, r, t} [276-276],
 assertEquals("Wrong exception handler", handler, t.getUncaughtExceptionHandler()); ref {handler, t} [277-278]
[m[m31.08.2022 - 15:15:23.519 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.concurrent.BasicThreadFactoryTest::testNewThreadNoExHandler has 2 assertions: 
 assertSame("Wrong thread", t, factory.newThread(r)); ref {factory, r, t} [297-297],
 assertEquals("Wrong exception handler", handler, t.getUncaughtExceptionHandler()); ref {handler, t} [298-299]
[m[m31.08.2022 - 15:15:23.519 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m31.08.2022 - 15:15:23.519 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.UnicodeEscaperTest::testBelow has 1 assertions: 
 assertEquals("Failed to escape Unicode characters via the below method", "\\u0041\\u0044FGZ", result); ref {result} [36-36]
[m[m31.08.2022 - 15:15:23.519 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.UnicodeEscaperTest::testBetween has 1 assertions: 
 assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); ref {result} [45-45]
[m[m31.08.2022 - 15:15:23.519 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.translate.UnicodeEscaperTest::testAbove has 1 assertions: 
 assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); ref {result} [54-54]
[m[m31.08.2022 - 15:15:23.520 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 15:15:23.520 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.NotImplementedExceptionTest::testConstructors has 6 assertions: 
 assertCorrect("Issue in (String)", nie, message, null, null); ref {nie, message} [37-37],
 assertCorrect("Issue in (Throwable)", nie, nested.toString(), nested, null); ref {nie, nested} [39-39],
 assertCorrect("Issue in (String, Throwable)", nie, message, nested, null); ref {nie, message, nested} [41-41],
 assertCorrect("Issue in (String, String)", nie, message, null, code); ref {code, nie, message} [43-43],
 assertCorrect("Issue in (Throwable, String)", nie, nested.toString(), nested, code); ref {code, nie, nested} [45-45],
 assertCorrect("Issue in (String, Throwable, String)", nie, message, nested, code); ref {code, nie, message, nested} [47-47]
[m[m31.08.2022 - 15:15:23.533 [INFO ] ParsingStrategy.parseTestSuite() - Found 48 test cases
[m[m31.08.2022 - 15:15:23.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testReflectionCompare has 4 assertions: 
 assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); ref {o1, CompareToBuilder} [105-105],
 assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); ref {o1, o2, CompareToBuilder} [106-106],
 assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); ref {o1, o2, CompareToBuilder} [108-108],
 assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); ref {o1, o2, CompareToBuilder} [109-109]
[m[m31.08.2022 - 15:15:23.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testReflectionCompareEx1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testReflectionCompareEx2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testReflectionHierarchyCompare has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testReflectionHierarchyCompareExcludeFields has 2 assertions: 
 assertXYZCompareOrder(x, y, z, true, excludeFields); ref {x, y, z, excludeFields} [142-142],
 assertXYZCompareOrder(x, y, z, true, excludeFields); ref {x, y, z, excludeFields} [147-147]
[m[m31.08.2022 - 15:15:23.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testReflectionHierarchyCompareTransients has 2 assertions: 
 assertXYZCompareOrder(x, y, z, true, null); ref {x, y, z} [161-161],
 assertXYZCompareOrder(x, y, z, true, null); ref {x, y, z} [166-166]
[m[m31.08.2022 - 15:15:23.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testAppendSuper has 7 assertions: 
 assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0); ref {o1} [253-253],
 assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0); ref {o1, o2} [254-254],
 assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0); ref {o1, o2} [255-255],
 assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0); ref {o1} [257-257],
 assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0); ref {o1, o2} [258-258],
 assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0); ref {o1} [260-260],
 assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0); ref {o1, o2} [261-261]
[m[m31.08.2022 - 15:15:23.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testObject has 7 assertions: 
 assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); ref {o1} [268-268],
 assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0); ref {o1, o2} [269-269],
 assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); ref {o1, o2} [271-271],
 assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); ref {o1, o2} [272-272],
 assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0); ref {o1} [274-274],
 assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0); ref {} [275-275],
 assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0); ref {o1} [276-276]
[m[m31.08.2022 - 15:15:23.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testObjectBuild has 7 assertions: 
 assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); ref {Integer, o1} [283-283],
 assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); ref {Integer, o1, o2} [284-284],
 assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0); ref {o1, o2} [286-286],
 assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0); ref {o1, o2} [287-287],
 assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0); ref {o1} [289-289],
 assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, (Object) null).build()); ref {Integer} [290-290],
 assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0); ref {o1} [291-291]
[m[m31.08.2022 - 15:15:23.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testObjectEx2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testObjectComparator has 9 assertions: 
 assertTrue(new CompareToBuilder().append(o1, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); ref {o1, String.CASE_INSENSITIVE_ORDER, String} [305-305],
 assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); ref {o1, o2, String.CASE_INSENSITIVE_ORDER, String} [306-306],
 assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); ref {o1, o2, String.CASE_INSENSITIVE_ORDER, String} [308-308],
 assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); ref {o1, o2, String.CASE_INSENSITIVE_ORDER, String} [309-309],
 assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() < 0); ref {o1, o2, String.CASE_INSENSITIVE_ORDER, String} [311-311],
 assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() > 0); ref {o1, o2, String.CASE_INSENSITIVE_ORDER, String} [312-312],
 assertTrue(new CompareToBuilder().append(o1, null, String.CASE_INSENSITIVE_ORDER).toComparison() > 0); ref {o1, String.CASE_INSENSITIVE_ORDER, String} [314-314],
 assertTrue(new CompareToBuilder().append((Object) null, (Object) null, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); ref {String.CASE_INSENSITIVE_ORDER, String} [315-315],
 assertTrue(new CompareToBuilder().append(null, o1, String.CASE_INSENSITIVE_ORDER).toComparison() < 0); ref {o1, String.CASE_INSENSITIVE_ORDER, String} [316-316]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testObjectComparatorNull has 7 assertions: 
 assertTrue(new CompareToBuilder().append(o1, o1, null).toComparison() == 0); ref {o1} [323-323],
 assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() == 0); ref {o1, o2} [324-324],
 assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() < 0); ref {o1, o2} [326-326],
 assertTrue(new CompareToBuilder().append(o2, o1, null).toComparison() > 0); ref {o1, o2} [327-327],
 assertTrue(new CompareToBuilder().append(o1, null, null).toComparison() > 0); ref {o1} [329-329],
 assertTrue(new CompareToBuilder().append((Object) null, (Object) null, null).toComparison() == 0); ref {} [330-330],
 assertTrue(new CompareToBuilder().append(null, o1, null).toComparison() < 0); ref {o1} [331-331]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testLong has 7 assertions: 
 assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); ref {o1} [338-338],
 assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); ref {o1, o2} [339-339],
 assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); ref {o1, o2} [340-340],
 assertTrue(new CompareToBuilder().append(o1, Long.MAX_VALUE).toComparison() < 0); ref {o1, Long.MAX_VALUE, Long} [341-341],
 assertTrue(new CompareToBuilder().append(Long.MAX_VALUE, o1).toComparison() > 0); ref {o1, Long.MAX_VALUE, Long} [342-342],
 assertTrue(new CompareToBuilder().append(o1, Long.MIN_VALUE).toComparison() > 0); ref {o1, Long, Long.MIN_VALUE} [343-343],
 assertTrue(new CompareToBuilder().append(Long.MIN_VALUE, o1).toComparison() < 0); ref {o1, Long, Long.MIN_VALUE} [344-344]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testInt has 7 assertions: 
 assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); ref {o1} [351-351],
 assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); ref {o1, o2} [352-352],
 assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); ref {o1, o2} [353-353],
 assertTrue(new CompareToBuilder().append(o1, Integer.MAX_VALUE).toComparison() < 0); ref {Integer, o1, Integer.MAX_VALUE} [354-354],
 assertTrue(new CompareToBuilder().append(Integer.MAX_VALUE, o1).toComparison() > 0); ref {Integer, o1, Integer.MAX_VALUE} [355-355],
 assertTrue(new CompareToBuilder().append(o1, Integer.MIN_VALUE).toComparison() > 0); ref {Integer, o1, Integer.MIN_VALUE} [356-356],
 assertTrue(new CompareToBuilder().append(Integer.MIN_VALUE, o1).toComparison() < 0); ref {Integer, o1, Integer.MIN_VALUE} [357-357]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testShort has 7 assertions: 
 assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); ref {o1} [364-364],
 assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); ref {o1, o2} [365-365],
 assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); ref {o1, o2} [366-366],
 assertTrue(new CompareToBuilder().append(o1, Short.MAX_VALUE).toComparison() < 0); ref {o1, Short.MAX_VALUE, Short} [367-367],
 assertTrue(new CompareToBuilder().append(Short.MAX_VALUE, o1).toComparison() > 0); ref {o1, Short.MAX_VALUE, Short} [368-368],
 assertTrue(new CompareToBuilder().append(o1, Short.MIN_VALUE).toComparison() > 0); ref {o1, Short.MIN_VALUE, Short} [369-369],
 assertTrue(new CompareToBuilder().append(Short.MIN_VALUE, o1).toComparison() < 0); ref {o1, Short.MIN_VALUE, Short} [370-370]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testChar has 7 assertions: 
 assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); ref {o1} [377-377],
 assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); ref {o1, o2} [378-378],
 assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); ref {o1, o2} [379-379],
 assertTrue(new CompareToBuilder().append(o1, Character.MAX_VALUE).toComparison() < 0); ref {Character.MAX_VALUE, o1, Character} [380-380],
 assertTrue(new CompareToBuilder().append(Character.MAX_VALUE, o1).toComparison() > 0); ref {Character.MAX_VALUE, o1, Character} [381-381],
 assertTrue(new CompareToBuilder().append(o1, Character.MIN_VALUE).toComparison() > 0); ref {o1, Character.MIN_VALUE, Character} [382-382],
 assertTrue(new CompareToBuilder().append(Character.MIN_VALUE, o1).toComparison() < 0); ref {o1, Character.MIN_VALUE, Character} [383-383]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testByte has 7 assertions: 
 assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); ref {o1} [390-390],
 assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); ref {o1, o2} [391-391],
 assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); ref {o1, o2} [392-392],
 assertTrue(new CompareToBuilder().append(o1, Byte.MAX_VALUE).toComparison() < 0); ref {o1, Byte.MAX_VALUE, Byte} [393-393],
 assertTrue(new CompareToBuilder().append(Byte.MAX_VALUE, o1).toComparison() > 0); ref {o1, Byte.MAX_VALUE, Byte} [394-394],
 assertTrue(new CompareToBuilder().append(o1, Byte.MIN_VALUE).toComparison() > 0); ref {o1, Byte, Byte.MIN_VALUE} [395-395],
 assertTrue(new CompareToBuilder().append(Byte.MIN_VALUE, o1).toComparison() < 0); ref {o1, Byte, Byte.MIN_VALUE} [396-396]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testDouble has 15 assertions: 
 assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); ref {o1} [403-403],
 assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); ref {o1, o2} [404-404],
 assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); ref {o1, o2} [405-405],
 assertTrue(new CompareToBuilder().append(o1, Double.MAX_VALUE).toComparison() < 0); ref {o1, Double.MAX_VALUE, Double} [406-406],
 assertTrue(new CompareToBuilder().append(Double.MAX_VALUE, o1).toComparison() > 0); ref {o1, Double.MAX_VALUE, Double} [407-407],
 assertTrue(new CompareToBuilder().append(o1, Double.MIN_VALUE).toComparison() > 0); ref {o1, Double.MIN_VALUE, Double} [408-408],
 assertTrue(new CompareToBuilder().append(Double.MIN_VALUE, o1).toComparison() < 0); ref {o1, Double.MIN_VALUE, Double} [409-409],
 assertTrue(new CompareToBuilder().append(Double.NaN, Double.NaN).toComparison() == 0); ref {Double.NaN, Double} [410-410],
 assertTrue(new CompareToBuilder().append(Double.NaN, Double.MAX_VALUE).toComparison() > 0); ref {Double.NaN, Double.MAX_VALUE, Double} [411-411],
 assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY, Double.MAX_VALUE).toComparison() > 0); ref {Double.POSITIVE_INFINITY, Double.MAX_VALUE, Double} [412-412],
 assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY, Double.MIN_VALUE).toComparison() < 0); ref {Double.NEGATIVE_INFINITY, Double.MIN_VALUE, Double} [413-413],
 assertTrue(new CompareToBuilder().append(o1, Double.NaN).toComparison() < 0); ref {o1, Double.NaN, Double} [414-414],
 assertTrue(new CompareToBuilder().append(Double.NaN, o1).toComparison() > 0); ref {o1, Double.NaN, Double} [415-415],
 assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0); ref {} [416-416],
 assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0); ref {} [417-417]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testFloat has 15 assertions: 
 assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); ref {o1} [424-424],
 assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); ref {o1, o2} [425-425],
 assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); ref {o1, o2} [426-426],
 assertTrue(new CompareToBuilder().append(o1, Float.MAX_VALUE).toComparison() < 0); ref {Float, o1, Float.MAX_VALUE} [427-427],
 assertTrue(new CompareToBuilder().append(Float.MAX_VALUE, o1).toComparison() > 0); ref {Float, o1, Float.MAX_VALUE} [428-428],
 assertTrue(new CompareToBuilder().append(o1, Float.MIN_VALUE).toComparison() > 0); ref {Float, o1, Float.MIN_VALUE} [429-429],
 assertTrue(new CompareToBuilder().append(Float.MIN_VALUE, o1).toComparison() < 0); ref {Float, o1, Float.MIN_VALUE} [430-430],
 assertTrue(new CompareToBuilder().append(Float.NaN, Float.NaN).toComparison() == 0); ref {Float, Float.NaN} [431-431],
 assertTrue(new CompareToBuilder().append(Float.NaN, Float.MAX_VALUE).toComparison() > 0); ref {Float, Float.MAX_VALUE, Float.NaN} [432-432],
 assertTrue(new CompareToBuilder().append(Float.POSITIVE_INFINITY, Float.MAX_VALUE).toComparison() > 0); ref {Float, Float.POSITIVE_INFINITY, Float.MAX_VALUE} [433-433],
 assertTrue(new CompareToBuilder().append(Float.NEGATIVE_INFINITY, Float.MIN_VALUE).toComparison() < 0); ref {Float, Float.MIN_VALUE, Float.NEGATIVE_INFINITY} [434-434],
 assertTrue(new CompareToBuilder().append(o1, Float.NaN).toComparison() < 0); ref {Float, o1, Float.NaN} [435-435],
 assertTrue(new CompareToBuilder().append(Float.NaN, o1).toComparison() > 0); ref {Float, o1, Float.NaN} [436-436],
 assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0); ref {} [437-437],
 assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0); ref {} [438-438]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testBoolean has 4 assertions: 
 assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); ref {o1} [445-445],
 assertTrue(new CompareToBuilder().append(o2, o2).toComparison() == 0); ref {o2} [446-446],
 assertTrue(new CompareToBuilder().append(o1, o2).toComparison() > 0); ref {o1, o2} [447-447],
 assertTrue(new CompareToBuilder().append(o2, o1).toComparison() < 0); ref {o1, o2} [448-448]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testObjectArray has 9 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [464-464],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [465-465],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [466-466],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [467-467],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [470-470],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [471-471],
 assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); ref {obj1} [473-473],
 assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0); ref {} [474-474],
 assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); ref {obj1} [475-475]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testLongArray has 9 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [491-491],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [492-492],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [493-493],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [494-494],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [497-497],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [498-498],
 assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); ref {obj1} [500-500],
 assertTrue(new CompareToBuilder().append((long[]) null, (long[]) null).toComparison() == 0); ref {} [501-501],
 assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); ref {obj1} [502-502]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testIntArray has 9 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [518-518],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [519-519],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [520-520],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [521-521],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [524-524],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [525-525],
 assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); ref {obj1} [527-527],
 assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0); ref {} [528-528],
 assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); ref {obj1} [529-529]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testShortArray has 9 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [545-545],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [546-546],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [547-547],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [548-548],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [551-551],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [552-552],
 assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); ref {obj1} [554-554],
 assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); ref {} [555-555],
 assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); ref {obj1} [556-556]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testCharArray has 9 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [572-572],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [573-573],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [574-574],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [575-575],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [578-578],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [579-579],
 assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); ref {obj1} [581-581],
 assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0); ref {} [582-582],
 assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); ref {obj1} [583-583]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testByteArray has 9 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [599-599],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [600-600],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [601-601],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [602-602],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [605-605],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [606-606],
 assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); ref {obj1} [608-608],
 assertTrue(new CompareToBuilder().append((byte[]) null, (byte[]) null).toComparison() == 0); ref {} [609-609],
 assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); ref {obj1} [610-610]
[m[m31.08.2022 - 15:15:23.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testDoubleArray has 9 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [626-626],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [627-627],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [628-628],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [629-629],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [632-632],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [633-633],
 assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); ref {obj1} [635-635],
 assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); ref {} [636-636],
 assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); ref {obj1} [637-637]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testFloatArray has 9 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [653-653],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [654-654],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [655-655],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [656-656],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [659-659],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [660-660],
 assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); ref {obj1} [662-662],
 assertTrue(new CompareToBuilder().append((float[]) null, (float[]) null).toComparison() == 0); ref {} [663-663],
 assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); ref {obj1} [664-664]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testBooleanArray has 9 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [680-680],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [681-681],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [682-682],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [683-683],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [686-686],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [687-687],
 assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); ref {obj1} [689-689],
 assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0); ref {} [690-690],
 assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); ref {obj1} [691-691]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testMultiLongArray has 6 assertions: 
 assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); ref {array1} [709-709],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); ref {array2, array1} [710-710],
 assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); ref {array1, array3} [711-711],
 assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); ref {array1, array3} [712-712],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); ref {array2, array1} [714-714],
 assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); ref {array2, array1} [715-715]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testMultiIntArray has 6 assertions: 
 assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); ref {array1} [733-733],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); ref {array2, array1} [734-734],
 assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); ref {array1, array3} [735-735],
 assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); ref {array1, array3} [736-736],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); ref {array2, array1} [738-738],
 assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); ref {array2, array1} [739-739]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testMultiShortArray has 6 assertions: 
 assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); ref {array1} [757-757],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); ref {array2, array1} [758-758],
 assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); ref {array1, array3} [759-759],
 assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); ref {array1, array3} [760-760],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); ref {array2, array1} [762-762],
 assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); ref {array2, array1} [763-763]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testMultiCharArray has 6 assertions: 
 assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); ref {array1} [781-781],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); ref {array2, array1} [782-782],
 assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); ref {array1, array3} [783-783],
 assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); ref {array1, array3} [784-784],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); ref {array2, array1} [786-786],
 assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); ref {array2, array1} [787-787]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testMultiByteArray has 6 assertions: 
 assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); ref {array1} [805-805],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); ref {array2, array1} [806-806],
 assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); ref {array1, array3} [807-807],
 assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); ref {array1, array3} [808-808],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); ref {array2, array1} [810-810],
 assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); ref {array2, array1} [811-811]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testMultiFloatArray has 6 assertions: 
 assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); ref {array1} [829-829],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); ref {array2, array1} [830-830],
 assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); ref {array1, array3} [831-831],
 assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); ref {array1, array3} [832-832],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); ref {array2, array1} [834-834],
 assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); ref {array2, array1} [835-835]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testMultiDoubleArray has 6 assertions: 
 assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); ref {array1} [853-853],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); ref {array2, array1} [854-854],
 assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); ref {array1, array3} [855-855],
 assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); ref {array1, array3} [856-856],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); ref {array2, array1} [858-858],
 assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); ref {array2, array1} [859-859]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testMultiBooleanArray has 6 assertions: 
 assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); ref {array1} [877-877],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); ref {array2, array1} [878-878],
 assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); ref {array1, array3} [879-879],
 assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); ref {array1, array3} [880-880],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); ref {array2, array1} [882-882],
 assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); ref {array2, array1} [883-883]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testRaggedArray has 6 assertions: 
 assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); ref {array1} [905-905],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); ref {array2, array1} [906-906],
 assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); ref {array1, array3} [907-907],
 assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); ref {array1, array3} [908-908],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); ref {array2, array1} [910-910],
 assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); ref {array2, array1} [911-911]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testMixedArray has 6 assertions: 
 assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); ref {array1} [931-931],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); ref {array2, array1} [932-932],
 assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); ref {array1, array3} [933-933],
 assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); ref {array1, array3} [934-934],
 assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); ref {array2, array1} [936-936],
 assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); ref {array2, array1} [937-937]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testObjectArrayHiddenByObject has 6 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [957-957],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [958-958],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [959-959],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [960-960],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [963-963],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [964-964]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testLongArrayHiddenByObject has 6 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [982-982],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [983-983],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [984-984],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [985-985],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [988-988],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [989-989]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testIntArrayHiddenByObject has 6 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [1007-1007],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [1008-1008],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [1009-1009],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [1010-1010],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [1013-1013],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [1014-1014]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testShortArrayHiddenByObject has 6 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [1032-1032],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [1033-1033],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [1034-1034],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [1035-1035],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [1038-1038],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [1039-1039]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testCharArrayHiddenByObject has 6 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [1057-1057],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [1058-1058],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [1059-1059],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [1060-1060],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [1063-1063],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [1064-1064]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testByteArrayHiddenByObject has 6 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [1082-1082],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [1083-1083],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [1084-1084],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [1085-1085],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [1088-1088],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [1089-1089]
[m[m31.08.2022 - 15:15:23.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testDoubleArrayHiddenByObject has 6 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [1107-1107],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [1108-1108],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [1109-1109],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [1110-1110],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [1113-1113],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [1114-1114]
[m[m31.08.2022 - 15:15:23.536 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testFloatArrayHiddenByObject has 6 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [1132-1132],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [1133-1133],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [1134-1134],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [1135-1135],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [1138-1138],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [1139-1139]
[m[m31.08.2022 - 15:15:23.536 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.CompareToBuilderTest::testBooleanArrayHiddenByObject has 6 assertions: 
 assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); ref {obj1} [1157-1157],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); ref {obj2, obj1} [1158-1158],
 assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); ref {obj1, obj3} [1159-1159],
 assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); ref {obj1, obj3} [1160-1160],
 assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); ref {obj2, obj1} [1163-1163],
 assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); ref {obj2, obj1} [1164-1164]
[m[m31.08.2022 - 15:15:23.536 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.538 [INFO ] ParsingStrategy.parseTestSuite() - Found 15 test cases
[m[m31.08.2022 - 15:15:23.538 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testGetValue has 6 assertions: 
 assertEquals(bf_multi.getValue(-1), 127); ref {bf_multi} [41-41],
 assertEquals(bf_multi.getValue(0), 0); ref {bf_multi} [42-42],
 assertEquals(bf_single.getValue(-1), 1); ref {bf_single} [43-43],
 assertEquals(bf_single.getValue(0), 0); ref {bf_single} [44-44],
 assertEquals(bf_zero.getValue(-1), 0); ref {bf_zero} [45-45],
 assertEquals(bf_zero.getValue(0), 0); ref {bf_zero} [46-46]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testGetShortValue has 6 assertions: 
 assertEquals(bf_multi.getShortValue((short) -1), (short) 127); ref {bf_multi} [54-54],
 assertEquals(bf_multi.getShortValue((short) 0), (short) 0); ref {bf_multi} [55-55],
 assertEquals(bf_single.getShortValue((short) -1), (short) 1); ref {bf_single} [56-56],
 assertEquals(bf_single.getShortValue((short) 0), (short) 0); ref {bf_single} [57-57],
 assertEquals(bf_zero.getShortValue((short) -1), (short) 0); ref {bf_zero} [58-58],
 assertEquals(bf_zero.getShortValue((short) 0), (short) 0); ref {bf_zero} [59-59]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testGetRawValue has 6 assertions: 
 assertEquals(bf_multi.getRawValue(-1), 0x3F80); ref {bf_multi} [67-67],
 assertEquals(bf_multi.getRawValue(0), 0); ref {bf_multi} [68-68],
 assertEquals(bf_single.getRawValue(-1), 0x4000); ref {bf_single} [69-69],
 assertEquals(bf_single.getRawValue(0), 0); ref {bf_single} [70-70],
 assertEquals(bf_zero.getRawValue(-1), 0); ref {bf_zero} [71-71],
 assertEquals(bf_zero.getRawValue(0), 0); ref {bf_zero} [72-72]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testGetShortRawValue has 6 assertions: 
 assertEquals(bf_multi.getShortRawValue((short) -1), (short) 0x3F80); ref {bf_multi} [80-80],
 assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0); ref {bf_multi} [81-81],
 assertEquals(bf_single.getShortRawValue((short) -1), (short) 0x4000); ref {bf_single} [82-82],
 assertEquals(bf_single.getShortRawValue((short) 0), (short) 0); ref {bf_single} [83-83],
 assertEquals(bf_zero.getShortRawValue((short) -1), (short) 0); ref {bf_zero} [84-84],
 assertEquals(bf_zero.getShortRawValue((short) 0), (short) 0); ref {bf_zero} [85-85]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testIsSet has 6 assertions: 
 assertTrue(!bf_multi.isSet(0)); ref {bf_multi} [93-93],
 assertTrue(!bf_zero.isSet(0)); ref {bf_zero} [94-94],
 assertTrue(bf_multi.isSet(j)); ref {j, bf_multi} [96-96],
 assertTrue(!bf_zero.isSet(j)); ref {bf_zero, j} [99-99],
 assertTrue(!bf_single.isSet(0)); ref {bf_single} [101-101],
 assertTrue(bf_single.isSet(0x4000)); ref {bf_single} [102-102]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testIsAllSet has 5 assertions: 
 assertTrue(!bf_multi.isAllSet(j)); ref {j, bf_multi} [111-111],
 assertTrue(bf_zero.isAllSet(j)); ref {bf_zero, j} [112-112],
 assertTrue(bf_multi.isAllSet(0x3F80)); ref {bf_multi} [114-114],
 assertTrue(!bf_single.isAllSet(0)); ref {bf_single} [115-115],
 assertTrue(bf_single.isAllSet(0x4000)); ref {bf_single} [116-116]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testSetValue has 8 assertions: 
 assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j); ref {j, bf_multi} [125-125],
 assertEquals(bf_multi.setValue(0, j), j << 7); ref {j, bf_multi} [126-126],
 assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0); ref {bf_zero, j} [129-129],
 assertEquals(bf_zero.setValue(0, j), 0); ref {bf_zero, j} [130-130],
 // verify that excess bits are stripped off
assertEquals(bf_multi.setValue(0x3f80, 128), 0); ref {bf_multi} [134-134],
 assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j); ref {bf_single, j} [136-136],
 assertEquals(bf_single.setValue(0, j), j << 14); ref {bf_single, j} [137-137],
 // verify that excess bits are stripped off
assertEquals(bf_single.setValue(0x4000, 2), 0); ref {bf_single} [141-141]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testSetShortValue has 8 assertions: 
 assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j); ref {j, bf_multi} [150-150],
 assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7)); ref {j, bf_multi} [151-151],
 assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0); ref {bf_zero, j} [154-154],
 assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) 0); ref {bf_zero, j} [155-155],
 // verify that excess bits are stripped off
assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0); ref {bf_multi} [159-159],
 assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j); ref {bf_single, j} [161-161],
 assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14)); ref {bf_single, j} [162-162],
 // verify that excess bits are stripped off
assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0); ref {bf_single} [166-166]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testByte has 20 assertions: 
 assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); ref {} [171-171],
 assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); ref {} [172-172],
 assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); ref {} [173-173],
 assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true)); ref {} [174-174],
 assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true)); ref {} [175-175],
 assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true)); ref {} [176-176],
 assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true)); ref {} [177-177],
 assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true)); ref {} [178-178],
 assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true)); ref {} [179-179],
 assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false)); ref {} [180-180],
 assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false)); ref {} [181-181],
 assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false)); ref {} [182-182],
 assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false)); ref {} [183-183],
 assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false)); ref {} [184-184],
 assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false)); ref {} [185-185],
 assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false)); ref {} [186-186],
 assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false)); ref {} [187-187],
 assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false)); ref {} [188-188],
 assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false)); ref {} [189-189],
 assertFalse(new BitField(0x40).isSet(clearedBit)); ref {clearedBit} [192-192]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testClear has 3 assertions: 
 assertEquals(bf_multi.clear(-1), 0xFFFFC07F); ref {bf_multi} [200-200],
 assertEquals(bf_single.clear(-1), 0xFFFFBFFF); ref {bf_single} [201-201],
 assertEquals(bf_zero.clear(-1), 0xFFFFFFFF); ref {bf_zero} [202-202]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testClearShort has 3 assertions: 
 assertEquals(bf_multi.clearShort((short) -1), (short) 0xC07F); ref {bf_multi} [210-210],
 assertEquals(bf_single.clearShort((short) -1), (short) 0xBFFF); ref {bf_single} [211-211],
 assertEquals(bf_zero.clearShort((short) -1), (short) 0xFFFF); ref {bf_zero} [212-212]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testSet has 3 assertions: 
 assertEquals(bf_multi.set(0), 0x3F80); ref {bf_multi} [220-220],
 assertEquals(bf_single.set(0), 0x4000); ref {bf_single} [221-221],
 assertEquals(bf_zero.set(0), 0); ref {bf_zero} [222-222]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testSetShort has 3 assertions: 
 assertEquals(bf_multi.setShort((short) 0), (short) 0x3F80); ref {bf_multi} [230-230],
 assertEquals(bf_single.setShort((short) 0), (short) 0x4000); ref {bf_single} [231-231],
 assertEquals(bf_zero.setShort((short) 0), (short) 0); ref {bf_zero} [232-232]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testSetBoolean has 6 assertions: 
 assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true)); ref {bf_multi} [240-240],
 assertEquals(bf_single.set(0), bf_single.setBoolean(0, true)); ref {bf_single} [241-241],
 assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true)); ref {bf_zero} [242-242],
 assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false)); ref {bf_multi} [243-243],
 assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false)); ref {bf_single} [244-244],
 assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false)); ref {bf_zero} [245-245]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.BitFieldTest::testSetShortBoolean has 6 assertions: 
 assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true)); ref {bf_multi} [253-253],
 assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true)); ref {bf_single} [254-254],
 assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true)); ref {bf_zero} [255-255],
 assertEquals(bf_multi.clearShort((short) -1), bf_multi.setShortBoolean((short) -1, false)); ref {bf_multi} [256-256],
 assertEquals(bf_single.clearShort((short) -1), bf_single.setShortBoolean((short) -1, false)); ref {bf_single} [257-257],
 assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false)); ref {bf_zero} [258-258]
[m[m31.08.2022 - 15:15:23.539 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m31.08.2022 - 15:15:23.541 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:23.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsIsTest::testIsAlpha has 11 assertions: 
 assertFalse(StringUtils.isAlpha(null)); ref {StringUtils} [35-35],
 assertFalse(StringUtils.isAlpha("")); ref {StringUtils} [36-36],
 assertFalse(StringUtils.isAlpha(" ")); ref {StringUtils} [37-37],
 assertTrue(StringUtils.isAlpha("a")); ref {StringUtils} [38-38],
 assertTrue(StringUtils.isAlpha("A")); ref {StringUtils} [39-39],
 assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); ref {StringUtils} [40-40],
 assertFalse(StringUtils.isAlpha("ham kso")); ref {StringUtils} [41-41],
 assertFalse(StringUtils.isAlpha("1")); ref {StringUtils} [42-42],
 assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); ref {StringUtils} [43-43],
 assertFalse(StringUtils.isAlpha("_")); ref {StringUtils} [44-44],
 assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh")); ref {StringUtils} [45-45]
[m[m31.08.2022 - 15:15:23.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsIsTest::testIsAlphanumeric has 11 assertions: 
 assertFalse(StringUtils.isAlphanumeric(null)); ref {StringUtils} [50-50],
 assertFalse(StringUtils.isAlphanumeric("")); ref {StringUtils} [51-51],
 assertFalse(StringUtils.isAlphanumeric(" ")); ref {StringUtils} [52-52],
 assertTrue(StringUtils.isAlphanumeric("a")); ref {StringUtils} [53-53],
 assertTrue(StringUtils.isAlphanumeric("A")); ref {StringUtils} [54-54],
 assertTrue(StringUtils.isAlphanumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); ref {StringUtils} [55-55],
 assertFalse(StringUtils.isAlphanumeric("ham kso")); ref {StringUtils} [56-56],
 assertTrue(StringUtils.isAlphanumeric("1")); ref {StringUtils} [57-57],
 assertTrue(StringUtils.isAlphanumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); ref {StringUtils} [58-58],
 assertFalse(StringUtils.isAlphanumeric("_")); ref {StringUtils} [59-59],
 assertFalse(StringUtils.isAlphanumeric("hkHKHik*khbkuh")); ref {StringUtils} [60-60]
[m[m31.08.2022 - 15:15:23.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsIsTest::testIsWhitespace has 12 assertions: 
 assertFalse(StringUtils.isWhitespace(null)); ref {StringUtils} [65-65],
 assertTrue(StringUtils.isWhitespace("")); ref {StringUtils} [66-66],
 assertTrue(StringUtils.isWhitespace(" ")); ref {StringUtils} [67-67],
 assertTrue(StringUtils.isWhitespace("\t \n \t")); ref {StringUtils} [68-68],
 assertFalse(StringUtils.isWhitespace("\t aa\n \t")); ref {StringUtils} [69-69],
 assertTrue(StringUtils.isWhitespace(" ")); ref {StringUtils} [70-70],
 assertFalse(StringUtils.isWhitespace(" a ")); ref {StringUtils} [71-71],
 assertFalse(StringUtils.isWhitespace("a  ")); ref {StringUtils} [72-72],
 assertFalse(StringUtils.isWhitespace("  a")); ref {StringUtils} [73-73],
 assertFalse(StringUtils.isWhitespace("aba")); ref {StringUtils} [74-74],
 assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE)); ref {StringUtilsTest, StringUtils, StringUtilsTest.WHITESPACE} [75-75],
 assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE)); ref {StringUtilsTest, StringUtilsTest.NON_WHITESPACE, StringUtils} [76-76]
[m[m31.08.2022 - 15:15:23.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsIsTest::testIsAlphaspace has 11 assertions: 
 assertFalse(StringUtils.isAlphaSpace(null)); ref {StringUtils} [81-81],
 assertTrue(StringUtils.isAlphaSpace("")); ref {StringUtils} [82-82],
 assertTrue(StringUtils.isAlphaSpace(" ")); ref {StringUtils} [83-83],
 assertTrue(StringUtils.isAlphaSpace("a")); ref {StringUtils} [84-84],
 assertTrue(StringUtils.isAlphaSpace("A")); ref {StringUtils} [85-85],
 assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); ref {StringUtils} [86-86],
 assertTrue(StringUtils.isAlphaSpace("ham kso")); ref {StringUtils} [87-87],
 assertFalse(StringUtils.isAlphaSpace("1")); ref {StringUtils} [88-88],
 assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); ref {StringUtils} [89-89],
 assertFalse(StringUtils.isAlphaSpace("_")); ref {StringUtils} [90-90],
 assertFalse(StringUtils.isAlphaSpace("hkHKHik*khbkuh")); ref {StringUtils} [91-91]
[m[m31.08.2022 - 15:15:23.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsIsTest::testIsAlphanumericSpace has 11 assertions: 
 assertFalse(StringUtils.isAlphanumericSpace(null)); ref {StringUtils} [96-96],
 assertTrue(StringUtils.isAlphanumericSpace("")); ref {StringUtils} [97-97],
 assertTrue(StringUtils.isAlphanumericSpace(" ")); ref {StringUtils} [98-98],
 assertTrue(StringUtils.isAlphanumericSpace("a")); ref {StringUtils} [99-99],
 assertTrue(StringUtils.isAlphanumericSpace("A")); ref {StringUtils} [100-100],
 assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); ref {StringUtils} [101-101],
 assertTrue(StringUtils.isAlphanumericSpace("ham kso")); ref {StringUtils} [102-102],
 assertTrue(StringUtils.isAlphanumericSpace("1")); ref {StringUtils} [103-103],
 assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); ref {StringUtils} [104-104],
 assertFalse(StringUtils.isAlphanumericSpace("_")); ref {StringUtils} [105-105],
 assertFalse(StringUtils.isAlphanumericSpace("hkHKHik*khbkuh")); ref {StringUtils} [106-106]
[m[m31.08.2022 - 15:15:23.542 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsIsTest::testIsAsciiPrintable_String has 22 assertions: 
 assertFalse(StringUtils.isAsciiPrintable(null)); ref {StringUtils} [111-111],
 assertTrue(StringUtils.isAsciiPrintable("")); ref {StringUtils} [112-112],
 assertTrue(StringUtils.isAsciiPrintable(" ")); ref {StringUtils} [113-113],
 assertTrue(StringUtils.isAsciiPrintable("a")); ref {StringUtils} [114-114],
 assertTrue(StringUtils.isAsciiPrintable("A")); ref {StringUtils} [115-115],
 assertTrue(StringUtils.isAsciiPrintable("1")); ref {StringUtils} [116-116],
 assertTrue(StringUtils.isAsciiPrintable("Ceki")); ref {StringUtils} [117-117],
 assertTrue(StringUtils.isAsciiPrintable("!ab2c~")); ref {StringUtils} [118-118],
 assertTrue(StringUtils.isAsciiPrintable("1000")); ref {StringUtils} [119-119],
 assertTrue(StringUtils.isAsciiPrintable("10 00")); ref {StringUtils} [120-120],
 assertFalse(StringUtils.isAsciiPrintable("10\t00")); ref {StringUtils} [121-121],
 assertTrue(StringUtils.isAsciiPrintable("10.00")); ref {StringUtils} [122-122],
 assertTrue(StringUtils.isAsciiPrintable("10,00")); ref {StringUtils} [123-123],
 assertTrue(StringUtils.isAsciiPrintable("!ab-c~")); ref {StringUtils} [124-124],
 assertTrue(StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug")); ref {StringUtils} [125-125],
 assertTrue(StringUtils.isAsciiPrintable("\u0020")); ref {StringUtils} [126-126],
 assertTrue(StringUtils.isAsciiPrintable("\u0021")); ref {StringUtils} [127-127],
 assertTrue(StringUtils.isAsciiPrintable("\u007e")); ref {StringUtils} [128-128],
 assertFalse(StringUtils.isAsciiPrintable("\u007f")); ref {StringUtils} [129-129],
 assertTrue(StringUtils.isAsciiPrintable("G?lc?")); ref {StringUtils} [130-130],
 assertTrue(StringUtils.isAsciiPrintable("=?iso-8859-1?Q?G=FClc=FC?=")); ref {StringUtils} [131-131],
 assertFalse(StringUtils.isAsciiPrintable("G\u00fclc\u00fc")); ref {StringUtils} [132-132]
[m[m31.08.2022 - 15:15:23.542 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsIsTest::testIsNumeric has 18 assertions: 
 assertFalse(StringUtils.isNumeric(null)); ref {StringUtils} [137-137],
 assertFalse(StringUtils.isNumeric("")); ref {StringUtils} [138-138],
 assertFalse(StringUtils.isNumeric(" ")); ref {StringUtils} [139-139],
 assertFalse(StringUtils.isNumeric("a")); ref {StringUtils} [140-140],
 assertFalse(StringUtils.isNumeric("A")); ref {StringUtils} [141-141],
 assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); ref {StringUtils} [142-142],
 assertFalse(StringUtils.isNumeric("ham kso")); ref {StringUtils} [143-143],
 assertTrue(StringUtils.isNumeric("1")); ref {StringUtils} [144-144],
 assertTrue(StringUtils.isNumeric("1000")); ref {StringUtils} [145-145],
 assertTrue(StringUtils.isNumeric("\u0967\u0968\u0969")); ref {StringUtils} [146-146],
 assertFalse(StringUtils.isNumeric("\u0967\u0968 \u0969")); ref {StringUtils} [147-147],
 assertFalse(StringUtils.isNumeric("2.3")); ref {StringUtils} [148-148],
 assertFalse(StringUtils.isNumeric("10 00")); ref {StringUtils} [149-149],
 assertFalse(StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); ref {StringUtils} [150-150],
 assertFalse(StringUtils.isNumeric("_")); ref {StringUtils} [151-151],
 assertFalse(StringUtils.isNumeric("hkHKHik*khbkuh")); ref {StringUtils} [152-152],
 assertFalse(StringUtils.isNumeric("+123")); ref {StringUtils} [153-153],
 assertFalse(StringUtils.isNumeric("-123")); ref {StringUtils} [154-154]
[m[m31.08.2022 - 15:15:23.542 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.StringUtilsIsTest::testIsNumericSpace has 16 assertions: 
 assertFalse(StringUtils.isNumericSpace(null)); ref {StringUtils} [159-159],
 assertTrue(StringUtils.isNumericSpace("")); ref {StringUtils} [160-160],
 assertTrue(StringUtils.isNumericSpace(" ")); ref {StringUtils} [161-161],
 assertFalse(StringUtils.isNumericSpace("a")); ref {StringUtils} [162-162],
 assertFalse(StringUtils.isNumericSpace("A")); ref {StringUtils} [163-163],
 assertFalse(StringUtils.isNumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); ref {StringUtils} [164-164],
 assertFalse(StringUtils.isNumericSpace("ham kso")); ref {StringUtils} [165-165],
 assertTrue(StringUtils.isNumericSpace("1")); ref {StringUtils} [166-166],
 assertTrue(StringUtils.isNumericSpace("1000")); ref {StringUtils} [167-167],
 assertFalse(StringUtils.isNumericSpace("2.3")); ref {StringUtils} [168-168],
 assertTrue(StringUtils.isNumericSpace("10 00")); ref {StringUtils} [169-169],
 assertTrue(StringUtils.isNumericSpace("\u0967\u0968\u0969")); ref {StringUtils} [170-170],
 assertTrue(StringUtils.isNumericSpace("\u0967\u0968 \u0969")); ref {StringUtils} [171-171],
 assertFalse(StringUtils.isNumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); ref {StringUtils} [172-172],
 assertFalse(StringUtils.isNumericSpace("_")); ref {StringUtils} [173-173],
 assertFalse(StringUtils.isNumericSpace("hkHKHik*khbkuh")); ref {StringUtils} [174-174]
[m[m31.08.2022 - 15:15:23.542 [INFO ] ParsingStrategy.parseTestSuite() - Found 4 test cases
[m[m31.08.2022 - 15:15:23.542 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffTest::testCannotModify has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.542 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffTest::testGetFieldName has 1 assertions: 
 assertEquals(FIELD_NAME, booleanDiff.getFieldName()); ref {booleanDiff, FIELD_NAME} [59-59]
[m[m31.08.2022 - 15:15:23.542 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffTest::testGetType has 1 assertions: 
 assertEquals(Boolean.class, booleanDiff.getType()); ref {booleanDiff} [64-64]
[m[m31.08.2022 - 15:15:23.542 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.DiffTest::testToString has 1 assertions: 
 assertEquals(String.format("[%s: %s, %s]", FIELD_NAME, booleanDiff.getLeft(), booleanDiff.getRight()), booleanDiff.toString()); ref {booleanDiff, String, FIELD_NAME} [69-70]
[m[m31.08.2022 - 15:15:23.544 [INFO ] ParsingStrategy.parseTestSuite() - Found 10 test cases
[m[m31.08.2022 - 15:15:23.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.ExtendedMessageFormatTest::testExtendedFormats has 6 assertions: 
 assertPatternsEqual("TOPATTERN", pattern, emf.toPattern()); ref {pattern, emf} [64-64],
 assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "bar" })); ref {emf} [65-65],
 assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "Foo", "Bar" })); ref {emf} [66-66],
 assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "BAR" })); ref {emf} [67-67],
 assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "bar" })); ref {emf} [68-68],
 assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "BAR" })); ref {emf} [69-69]
[m[m31.08.2022 - 15:15:23.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477 has 1 assertions: 
 assertEquals("it's a dummy test!", emf.format(new Object[] { "DUMMY" })); ref {emf} [79-79]
[m[m31.08.2022 - 15:15:23.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.ExtendedMessageFormatTest::testEmbeddedPatternInChoice has 1 assertions: 
 assertEquals(emf.format(new Object[] { "there", 3, "great" }), "Hi there, got 3, GREAT!"); ref {emf} [89-89]
[m[m31.08.2022 - 15:15:23.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.ExtendedMessageFormatTest::testEscapedBraces_LANG_948 has 2 assertions: 
 assertEquals("Message without placeholders {}", emf.format(new Object[] { "DUMMY" })); ref {emf} [100-100],
 assertEquals("Message with placeholder 'DUMMY'", emf2.format(new Object[] { "DUMMY" })); ref {emf2} [105-105]
[m[m31.08.2022 - 15:15:23.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.ExtendedMessageFormatTest::testExtendedAndBuiltInFormats has 2 assertions: 
 assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); ref {expectedPattern, locale, emf} [147-147],
 assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); ref {args, expected, String, locale, emf} [148-148]
[m[m31.08.2022 - 15:15:23.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.ExtendedMessageFormatTest::testBuiltInChoiceFormat has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.ExtendedMessageFormatTest::testBuiltInDateTimeFormat has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.ExtendedMessageFormatTest::testOverriddenBuiltinFormat has 2 assertions: 
 assertEquals("overridden date,short format", dateDefault.format(args), dateShort.format(args)); ref {args, dateShort, dateDefault} [272-272],
 assertEquals("overridden date,short pattern", pattern, dateShort.toPattern()); ref {dateShort, pattern} [273-273]
[m[m31.08.2022 - 15:15:23.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.ExtendedMessageFormatTest::testBuiltInNumberFormat has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.544 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.text.ExtendedMessageFormatTest::testEqualsHashcode has 12 assertions: 
 // Same object
assertTrue("same, equals()", emf.equals(emf)); ref {emf} [305-305],
 assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); ref {emf} [306-306],
 assertTrue("equal, equals()", emf.equals(other)); ref {other, emf} [310-310],
 assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); ref {other, emf} [311-311],
 assertFalse("class, equals()", emf.equals(other)); ref {other, emf} [315-315],
 // same hashcode
assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); ref {other, emf} [316-316],
 assertFalse("pattern, equals()", emf.equals(other)); ref {other, emf} [320-320],
 assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); ref {other, emf} [321-321],
 assertFalse("registry, equals()", emf.equals(other)); ref {other, emf} [325-325],
 assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); ref {other, emf} [326-326],
 assertFalse("locale, equals()", emf.equals(other)); ref {other, emf} [330-330],
 // same hashcode
assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); ref {other, emf} [331-331]
[m[m31.08.2022 - 15:15:23.546 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m31.08.2022 - 15:15:23.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest::testBlank has 1 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).toString()); ref {baseStr, base} [53-53]
[m[m31.08.2022 - 15:15:23.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest::testAppendSuper has 5 assertions: 
 assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); ref {baseStr, base} [58-58],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); ref {baseStr, base} [59-59],
 assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); ref {baseStr, base} [61-61],
 assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); ref {baseStr, base} [62-62],
 assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); ref {baseStr, base} [63-63]
[m[m31.08.2022 - 15:15:23.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest::testObject has 12 assertions: 
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); ref {baseStr, base} [70-70],
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); ref {i3, baseStr, base} [71-71],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); ref {baseStr, base} [72-72],
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append("a", i3).toString()); ref {i3, baseStr, base} [73-73],
 assertEquals(baseStr + "[3,4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); ref {i3, i4, baseStr, base} [74-74],
 assertEquals(baseStr + "[<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); ref {i3, baseStr, base} [75-75],
 assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); ref {baseStr, base} [76-76],
 assertEquals(baseStr + "[[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); ref {baseStr, base} [77-77],
 assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); ref {baseStr, base} [78-78],
 assertEquals(baseStr + "[{}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); ref {baseStr, base} [79-79],
 assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); ref {baseStr, base} [80-80],
 assertEquals(baseStr + "[{}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); ref {baseStr, base} [81-81]
[m[m31.08.2022 - 15:15:23.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest::testPerson has 1 assertions: 
 assertEquals(pBaseStr + "[Ron Paul,72,false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); ref {p, p.age, p.smoker, p.name, pBaseStr} [91-91]
[m[m31.08.2022 - 15:15:23.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest::testLong has 3 assertions: 
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); ref {baseStr, base} [96-96],
 assertEquals(baseStr + "[3]", new ToStringBuilder(base).append("a", 3L).toString()); ref {baseStr, base} [97-97],
 assertEquals(baseStr + "[3,4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); ref {baseStr, base} [98-98]
[m[m31.08.2022 - 15:15:23.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest::testObjectArray has 4 assertions: 
 assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [104-104],
 assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [105-105],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [107-107],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [108-108]
[m[m31.08.2022 - 15:15:23.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest::testLongArray has 4 assertions: 
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [114-114],
 assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [115-115],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [117-117],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [118-118]
[m[m31.08.2022 - 15:15:23.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest::testLongArrayArray has 4 assertions: 
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [124-124],
 assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [125-125],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); ref {array, baseStr, base} [127-127],
 assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); ref {array, baseStr, base} [128-128]
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.parseTestSuite() - Found 64 test cases
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new FieldUtils()); ref {} [64-64],
 assertEquals(1, cons.length); ref {cons.length, cons} [66-66],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [67-67],
 assertTrue(Modifier.isPublic(FieldUtils.class.getModifiers())); ref {Modifier} [68-68],
 assertFalse(Modifier.isFinal(FieldUtils.class.getModifiers())); ref {Modifier} [69-69]
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetField has 15 assertions: 
 assertEquals(Foo.class, FieldUtils.getField(PublicChild.class, "VALUE").getDeclaringClass()); ref {FieldUtils} [74-74],
 assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "s").getDeclaringClass()); ref {FieldUtils, parentClass} [75-75],
 assertNull(FieldUtils.getField(PublicChild.class, "b")); ref {FieldUtils} [76-76],
 assertNull(FieldUtils.getField(PublicChild.class, "i")); ref {FieldUtils} [77-77],
 assertNull(FieldUtils.getField(PublicChild.class, "d")); ref {FieldUtils} [78-78],
 assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, "VALUE").getDeclaringClass()); ref {FieldUtils} [79-79],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "s").getDeclaringClass()); ref {FieldUtils} [80-80],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "b").getDeclaringClass()); ref {FieldUtils} [81-81],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "i").getDeclaringClass()); ref {FieldUtils} [82-82],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "d").getDeclaringClass()); ref {FieldUtils} [83-83],
 assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, "VALUE").getDeclaringClass()); ref {FieldUtils} [84-84],
 assertEquals(parentClass, FieldUtils.getField(PrivatelyShadowedChild.class, "s").getDeclaringClass()); ref {FieldUtils, parentClass} [85-85],
 assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "b")); ref {FieldUtils} [86-86],
 assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "i")); ref {FieldUtils} [87-87],
 assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "d")); ref {FieldUtils} [88-88]
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldIllegalArgumentException1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldIllegalArgumentException2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldIllegalArgumentException3 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldIllegalArgumentException4 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldForceAccess has 15 assertions: 
 assertEquals(PublicChild.class, FieldUtils.getField(PublicChild.class, "VALUE", true).getDeclaringClass()); ref {FieldUtils} [113-113],
 assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "s", true).getDeclaringClass()); ref {FieldUtils, parentClass} [114-114],
 assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "b", true).getDeclaringClass()); ref {FieldUtils, parentClass} [115-115],
 assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "i", true).getDeclaringClass()); ref {FieldUtils, parentClass} [116-116],
 assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "d", true).getDeclaringClass()); ref {FieldUtils, parentClass} [117-117],
 assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, "VALUE", true).getDeclaringClass()); ref {FieldUtils} [118-118],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "s", true).getDeclaringClass()); ref {FieldUtils} [119-119],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "b", true).getDeclaringClass()); ref {FieldUtils} [120-120],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "i", true).getDeclaringClass()); ref {FieldUtils} [121-121],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "d", true).getDeclaringClass()); ref {FieldUtils} [122-122],
 assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, "VALUE", true).getDeclaringClass()); ref {FieldUtils} [123-123],
 assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "s", true).getDeclaringClass()); ref {FieldUtils} [124-124],
 assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "b", true).getDeclaringClass()); ref {FieldUtils} [125-125],
 assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "i", true).getDeclaringClass()); ref {FieldUtils} [126-126],
 assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "d", true).getDeclaringClass()); ref {FieldUtils} [127-127]
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldForceAccessIllegalArgumentException1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldForceAccessIllegalArgumentException2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldForceAccessIllegalArgumentException3 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldForceAccessIllegalArgumentException4 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetAllFields has 4 assertions: 
 assertArrayEquals(new Field[0], FieldUtils.getAllFields(Object.class)); ref {FieldUtils} [153-153],
 assertArrayEquals(fieldsNumber, FieldUtils.getAllFields(Number.class)); ref {FieldUtils, fieldsNumber} [155-155],
 assertArrayEquals(ArrayUtils.addAll(fieldsInteger, fieldsNumber), FieldUtils.getAllFields(Integer.class)); ref {FieldUtils, ArrayUtils, fieldsInteger, fieldsNumber} [157-157],
 assertEquals(5, FieldUtils.getAllFields(PublicChild.class).length); ref {FieldUtils.getAllFields(PublicChild.class).length, FieldUtils} [158-158]
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetAllFieldsList has 4 assertions: 
 assertEquals(0, FieldUtils.getAllFieldsList(Object.class).size()); ref {FieldUtils} [164-164],
 assertEquals(fieldsNumber, FieldUtils.getAllFieldsList(Number.class)); ref {FieldUtils, fieldsNumber} [166-166],
 assertEquals(allFieldsInteger, FieldUtils.getAllFieldsList(Integer.class)); ref {FieldUtils, allFieldsInteger} [170-170],
 assertEquals(5, FieldUtils.getAllFieldsList(PublicChild.class).size()); ref {FieldUtils} [171-171]
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldsWithAnnotation has 2 assertions: 
 assertArrayEquals(new Field[0], FieldUtils.getFieldsWithAnnotation(Object.class, Annotated.class)); ref {FieldUtils} [176-176],
 assertArrayEquals(annotatedFields, FieldUtils.getFieldsWithAnnotation(FieldUtilsTest.class, Annotated.class)); ref {FieldUtils, annotatedFields} [181-181]
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldsWithAnnotationIllegalArgumentException1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.555 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldsWithAnnotationIllegalArgumentException2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldsWithAnnotationIllegalArgumentException3 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldsListWithAnnotation has 4 assertions: 
 assertEquals(0, FieldUtils.getFieldsListWithAnnotation(Object.class, Annotated.class).size()); ref {FieldUtils} [201-201],
 assertEquals(annotatedFields.size(), fieldUtilsTestAnnotatedFields.size()); ref {annotatedFields, fieldUtilsTestAnnotatedFields} [207-207],
 assertTrue(fieldUtilsTestAnnotatedFields.contains(annotatedFields.get(0))); ref {annotatedFields, fieldUtilsTestAnnotatedFields} [208-208],
 assertTrue(fieldUtilsTestAnnotatedFields.contains(annotatedFields.get(1))); ref {annotatedFields, fieldUtilsTestAnnotatedFields} [209-209]
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldsListWithAnnotationIllegalArgumentException1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldsListWithAnnotationIllegalArgumentException2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetFieldsListWithAnnotationIllegalArgumentException3 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetDeclaredField has 15 assertions: 
 assertNull(FieldUtils.getDeclaredField(PublicChild.class, "VALUE")); ref {FieldUtils} [229-229],
 assertNull(FieldUtils.getDeclaredField(PublicChild.class, "s")); ref {FieldUtils} [230-230],
 assertNull(FieldUtils.getDeclaredField(PublicChild.class, "b")); ref {FieldUtils} [231-231],
 assertNull(FieldUtils.getDeclaredField(PublicChild.class, "i")); ref {FieldUtils} [232-232],
 assertNull(FieldUtils.getDeclaredField(PublicChild.class, "d")); ref {FieldUtils} [233-233],
 assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "VALUE")); ref {FieldUtils} [234-234],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "s").getDeclaringClass()); ref {FieldUtils} [235-235],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "b").getDeclaringClass()); ref {FieldUtils} [236-236],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "i").getDeclaringClass()); ref {FieldUtils} [237-237],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "d").getDeclaringClass()); ref {FieldUtils} [238-238],
 assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "VALUE")); ref {FieldUtils} [239-239],
 assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "s")); ref {FieldUtils} [240-240],
 assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "b")); ref {FieldUtils} [241-241],
 assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "i")); ref {FieldUtils} [242-242],
 assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "d")); ref {FieldUtils} [243-243]
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetDeclaredFieldAccessIllegalArgumentException1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetDeclaredFieldAccessIllegalArgumentException2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetDeclaredFieldAccessIllegalArgumentException3 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetDeclaredFieldAccessIllegalArgumentException4 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetDeclaredFieldForceAccess has 15 assertions: 
 assertEquals(PublicChild.class, FieldUtils.getDeclaredField(PublicChild.class, "VALUE", true).getDeclaringClass()); ref {FieldUtils} [268-268],
 assertNull(FieldUtils.getDeclaredField(PublicChild.class, "s", true)); ref {FieldUtils} [269-269],
 assertNull(FieldUtils.getDeclaredField(PublicChild.class, "b", true)); ref {FieldUtils} [270-270],
 assertNull(FieldUtils.getDeclaredField(PublicChild.class, "i", true)); ref {FieldUtils} [271-271],
 assertNull(FieldUtils.getDeclaredField(PublicChild.class, "d", true)); ref {FieldUtils} [272-272],
 assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "VALUE", true)); ref {FieldUtils} [273-273],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "s", true).getDeclaringClass()); ref {FieldUtils} [274-274],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "b", true).getDeclaringClass()); ref {FieldUtils} [275-275],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "i", true).getDeclaringClass()); ref {FieldUtils} [276-276],
 assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "d", true).getDeclaringClass()); ref {FieldUtils} [277-277],
 assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "VALUE", true)); ref {FieldUtils} [278-278],
 assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "s", true).getDeclaringClass()); ref {FieldUtils} [279-279],
 assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "b", true).getDeclaringClass()); ref {FieldUtils} [280-280],
 assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "i", true).getDeclaringClass()); ref {FieldUtils} [281-281],
 assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "d", true).getDeclaringClass()); ref {FieldUtils} [282-282]
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetDeclaredFieldForceAccessIllegalArgumentException1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetDeclaredFieldForceAccessIllegalArgumentException2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetDeclaredFieldForceAccessIllegalArgumentException3 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testGetDeclaredFieldForceAccessIllegalArgumentException4 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadStaticField has 1 assertions: 
 assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE"))); ref {FieldUtils, Foo, Foo.VALUE} [307-307]
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadStaticFieldIllegalArgumentException1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadStaticFieldIllegalArgumentException2 has 1 assertions: 
 assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE"))); ref {FieldUtils, Foo, Foo.VALUE} [317-317]
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadStaticFieldForceAccess has 2 assertions: 
 assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE"))); ref {FieldUtils, Foo, Foo.VALUE} [325-325],
 assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(PublicChild.class, "VALUE"))); ref {FieldUtils, Foo, Foo.VALUE} [326-326]
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadStaticFieldForceAccessIllegalArgumentException1 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadStaticFieldForceAccessIllegalArgumentException2 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadNamedStaticField has 4 assertions: 
 assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE")); ref {FieldUtils, Foo, Foo.VALUE} [343-343],
 assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE")); ref {FieldUtils, Foo, Foo.VALUE} [344-344],
 assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE")); ref {FieldUtils, Foo, Foo.VALUE} [345-345],
 assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, "VALUE")); ref {FieldUtils, Foo, Foo.VALUE} [346-346]
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadNamedStaticFieldForceAccess has 4 assertions: 
 assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE", true)); ref {FieldUtils, Foo, Foo.VALUE} [393-393],
 assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE", true)); ref {FieldUtils, Foo, Foo.VALUE} [394-394],
 assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE", true)); ref {FieldUtils, Foo, Foo.VALUE} [395-395],
 assertEquals("child", FieldUtils.readStaticField(PublicChild.class, "VALUE", true)); ref {FieldUtils} [396-396]
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadDeclaredNamedStaticField has 1 assertions: 
 assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE")); ref {FieldUtils, Foo, Foo.VALUE} [443-443]
[m[m31.08.2022 - 15:15:23.556 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadDeclaredNamedStaticFieldForceAccess has 2 assertions: 
 assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE", true)); ref {FieldUtils, Foo, Foo.VALUE} [466-466],
 assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE", true)); ref {FieldUtils} [467-467]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadField has 12 assertions: 
 assertEquals("s", FieldUtils.readField(parentS, publicChild)); ref {FieldUtils, publicChild, parentS} [485-485],
 assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild)); ref {FieldUtils, publiclyShadowedChild, parentS} [486-486],
 assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild)); ref {FieldUtils, privatelyShadowedChild, parentS} [487-487],
 assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild)); ref {FieldUtils, Boolean.FALSE, Boolean, publicChild, parentB} [489-489],
 assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild)); ref {FieldUtils, publiclyShadowedChild, Boolean.FALSE, Boolean, parentB} [490-490],
 assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild)); ref {FieldUtils, privatelyShadowedChild, Boolean.FALSE, Boolean, parentB} [491-491],
 assertEquals(I0, FieldUtils.readField(parentI, publicChild)); ref {FieldUtils, I0, parentI, publicChild} [493-493],
 assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild)); ref {FieldUtils, publiclyShadowedChild, I0, parentI} [494-494],
 assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild)); ref {FieldUtils, privatelyShadowedChild, I0, parentI} [495-495],
 assertEquals(D0, FieldUtils.readField(parentD, publicChild)); ref {FieldUtils, D0, parentD, publicChild} [497-497],
 assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild)); ref {FieldUtils, publiclyShadowedChild, D0, parentD} [498-498],
 assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild)); ref {FieldUtils, privatelyShadowedChild, D0, parentD} [499-499]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadFieldForceAccess has 12 assertions: 
 assertEquals("s", FieldUtils.readField(parentS, publicChild, true)); ref {FieldUtils, publicChild, parentS} [513-513],
 assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild, true)); ref {FieldUtils, publiclyShadowedChild, parentS} [514-514],
 assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild, true)); ref {FieldUtils, privatelyShadowedChild, parentS} [515-515],
 assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true)); ref {FieldUtils, Boolean.FALSE, Boolean, publicChild, parentB} [518-518],
 assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true)); ref {FieldUtils, publiclyShadowedChild, Boolean.FALSE, Boolean, parentB} [519-519],
 assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true)); ref {FieldUtils, privatelyShadowedChild, Boolean.FALSE, Boolean, parentB} [520-520],
 assertEquals(I0, FieldUtils.readField(parentI, publicChild, true)); ref {FieldUtils, I0, parentI, publicChild} [523-523],
 assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true)); ref {FieldUtils, publiclyShadowedChild, I0, parentI} [524-524],
 assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true)); ref {FieldUtils, privatelyShadowedChild, I0, parentI} [525-525],
 assertEquals(D0, FieldUtils.readField(parentD, publicChild, true)); ref {FieldUtils, D0, parentD, publicChild} [528-528],
 assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true)); ref {FieldUtils, publiclyShadowedChild, D0, parentD} [529-529],
 assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true)); ref {FieldUtils, privatelyShadowedChild, D0, parentD} [530-530]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadNamedField has 6 assertions: 
 assertEquals("s", FieldUtils.readField(publicChild, "s")); ref {FieldUtils, publicChild} [542-542],
 assertEquals("ss", FieldUtils.readField(publiclyShadowedChild, "s")); ref {FieldUtils, publiclyShadowedChild} [543-543],
 assertEquals("s", FieldUtils.readField(privatelyShadowedChild, "s")); ref {FieldUtils, privatelyShadowedChild} [544-544],
 assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, "b")); ref {Boolean.TRUE, FieldUtils, publiclyShadowedChild, Boolean} [580-580],
 assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, "i")); ref {FieldUtils, publiclyShadowedChild, I1} [593-593],
 assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, "d")); ref {FieldUtils, publiclyShadowedChild, D1} [606-606]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadNamedFieldForceAccess has 12 assertions: 
 assertEquals("s", FieldUtils.readField(publicChild, "s", true)); ref {FieldUtils, publicChild} [617-617],
 assertEquals("ss", FieldUtils.readField(publiclyShadowedChild, "s", true)); ref {FieldUtils, publiclyShadowedChild} [618-618],
 assertEquals("ss", FieldUtils.readField(privatelyShadowedChild, "s", true)); ref {FieldUtils, privatelyShadowedChild} [619-619],
 assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, "b", true)); ref {FieldUtils, Boolean.FALSE, Boolean, publicChild} [620-620],
 assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, "b", true)); ref {Boolean.TRUE, FieldUtils, publiclyShadowedChild, Boolean} [621-621],
 assertEquals(Boolean.TRUE, FieldUtils.readField(privatelyShadowedChild, "b", true)); ref {Boolean.TRUE, FieldUtils, privatelyShadowedChild, Boolean} [622-622],
 assertEquals(I0, FieldUtils.readField(publicChild, "i", true)); ref {FieldUtils, I0, publicChild} [623-623],
 assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, "i", true)); ref {FieldUtils, publiclyShadowedChild, I1} [624-624],
 assertEquals(I1, FieldUtils.readField(privatelyShadowedChild, "i", true)); ref {FieldUtils, privatelyShadowedChild, I1} [625-625],
 assertEquals(D0, FieldUtils.readField(publicChild, "d", true)); ref {FieldUtils, D0, publicChild} [626-626],
 assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, "d", true)); ref {FieldUtils, publiclyShadowedChild, D1} [627-627],
 assertEquals(D1, FieldUtils.readField(privatelyShadowedChild, "d", true)); ref {FieldUtils, privatelyShadowedChild, D1} [628-628]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadDeclaredNamedField has 4 assertions: 
 assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); ref {FieldUtils, publiclyShadowedChild} [695-695],
 assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); ref {Boolean.TRUE, FieldUtils, publiclyShadowedChild, Boolean} [708-708],
 assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); ref {FieldUtils, publiclyShadowedChild, I1} [721-721],
 assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); ref {FieldUtils, publiclyShadowedChild, D1} [734-734]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testReadDeclaredNamedFieldForceAccess has 8 assertions: 
 assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s", true)); ref {FieldUtils, publiclyShadowedChild} [779-779],
 assertEquals("ss", FieldUtils.readDeclaredField(privatelyShadowedChild, "s", true)); ref {FieldUtils, privatelyShadowedChild} [780-780],
 assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b", true)); ref {Boolean.TRUE, FieldUtils, publiclyShadowedChild, Boolean} [787-787],
 assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b", true)); ref {Boolean.TRUE, FieldUtils, privatelyShadowedChild, Boolean} [788-788],
 assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i", true)); ref {FieldUtils, publiclyShadowedChild, I1} [795-795],
 assertEquals(I1, FieldUtils.readDeclaredField(privatelyShadowedChild, "i", true)); ref {FieldUtils, privatelyShadowedChild, I1} [796-796],
 assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d", true)); ref {FieldUtils, publiclyShadowedChild, D1} [803-803],
 assertEquals(D1, FieldUtils.readDeclaredField(privatelyShadowedChild, "d", true)); ref {FieldUtils, privatelyShadowedChild, D1} [804-804]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testWriteStaticField has 1 assertions: 
 assertEquals("new", StaticContainer.mutablePublic); ref {StaticContainer.mutablePublic, StaticContainer} [811-811]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testWriteStaticFieldForceAccess has 4 assertions: 
 assertEquals("new", StaticContainer.mutablePublic); ref {StaticContainer.mutablePublic, StaticContainer} [867-867],
 assertEquals("new", StaticContainer.getMutableProtected()); ref {StaticContainer} [870-870],
 assertEquals("new", StaticContainer.getMutablePackage()); ref {StaticContainer} [873-873],
 assertEquals("new", StaticContainer.getMutablePrivate()); ref {StaticContainer} [876-876]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testWriteNamedStaticField has 1 assertions: 
 assertEquals("new", StaticContainer.mutablePublic); ref {StaticContainer.mutablePublic, StaticContainer} [910-910]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testWriteNamedStaticFieldForceAccess has 4 assertions: 
 assertEquals("new", StaticContainer.mutablePublic); ref {StaticContainer.mutablePublic, StaticContainer} [958-958],
 assertEquals("new", StaticContainer.getMutableProtected()); ref {StaticContainer} [960-960],
 assertEquals("new", StaticContainer.getMutablePackage()); ref {StaticContainer} [962-962],
 assertEquals("new", StaticContainer.getMutablePrivate()); ref {StaticContainer} [964-964]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testWriteDeclaredNamedStaticField has 1 assertions: 
 assertEquals("new", StaticContainer.mutablePublic); ref {StaticContainer.mutablePublic, StaticContainer} [994-994]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testWriteDeclaredNamedStaticFieldForceAccess has 4 assertions: 
 assertEquals("new", StaticContainer.mutablePublic); ref {StaticContainer.mutablePublic, StaticContainer} [1042-1042],
 assertEquals("new", StaticContainer.getMutableProtected()); ref {StaticContainer} [1044-1044],
 assertEquals("new", StaticContainer.getMutablePackage()); ref {StaticContainer} [1046-1046],
 assertEquals("new", StaticContainer.getMutablePrivate()); ref {StaticContainer} [1048-1048]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testWriteField has 1 assertions: 
 assertEquals("S", field.get(publicChild)); ref {field, publicChild} [1079-1079]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testWriteFieldForceAccess has 4 assertions: 
 assertEquals("S", field.get(publicChild)); ref {field, publicChild} [1107-1107],
 assertEquals(Boolean.TRUE, field.get(publicChild)); ref {Boolean.TRUE, field, Boolean, publicChild} [1110-1110],
 assertEquals(Integer.valueOf(Integer.MAX_VALUE), field.get(publicChild)); ref {Integer, field, Integer.MAX_VALUE, publicChild} [1113-1113],
 assertEquals(Double.valueOf(Double.MAX_VALUE), field.get(publicChild)); ref {field, Double.MAX_VALUE, publicChild, Double} [1116-1116]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testWriteNamedField has 6 assertions: 
 assertEquals("S", FieldUtils.readField(publicChild, "s")); ref {FieldUtils, publicChild} [1122-1122],
 assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); ref {FieldUtils, publiclyShadowedChild} [1143-1143],
 assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); ref {FieldUtils, publiclyShadowedChild, Boolean.FALSE, Boolean} [1145-1145],
 assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); ref {Integer, FieldUtils, publiclyShadowedChild} [1147-1147],
 assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); ref {FieldUtils, publiclyShadowedChild, Double} [1149-1149],
 assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); ref {FieldUtils, privatelyShadowedChild} [1152-1152]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testWriteNamedFieldForceAccess has 12 assertions: 
 assertEquals("S", FieldUtils.readField(publicChild, "s", true)); ref {FieldUtils, publicChild} [1176-1176],
 assertEquals(Boolean.TRUE, FieldUtils.readField(publicChild, "b", true)); ref {Boolean.TRUE, FieldUtils, Boolean, publicChild} [1178-1178],
 assertEquals(Integer.valueOf(1), FieldUtils.readField(publicChild, "i", true)); ref {Integer, FieldUtils, publicChild} [1180-1180],
 assertEquals(Double.valueOf(1.0), FieldUtils.readField(publicChild, "d", true)); ref {FieldUtils, publicChild, Double} [1182-1182],
 assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s", true)); ref {FieldUtils, publiclyShadowedChild} [1185-1185],
 assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b", true)); ref {FieldUtils, publiclyShadowedChild, Boolean.FALSE, Boolean} [1187-1187],
 assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i", true)); ref {Integer, FieldUtils, publiclyShadowedChild} [1189-1189],
 assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d", true)); ref {FieldUtils, publiclyShadowedChild, Double} [1191-1191],
 assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s", true)); ref {FieldUtils, privatelyShadowedChild} [1194-1194],
 assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, "b", true)); ref {FieldUtils, privatelyShadowedChild, Boolean.FALSE, Boolean} [1196-1196],
 assertEquals(Integer.valueOf(0), FieldUtils.readField(privatelyShadowedChild, "i", true)); ref {Integer, FieldUtils, privatelyShadowedChild} [1198-1198],
 assertEquals(Double.valueOf(0.0), FieldUtils.readField(privatelyShadowedChild, "d", true)); ref {FieldUtils, privatelyShadowedChild, Double} [1200-1200]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testWriteDeclaredNamedField has 4 assertions: 
 assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); ref {FieldUtils, publiclyShadowedChild} [1231-1231],
 assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); ref {FieldUtils, publiclyShadowedChild, Boolean.FALSE, Boolean} [1233-1233],
 assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); ref {Integer, FieldUtils, publiclyShadowedChild} [1235-1235],
 assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); ref {FieldUtils, publiclyShadowedChild, Double} [1237-1237]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testWriteDeclaredNamedFieldForceAccess has 8 assertions: 
 assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s", true)); ref {FieldUtils, publiclyShadowedChild} [1293-1293],
 assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b", true)); ref {FieldUtils, publiclyShadowedChild, Boolean.FALSE, Boolean} [1295-1295],
 assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i", true)); ref {Integer, FieldUtils, publiclyShadowedChild} [1297-1297],
 assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d", true)); ref {FieldUtils, publiclyShadowedChild, Double} [1299-1299],
 assertEquals("S", FieldUtils.readDeclaredField(privatelyShadowedChild, "s", true)); ref {FieldUtils, privatelyShadowedChild} [1302-1302],
 assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b", true)); ref {FieldUtils, privatelyShadowedChild, Boolean.FALSE, Boolean} [1304-1304],
 assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(privatelyShadowedChild, "i", true)); ref {Integer, FieldUtils, privatelyShadowedChild} [1306-1306],
 assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, "d", true)); ref {FieldUtils, privatelyShadowedChild, Double} [1308-1308]
[m[m31.08.2022 - 15:15:23.557 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testAmbig has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.558 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testRemoveFinalModifier has 4 assertions: 
 assertFalse(field.isAccessible()); ref {field} [1319-1319],
 assertTrue(Modifier.isFinal(field.getModifiers())); ref {field, Modifier} [1320-1320],
 // The field is no longer final
assertFalse(Modifier.isFinal(field.getModifiers())); ref {field, Modifier} [1323-1323],
 assertFalse(field.isAccessible()); ref {field} [1324-1324]
[m[m31.08.2022 - 15:15:23.558 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testRemoveFinalModifierWithAccess has 4 assertions: 
 assertFalse(field.isAccessible()); ref {field} [1330-1330],
 assertTrue(Modifier.isFinal(field.getModifiers())); ref {field, Modifier} [1331-1331],
 // The field is no longer final
assertFalse(Modifier.isFinal(field.getModifiers())); ref {field, Modifier} [1334-1334],
 assertFalse(field.isAccessible()); ref {field} [1335-1335]
[m[m31.08.2022 - 15:15:23.558 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testRemoveFinalModifierWithoutAccess has 4 assertions: 
 assertFalse(field.isAccessible()); ref {field} [1341-1341],
 assertTrue(Modifier.isFinal(field.getModifiers())); ref {field, Modifier} [1342-1342],
 // The field is STILL final because we did not force access
assertTrue(Modifier.isFinal(field.getModifiers())); ref {field, Modifier} [1345-1345],
 assertFalse(field.isAccessible()); ref {field} [1346-1346]
[m[m31.08.2022 - 15:15:23.558 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.reflect.FieldUtilsTest::testRemoveFinalModifierAccessNotNeeded has 4 assertions: 
 assertFalse(field.isAccessible()); ref {field} [1352-1352],
 assertTrue(Modifier.isFinal(field.getModifiers())); ref {field, Modifier} [1353-1353],
 // The field is no longer final AND we did not need to force access
assertTrue(Modifier.isFinal(field.getModifiers())); ref {field, Modifier} [1356-1356],
 assertFalse(field.isAccessible()); ref {field} [1357-1357]
[m[m31.08.2022 - 15:15:23.559 [INFO ] ParsingStrategy.parseTestSuite() - Found 9 test cases
[m[m31.08.2022 - 15:15:23.559 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableBooleanTest::testCompareTo has 4 assertions: 
 assertEquals(0, mutBool.compareTo(new MutableBoolean(false))); ref {mutBool} [36-36],
 assertEquals(-1, mutBool.compareTo(new MutableBoolean(true))); ref {mutBool} [37-37],
 assertEquals(+1, mutBool.compareTo(new MutableBoolean(false))); ref {mutBool} [39-39],
 assertEquals(0, mutBool.compareTo(new MutableBoolean(true))); ref {mutBool} [40-40]
[m[m31.08.2022 - 15:15:23.559 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableBooleanTest::testCompareToNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.559 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableBooleanTest::testConstructors has 5 assertions: 
 assertFalse(new MutableBoolean().booleanValue()); ref {} [52-52],
 assertTrue(new MutableBoolean(true).booleanValue()); ref {} [54-54],
 assertFalse(new MutableBoolean(false).booleanValue()); ref {} [55-55],
 assertTrue(new MutableBoolean(Boolean.TRUE).booleanValue()); ref {Boolean.TRUE, Boolean} [57-57],
 assertFalse(new MutableBoolean(Boolean.FALSE).booleanValue()); ref {Boolean.FALSE, Boolean} [58-58]
[m[m31.08.2022 - 15:15:23.559 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableBooleanTest::testConstructorNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.559 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableBooleanTest::testEquals has 10 assertions: 
 assertTrue(mutBoolA.equals(mutBoolA)); ref {mutBoolA} [73-73],
 assertTrue(mutBoolA.equals(mutBoolB)); ref {mutBoolA, mutBoolB} [74-74],
 assertTrue(mutBoolB.equals(mutBoolA)); ref {mutBoolA, mutBoolB} [75-75],
 assertTrue(mutBoolB.equals(mutBoolB)); ref {mutBoolB} [76-76],
 assertFalse(mutBoolA.equals(mutBoolC)); ref {mutBoolA, mutBoolC} [77-77],
 assertFalse(mutBoolB.equals(mutBoolC)); ref {mutBoolC, mutBoolB} [78-78],
 assertTrue(mutBoolC.equals(mutBoolC)); ref {mutBoolC} [79-79],
 assertFalse(mutBoolA.equals(null)); ref {mutBoolA} [80-80],
 assertFalse(mutBoolA.equals(Boolean.FALSE)); ref {Boolean.FALSE, mutBoolA, Boolean} [81-81],
 assertFalse(mutBoolA.equals("false")); ref {mutBoolA} [82-82]
[m[m31.08.2022 - 15:15:23.559 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableBooleanTest::testGetSet has 14 assertions: 
 assertFalse(new MutableBoolean().booleanValue()); ref {} [87-87],
 assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); ref {Boolean.FALSE, Boolean} [88-88],
 assertEquals(Boolean.FALSE, mutBool.toBoolean()); ref {mutBool, Boolean.FALSE, Boolean} [91-91],
 assertFalse(mutBool.booleanValue()); ref {mutBool} [92-92],
 assertTrue(mutBool.isFalse()); ref {mutBool} [93-93],
 assertFalse(mutBool.isTrue()); ref {mutBool} [94-94],
 assertEquals(Boolean.TRUE, mutBool.toBoolean()); ref {Boolean.TRUE, mutBool, Boolean} [97-97],
 assertTrue(mutBool.booleanValue()); ref {mutBool} [98-98],
 assertFalse(mutBool.isFalse()); ref {mutBool} [99-99],
 assertTrue(mutBool.isTrue()); ref {mutBool} [100-100],
 assertFalse(mutBool.booleanValue()); ref {mutBool} [103-103],
 assertTrue(mutBool.booleanValue()); ref {mutBool} [106-106],
 assertFalse(mutBool.booleanValue()); ref {mutBool} [109-109],
 assertTrue(mutBool.booleanValue()); ref {mutBool} [112-112]
[m[m31.08.2022 - 15:15:23.559 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableBooleanTest::testSetNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableBooleanTest::testHashCode has 5 assertions: 
 assertEquals(mutBoolA.hashCode(), mutBoolA.hashCode()); ref {mutBoolA} [128-128],
 assertEquals(mutBoolA.hashCode(), mutBoolB.hashCode()); ref {mutBoolA, mutBoolB} [129-129],
 assertFalse(mutBoolA.hashCode() == mutBoolC.hashCode()); ref {mutBoolA, mutBoolC} [130-130],
 assertEquals(mutBoolA.hashCode(), Boolean.FALSE.hashCode()); ref {Boolean.FALSE, mutBoolA, Boolean} [131-131],
 assertEquals(mutBoolC.hashCode(), Boolean.TRUE.hashCode()); ref {Boolean.TRUE, mutBoolC, Boolean} [132-132]
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableBooleanTest::testToString has 2 assertions: 
 assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString()); ref {Boolean.FALSE, Boolean} [137-137],
 assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString()); ref {Boolean.TRUE, Boolean} [138-138]
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.parseTestSuite() - Found 13 test cases
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new ClassPathUtils()); ref {} [36-36],
 assertEquals(1, cons.length); ref {cons.length, cons} [38-38],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [39-39],
 assertTrue(Modifier.isPublic(ClassPathUtils.class.getModifiers())); ref {Modifier} [40-40],
 assertFalse(Modifier.isFinal(ClassPathUtils.class.getModifiers())); ref {Modifier} [41-41]
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testToFullyQualifiedNameNullClassString has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testToFullyQualifiedNameClassNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testToFullyQualifiedNameClassString has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [59-59]
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testToFullyQualifiedNameNullPackageString has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testToFullyQualifiedNamePackageNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testToFullyQualifiedNamePackageString has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [77-77]
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testToFullyQualifiedPathClassNullString has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testToFullyQualifiedPathClassNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testToFullyQualifiedPathClass has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [95-95]
[m[m31.08.2022 - 15:15:23.560 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testToFullyQualifiedPathPackageNullString has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.561 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testToFullyQualifiedPathPackageNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.561 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.ClassPathUtilsTest::testToFullyQualifiedPathPackage has 1 assertions: 
 assertEquals(expected, actual); ref {actual, expected} [113-113]
[m[m31.08.2022 - 15:15:23.564 [INFO ] ParsingStrategy.parseTestSuite() - Found 11 test cases
[m[m31.08.2022 - 15:15:23.564 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new CharSetUtils()); ref {} [39-39],
 assertEquals(1, cons.length); ref {cons.length, cons} [41-41],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [42-42],
 assertTrue(Modifier.isPublic(CharSetUtils.class.getModifiers())); ref {Modifier} [43-43],
 assertFalse(Modifier.isFinal(CharSetUtils.class.getModifiers())); ref {Modifier} [44-44]
[m[m31.08.2022 - 15:15:23.564 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetUtilsTest::testSqueeze_StringString has 11 assertions: 
 assertEquals(null, CharSetUtils.squeeze(null, (String) null)); ref {CharSetUtils} [50-50],
 assertEquals(null, CharSetUtils.squeeze(null, "")); ref {CharSetUtils} [51-51],
 assertEquals("", CharSetUtils.squeeze("", (String) null)); ref {CharSetUtils} [53-53],
 assertEquals("", CharSetUtils.squeeze("", "")); ref {CharSetUtils} [54-54],
 assertEquals("", CharSetUtils.squeeze("", "a-e")); ref {CharSetUtils} [55-55],
 assertEquals("hello", CharSetUtils.squeeze("hello", (String) null)); ref {CharSetUtils} [57-57],
 assertEquals("hello", CharSetUtils.squeeze("hello", "")); ref {CharSetUtils} [58-58],
 assertEquals("hello", CharSetUtils.squeeze("hello", "a-e")); ref {CharSetUtils} [59-59],
 assertEquals("helo", CharSetUtils.squeeze("hello", "l-p")); ref {CharSetUtils} [60-60],
 assertEquals("heloo", CharSetUtils.squeeze("helloo", "l")); ref {CharSetUtils} [61-61],
 assertEquals("hello", CharSetUtils.squeeze("helloo", "^l")); ref {CharSetUtils} [62-62]
[m[m31.08.2022 - 15:15:23.564 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetUtilsTest::testSqueeze_StringStringarray has 16 assertions: 
 assertEquals(null, CharSetUtils.squeeze(null, (String[]) null)); ref {CharSetUtils} [67-67],
 assertEquals(null, CharSetUtils.squeeze(null, new String[0])); ref {CharSetUtils} [68-68],
 assertEquals(null, CharSetUtils.squeeze(null, new String[] { null })); ref {CharSetUtils} [69-69],
 assertEquals(null, CharSetUtils.squeeze(null, new String[] { "el" })); ref {CharSetUtils} [70-70],
 assertEquals("", CharSetUtils.squeeze("", (String[]) null)); ref {CharSetUtils} [72-72],
 assertEquals("", CharSetUtils.squeeze("", new String[0])); ref {CharSetUtils} [73-73],
 assertEquals("", CharSetUtils.squeeze("", new String[] { null })); ref {CharSetUtils} [74-74],
 assertEquals("", CharSetUtils.squeeze("", new String[] { "a-e" })); ref {CharSetUtils} [75-75],
 assertEquals("hello", CharSetUtils.squeeze("hello", (String[]) null)); ref {CharSetUtils} [77-77],
 assertEquals("hello", CharSetUtils.squeeze("hello", new String[0])); ref {CharSetUtils} [78-78],
 assertEquals("hello", CharSetUtils.squeeze("hello", new String[] { null })); ref {CharSetUtils} [79-79],
 assertEquals("hello", CharSetUtils.squeeze("hello", new String[] { "a-e" })); ref {CharSetUtils} [80-80],
 assertEquals("helo", CharSetUtils.squeeze("hello", new String[] { "el" })); ref {CharSetUtils} [82-82],
 assertEquals("hello", CharSetUtils.squeeze("hello", new String[] { "e" })); ref {CharSetUtils} [83-83],
 assertEquals("fofof", CharSetUtils.squeeze("fooffooff", new String[] { "of" })); ref {CharSetUtils} [84-84],
 assertEquals("fof", CharSetUtils.squeeze("fooooff", new String[] { "fo" })); ref {CharSetUtils} [85-85]
[m[m31.08.2022 - 15:15:23.564 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetUtilsTest::testContainsAny_StringString has 9 assertions: 
 assertFalse(CharSetUtils.containsAny(null, (String) null)); ref {CharSetUtils} [91-91],
 assertFalse(CharSetUtils.containsAny(null, "")); ref {CharSetUtils} [92-92],
 assertFalse(CharSetUtils.containsAny("", (String) null)); ref {CharSetUtils} [94-94],
 assertFalse(CharSetUtils.containsAny("", "")); ref {CharSetUtils} [95-95],
 assertFalse(CharSetUtils.containsAny("", "a-e")); ref {CharSetUtils} [96-96],
 assertFalse(CharSetUtils.containsAny("hello", (String) null)); ref {CharSetUtils} [98-98],
 assertFalse(CharSetUtils.containsAny("hello", "")); ref {CharSetUtils} [99-99],
 assertTrue(CharSetUtils.containsAny("hello", "a-e")); ref {CharSetUtils} [100-100],
 assertTrue(CharSetUtils.containsAny("hello", "l-p")); ref {CharSetUtils} [101-101]
[m[m31.08.2022 - 15:15:23.564 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetUtilsTest::testContainsAny_StringStringarray has 17 assertions: 
 assertFalse(CharSetUtils.containsAny(null, (String[]) null)); ref {CharSetUtils} [106-106],
 assertFalse(CharSetUtils.containsAny(null, new String[0])); ref {CharSetUtils} [107-107],
 assertFalse(CharSetUtils.containsAny(null, new String[] { null })); ref {CharSetUtils} [108-108],
 assertFalse(CharSetUtils.containsAny(null, new String[] { "a-e" })); ref {CharSetUtils} [109-109],
 assertFalse(CharSetUtils.containsAny("", (String[]) null)); ref {CharSetUtils} [111-111],
 assertFalse(CharSetUtils.containsAny("", new String[0])); ref {CharSetUtils} [112-112],
 assertFalse(CharSetUtils.containsAny("", new String[] { null })); ref {CharSetUtils} [113-113],
 assertFalse(CharSetUtils.containsAny("", new String[] { "a-e" })); ref {CharSetUtils} [114-114],
 assertFalse(CharSetUtils.containsAny("hello", (String[]) null)); ref {CharSetUtils} [116-116],
 assertFalse(CharSetUtils.containsAny("hello", new String[0])); ref {CharSetUtils} [117-117],
 assertFalse(CharSetUtils.containsAny("hello", new String[] { null })); ref {CharSetUtils} [118-118],
 assertTrue(CharSetUtils.containsAny("hello", new String[] { "a-e" })); ref {CharSetUtils} [119-119],
 assertTrue(CharSetUtils.containsAny("hello", new String[] { "el" })); ref {CharSetUtils} [121-121],
 assertFalse(CharSetUtils.containsAny("hello", new String[] { "x" })); ref {CharSetUtils} [122-122],
 assertTrue(CharSetUtils.containsAny("hello", new String[] { "e-i" })); ref {CharSetUtils} [123-123],
 assertTrue(CharSetUtils.containsAny("hello", new String[] { "a-z" })); ref {CharSetUtils} [124-124],
 assertFalse(CharSetUtils.containsAny("hello", new String[] { "" })); ref {CharSetUtils} [125-125]
[m[m31.08.2022 - 15:15:23.564 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetUtilsTest::testCount_StringString has 9 assertions: 
 assertEquals(0, CharSetUtils.count(null, (String) null)); ref {CharSetUtils} [131-131],
 assertEquals(0, CharSetUtils.count(null, "")); ref {CharSetUtils} [132-132],
 assertEquals(0, CharSetUtils.count("", (String) null)); ref {CharSetUtils} [134-134],
 assertEquals(0, CharSetUtils.count("", "")); ref {CharSetUtils} [135-135],
 assertEquals(0, CharSetUtils.count("", "a-e")); ref {CharSetUtils} [136-136],
 assertEquals(0, CharSetUtils.count("hello", (String) null)); ref {CharSetUtils} [138-138],
 assertEquals(0, CharSetUtils.count("hello", "")); ref {CharSetUtils} [139-139],
 assertEquals(1, CharSetUtils.count("hello", "a-e")); ref {CharSetUtils} [140-140],
 assertEquals(3, CharSetUtils.count("hello", "l-p")); ref {CharSetUtils} [141-141]
[m[m31.08.2022 - 15:15:23.564 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetUtilsTest::testCount_StringStringarray has 17 assertions: 
 assertEquals(0, CharSetUtils.count(null, (String[]) null)); ref {CharSetUtils} [146-146],
 assertEquals(0, CharSetUtils.count(null, new String[0])); ref {CharSetUtils} [147-147],
 assertEquals(0, CharSetUtils.count(null, new String[] { null })); ref {CharSetUtils} [148-148],
 assertEquals(0, CharSetUtils.count(null, new String[] { "a-e" })); ref {CharSetUtils} [149-149],
 assertEquals(0, CharSetUtils.count("", (String[]) null)); ref {CharSetUtils} [151-151],
 assertEquals(0, CharSetUtils.count("", new String[0])); ref {CharSetUtils} [152-152],
 assertEquals(0, CharSetUtils.count("", new String[] { null })); ref {CharSetUtils} [153-153],
 assertEquals(0, CharSetUtils.count("", new String[] { "a-e" })); ref {CharSetUtils} [154-154],
 assertEquals(0, CharSetUtils.count("hello", (String[]) null)); ref {CharSetUtils} [156-156],
 assertEquals(0, CharSetUtils.count("hello", new String[0])); ref {CharSetUtils} [157-157],
 assertEquals(0, CharSetUtils.count("hello", new String[] { null })); ref {CharSetUtils} [158-158],
 assertEquals(1, CharSetUtils.count("hello", new String[] { "a-e" })); ref {CharSetUtils} [159-159],
 assertEquals(3, CharSetUtils.count("hello", new String[] { "el" })); ref {CharSetUtils} [161-161],
 assertEquals(0, CharSetUtils.count("hello", new String[] { "x" })); ref {CharSetUtils} [162-162],
 assertEquals(2, CharSetUtils.count("hello", new String[] { "e-i" })); ref {CharSetUtils} [163-163],
 assertEquals(5, CharSetUtils.count("hello", new String[] { "a-z" })); ref {CharSetUtils} [164-164],
 assertEquals(0, CharSetUtils.count("hello", new String[] { "" })); ref {CharSetUtils} [165-165]
[m[m31.08.2022 - 15:15:23.564 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetUtilsTest::testKeep_StringString has 11 assertions: 
 assertEquals(null, CharSetUtils.keep(null, (String) null)); ref {CharSetUtils} [171-171],
 assertEquals(null, CharSetUtils.keep(null, "")); ref {CharSetUtils} [172-172],
 assertEquals("", CharSetUtils.keep("", (String) null)); ref {CharSetUtils} [174-174],
 assertEquals("", CharSetUtils.keep("", "")); ref {CharSetUtils} [175-175],
 assertEquals("", CharSetUtils.keep("", "a-e")); ref {CharSetUtils} [176-176],
 assertEquals("", CharSetUtils.keep("hello", (String) null)); ref {CharSetUtils} [178-178],
 assertEquals("", CharSetUtils.keep("hello", "")); ref {CharSetUtils} [179-179],
 assertEquals("", CharSetUtils.keep("hello", "xyz")); ref {CharSetUtils} [180-180],
 assertEquals("hello", CharSetUtils.keep("hello", "a-z")); ref {CharSetUtils} [181-181],
 assertEquals("hello", CharSetUtils.keep("hello", "oleh")); ref {CharSetUtils} [182-182],
 assertEquals("ell", CharSetUtils.keep("hello", "el")); ref {CharSetUtils} [183-183]
[m[m31.08.2022 - 15:15:23.564 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetUtilsTest::testKeep_StringStringarray has 18 assertions: 
 assertEquals(null, CharSetUtils.keep(null, (String[]) null)); ref {CharSetUtils} [188-188],
 assertEquals(null, CharSetUtils.keep(null, new String[0])); ref {CharSetUtils} [189-189],
 assertEquals(null, CharSetUtils.keep(null, new String[] { null })); ref {CharSetUtils} [190-190],
 assertEquals(null, CharSetUtils.keep(null, new String[] { "a-e" })); ref {CharSetUtils} [191-191],
 assertEquals("", CharSetUtils.keep("", (String[]) null)); ref {CharSetUtils} [193-193],
 assertEquals("", CharSetUtils.keep("", new String[0])); ref {CharSetUtils} [194-194],
 assertEquals("", CharSetUtils.keep("", new String[] { null })); ref {CharSetUtils} [195-195],
 assertEquals("", CharSetUtils.keep("", new String[] { "a-e" })); ref {CharSetUtils} [196-196],
 assertEquals("", CharSetUtils.keep("hello", (String[]) null)); ref {CharSetUtils} [198-198],
 assertEquals("", CharSetUtils.keep("hello", new String[0])); ref {CharSetUtils} [199-199],
 assertEquals("", CharSetUtils.keep("hello", new String[] { null })); ref {CharSetUtils} [200-200],
 assertEquals("e", CharSetUtils.keep("hello", new String[] { "a-e" })); ref {CharSetUtils} [201-201],
 assertEquals("e", CharSetUtils.keep("hello", new String[] { "a-e" })); ref {CharSetUtils} [203-203],
 assertEquals("ell", CharSetUtils.keep("hello", new String[] { "el" })); ref {CharSetUtils} [204-204],
 assertEquals("hello", CharSetUtils.keep("hello", new String[] { "elho" })); ref {CharSetUtils} [205-205],
 assertEquals("hello", CharSetUtils.keep("hello", new String[] { "a-z" })); ref {CharSetUtils} [206-206],
 assertEquals("----", CharSetUtils.keep("----", new String[] { "-" })); ref {CharSetUtils} [207-207],
 assertEquals("ll", CharSetUtils.keep("hello", new String[] { "l" })); ref {CharSetUtils} [208-208]
[m[m31.08.2022 - 15:15:23.564 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetUtilsTest::testDelete_StringString has 10 assertions: 
 assertEquals(null, CharSetUtils.delete(null, (String) null)); ref {CharSetUtils} [214-214],
 assertEquals(null, CharSetUtils.delete(null, "")); ref {CharSetUtils} [215-215],
 assertEquals("", CharSetUtils.delete("", (String) null)); ref {CharSetUtils} [217-217],
 assertEquals("", CharSetUtils.delete("", "")); ref {CharSetUtils} [218-218],
 assertEquals("", CharSetUtils.delete("", "a-e")); ref {CharSetUtils} [219-219],
 assertEquals("hello", CharSetUtils.delete("hello", (String) null)); ref {CharSetUtils} [221-221],
 assertEquals("hello", CharSetUtils.delete("hello", "")); ref {CharSetUtils} [222-222],
 assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); ref {CharSetUtils} [223-223],
 assertEquals("he", CharSetUtils.delete("hello", "l-p")); ref {CharSetUtils} [224-224],
 assertEquals("hello", CharSetUtils.delete("hello", "z")); ref {CharSetUtils} [225-225]
[m[m31.08.2022 - 15:15:23.564 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.CharSetUtilsTest::testDelete_StringStringarray has 19 assertions: 
 assertEquals(null, CharSetUtils.delete(null, (String[]) null)); ref {CharSetUtils} [230-230],
 assertEquals(null, CharSetUtils.delete(null, new String[0])); ref {CharSetUtils} [231-231],
 assertEquals(null, CharSetUtils.delete(null, new String[] { null })); ref {CharSetUtils} [232-232],
 assertEquals(null, CharSetUtils.delete(null, new String[] { "el" })); ref {CharSetUtils} [233-233],
 assertEquals("", CharSetUtils.delete("", (String[]) null)); ref {CharSetUtils} [235-235],
 assertEquals("", CharSetUtils.delete("", new String[0])); ref {CharSetUtils} [236-236],
 assertEquals("", CharSetUtils.delete("", new String[] { null })); ref {CharSetUtils} [237-237],
 assertEquals("", CharSetUtils.delete("", new String[] { "a-e" })); ref {CharSetUtils} [238-238],
 assertEquals("hello", CharSetUtils.delete("hello", (String[]) null)); ref {CharSetUtils} [240-240],
 assertEquals("hello", CharSetUtils.delete("hello", new String[0])); ref {CharSetUtils} [241-241],
 assertEquals("hello", CharSetUtils.delete("hello", new String[] { null })); ref {CharSetUtils} [242-242],
 assertEquals("hello", CharSetUtils.delete("hello", new String[] { "xyz" })); ref {CharSetUtils} [243-243],
 assertEquals("ho", CharSetUtils.delete("hello", new String[] { "el" })); ref {CharSetUtils} [245-245],
 assertEquals("", CharSetUtils.delete("hello", new String[] { "elho" })); ref {CharSetUtils} [246-246],
 assertEquals("hello", CharSetUtils.delete("hello", new String[] { "" })); ref {CharSetUtils} [247-247],
 assertEquals("hello", CharSetUtils.delete("hello", "")); ref {CharSetUtils} [248-248],
 assertEquals("", CharSetUtils.delete("hello", new String[] { "a-z" })); ref {CharSetUtils} [249-249],
 assertEquals("", CharSetUtils.delete("----", new String[] { "-" })); ref {CharSetUtils} [250-250],
 assertEquals("heo", CharSetUtils.delete("hello", new String[] { "l" })); ref {CharSetUtils} [251-251]
[m[m31.08.2022 - 15:15:23.570 [INFO ] ParsingStrategy.parseTestSuite() - Found 25 test cases
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testConstructor has 5 assertions: 
 assertNotNull(new DurationFormatUtils()); ref {} [42-42],
 assertEquals(1, cons.length); ref {cons.length, cons} [44-44],
 assertTrue(Modifier.isPublic(cons[0].getModifiers())); ref {Modifier, cons} [45-45],
 assertTrue(Modifier.isPublic(DurationFormatUtils.class.getModifiers())); ref {Modifier} [46-46],
 assertFalse(Modifier.isFinal(DurationFormatUtils.class.getModifiers())); ref {Modifier} [47-47]
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatDurationWords has 26 assertions: 
 assertEquals("50 seconds", text); ref {text} [56-56],
 assertEquals("1 minute 5 seconds", text); ref {text} [58-58],
 assertEquals("2 minutes 0 seconds", text); ref {text} [60-60],
 assertEquals("2 minutes 1 second", text); ref {text} [62-62],
 assertEquals("1 hour 12 minutes 0 seconds", text); ref {text} [64-64],
 assertEquals("1 day 0 hours 0 minutes 0 seconds", text); ref {text} [66-66],
 assertEquals("50 seconds", text); ref {text} [69-69],
 assertEquals("1 minute 5 seconds", text); ref {text} [71-71],
 assertEquals("2 minutes", text); ref {text} [73-73],
 assertEquals("2 minutes 1 second", text); ref {text} [75-75],
 assertEquals("1 hour 12 minutes", text); ref {text} [77-77],
 assertEquals("1 day", text); ref {text} [79-79],
 assertEquals("0 days 0 hours 0 minutes 50 seconds", text); ref {text} [82-82],
 assertEquals("0 days 0 hours 1 minute 5 seconds", text); ref {text} [84-84],
 assertEquals("0 days 0 hours 2 minutes", text); ref {text} [86-86],
 assertEquals("0 days 0 hours 2 minutes 1 second", text); ref {text} [88-88],
 assertEquals("0 days 1 hour 12 minutes", text); ref {text} [90-90],
 assertEquals("1 day", text); ref {text} [92-92],
 assertEquals("0 days 0 hours 0 minutes 50 seconds", text); ref {text} [95-95],
 assertEquals("0 days 0 hours 1 minute 5 seconds", text); ref {text} [97-97],
 assertEquals("0 days 0 hours 2 minutes 0 seconds", text); ref {text} [99-99],
 assertEquals("0 days 0 hours 2 minutes 1 second", text); ref {text} [101-101],
 assertEquals("0 days 1 hour 12 minutes 0 seconds", text); ref {text} [103-103],
 assertEquals("1 day 1 hour 12 minutes 0 seconds", text); ref {text} [105-105],
 assertEquals("2 days 1 hour 12 minutes 0 seconds", text); ref {text} [107-107],
 assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); ref {i, text} [110-110]
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatDurationPluralWords has 15 assertions: 
 assertEquals("0 days 0 hours 0 minutes 1 second", text); ref {text} [126-126],
 assertEquals("0 days 0 hours 0 minutes 2 seconds", text); ref {text} [128-128],
 assertEquals("0 days 0 hours 0 minutes 11 seconds", text); ref {text} [130-130],
 assertEquals("0 days 0 hours 1 minute 0 seconds", text); ref {text} [133-133],
 assertEquals("0 days 0 hours 2 minutes 0 seconds", text); ref {text} [135-135],
 assertEquals("0 days 0 hours 11 minutes 0 seconds", text); ref {text} [137-137],
 assertEquals("0 days 0 hours 1 minute 1 second", text); ref {text} [139-139],
 assertEquals("0 days 1 hour 0 minutes 0 seconds", text); ref {text} [142-142],
 assertEquals("0 days 2 hours 0 minutes 0 seconds", text); ref {text} [144-144],
 assertEquals("0 days 11 hours 0 minutes 0 seconds", text); ref {text} [146-146],
 assertEquals("0 days 1 hour 1 minute 1 second", text); ref {text} [148-148],
 assertEquals("1 day 0 hours 0 minutes 0 seconds", text); ref {text} [151-151],
 assertEquals("2 days 0 hours 0 minutes 0 seconds", text); ref {text} [153-153],
 assertEquals("11 days 0 hours 0 minutes 0 seconds", text); ref {text} [155-155],
 assertEquals("1 day 1 hour 1 minute 1 second", text); ref {text} [157-157]
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatNegativeDurationWords has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatDurationHMS has 9 assertions: 
 assertEquals("00:00:00.000", DurationFormatUtils.formatDurationHMS(time)); ref {DurationFormatUtils, time} [168-168],
 assertEquals("00:00:00.001", DurationFormatUtils.formatDurationHMS(time)); ref {DurationFormatUtils, time} [171-171],
 assertEquals("00:00:00.015", DurationFormatUtils.formatDurationHMS(time)); ref {DurationFormatUtils, time} [174-174],
 assertEquals("00:00:00.165", DurationFormatUtils.formatDurationHMS(time)); ref {DurationFormatUtils, time} [177-177],
 assertEquals("00:00:01.675", DurationFormatUtils.formatDurationHMS(time)); ref {DurationFormatUtils, time} [180-180],
 assertEquals("00:00:13.465", DurationFormatUtils.formatDurationHMS(time)); ref {DurationFormatUtils, time} [183-183],
 assertEquals("00:01:12.789", DurationFormatUtils.formatDurationHMS(time)); ref {DurationFormatUtils, time} [186-186],
 assertEquals("00:32:12.789", DurationFormatUtils.formatDurationHMS(time)); ref {DurationFormatUtils, time} [189-189],
 assertEquals("01:02:12.789", DurationFormatUtils.formatDurationHMS(time)); ref {DurationFormatUtils, time} [192-192]
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatNegativeDurationHMS has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatDurationISO has 5 assertions: 
 assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L)); ref {DurationFormatUtils} [202-202],
 assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L)); ref {DurationFormatUtils} [203-203],
 assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10L)); ref {DurationFormatUtils} [204-204],
 assertEquals("P0Y0M0DT0H0M0.100S", DurationFormatUtils.formatDurationISO(100L)); ref {DurationFormatUtils} [205-205],
 assertEquals("P0Y0M0DT0H1M15.321S", DurationFormatUtils.formatDurationISO(75321L)); ref {DurationFormatUtils} [206-206]
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatNegativeDurationISO has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatDuration has 19 assertions: 
 assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); ref {duration, DurationFormatUtils} [217-217],
 assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); ref {duration, DurationFormatUtils} [218-218],
 assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); ref {duration, DurationFormatUtils} [219-219],
 assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); ref {duration, DurationFormatUtils} [220-220],
 assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); ref {duration, DurationFormatUtils} [221-221],
 assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); ref {duration, DurationFormatUtils} [222-222],
 assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); ref {duration, DurationFormatUtils} [223-223],
 assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); ref {duration, DurationFormatUtils} [224-224],
 assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); ref {duration, DurationFormatUtils} [225-225],
 assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); ref {duration, DurationFormatUtils} [226-226],
 assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); ref {duration, DurationFormatUtils} [229-229],
 assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); ref {duration, DurationFormatUtils} [230-230],
 assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); ref {duration, DurationFormatUtils} [231-231],
 assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); ref {duration, DurationFormatUtils} [232-232],
 assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); ref {duration, DurationFormatUtils} [233-233],
 assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); ref {duration, DurationFormatUtils} [234-234],
 assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); ref {duration, DurationFormatUtils} [235-235],
 assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); ref {duration, DurationFormatUtils} [236-236],
 assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); ref {duration, DurationFormatUtils, days} [249-249]
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatNegativeDuration has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatPeriodISO has 3 assertions: 
 assertEquals("2002-02-23T09:11:12-03:00", text); ref {text} [270-270],
 assertEquals("P32Y1M22DT9H11M12.001S", text); ref {text} [274-274],
 assertEquals("P1Y1M2DT10H30M0.000S", text); ref {text} [280-280]
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatPeriodISOStartGreaterEnd has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatPeriodISOMethod has 3 assertions: 
 assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatPeriodISO(0L, 0L)); ref {DurationFormatUtils} [292-292],
 assertEquals("P0Y0M0DT0H0M1.000S", DurationFormatUtils.formatPeriodISO(0L, 1000L)); ref {DurationFormatUtils} [293-293],
 assertEquals("P0Y0M0DT0H1M1.000S", DurationFormatUtils.formatPeriodISO(0L, 61000L)); ref {DurationFormatUtils} [294-294]
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatPeriod has 30 assertions: 
 assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "y")); ref {time1970, DurationFormatUtils} [304-304],
 assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "M")); ref {time1970, DurationFormatUtils} [305-305],
 assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "d")); ref {time1970, DurationFormatUtils} [306-306],
 assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "H")); ref {time1970, DurationFormatUtils} [307-307],
 assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "m")); ref {time1970, DurationFormatUtils} [308-308],
 assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "s")); ref {time1970, DurationFormatUtils} [309-309],
 assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "S")); ref {time1970, DurationFormatUtils} [310-310],
 assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "SSSS")); ref {time1970, DurationFormatUtils} [311-311],
 assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "yyyy")); ref {time1970, DurationFormatUtils} [312-312],
 assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "yyMM")); ref {time1970, DurationFormatUtils} [313-313],
 assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "y")); ref {time1970, DurationFormatUtils, time} [316-316],
 assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "M")); ref {time1970, DurationFormatUtils, time} [317-317],
 assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "d")); ref {time1970, DurationFormatUtils, time} [318-318],
 assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "H")); ref {time1970, DurationFormatUtils, time} [319-319],
 assertEquals("1", DurationFormatUtils.formatPeriod(time1970, time, "m")); ref {time1970, DurationFormatUtils, time} [320-320],
 assertEquals("60", DurationFormatUtils.formatPeriod(time1970, time, "s")); ref {time1970, DurationFormatUtils, time} [321-321],
 assertEquals("60000", DurationFormatUtils.formatPeriod(time1970, time, "S")); ref {time1970, DurationFormatUtils, time} [322-322],
 assertEquals("01:00", DurationFormatUtils.formatPeriod(time1970, time, "mm:ss")); ref {time1970, DurationFormatUtils, time} [323-323],
 assertEquals("36", DurationFormatUtils.formatPeriod(time1970, time, "yM")); ref {time1970, DurationFormatUtils, time} [329-329],
 assertEquals("3 years 6 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'")); ref {time1970, DurationFormatUtils, time} [330-330],
 assertEquals("03/06", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM")); ref {time1970, DurationFormatUtils, time} [331-331],
 assertEquals("310", DurationFormatUtils.formatPeriod(time1970, time, "yM")); ref {time1970, DurationFormatUtils, time} [336-336],
 assertEquals("3 years 10 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'")); ref {time1970, DurationFormatUtils, time} [337-337],
 assertEquals("03/10", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM")); ref {time1970, DurationFormatUtils, time} [338-338],
 assertEquals("40", DurationFormatUtils.formatPeriod(time1970, time, "yM")); ref {time1970, DurationFormatUtils, time} [343-343],
 assertEquals("4 years 0 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'")); ref {time1970, DurationFormatUtils, time} [344-344],
 assertEquals("04/00", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM")); ref {time1970, DurationFormatUtils, time} [345-345],
 assertEquals("48", DurationFormatUtils.formatPeriod(time1970, time, "M")); ref {time1970, DurationFormatUtils, time} [346-346],
 assertEquals("48", DurationFormatUtils.formatPeriod(time1970, time, "MM")); ref {time1970, DurationFormatUtils, time} [347-347],
 assertEquals("048", DurationFormatUtils.formatPeriod(time1970, time, "MMM")); ref {time1970, DurationFormatUtils, time} [348-348]
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatPeriodeStartGreaterEnd has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testLexx has 7 assertions: 
 // tests each constant
assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.y, 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1) }, DurationFormatUtils.lexx("yMdHmsS")); ref {DurationFormatUtils.M, DurationFormatUtils.m, DurationFormatUtils.H, DurationFormatUtils.y, DurationFormatUtils, DurationFormatUtils.d, DurationFormatUtils.s, DurationFormatUtils.S} [359-366],
 // tests the ISO 8601-like
assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.H, 2), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 2), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 2), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 3) }, DurationFormatUtils.lexx("HH:mm:ss.SSS")); ref {DurationFormatUtils.m, DurationFormatUtils.H, DurationFormatUtils, DurationFormatUtils.s, DurationFormatUtils.S} [369-376],
 // test the iso extended format
assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(new StringBuilder("P"), 1), new DurationFormatUtils.Token(DurationFormatUtils.y, 4), new DurationFormatUtils.Token(new StringBuilder("Y"), 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(new StringBuilder("DT"), 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder("H"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 3), new DurationFormatUtils.Token(new StringBuilder("S"), 1) }, DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)); ref {DurationFormatUtils.M, DurationFormatUtils.m, DurationFormatUtils.H, DurationFormatUtils.y, DurationFormatUtils, DurationFormatUtils.d, DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, DurationFormatUtils.s, DurationFormatUtils.S} [379-395],
 assertFalse("Token equal to non-Token class. ", token.equals(new Object())); ref {token} [399-399],
 assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token(new Object()))); ref {token} [400-401],
 assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token(DurationFormatUtils.y, 1))); ref {DurationFormatUtils.y, DurationFormatUtils, token} [402-403],
 assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken)); ref {numToken} [405-405]
[m[m31.08.2022 - 15:15:23.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testBugzilla38401 has 1 assertions: 
 assertEqualDuration("0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 }, new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); ref {} [412-413]
[m[m31.08.2022 - 15:15:23.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testJiraLang281 has 1 assertions: 
 assertEqualDuration("09", new int[] { 2005, 11, 31, 0, 0, 0 }, new int[] { 2006, 9, 6, 0, 0, 0 }, "MM"); ref {} [419-420]
[m[m31.08.2022 - 15:15:23.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testLANG815 has 1 assertions: 
 assertEquals("1 9", DurationFormatUtils.formatPeriod(startMillis, endMillis, "M d")); ref {startMillis, DurationFormatUtils, endMillis} [432-432]
[m[m31.08.2022 - 15:15:23.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testLowDurations has 1 assertions: 
 assertEqualDuration(hr + ":" + min + ":" + sec, new int[] { 2000, 0, 1, 0, 0, 0, 0 }, new int[] { 2000, 0, 1, hr, min, sec }, "H:m:s"); ref {sec, min, hr} [441-445]
[m[m31.08.2022 - 15:15:23.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testEdgeDurations has 31 assertions: 
 assertEqualDuration("01", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM"); ref {} [456-457],
 assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 15, 0, 0, 0 }, "MM"); ref {} [458-459],
 assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 16, 0, 0, 0 }, "MM"); ref {} [460-461],
 assertEqualDuration("11", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 14, 0, 0, 0 }, "MM"); ref {} [462-463],
 assertEqualDuration("01 26", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM dd"); ref {} [465-466],
 assertEqualDuration("54", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "dd"); ref {} [467-468],
 assertEqualDuration("09 12", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "MM dd"); ref {} [470-471],
 assertEqualDuration("287", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "dd"); ref {} [472-473],
 assertEqualDuration("11 30", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); ref {} [475-476],
 assertEqualDuration("364", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); ref {} [477-478],
 assertEqualDuration("12 00", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); ref {} [480-481],
 assertEqualDuration("365", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); ref {} [482-483],
 assertEqualDuration("31", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2006, 1, 1, 0, 0, 0 }, "dd"); ref {} [485-486],
 assertEqualDuration("92", new int[] { 2005, 9, 1, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); ref {} [488-489],
 assertEqualDuration("77", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); ref {} [490-491],
 // test month larger in start than end
assertEqualDuration("136", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 2, 1, 0, 0, 0 }, "dd"); ref {} [494-495],
 // test when start in leap year
assertEqualDuration("136", new int[] { 2004, 9, 16, 0, 0, 0 }, new int[] { 2005, 2, 1, 0, 0, 0 }, "dd"); ref {} [497-498],
 // test when end in leap year
assertEqualDuration("137", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 2, 1, 0, 0, 0 }, "dd"); ref {} [500-501],
 // test when end in leap year but less than end of feb
assertEqualDuration("135", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 1, 28, 0, 0, 0 }, "dd"); ref {} [503-504],
 assertEqualDuration("364", new int[] { 2007, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); ref {} [506-507],
 assertEqualDuration("729", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); ref {} [508-509],
 assertEqualDuration("365", new int[] { 2007, 2, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); ref {} [511-512],
 assertEqualDuration("333", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); ref {} [513-514],
 assertEqualDuration("28", new int[] { 2008, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); ref {} [516-517],
 assertEqualDuration("393", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); ref {} [518-519],
 assertEqualDuration("369", new int[] { 2004, 0, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); ref {} [521-522],
 assertEqualDuration("338", new int[] { 2004, 1, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); ref {} [524-525],
 assertEqualDuration("28", new int[] { 2004, 2, 8, 0, 0, 0 }, new int[] { 2004, 3, 5, 0, 0, 0 }, "dd"); ref {} [527-528],
 assertEqualDuration("48", new int[] { 1992, 1, 29, 0, 0, 0 }, new int[] { 1996, 1, 29, 0, 0, 0 }, "M"); ref {} [530-531],
 // this seems odd - and will fail if I throw it in as a brute force
// below as it expects the answer to be 12. It's a tricky edge case
assertEqualDuration("11", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M"); ref {} [536-537],
 // again - this seems odd
assertEqualDuration("11 28", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M d"); ref {} [539-540]
[m[m31.08.2022 - 15:15:23.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testLANG984 has 4 assertions: 
 // Long durations
assertEquals("0", DurationFormatUtils.formatDuration(0, "S")); ref {DurationFormatUtils} [546-546],
 assertEquals(Integer.toString(Integer.MAX_VALUE), DurationFormatUtils.formatDuration(Integer.MAX_VALUE, "S")); ref {Integer, DurationFormatUtils, Integer.MAX_VALUE} [547-547],
 assertEquals(Long.toString(maxIntPlus), DurationFormatUtils.formatDuration(maxIntPlus, "S")); ref {maxIntPlus, Long, DurationFormatUtils} [550-550],
 assertEquals(Long.toString(Long.MAX_VALUE), DurationFormatUtils.formatDuration(Long.MAX_VALUE, "S")); ref {Long.MAX_VALUE, Long, DurationFormatUtils} [551-551]
[m[m31.08.2022 - 15:15:23.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testLANG982 has 8 assertions: 
 // More than 3 millisecond digits following a second
assertEquals("61.999", DurationFormatUtils.formatDuration(61999, "s.S")); ref {DurationFormatUtils} [556-556],
 assertEquals("1 1999", DurationFormatUtils.formatDuration(61999, "m S")); ref {DurationFormatUtils} [557-557],
 assertEquals("61.999", DurationFormatUtils.formatDuration(61999, "s.SSS")); ref {DurationFormatUtils} [558-558],
 assertEquals("1 1999", DurationFormatUtils.formatDuration(61999, "m SSS")); ref {DurationFormatUtils} [559-559],
 assertEquals("61.0999", DurationFormatUtils.formatDuration(61999, "s.SSSS")); ref {DurationFormatUtils} [560-560],
 assertEquals("1 1999", DurationFormatUtils.formatDuration(61999, "m SSSS")); ref {DurationFormatUtils} [561-561],
 assertEquals("61.00999", DurationFormatUtils.formatDuration(61999, "s.SSSSS")); ref {DurationFormatUtils} [562-562],
 assertEquals("1 01999", DurationFormatUtils.formatDuration(61999, "m SSSSS")); ref {DurationFormatUtils} [563-563]
[m[m31.08.2022 - 15:15:23.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testDurationsByBruteForce has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.time.DurationFormatUtilsTest::testLANG981 has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.573 [INFO ] ParsingStrategy.parseTestSuite() - Found 5 test cases
[m[m31.08.2022 - 15:15:23.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableObjectTest::testConstructors has 4 assertions: 
 assertEquals(null, new MutableObject<String>().getValue()); ref {} [33-33],
 assertSame(i, new MutableObject<Integer>(i).getValue()); ref {i} [36-36],
 assertSame("HI", new MutableObject<String>("HI").getValue()); ref {} [37-37],
 assertSame(null, new MutableObject<Object>(null).getValue()); ref {} [38-38]
[m[m31.08.2022 - 15:15:23.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableObjectTest::testGetSet has 3 assertions: 
 assertEquals(null, new MutableObject<Object>().getValue()); ref {} [44-44],
 assertSame("HELLO", mutNum.getValue()); ref {mutNum} [47-47],
 assertSame(null, mutNum.getValue()); ref {mutNum} [50-50]
[m[m31.08.2022 - 15:15:23.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableObjectTest::testEquals has 12 assertions: 
 assertTrue(mutNumA.equals(mutNumA)); ref {mutNumA} [60-60],
 assertTrue(mutNumA.equals(mutNumB)); ref {mutNumA, mutNumB} [61-61],
 assertTrue(mutNumB.equals(mutNumA)); ref {mutNumA, mutNumB} [62-62],
 assertTrue(mutNumB.equals(mutNumB)); ref {mutNumB} [63-63],
 assertFalse(mutNumA.equals(mutNumC)); ref {mutNumA, mutNumC} [64-64],
 assertFalse(mutNumB.equals(mutNumC)); ref {mutNumB, mutNumC} [65-65],
 assertTrue(mutNumC.equals(mutNumC)); ref {mutNumC} [66-66],
 assertFalse(mutNumA.equals(mutNumD)); ref {mutNumA, mutNumD} [67-67],
 assertTrue(mutNumD.equals(mutNumD)); ref {mutNumD} [68-68],
 assertFalse(mutNumA.equals(null)); ref {mutNumA} [70-70],
 assertFalse(mutNumA.equals(new Object())); ref {mutNumA} [71-71],
 assertFalse(mutNumA.equals("0")); ref {mutNumA} [72-72]
[m[m31.08.2022 - 15:15:23.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableObjectTest::testHashCode has 6 assertions: 
 assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); ref {mutNumA} [82-82],
 assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); ref {mutNumA, mutNumB} [83-83],
 assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); ref {mutNumA, mutNumC} [84-84],
 assertFalse(mutNumA.hashCode() == mutNumD.hashCode()); ref {mutNumA, mutNumD} [85-85],
 assertTrue(mutNumA.hashCode() == "ALPHA".hashCode()); ref {mutNumA} [86-86],
 assertEquals(0, mutNumD.hashCode()); ref {mutNumD} [87-87]
[m[m31.08.2022 - 15:15:23.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.mutable.MutableObjectTest::testToString has 3 assertions: 
 assertEquals("HI", new MutableObject<String>("HI").toString()); ref {} [92-92],
 assertEquals("10.0", new MutableObject<Double>(Double.valueOf(10)).toString()); ref {Double} [93-93],
 assertEquals("null", new MutableObject<Object>(null).toString()); ref {} [94-94]
[m[m31.08.2022 - 15:15:23.573 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m31.08.2022 - 15:15:23.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$28() - Testcase org.apache.commons.lang3.exception.DefaultExceptionContextTest::testFormattedExceptionMessageNull has 0 assertions: 
 
[m[m31.08.2022 - 15:15:23.581 [INFO ] ParsingStrategy.mergePartialSuites() - ====================================================================
[m[m31.08.2022 - 15:15:23.581 [INFO ] ParsingStrategy.mergePartialSuites() - Finished parsing the test suite.
[m[m31.08.2022 - 15:15:23.583 [INFO ] ParsingStrategy.mergePartialSuites() - It contains 2622 test cases and 13728 assertions.
[m[m31.08.2022 - 15:15:23.871 [INFO ] JUnitTestSuiteReducer.reduce() - Starting test suite reduction
[m[32m31.08.2022 - 15:52:34.771 [DEBUG] GeneticReductionStrategy.reduce() - Jenetics Statistics:
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |  Time statistics                                                          |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |             Selection: sum=0.077350625000 s; mean=0.005156708333 s        |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |              Altering: sum=5.361039010000 s; mean=0.357402600667 s        |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |   Fitness calculation: sum=2122.386579926000 s; mean=141.492438661733 s   |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |     Overall execution: sum=2127.800762827000 s; mean=141.853384188467 s   |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |  Evolution statistics                                                     |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |           Generations: 15                                                 |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |               Altered: sum=46,973,909; mean=3131593.933333333             |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                Killed: sum=0; mean=0.000000000                            |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |              Invalids: sum=0; mean=0.000000000                            |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |  Population statistics                                                    |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                   Age: max=12; mean=0.922480; var=1.718627                |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |               Fitness:                                                    |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      min  = -1.000000000000                               |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      max  = -1.000000000000                               |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      mean = -1.000000000000                               |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      var  = 0.000000000000                                |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      std  = 0.000000000000                                |
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m31.08.2022 - 15:52:34.787 [DEBUG] GeneticReductionStrategy.reduce() - Best Result:
[m[32m31.08.2022 - 15:52:34.788 [DEBUG] GeneticReductionStrategy.reduce() - [00101111|11111111|11111110|11111111|01111111|11111111|11111111|11111111|10101111|11111111|11111110|11111111|11111111|11111111|11101111|11111111|11111111|11111111|11111111|01101111|10111111|11111111|01111111|11111111|11101111|11111111|11111111|11111111|11111111|01110111|10101111|11111111|11101111|01111111|11101111|11101011|11111111|11111111|11111111|01101111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11011111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|10111111|11111111|01111110|10111111|11111111|11111101|11111111|00111111|11111111|11111111|11111111|11111111|11111111|11111111|11101111|11111111|11111111|11111111|11111111|11101111|11111111|11111111|11111111|11111101|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11011110|11111111|11110111|11111111|11110111|11111111|11111111|11111011|11111111|11111111|10111111|11111111|11111111|11101111|11111111|11111111|11111111|10111111|11111111|11111111|11101111|11111111|11110111|11111111|11111111|11110111|11110111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11011111|11101111|11111111|11111111|11111111|11111111|11111111|11111111|11011111|11111111|11111111|11111111|11111111|11111001|10111011|11111111|11111110|11111111|10111111|01111111|11111011|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11110111|01111101|11111111|11111111|10011111|11111110|11111111|11111111|11111011|11110111|11111111|11111110|11111111|11111111|11110111|11111111|11111111|11111111|11111111|11111111|11111101|11111111|11111111|11111111|11111111|11111111|11111111|11111011|11111111|11101111|01111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111011|11111111|11111101|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111111|11111110|11111011|11110110|11110111|10111111|11111111|11111111|01111111|11111111|11111111|11111111|10111111|11111111|11111111|11111111|11111111|11111111|11111011|11111011|10111111|11111111|11111111|11110111|11011111|11111111|11111111|11111111|11111011|11111111|11111111|11111111|11111011|11111111|11111111|11111111|11111111|11111011|11111111|11111111|11111111|11101111|11111111|11111111|11101111|11111111|11111111|11111111|11111111|11111111|11111111|01111111|11111111|11111111|10111111|11111111|11111111|11111111|11111111|11011111|11101111|11111111|11111110|11111111|11111111|11111111|11011011|11111101|11111111|11111111|11111111|11111111|01111101|11111110|11111111|11110111|11111111|01111111|11111111|11110111|11111111|11111101|11111101|11110011|11111110|11111111|11111111|11101101|11111111|11111111|11111101|01111111|11111111|11111111|11110011|11111111|11111101|11111111|11111110|11111111|11111111|11111111|11111101|01101111|11111110|01111111] -> -1
[m[32m31.08.2022 - 15:52:38.933 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPairOf
[m[32m31.08.2022 - 15:52:38.933 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompatibilityBetweenPairs
[m[32m31.08.2022 - 15:52:38.933 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMapEntry
[m[32m31.08.2022 - 15:52:38.933 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparable1
[m[32m31.08.2022 - 15:52:38.933 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparable2
[m[32m31.08.2022 - 15:52:38.933 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.933 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToStringCustom
[m[32m31.08.2022 - 15:52:38.933 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormattable_simple
[m[32m31.08.2022 - 15:52:38.933 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormattable_padded
[m[32m31.08.2022 - 15:52:38.933 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructors
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorNull
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSet
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetNull
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNanInfinite
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareToNull
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrimitiveValues
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFloat
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIncrement
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDecrement
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddValuePrimitive
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddValueObject
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtractValuePrimitive
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtractValueObject
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testException
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerializeStream
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerializeStreamUnserializable
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerializeStreamNullObj
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerializeStreamObjNull
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerializeStreamNullNull
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerializeIOException
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeserializeStream
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeserializeClassCastException
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeserializeStreamOfNull
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeserializeStreamNull
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeserializeStreamBadStream
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeserializeStreamClassNotFound
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundtrip
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerializeBytes
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerializeBytesUnserializable
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerializeBytesNull
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeserializeBytes
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeserializeBytesOfNull
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeserializeBytesNull
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeserializeBytesBadStream
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClone
[m[32m31.08.2022 - 15:52:38.934 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneNull
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneUnserializable
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrimitiveTypeClassSerialization
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNull
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBlank
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSuper
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayArray
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormat
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortDateStyleWithLocales
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLowYearPadding
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMilleniumBug
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSimpleDate
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang538
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToStringContainsName
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPatternMatches
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocaleMatches
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTimeZoneMatches
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test1806Argument
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test1806
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang1103
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquivalence
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNonEquivalentAnnotationsOfSameType
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAnnotationsOfDifferingTypes
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBothArgsNull
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsValidAnnotationMemberType
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGeneratedAnnotationEquivalentToRealAnnotation
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testListIsNonModifiable
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIterator
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToStringOutput
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToStringSpecifyStyleOutput
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullLhs
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullRhs
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullList
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullStyle
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoDifferencesString
[m[32m31.08.2022 - 15:52:38.935 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNumberOfInitializeInvocations
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGet
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMultipleTimes
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetConcurrent
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAssignable
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsInstance
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetTypeArguments
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTypesSatisfyVariables
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetRawType
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsArrayTypeClasses
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsArrayGenericTypes
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetPrimitiveArrayComponentType
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetArrayComponentType
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang820
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParameterize
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParameterizeWithOwner
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWildcardType
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnboundedWildcardType
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLowerBoundedWildcardType
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGenericArrayType
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToLongString
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrap
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsNull
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFirstNonNull
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotEqual
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCodeMulti_multiple_emptyArray
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCodeMulti_multiple_nullArray
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCodeMulti_multiple_likeList
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIdentityToStringStringBuffer
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIdentityToStringStringBuilder
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIdentityToStringStrBuilder
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIdentityToStringAppendable
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString_Object
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString_ObjectString
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNull
[m[32m31.08.2022 - 15:52:38.936 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMax
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMin
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompare
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMedian
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMedian_nullItems
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparatorMedian
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparatorMedian_nullComparator
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparatorMedian_nullItems
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparatorMedian_emptyItems
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMode
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneOfCloneable
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneOfNotCloneable
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneOfUncloneable
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneOfStringArray
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneOfPrimitiveArray
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPossibleCloneOfNotCloneable
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPossibleCloneOfUncloneable
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstMethods
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructors
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFromReader
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFromReaderAppendsToEnd
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFromCharBuffer
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFromCharBufferAppendsToEnd
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFromReadable
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFromReadableAppendsToEnd
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSetNewLineText
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSetNullText
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCapacityAndLength
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLength
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetLength
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCapacity
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEnsureCapacity
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinimizeCapacity
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSize
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsEmpty
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClear
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetCharAt
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteCharAt
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToCharArray
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToCharArrayIntInt
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetChars
[m[32m31.08.2022 - 15:52:38.937 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetCharsIntIntCharArrayInt
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteIntInt
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteAll_char
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteFirst_char
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteAll_String
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteFirst_String
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteAll_StrMatcher
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplace_int_int_String
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceAll_char_char
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceFirst_char_char
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceAll_String_String
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceAll_StrMatcher_String
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceFirst_StrMatcher_String
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplace_StrMatcher_String_int_int_int_VaryMatcher
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplace_StrMatcher_String_int_int_int_VaryReplace
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplace_StrMatcher_String_int_int_int_VaryStartIndex
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplace_StrMatcher_String_int_int_int_VaryEndIndex
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplace_StrMatcher_String_int_int_int_VaryCount
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverse
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTrim
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStartsWith
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEndsWith
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubSequenceIntInt
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubstringInt
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubstringIntInt
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMidString
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRightString
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLeftString
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContains_char
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContains_String
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContains_StrMatcher
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOf_char
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOf_char_int
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOf_char
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOf_String
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOf_String_int
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOf_String
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOf_String_int
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOf_StrMatcher
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOf_StrMatcher_int
[m[32m31.08.2022 - 15:52:38.938 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOf_StrMatcher
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOf_StrMatcher_int
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsTokenizer
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsReader
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsWriter
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsIgnoreCase
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToStringBuffer
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToStringBuilder
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfLang294
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang295
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang412Right
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAsBuilder
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendCharBuffer
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendToWriter
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendToStringBuilder
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendToStringBuffer
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendToCharBuffer
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContextedException
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContextedExceptionString
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContextedExceptionThrowable
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContextedExceptionStringThrowable
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContextedExceptionStringThrowableContext
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullExceptionPassing
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawMessage
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddContextValue
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetContextValue
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFirstContextValue
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetContextValues
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetContextLabels
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetContextEntries
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJavaSerialization
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubstring_StringInt
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubstring_StringIntInt
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLeft_String
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRight_String
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMid_String
[m[32m31.08.2022 - 15:52:38.939 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubstringBefore_StringString
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubstringAfter_StringString
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubstringBeforeLast_StringString
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubstringAfterLast_StringString
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubstringBetween_StringString
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubstringBetween_StringStringString
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubstringsBetween_StringStringString
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCountMatches_String
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCountMatches_char
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClass
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetInstance
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetInstance_Stringarray
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_String_simple
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_String_comboNegated
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_String_oddDash
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_String_oddNegate
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_String_oddCombinations
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals_Object
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContains_Char
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerialization
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStatics
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorExEvenFirst
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorExEvenSecond
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorExEvenNegative
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHashCode
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHierarchyHashCode
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHierarchyHashCodeEx1
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHierarchyHashCodeEx2
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHashCodeEx1
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHashCodeEx2
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHashCodeEx3
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSuper
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectBuild
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInt
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShort
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChar
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByte
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDouble
[m[32m31.08.2022 - 15:52:38.940 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloat
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBoolean
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArrayAsObject
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayAsObject
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntArray
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntArrayAsObject
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortArray
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortArrayAsObject
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharArray
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharArrayAsObject
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArray
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArrayAsObject
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDoubleArray
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDoubleArrayAsObject
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloatArray
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloatArrayAsObject
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBooleanArray
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBooleanArrayAsObject
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBooleanMultiArray
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHashCodeExcludeFields
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionObjectCycle
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToHashCodeEqualsHashCode
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLinkedList
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testArrayList
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCopyOnWriteArrayList
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparableConstructors
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsWithCompare
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRangeOfChars
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsObject
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToStringFormat
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMinimum
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMaximum
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContains
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAfter
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsStartedBy
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsEndedBy
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsBefore
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testElementCompareTo
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsRange
[m[32m31.08.2022 - 15:52:38.941 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAfterRange
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsOverlappedBy
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsBeforeRange
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntersectionWith
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntersectionWithNull
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntersectionWithNonOverlapping
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerializing
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasic
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefault
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPairOf
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerialization
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionEquals
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHierarchyEquals
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSuper
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChar
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByte
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDouble
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloat
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAccessors
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReset
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBoolean
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDoubleArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloatArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBooleanArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiLongArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiIntArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiShortArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiCharArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiByteArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiFloatArray
[m[32m31.08.2022 - 15:52:38.942 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiDoubleArray
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiBooleanArray
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRaggedArray
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMixedArray
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDoubleArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloatArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBooleanArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnrelatedClasses
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNpeForNullElement
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionEqualsExcludeFields
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCyclicalObjectReferences
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionArrays
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructors
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorNull
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSet
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetNull
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNanInfinite
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareTo
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareToNull
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrimitiveValues
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToDouble
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIncrement
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDecrement
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddValuePrimitive
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddValueObject
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtractValuePrimitive
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtractValueObject
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_negate_Boolean
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isTrue_Boolean
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isNotTrue_Boolean
[m[32m31.08.2022 - 15:52:38.943 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isFalse_Boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isNotFalse_Boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBoolean_Boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBooleanDefaultIfNull_Boolean_boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBoolean_int
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBooleanObject_int
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBooleanObject_Integer
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBoolean_int_int_int
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBoolean_Integer_Integer_Integer_nullValue
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBoolean_Integer_Integer_Integer_noMatch
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBooleanObject_int_int_int
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBooleanObject_int_int_int_noMatch
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBooleanObject_Integer_Integer_Integer_Integer
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toInteger_boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toIntegerObject_boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toIntegerObject_Boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toInteger_boolean_int_int
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toInteger_Boolean_int_int_int
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toIntegerObject_boolean_Integer_Integer
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toIntegerObject_Boolean_Integer_Integer_Integer
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBooleanObject_String
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBooleanObject_String_String_String_String
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBooleanObject_String_String_String_String_nullValue
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBooleanObject_String_String_String_String_noMatch
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBoolean_String
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBoolean_String_String_String
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBoolean_String_String_String_nullValue
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toBoolean_String_String_String_noMatch
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringTrueFalse_Boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringOnOff_Boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringYesNo_Boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toString_Boolean_String_String_String
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringTrueFalse_boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringOnOff_boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringYesNo_boolean
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toString_boolean_String_String_String
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testXor_primitive_nullInput
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testXor_primitive_emptyInput
[m[32m31.08.2022 - 15:52:38.944 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testXor_primitive_validInput_3items
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testXor_object_nullInput
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testXor_object_emptyInput
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testXor_object_nullElementInput
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testXor_object_validInput_2items
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testXor_object_validInput_3items
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAnd_primitive_nullInput
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAnd_primitive_emptyInput
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAnd_primitive_validInput_2items
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAnd_primitive_validInput_3items
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAnd_object_nullInput
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAnd_object_nullElementInput
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAnd_object_validInput_2items
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAnd_object_validInput_3items
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOr_primitive_nullInput
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOr_primitive_emptyInput
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOr_primitive_validInput_2items
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOr_primitive_validInput_3items
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOr_object_nullInput
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOr_object_emptyInput
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOr_object_nullElementInput
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOr_object_validInput_2items
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOr_object_validInput_3items
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompare
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetJavaHome
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetJavaIoTmpDir
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetUserDir
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetUserHome
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIS_JAVA
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIS_OS
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJavaVersionMatches
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOSMatchesName
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOSMatchesNameAndVersion
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOsVersionMatches
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJavaAwtHeadless
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getInstance
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getInstance_String
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getInstance_String_TimeZone
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getInstance_String_Locale
[m[32m31.08.2022 - 15:52:38.945 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_changeDefault_Locale_DateInstance
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getInstance_String_TimeZone_Locale
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCheckDefaults
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCheckDifferingStyles
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDateDefaults
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTimeDefaults
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTimeDateDefaults
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang954
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseSync
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorExists
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHTML40_EXTENDED_ESCAPE
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testISO8859_1_ESCAPE
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBlank
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSuper
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPerson
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayArray
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasic
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTripleOf
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerialization
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang381
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEnforceExceptions
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorExists
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDistanceGreaterThanZero
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDistanceEqual
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDistanceEqualObject
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDistanceNullChild
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDistanceNullParent
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDistanceNullParentNullChild
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDistanceReverseParentChild
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeJava
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeJavaWithSlash
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnescapeJava
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeEcmaScript
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeHtml
[m[32m31.08.2022 - 15:52:38.946 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnescapeHtml4
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnescapeHexCharsHtml
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnescapeUnknownEntity
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeHtmlVersions
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeXml
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeXml10
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeXml11
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeXmlSupplementaryCharacters
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeXmlAllCharacters
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnescapeXmlSupplementaryCharacters
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStandaloneAmphersand
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang313
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeCsvString
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnescapeCsvString
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnescapeCsvWriter
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeHtmlHighUnicode
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeHiragana
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang708
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang720
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang911
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeJson
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSupplementaryUnescaping
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOutOfBounds
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnfinishedEntity
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompositeFormat
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUsage
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormat
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortDateStyleWithLocales
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLowYearPadding
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMilleniumBug
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSimpleDate
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang303
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang538
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToStringContainsName
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPatternMatches
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocaleMatches
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTimeZoneMatches
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTimeZoneAsZ
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test1806Argument
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test1806
[m[32m31.08.2022 - 15:52:38.947 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang1103
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsTrue1
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsTrue2
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsTrue3
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsTrue4
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsTrue5
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotNull1
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotNull2
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotEmptyArray1
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotEmptyArray2
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotEmptyCollection1
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotEmptyCollection2
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotEmptyMap1
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotEmptyMap2
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotEmptyString2
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankNullStringShouldThrow
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankMsgNullStringShouldThrow
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankEmptyStringShouldThrow
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankBlankStringWithWhitespacesShouldThrow
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankBlankStringWithNewlinesShouldThrow
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankMsgBlankStringWithWhitespacesShouldThrow
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankMsgEmptyStringShouldThrow
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankNotBlankStringShouldNotThrow
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankNotBlankStringWithWhitespacesShouldNotThrow
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankNotBlankStringWithNewlinesShouldNotThrow
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankMsgNotBlankStringShouldNotThrow
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankReturnValues1
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotBlankReturnValues2
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoNullElementsArray1
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoNullElementsArray2
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoNullElementsCollection1
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoNullElementsCollection2
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testValidIndex_withMessage_array
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testValidIndex_array
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testValidIndex_withMessage_collection
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testValidIndex_collection
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testValidIndex_withMessage_charSequence
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testValidIndex_charSequence
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMatchesPattern
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMatchesPattern_withMessage
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInclusiveBetween
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInclusiveBetween_withMessage
[m[32m31.08.2022 - 15:52:38.948 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInclusiveBetweenLong
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInclusiveBetweenLong_withMessage
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInclusiveBetweenDouble
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInclusiveBetweenDouble_withMessage
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExclusiveBetween
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExclusiveBetween_withMessage
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExclusiveBetweenLong
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExclusiveBetweenLong_withMessage
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExclusiveBetweenDouble
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExclusiveBetweenDouble_withMessage
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsInstanceOf
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsInstanceOfExceptionMessage
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsInstanceOf_withMessage
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsInstanceOf_withMessageArgs
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAssignable
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAssignableExceptionMessage
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAssignable_withMessage
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStartsWith
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStartsWithIgnoreCase
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStartsWithAny
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEndsWith
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEndsWithIgnoreCase
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEndsWithAny
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructors
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorNull
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSet
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetNull
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareTo
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareToNull
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToByte
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIncrement
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDecrement
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddValuePrimitive
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddValueObject
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtractValuePrimitive
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtractValueObject
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUPlus
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUuuuu
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLessThanFour
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHexDigitToInt
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHexDigitMsb0ToInt
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHexDigitToBinary
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHexDigitMsb0ToBinary
[m[32m31.08.2022 - 15:52:38.949 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBinaryToHexDigit
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBinaryToHexDigit_2args
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBinaryToHexDigitMsb0_bits
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBinaryToHexDigitMsb0_4bits_2args
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBinaryBeMsb0ToHexDigit
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBinaryBeMsb0ToHexDigit_2args
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntToHexDigit
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntToHexDigitMsb0
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntArrayToLong
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortArrayToLong
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArrayToLong
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortArrayToInt
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArrayToInt
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArrayToShort
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHexToLong
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHexToInt
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHexToShort
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHexToByte
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBinaryToLong
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBinaryToInt
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBinaryToShort
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBinaryToByte
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongToIntArray
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongToShortArray
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntToShortArray
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongToByteArray
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntToByteArray
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortToByteArray
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongToHex
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntToHex
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortToHex
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteToHex
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongToBinary
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntToBinary
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortToBinary
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUuidToByteArray
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArrayToUuid
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitialize
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetActiveExecutorBeforeStart
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetActiveExecutorExternal
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetActiveExecutorTemp
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeTempExecutor
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetExternalExecutor
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetExternalExecutorAfterStart
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStartMultipleTimes
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetBeforeStart
[m[32m31.08.2022 - 15:52:38.950 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetCheckedException
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetInterruptedException
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsStartedFalse
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsStartedTrue
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsStartedAfterGet
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsEmpty
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsNotEmpty
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsBlank
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsNotBlank
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTrim
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTrimToNull
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTrimToEmpty
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStrip_String
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStripToNull_String
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStripToEmpty_String
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStrip_StringString
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStripStart_StringString
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStripEnd_StringString
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStripAll
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStripAccents
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveObjectArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveNumberArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveBooleanArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveByteArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveCharArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveDoubleArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveIntArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveLongArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveShortArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementObjectArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementBooleanArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementByteArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementCharArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementDoubleArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementFloatArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementIntArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementLongArray
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstants
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFactory_int_int
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFactory_int_int_int
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReducedFactory_int_int
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFactory_double
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFactory_String
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFactory_String_double
[m[32m31.08.2022 - 15:52:38.951 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFactory_String_proper
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFactory_String_improper
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGets
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConversions
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReduce
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInvert
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNegate
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAbs
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPow
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAdd
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtract
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiply
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDivide
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareTo
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToProperString
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetCause_Throwable
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetCause_ThrowableArray
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetRootCause_Throwable
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowableCount_Throwable
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowables_Throwable_null
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowables_Throwable_withoutCause
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowables_Throwable_nested
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowables_Throwable_withCause
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowables_Throwable_jdkNoCause
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowables_Throwable_recursiveCause
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowableList_Throwable_null
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowableList_Throwable_withoutCause
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowableList_Throwable_nested
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowableList_Throwable_withCause
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowableList_Throwable_jdkNoCause
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetThrowableList_Throwable_recursiveCause
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOf_ThrowableClass
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOf_ThrowableClassInt
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfType_ThrowableClass
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfType_ThrowableClassInt
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrintRootCauseStackTrace_Throwable
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrintRootCauseStackTrace_ThrowableStream
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrintRootCauseStackTrace_ThrowableWriter
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetRootCauseStackTrace_Throwable
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveCommonFrames_ListList
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getMessage_Throwable
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getRootCauseMessage_Throwable
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitNullCallable
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitExecutor
[m[32m31.08.2022 - 15:52:38.952 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitExecutorNullCallable
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitialize
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToIntString
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToIntStringI
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToLongString
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToLongStringL
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFloatString
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFloatStringF
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStringCreateNumberEnsureNoPrecisionLoss
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStringToDoubleString
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStringToDoubleStringD
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToByteStringI
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToShortString
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToShortStringI
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateNumber
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang1087
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping TestLang747
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateNumberFailure_1
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateNumberFailure_2
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateNumberFailure_3
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateNumberFailure_4
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateNumberMagnitude
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateFloat
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateDouble
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateInteger
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateBigInteger
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateBigDecimal
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinLong_nullArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinLong_emptyArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinLong
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinInt_nullArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinInt_emptyArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinInt
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinShort_nullArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinShort_emptyArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinShort
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinByte_nullArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinByte
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinDouble_nullArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinDouble_emptyArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinDouble
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinFloat_nullArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinFloat_emptyArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinFloat
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxLong_nullArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxLong_emptyArray
[m[32m31.08.2022 - 15:52:38.953 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxLong
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxInt_nullArray
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxInt_emptyArray
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxInt
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxShort_nullArray
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxShort_emptyArray
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxShort
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxByte_nullArray
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxByte_emptyArray
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxByte
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxDouble_nullArray
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxDouble_emptyArray
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxDouble
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxFloat_emptyArray
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaxFloat
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinimumLong
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinimumInt
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinimumShort
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinimumByte
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinimumDouble
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinimumFloat
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaximumLong
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaximumInt
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaximumShort
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaximumByte
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaximumDouble
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMaximumFloat
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareDouble
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsDigits
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsNumber
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG971
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG992
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG972
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsParsable
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstants
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang300
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang381
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping compareInt
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping compareLong
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping compareShort
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping compareByte
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJira567
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddObjectArrayBoolean
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddObjectArrayByte
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddObjectArrayChar
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddObjectArrayDouble
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddObjectArrayFloat
[m[32m31.08.2022 - 15:52:38.954 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddObjectArrayInt
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddObjectArrayLong
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddObjectArrayShort
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddObjectArrayObject
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG571
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddObjectArrayToObjectArray
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_Equality_Hash
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseZone
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseLongShort
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAmPm
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParses
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTzParses
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_Long_AD
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_Long_BC
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_Short_AD
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_LongNoEra_AD
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_LongNoEra_BC
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_ShortNoEra_AD
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_ShortNoEra_BC
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseNumerics
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testQuotes
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSpecialCharacters
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG_832
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG_831
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDayOf
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortDateStyleWithLocales
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLowYearPadding
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMilleniumBug
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang303
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang538
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToStringContainsName
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPatternMatches
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocaleMatches
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTimeZoneMatches
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang996
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test1806Argument
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test1806
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructors
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSet
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetNull
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareTo
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareToNull
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrimitiveValues
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToInteger
[m[32m31.08.2022 - 15:52:38.955 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIncrement
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDecrement
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddValuePrimitive
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddValueObject
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtractValuePrimitive
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtractValueObject
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddNullListener
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveNullListener
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEventDispatchOrder
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateWithNonInterfaceParameter
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateWithNullParameter
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveListenerDuringEvent
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetListeners
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerialization
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubclassInvocationHandling
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBelow
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBetween
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAbove
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSupplementary
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInteger
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntegerWithTransients
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFixture
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFixtureWithTransients
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendNewLine
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendWithNullText
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_Object
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_StringBuilder
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_String
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_String_int_int
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_StringBuilder_int_int
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_StringBuffer
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_StringBuffer_int_int
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_StrBuilder
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_StrBuilder_int_int
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_CharArray
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_CharArray_int_int
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_Boolean
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_PrimitiveNumber
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_FormattedString
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_Object
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_String
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_String_int_int
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_StringBuffer
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_StringBuilder
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_StringBuffer_int_int
[m[32m31.08.2022 - 15:52:38.956 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_StringBuilder_int_int
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_StrBuilder
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_StrBuilder_int_int
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_CharArray
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_CharArray_int_int
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_Boolean
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendln_PrimitiveNumber
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendPadding
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendFixedWidthPadLeft
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendFixedWidthPadRight
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang299
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendFixedWidthPadRight_int
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppend_FormattedString
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendAll_Array
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendAll_Collection
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendAll_Iterator
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendWithSeparators_Array
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendWithSeparators_Collection
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendWithSeparators_Iterator
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendWithSeparatorsWithNullText
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSeparator_String
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSeparator_String_String
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSeparator_char
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSeparator_char_char
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSeparator_String_int
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSeparator_char_int
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInsert
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInsertWithNullText
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGet
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMultipleTimes
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetConcurrent
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBoolean
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBooleanArray
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByte
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArray
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChar
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharArray
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDouble
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDoubleArray
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloat
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloatArray
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInt
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntArray
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShort
[m[32m31.08.2022 - 15:52:38.957 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortArray
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectsSameAndEqual
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectsNotSameButEqual
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectsNotSameNorEqual
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArrayEqual
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArrayEqualAsObject
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullLhs
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullRhs
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSameObjectIgnoresAppends
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSimilarObjectIgnoresAppends
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStylePassedToDiffResult
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTriviallyEqualTestDisabled
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTriviallyEqualTestEnabled
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMustBeSupportedJava1_3_1
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSupported
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotSupported
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWorksOnJava1_1_8
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWorksOnJava1_2_2
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructors
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareTo
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrimitiveValues
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToShort
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIncrement
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDecrement
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddValuePrimitive
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddValueObject
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtractValuePrimitive
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtractValueObject
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSameDay_Date
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSameDay_Cal
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSameInstant_Date
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSameInstant_Cal
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSameLocalTime_Cal
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseDate
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseDateWithLeniency
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddYears
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddMonths
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddWeeks
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddDays
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddHours
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddMinutes
[m[32m31.08.2022 - 15:52:38.958 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddSeconds
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddMilliseconds
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetYears
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetMonths
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetDays
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetHours
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetMinutes
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetSeconds
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetMilliseconds
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToCalendar
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRound
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundLang346
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTruncate
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTruncateLang59
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang530
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCeil
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIteratorEx
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMonthIterator
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG799_EN_OK
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG799_EN_FAIL
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG799_DE_FAIL
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToCharacterObject_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToCharacterObject_String
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToChar_Character
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToChar_Character_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToChar_String
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToChar_String_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToIntValue_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToIntValue_char_int
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToIntValue_Character
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToIntValue_Character_int
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString_Character
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToUnicodeEscaped_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToUnicodeEscaped_Character
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAscii_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAsciiPrintable_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAsciiControl_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAsciiAlpha_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAsciiAlphaUpper_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAsciiAlphaLower_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAsciiNumeric_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAsciiAlphanumeric_char
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompare
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCommaMatcher
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTabMatcher
[m[32m31.08.2022 - 15:52:38.959 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSpaceMatcher
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplitMatcher
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTrimMatcher
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSingleQuoteMatcher
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDoubleQuoteMatcher
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testQuoteMatcher
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoneMatcher
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharMatcher_char
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharSetMatcher_String
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharSetMatcher_charArray
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStringMatcher_String
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMatcherIndices
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContains_Char
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContains_String
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContains_StringWithBadSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContains_StringWithSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsAny_StringCharArray
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsAny_StringCharArrayWithBadSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsAny_StringCharArrayWithSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsAny_StringString
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsAny_StringWithBadSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsAny_StringWithSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsAny_StringStringArray
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsIgnoreCase_StringString
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsNone_CharArray
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsNone_CharArrayWithBadSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsNone_CharArrayWithSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsNone_String
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsNone_StringWithBadSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsNone_StringWithSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsOnly_CharArray
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsOnly_String
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsWhitespace
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCustomCharSequence
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsOnStrings
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsIgnoreCase
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOf_char
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOf_String
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOf_StringInt
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfAny_StringCharArrayWithSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfAny_StringString
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfAny_StringStringArray
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfAny_StringStringWithSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfAnyBut_StringCharArray
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfAnyBut_StringCharArrayWithSupplementaryChars
[m[32m31.08.2022 - 15:52:38.960 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfAnyBut_StringString
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfAnyBut_StringStringWithSupplementaryChars
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfIgnoreCase_StringInt
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOf_char
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOf_charInt
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOf_String
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOf_StringInt
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfAny_StringStringArray
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfIgnoreCase_String
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastOrdinalIndexOf
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOrdinalIndexOf
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTripleOf
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompatibilityBetweenTriples
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparable1
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparable2
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparable3
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testComparable4
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormattable_simple
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormattable_padded
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllObjectArray
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllObjectArrayRemoveNone
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllObjectArrayNegativeIndex
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllObjectArrayOutOfBoundsIndex
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllNullObjectArray
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllNumberArray
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllBooleanArrayRemoveNone
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllBooleanArrayNegativeIndex
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllNullBooleanArray
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllByteArray
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllByteArrayRemoveNone
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllByteArrayNegativeIndex
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllByteArrayOutOfBoundsIndex
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllNullByteArray
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllCharArray
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllCharArrayRemoveNone
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllCharArrayNegativeIndex
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllCharArrayOutOfBoundsIndex
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllNullCharArray
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllDoubleArray
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllDoubleArrayRemoveNone
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllDoubleArrayNegativeIndex
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllDoubleArrayOutOfBoundsIndex
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllNullDoubleArray
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllFloatArray
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllFloatArrayRemoveNone
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllFloatArrayNegativeIndex
[m[32m31.08.2022 - 15:52:38.961 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllFloatArrayOutOfBoundsIndex
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllNullFloatArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllIntArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllIntArrayRemoveNone
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllIntArrayNegativeIndex
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllIntArrayOutOfBoundsIndex
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllLongArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllLongArrayRemoveNone
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllLongArrayNegativeIndex
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllLongArrayOutOfBoundsIndex
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllNullLongArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllShortArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllShortArrayRemoveNone
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllShortArrayNegativeIndex
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllShortArrayOutOfBoundsIndex
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAllNullShortArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementsObjectArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementBooleanArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementByteArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementCharArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementDoubleArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementIntArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementLongArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveElementShortArray
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetJavaVersion
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAtLeast
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConcurrentExceptionCauseError
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConcurrentExceptionCauseNull
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConcurrentRuntimeExceptionCauseUnchecked
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConcurrentRuntimeExceptionCauseError
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConcurrentRuntimeExceptionCauseNull
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtractCauseNull
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtractCauseNullCause
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtractCauseError
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtractCauseChecked
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtractCauseUncheckedNull
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtractCauseUncheckedNullCause
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtractCauseUncheckedError
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtractCauseUncheckedUncheckedException
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtractCauseUncheckedChecked
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHandleCauseError
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHandleCauseUncheckedException
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHandleCauseNull
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHandleCauseUncheckedUncheckedException
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHandleCauseUncheckedNull
[m[32m31.08.2022 - 15:52:38.962 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeNull
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitialize
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeUncheckedNull
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeUnchecked
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeUncheckedEx
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstantFuture_Integer
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstantFuture_null
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPutIfAbsentKeyPresent
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPutIfAbsentKeyNotPresent
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPutIfAbsentNullMap
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateIfAbsentKeyPresent
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateIfAbsentKeyNotPresent
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateIfAbsentNullMap
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateIfAbsentNullInit
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateIfAbsentUncheckedSuccess
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreateIfAbsentUncheckedException
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringExclude
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringExcludeArray
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringExcludeArrayWithNull
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringExcludeArrayWithNulls
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringExcludeCollection
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringExcludeCollectionWithNull
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringExcludeCollectionWithNulls
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringExcludeEmptyArray
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringExcludeEmptyCollection
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringExcludeNullArray
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_toStringExcludeNullCollection
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping simpleObject
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nestedElements
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nestedAndArray
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping noArray
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping boolArray
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping charArray
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping intArray
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping doubleArray
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping longArray
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping stringArray
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddEventListener
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddEventListenerWithNoAddMethod
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddEventListenerThrowsException
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddEventListenerWithPrivateAddMethod
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBindEventsToMethod
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBindEventsToMethodWithEvent
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBindFilteredEventsToMethod
[m[32m31.08.2022 - 15:52:38.963 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContextedException
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContextedExceptionString
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContextedExceptionThrowable
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContextedExceptionStringThrowable
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContextedExceptionStringThrowableContext
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullExceptionPassing
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRawMessage
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddContextValue
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFirstContextValue
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetContextValues
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetContextLabels
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetContextEntries
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJavaSerialization
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructable
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getEnumMap
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getEnumList
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isEnum
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isEnum_nullClass
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getEnum
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getEnum_nullClass
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVector_nullClass
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVectors_nullClass
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVectors_nullIterable
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVector_nullElement
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVectors_nullElement
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVector_nullClassWithArray
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVectors_nullClassWithArray
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVector_nullArray
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVectors_nullArray
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVector_nullArrayElement
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVectors_nullArrayElement
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVector_longClass
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVector_longClassWithArray
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVector_nonEnumClass
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVectors_nonEnumClass
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVector_nonEnumClassWithArray
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVectors_nonEnumClassWithArray
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVector
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVectors
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVectorFromArray
[m[32m31.08.2022 - 15:52:38.964 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_generateBitVectorsFromArray
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_processBitVector_nullClass
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_processBitVectors_nullClass
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_processBitVector
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_processBitVectors
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_processBitVector_longClass
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTimes
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTimesExtractOrBitset
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsEmpty
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsNotEmpty
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAnyEmpty
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsNoneEmpty
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsBlank
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsNotBlank
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAnyBlank
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsNoneBlank
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCaseFunctions
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSwapCase_String
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_Objects
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_Objectarray
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_ArrayCharSeparator
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_ArrayOfChars
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_ArrayOfBytes
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_ArrayOfInts
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_ArrayOfLongs
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_ArrayOfFloats
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_ArrayOfDoubles
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_ArrayOfShorts
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_ArrayString
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_IteratorChar
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_IteratorString
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_IterableChar
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJoin_IterableString
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplit_String
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplit_StringChar
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplit_StringString_StringStringInt
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplitByWholeString_StringStringBoolean
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplitByWholeString_StringStringBooleanInt
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplitPreserveAllTokens_String
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplitPreserveAllTokens_StringChar
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplitPreserveAllTokens_StringString_StringStringInt
[m[32m31.08.2022 - 15:52:38.965 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplitByCharacterType
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplitByCharacterTypeCamelCase
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDeleteWhitespace_String
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang623
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplace_StringStringString
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplacePattern
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemovePattern
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplace_StringStringStringInt
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceOnce_StringStringString
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplace_StringStringArrayStringArray
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplace_StringStringArrayStringArrayBoolean
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceChars_StringCharChar
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceChars_StringStringString
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOverlay_StringStringIntInt
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRepeat_StringStringInt
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChop
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChomp
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRightPad_StringInt
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRightPad_StringIntChar
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRightPad_StringIntString
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLeftPad_StringInt
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLeftPad_StringIntChar
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLeftPad_StringIntString
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLengthString
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLengthStringBuffer
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLengthStringBuilder
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLength_CharBuffer
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCenter_StringInt
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCenter_StringIntChar
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCenter_StringIntString
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverse_String
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseDelimited_StringChar
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefault_String
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefault_StringString
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultIfEmpty_StringString
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultIfBlank_StringString
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultIfEmpty_StringBuilders
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultIfBlank_StringBuilders
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultIfEmpty_StringBuffers
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultIfBlank_StringBuffers
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultIfEmpty_CharBuffers
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultIfBlank_CharBuffers
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAbbreviate_StringInt
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAbbreviate_StringIntInt
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAbbreviateMiddle
[m[32m31.08.2022 - 15:52:38.966 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDifference_StringString
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDifferenceAt_StringString
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetLevenshteinDistance_StringString
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetLevenshteinDistance_NullString
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetLevenshteinDistance_StringNull
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetLevenshteinDistance_StringStringInt
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetLevenshteinDistance_NullStringInt
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetLevenshteinDistance_StringNullInt
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetLevenshteinDistance_StringStringNegativeInt
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetJaroWinklerDistance_StringString
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetJaroWinklerDistance_NullNull
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetJaroWinklerDistance_StringNull
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetJaroWinklerDistance_NullString
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFuzzyDistance
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFuzzyDistance_NullNullNull
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFuzzyDistance_StringNullLoclae
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFuzzyDistance_NullStringLocale
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFuzzyDistance_StringStringNull
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEMPTY
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAllLowerCase
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAllUpperCase
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveStart
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveStartIgnoreCase
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveEnd
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveEndIgnoreCase
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemove_String
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemove_char
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDifferenceAt_StringArray
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetCommonPrefix_StringArray
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalizeSpace
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG666
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStringUtilsCharSequenceContract
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeSurrogatePairs
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapeSurrogatePairsLang858
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnescapeSurrogatePairs
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendIfMissing
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendIfMissingIgnoreCase
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrependIfMissing
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrependIfMissingIgnoreCase
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToEncodedString
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrap_StringChar
[m[32m31.08.2022 - 15:52:38.967 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrap_StringString
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrap_StringInt
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrap_StringIntStringBoolean
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCapitalize_String
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCapitalizeWithDelimiters_String
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCapitalizeFully_String
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCapitalizeFullyWithDelimiters_String
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUncapitalize_String
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUncapitalizeWithDelimiters_String
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitials_String
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitials_String_charArray
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSwapCase_String
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToLocale_1Part
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToLocale_2Part
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToLocale_3Part
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocaleLookupList_Locale
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocaleLookupList_LocaleLocale
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAvailableLocaleList
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAvailableLocaleSet
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAvailableLocale
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testThreeCharsLocale
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLanguagesByCountry
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCountriesByLanguage
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang865
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStopWatchSimple
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStopWatchSimpleGet
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStopWatchSplit
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStopWatchSuspend
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang315
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBadStates
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetStartTime
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBooleanStates
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasic
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPairOf
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerialization
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRandomStringUtils
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG805
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG807
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExceptions
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRandomAlphaNumeric
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRandomNumeric
[m[32m31.08.2022 - 15:52:38.968 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRandomAlphabetic
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRandomAscii
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRandomStringUtilsHomog
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang100
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_Equality_Hash
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseZone
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseLongShort
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAmPm
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParses
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTzParses
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_Long_AD
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_Long_BC
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_Short_AD
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_Short_BC
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_LongNoEra_AD
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_LongNoEra_BC
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_ShortNoEra_AD
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocales_ShortNoEra_BC
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseNumerics
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testQuotes
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSpecialCharacters
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG_832
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG_831
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortDateStyleWithLocales
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLowYearPadding
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMilleniumBug
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang303
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang538
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToStringContainsName
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPatternMatches
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocaleMatches
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTimeZoneMatches
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang996
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test1806Argument
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInvokeMethod
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInvokeExactMethod
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInvokeStaticMethod
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInvokeExactStaticMethod
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetAccessibleInterfaceMethod
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetAccessibleMethodPrivateInterface
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetAccessibleInterfaceMethodFromDescription
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetAccessiblePublicMethod
[m[32m31.08.2022 - 15:52:38.969 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetAccessiblePublicMethodFromDescription
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetAccessibleMethodInaccessible
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMatchingAccessibleMethod
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullArgument
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetOverrideHierarchyIncludingInterfaces
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetOverrideHierarchyExcludingInterfaces
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMethodsWithAnnotation
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMethodsWithAnnotationIllegalArgumentException1
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMethodsWithAnnotationIllegalArgumentException2
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMethodsWithAnnotationIllegalArgumentException3
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMethodsListWithAnnotation
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMethodsListWithAnnotationIllegalArgumentException1
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMethodsListWithAnnotationIllegalArgumentException2
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMethodsListWithAnnotationIllegalArgumentException3
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddInitializerNullName
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddInitializerNullInit
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeNoChildren
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeTempExec
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeExternalExec
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeChildWithExecutor
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddInitializerAfterStart
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResultGetInitializerUnknown
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResultGetResultObjectUnknown
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResultGetExceptionUnknown
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResultIsExceptionUnknown
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResultInitializerNamesModify
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeRuntimeEx
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeEx
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeResultsIsSuccessfulTrue
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeResultsIsSuccessfulFalse
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitializeNested
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClass
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorAccessors_is
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorAccessors_isNot
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorAccessors_isIn_Same
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorAccessors_isIn_Normal
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorAccessors_isIn_Reversed
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorAccessors_isNotIn_Same
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorAccessors_isNotIn_Normal
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorAccessors_isNotIn_Reversed
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals_Object
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContains_Char
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContains_Charrange
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsNullArg
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIterator
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSerialization
[m[32m31.08.2022 - 15:52:38.970 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorEx1
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorEx2
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorEx3
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSetDefault
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetDefaultEx
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBlank
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionInteger
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionCharacter
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionBoolean
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionObjectArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionLongArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionIntArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionShortArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionyteArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionCharArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionDoubleArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionFloatArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionBooleanArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionFloatArrayArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionLongArrayArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionIntArrayArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionhortArrayArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionByteArrayArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionCharArrayArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionDoubleArrayArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionBooleanArrayArray
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHierarchy
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInnerClassReflection
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionArrayCycle
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionArrayCycleLevel2
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionArrayArrayCycle
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSimpleReflectionObjectCycle
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSelfInstanceVarReflectionObjectCycle
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSelfInstanceTwoVarsReflectionObjectCycle
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionObjectCycle
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionArrayAndObjectCycle
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSuper
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendToString
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectBuild
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInt
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShort
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChar
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByte
[m[32m31.08.2022 - 15:52:38.971 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDouble
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloat
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBoolean
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDoubleArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloatArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBooleanArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntArrayArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortArrayArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArrayArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharArrayArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDoubleArrayArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloatArrayArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBooleanArrayArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectCycle
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSimpleReflectionStatics
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionStatics
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInheritedReflectionStatics
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_setUpToClass_valid
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_setUpToClass_invalid
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionNull
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendToStringUsingMultiLineStyle
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicLookup
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLang882
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBlank
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSuper
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPerson
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayArray
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBetween
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructors
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorNull
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSet
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareTo
[m[32m31.08.2022 - 15:52:38.972 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareToNull
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrimitiveValues
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToLong
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIncrement
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDecrement
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddValuePrimitive
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddValueObject
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtractValuePrimitive
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubtractValueObject
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBlank
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSuper
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPerson
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayArray
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultAppend
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAlternatePadCharacter
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEllipsis
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIllegalEllipsis
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAlternatePadCharAndEllipsis
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasic
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefault
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMutate
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTripleOf
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubSequence
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBlank
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSuper
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPerson
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayArray
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundYear
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundMonth
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundDate
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundDayOfMonth
[m[32m31.08.2022 - 15:52:38.973 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundAmPm
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundHourOfDay
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundHour
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundMinute
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundSecond
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundMilliSecond
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTruncateYear
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTruncateMonth
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTruncateDate
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTruncateDayOfMonth
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTruncateHour
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTruncateHourOfDay
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTruncateMinute
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTruncateSecond
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getShortClassName_Object
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getShortClassName_Class
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getShortClassName_String
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getSimpleName_Class
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getSimpleName_Object
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getPackageName_Object
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getPackageName_Class
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getPackageName_String
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getAbbreviatedName_Class
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getAbbreviatedName_Class_ZeroLen
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getAbbreviatedName_Class_NegativeLen
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getAbbreviatedName_String
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getAllSuperclasses_Class
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getAllInterfaces_Class
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_convertClassNamesToClasses_List
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_convertClassesToClassNames_List
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isInnerClass_Class
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isAssignable_ClassArray_ClassArray
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isAssignable_ClassArray_ClassArray_Autoboxing
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isAssignable_ClassArray_ClassArray_NoAutoboxing
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isAssignable
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isAssignable_Autoboxing
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isAssignable_NoAutoboxing
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isAssignable_Widening
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isAssignable_DefaultUnboxing_Widening
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_isAssignable_Unboxing_Widening
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsPrimitiveOrWrapper
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsPrimitiveWrapper
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrimitiveToWrapper
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrimitivesToWrappers
[m[32m31.08.2022 - 15:52:38.974 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrapperToPrimitive
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrapperToPrimitiveNoWrapper
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrapperToPrimitiveNull
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrappersToPrimitives
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrappersToPrimitivesNull
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrappersToPrimitivesEmpty
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetClassClassNotFound
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetClassInvalidArguments
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithInterleavingWhitespace
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetInnerClass
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetClassByNormalNameArrays
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetClassByNormalNameArrays2D
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetClassWithArrayClasses2D
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetClassWithArrayClasses
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetClassRawPrimitives
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShowJavaBug
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetPublicMethod
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getShortCanonicalName_Object
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getShortCanonicalName_Class
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getPackageCanonicalName_Object
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getPackageCanonicalName_Class
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test_getPackageCanonicalName_String
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHierarchyIncludingInterfaces
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHierarchyExcludingInterfaces
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetArrayStart
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetArrayEnd
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetArraySeparator
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetContentStart
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetContentEnd
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetFieldNameValueSeparator
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetFieldSeparator
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetNullText
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetSizeStartText
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetSizeEndText
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetSummaryObjectStartText
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetSummaryObjectEndText
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceSimple
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceSolo
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceNoVariables
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceNull
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceEmpty
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceChangedMap
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceUnknownKey
[m[32m31.08.2022 - 15:52:38.975 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceAdjacentAtStart
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceAdjacentAtEnd
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceRecursive
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceEscaping
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceSoloEscaping
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceComplexEscaping
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceNoPrefixNoSuffix
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceIncompletePrefix
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplacePrefixNoSuffix
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceNoPrefixSuffix
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceEmptyKeys
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceToIdentical
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCyclicReplacement
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceWeirdPattens
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplacePartialString_noReplace
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceInVariable
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceInVariableDisabled
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplaceInVariableRecursive
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDefaultValueDelimiters
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testResolveVariable
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorNoArgs
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorMapPrefixSuffix
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorMapFull
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSetEscape
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSetPrefix
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSetSuffix
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSetValueDelimiter
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStaticReplace
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStaticReplacePrefixSuffix
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStaticReplaceSystemProperties
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG1055
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubstituteDefaultProperties
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSamePrefixAndSuffix
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBlank
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSuper
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPerson
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayArray
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormat
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatUTC
[m[32m31.08.2022 - 15:52:38.976 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDateTimeISO
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDateISO
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTimeISO
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTimeNoTISO
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG1000
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testValidCharacters
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInvalidCharacters
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoneLookup
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSystemProperiesLookup
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSystemPropertiesLookupNotSingleton
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMapLookup
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMapLookup_nullMap
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test1
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test2
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test3
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test4
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test5
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test7
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping test8
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasic1
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasic2
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasic3
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasic4
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasic5
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicDelim1
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicDelim2
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicEmpty1
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicEmpty2
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicQuoted1
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicQuoted2
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicQuoted3
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicQuoted4
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicQuoted5
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicQuoted6
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicQuoted7
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicQuotedTrimmed1
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicTrimmed1
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicTrimmed2
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicIgnoreTrimmed1
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicIgnoreTrimmed2
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicIgnoreTrimmed3
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicIgnoreTrimmed4
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testListArray
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCSVEmpty
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCSVSimple
[m[32m31.08.2022 - 15:52:38.977 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCSVSimpleNeedsTrim
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetContent
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChaining
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneNotSupportedException
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneNull
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneReset
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_String
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_String_char
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_String_char_char
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_charArray
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_charArray_char
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor_charArray_char_char
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReset
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReset_String
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReset_charArray
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTSV
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTSVEmpty
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIteration
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTokenizeSubclassInputChange
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTokenizeSubclassOutputChange
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullDate
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullCalendar
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInvalidFragmentWithDate
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInvalidFragmentWithCalendar
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMillisecondFragmentInLargerUnitWithDate
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMillisecondFragmentInLargerUnitWithCalendar
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSecondFragmentInLargerUnitWithDate
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinuteFragmentInLargerUnitWithDate
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinuteFragmentInLargerUnitWithCalendar
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHourOfDayFragmentInLargerUnitWithDate
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHourOfDayFragmentInLargerUnitWithCalendar
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDayOfYearFragmentInLargerUnitWithDate
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDayOfYearFragmentInLargerUnitWithCalendar
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDateFragmentInLargerUnitWithDate
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDateFragmentInLargerUnitWithCalendar
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMillisecondsOfSecondWithDate
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMillisecondsOfSecondWithCalendar
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMillisecondsOfMinuteWithDate
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSecondsofMinuteWithDate
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSecondsofMinuteWithCalendar
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMillisecondsOfHourWithDate
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMillisecondsOfHourWithCalendar
[m[32m31.08.2022 - 15:52:38.978 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSecondsofHourWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSecondsofHourWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinutesOfHourWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinutesOfHourWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMillisecondsOfDayWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMillisecondsOfDayWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSecondsOfDayWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSecondsOfDayWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinutesOfDayWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHoursOfDayWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHoursOfDayWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMillisecondsOfMonthWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSecondsOfMonthWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinutesOfMonthWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinutesOfMonthWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHoursOfMonthWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHoursOfMonthWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMillisecondsOfYearWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMillisecondsOfYearWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSecondsOfYearWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSecondsOfYearWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinutesOfYearWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinutesOfYearWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMinutesOfYearWithWrongOffsetBugWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHoursOfYearWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHoursOfYearWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDaysOfMonthWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDaysOfMonthWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDaysOfYearWithCalendar
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDaysOfYearWithDate
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBlank
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSuper
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPerson
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayArray
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetObject
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGet
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsTrue
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsFalse
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsWithOtherObjects
[m[32m31.08.2022 - 15:52:38.979 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToStringNull
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBlank
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSuper
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPerson
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayArray
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextBytesNegative
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextIntNegative
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextLongNegative
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextDoubleNegative
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextFloatNegative
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextLongLowerGreaterUpper
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextDoubleLowerGreaterUpper
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testZeroLengthNextBytes
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextBytes
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextIntMinimalRange
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextInt
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextDoubleMinimalRange
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextFloatMinimalRange
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextDouble
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextFloat
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextLongMinimalRange
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextLong
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtremeRangeInt
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtremeRangeLong
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtremeRangeFloat
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtremeRangeDouble
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsEquals
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testArrayCreation
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testArrayCreationWithGeneralReturnType
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testArrayCreationWithDifferentTypes
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndirectArrayCreation
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEmptyArrayCreation
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndirectEmptyArrayCreation
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToMap
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClone
[m[32m31.08.2022 - 15:52:38.980 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneBoolean
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneLong
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneInt
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneShort
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneChar
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneByte
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneDouble
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneFloat
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyBooleanNull
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyBooleanEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyBoolean
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyLongNull
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyLongEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyLong
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyIntNull
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyIntEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyInt
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyShortEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyShort
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyCharNull
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyCharEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyChar
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyByteNull
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyByteEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyByte
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyDoubleNull
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyDoubleEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyDouble
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyFloatNull
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyFloatEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyFloat
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyObjectNull
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyObjectEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyObject
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyClassNull
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyClassEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyClass
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyStringNull
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyStringEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyString
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyBooleanObjectNull
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyBooleanObjectEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyLongObjectNull
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyLongObjectEmptyArray
[m[32m31.08.2022 - 15:52:38.981 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyLongObject
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyIntObjectNull
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyIntObjectEmptyArray
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyIntObject
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyShortObjectNull
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyShortObjectEmptyArray
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyShortObject
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNUllToEmptyCharObjectNull
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyCharObjectEmptyArray
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyCharObject
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyByteObjectEmptyArray
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyByteObject
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyDoubleObjectNull
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyDoubleObjectEmptyArray
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyDoubleObject
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyFloatObjectNull
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullToEmptyFloatObjectEmptyArray
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubarrayObject
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubarrayLong
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubarrayShort
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubarrChar
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubarrayByte
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubarrayDouble
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubarrayFloat
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSubarrayBoolean
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSameLengthBoolean
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSameLengthLong
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSameLengthInt
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSameLengthShort
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSameLengthChar
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSameLengthByte
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSameLengthDouble
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSameLengthFloat
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverse
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseLong
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseInt
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseShort
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseByte
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseDouble
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseFloat
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseBoolean
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseBooleanRange
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseByteRange
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseCharRange
[m[32m31.08.2022 - 15:52:38.982 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseDoubleRange
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseFloatRange
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseIntRange
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseLongRange
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseShortRange
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReverseObjectRange
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOf
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOf
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContains
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfLong
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfLongWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfLong
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfLongWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsLong
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfInt
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfIntWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfInt
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfIntWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsInt
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfShort
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfShortWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfChar
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfCharWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfChar
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfCharWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsChar
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfByte
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfByteWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfByte
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfByteWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsByte
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfDouble
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfDoubleTolerance
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfDoubleWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfDoubleWithStartIndexTolerance
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfDoubleTolerance
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfDoubleWithStartIndex
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfDoubleWithStartIndexTolerance
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsDouble
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsDoubleTolerance
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfFloat
[m[32m31.08.2022 - 15:52:38.983 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfFloatWithStartIndex
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfFloat
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfFloatWithStartIndex
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsFloat
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfBoolean
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIndexOfBooleanWithStartIndex
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfBoolean
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLastIndexOfBooleanWithStartIndex
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsBoolean
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_boolean
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_boolean_boolean
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToObject_boolean
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_char
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_char_char
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToObject_char
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_byte
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_byte_byte
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToObject_byte
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_short
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_short_short
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToObject_short
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_int
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_int_int
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_intNull
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToObject_int
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_long
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_long_long
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToObject_long
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_float
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_float_float
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToObject_float
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_double
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToPrimitive_double_double
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToObject_double
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsEmptyPrimitives
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsNotEmptyPrimitives
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSorted
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSortedComparator
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSortedNullComparator
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSortedInt
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSortedFloat
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSortedLong
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSortedDouble
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSortedChar
[m[32m31.08.2022 - 15:52:38.984 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSortedByte
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSortedShort
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSortedBool
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInit
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitInvalidPeriod
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInitDefaultService
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testStartTimer
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShutdownOwnExecutor
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShutdownSharedExecutorNoTask
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShutdownSharedExecutorTask
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShutdownMultipleTimes
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAcquireLimit
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAcquireMultipleThreads
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAcquireNoLimit
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPassAfterShutdown
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAcquireMultiplePeriods
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetAverageCallsPerPeriod
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasic
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTyped
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRaw
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInvokeConstructor
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetAccessibleConstructor
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetAccessibleConstructorFromDescription
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMatchingAccessibleMethod
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNullArgument
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBuildDefaults
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBuildNamingPatternNull
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBuildWrappedFactoryNull
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBuildUncaughtExceptionHandlerNull
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBuilderResetAfterBuild
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewThreadNamingPattern
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewThreadNoNamingPattern
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewThreadDaemonTrue
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewThreadDaemonFalse
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewThreadNoDaemonFlag
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewThreadPriority
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewThreadNoPriority
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewThreadExHandler
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBelow
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBetween
[m[32m31.08.2022 - 15:52:38.985 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAbove
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructors
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionCompare
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionCompareEx1
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionCompareEx2
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHierarchyCompare
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHierarchyCompareExcludeFields
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReflectionHierarchyCompareTransients
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSuper
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectBuild
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectEx2
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectComparator
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectComparatorNull
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInt
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChar
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByte
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDouble
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloat
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBoolean
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDoubleArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloatArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBooleanArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiLongArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiIntArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiShortArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiCharArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiByteArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiFloatArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiDoubleArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMultiBooleanArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRaggedArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMixedArray
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.986 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIntArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShortArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByteArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDoubleArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFloatArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBooleanArrayHiddenByObject
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGet
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetMultipleTimes
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetConcurrent
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetValue
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetShortValue
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetShortRawValue
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsSet
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAllSet
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetValue
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetShortValue
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByte
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClear
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClearShort
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSet
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetShort
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetBoolean
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAlphanumeric
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsWhitespace
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAlphaspace
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAlphanumericSpace
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsAsciiPrintable_String
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsNumeric
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldName
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetType
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtendedFormats
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapedQuote_LANG_477
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEmbeddedPatternInChoice
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEscapedBraces_LANG_948
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testExtendedAndBuiltInFormats
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBuiltInChoiceFormat
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBuiltInDateTimeFormat
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOverriddenBuiltinFormat
[m[32m31.08.2022 - 15:52:38.987 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBuiltInNumberFormat
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEqualsHashcode
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBlank
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendSuper
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObject
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPerson
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLong
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testObjectArray
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArray
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLongArrayArray
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetField
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldIllegalArgumentException1
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldIllegalArgumentException2
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldIllegalArgumentException3
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldIllegalArgumentException4
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldForceAccess
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldForceAccessIllegalArgumentException1
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldForceAccessIllegalArgumentException2
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldForceAccessIllegalArgumentException3
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldForceAccessIllegalArgumentException4
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldsWithAnnotation
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldsWithAnnotationIllegalArgumentException1
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldsWithAnnotationIllegalArgumentException2
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldsWithAnnotationIllegalArgumentException3
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldsListWithAnnotation
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldsListWithAnnotationIllegalArgumentException1
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldsListWithAnnotationIllegalArgumentException2
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFieldsListWithAnnotationIllegalArgumentException3
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetDeclaredField
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetDeclaredFieldAccessIllegalArgumentException2
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetDeclaredFieldAccessIllegalArgumentException3
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetDeclaredFieldAccessIllegalArgumentException4
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetDeclaredFieldForceAccess
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetDeclaredFieldForceAccessIllegalArgumentException1
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetDeclaredFieldForceAccessIllegalArgumentException2
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetDeclaredFieldForceAccessIllegalArgumentException3
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetDeclaredFieldForceAccessIllegalArgumentException4
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadStaticField
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadStaticFieldIllegalArgumentException1
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadStaticFieldIllegalArgumentException2
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadStaticFieldForceAccess
[m[32m31.08.2022 - 15:52:38.988 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadStaticFieldForceAccessIllegalArgumentException1
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadStaticFieldForceAccessIllegalArgumentException2
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadNamedStaticField
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadNamedStaticFieldForceAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadDeclaredNamedStaticField
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadDeclaredNamedStaticFieldForceAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadField
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadFieldForceAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadNamedField
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadNamedFieldForceAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadDeclaredNamedField
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReadDeclaredNamedFieldForceAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteStaticField
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteStaticFieldForceAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteNamedStaticField
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteNamedStaticFieldForceAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteDeclaredNamedStaticField
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteDeclaredNamedStaticFieldForceAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteField
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteFieldForceAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteNamedField
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteNamedFieldForceAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteDeclaredNamedField
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWriteDeclaredNamedFieldForceAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAmbig
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveFinalModifier
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveFinalModifierWithAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveFinalModifierWithoutAccess
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveFinalModifierAccessNotNeeded
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareTo
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCompareToNull
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructors
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructorNull
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSet
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetNull
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFullyQualifiedNameNullClassString
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFullyQualifiedNameClassNull
[m[32m31.08.2022 - 15:52:38.989 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFullyQualifiedNameClassString
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFullyQualifiedNameNullPackageString
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFullyQualifiedNamePackageNull
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFullyQualifiedNamePackageString
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFullyQualifiedPathClassNullString
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFullyQualifiedPathClassNull
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFullyQualifiedPathClass
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFullyQualifiedPathPackageNullString
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFullyQualifiedPathPackageNull
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToFullyQualifiedPathPackage
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSqueeze_StringString
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSqueeze_StringStringarray
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsAny_StringString
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainsAny_StringStringarray
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCount_StringString
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCount_StringStringarray
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testKeep_StringString
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testKeep_StringStringarray
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDelete_StringString
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDelete_StringStringarray
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructor
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatDurationWords
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatDurationPluralWords
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatNegativeDurationWords
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatDurationHMS
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatNegativeDurationHMS
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatDurationISO
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatNegativeDurationISO
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatDuration
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatNegativeDuration
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatPeriodISO
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatPeriodISOStartGreaterEnd
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatPeriodISOMethod
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatPeriod
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatPeriodeStartGreaterEnd
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLexx
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBugzilla38401
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG815
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLowDurations
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEdgeDurations
[m[32m31.08.2022 - 15:52:38.990 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG984
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG982
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDurationsByBruteForce
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLANG981
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testConstructors
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSet
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEquals
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashCode
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testToString
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormattedExceptionMessageNull
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddContextValue
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetContextValue
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetFirstContextValue
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetContextValues
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetContextLabels
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetContextEntries
[m[32m31.08.2022 - 15:52:38.991 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testJavaSerialization
[m[m31.08.2022 - 15:52:39.042 [INFO ] JUnitTestSuiteReducer.reduce() - Finished test suite reduction
[m[m31.08.2022 - 15:52:39.043 [INFO ] JUnitTestSuiteReducer.reduce() - Reduced test suite from 2622 to 2499 test cases: 123 redundant test cases found
[m[m31.08.2022 - 15:52:39.046 [INFO ] JUnitTestSuiteReducer.generateReport() - Generated report and wrote it to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/tsr-report-%x%.xml
[m[m31.08.2022 - 15:52:39.046 [INFO ] CompilationUnitExtractor.parseCompilationUnitsFromFilePath() - Collecting compilation units from File Path /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/projects/commons-lang/src/test/java
[m[m31.08.2022 - 15:52:40.091 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote Foo.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/Foo.java
[m[m31.08.2022 - 15:52:40.092 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote PairTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/tuple/PairTest.java
[m[m31.08.2022 - 15:52:40.093 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MutableFloatTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/mutable/MutableFloatTest.java
[m[m31.08.2022 - 15:52:40.096 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote SerializationUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/SerializationUtilsTest.java
[m[m31.08.2022 - 15:52:40.098 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote JsonToStringStyleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/JsonToStringStyleTest.java
[m[m31.08.2022 - 15:52:40.101 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FastDatePrinterTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/FastDatePrinterTest.java
[m[m31.08.2022 - 15:52:40.104 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AnnotationUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/AnnotationUtilsTest.java
[m[m31.08.2022 - 15:52:40.104 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DiffResultTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/DiffResultTest.java
[m[m31.08.2022 - 15:52:40.105 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AtomicSafeInitializerTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java
[m[m31.08.2022 - 15:52:40.105 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote Ambig.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/Ambig.java
[m[m31.08.2022 - 15:52:40.116 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TypeUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/TypeUtilsTest.java
[m[m31.08.2022 - 15:52:40.120 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ObjectUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/ObjectUtilsTest.java
[m[m31.08.2022 - 15:52:40.131 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StrBuilderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/StrBuilderTest.java
[m[m31.08.2022 - 15:52:40.132 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ContextedExceptionTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/exception/ContextedExceptionTest.java
[m[m31.08.2022 - 15:52:40.134 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StringUtilsSubstringTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/StringUtilsSubstringTest.java
[m[m31.08.2022 - 15:52:40.137 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CharSetTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/CharSetTest.java
[m[m31.08.2022 - 15:52:40.140 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote HashCodeBuilderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/HashCodeBuilderTest.java
[m[m31.08.2022 - 15:52:40.141 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ToStringStyleConcurrencyTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/ToStringStyleConcurrencyTest.java
[m[m31.08.2022 - 15:52:40.143 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote RangeTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/RangeTest.java
[m[m31.08.2022 - 15:52:40.144 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MutablePairTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/tuple/MutablePairTest.java
[m[m31.08.2022 - 15:52:40.144 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote Parent.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/Parent.java
[m[m31.08.2022 - 15:52:40.151 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote EqualsBuilderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/EqualsBuilderTest.java
[m[m31.08.2022 - 15:52:40.153 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MutableDoubleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/mutable/MutableDoubleTest.java
[m[m31.08.2022 - 15:52:40.157 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote BooleanUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/BooleanUtilsTest.java
[m[m31.08.2022 - 15:52:40.160 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote SystemUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/SystemUtilsTest.java
[m[m31.08.2022 - 15:52:40.162 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FastDateFormatTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/FastDateFormatTest.java
[m[m31.08.2022 - 15:52:40.162 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote EntityArraysTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/translate/EntityArraysTest.java
[m[m31.08.2022 - 15:52:40.163 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MultiLineToStringStyleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java
[m[m31.08.2022 - 15:52:40.164 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ImmutableTripleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/tuple/ImmutableTripleTest.java
[m[m31.08.2022 - 15:52:40.165 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote IEEE754rUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/math/IEEE754rUtilsTest.java
[m[m31.08.2022 - 15:52:40.165 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StringParameterizedChild.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java
[m[m31.08.2022 - 15:52:40.165 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote InheritanceUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/InheritanceUtilsTest.java
[m[m31.08.2022 - 15:52:40.168 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StringEscapeUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/StringEscapeUtilsTest.java
[m[m31.08.2022 - 15:52:40.169 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FastDatePrinterTimeZonesTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java
[m[m31.08.2022 - 15:52:40.169 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote NumericEntityUnescaperTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
[m[m31.08.2022 - 15:52:40.170 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CompositeFormatTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/CompositeFormatTest.java
[m[m31.08.2022 - 15:52:40.170 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FastDateFormat_PrinterTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/FastDateFormat_PrinterTest.java
[m[m31.08.2022 - 15:52:40.246 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ValidateTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/ValidateTest.java
[m[m31.08.2022 - 15:52:40.247 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StringUtilsStartsEndsWithTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java
[m[m31.08.2022 - 15:52:40.247 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StaticContainer.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/StaticContainer.java
[m[m31.08.2022 - 15:52:40.248 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote UnicodeUnescaperTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/translate/UnicodeUnescaperTest.java
[m[m31.08.2022 - 15:52:40.262 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ConversionTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/ConversionTest.java
[m[m31.08.2022 - 15:52:40.263 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote BackgroundInitializerTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java
[m[m31.08.2022 - 15:52:40.264 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CharUtilsPerfRun.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/CharUtilsPerfRun.java
[m[m31.08.2022 - 15:52:40.266 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StringUtilsTrimEmptyTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java
[m[m31.08.2022 - 15:52:40.268 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ArrayUtilsRemoveTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/ArrayUtilsRemoveTest.java
[m[m31.08.2022 - 15:52:40.275 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FractionTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/math/FractionTest.java
[m[m31.08.2022 - 15:52:40.278 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ExceptionUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/exception/ExceptionUtilsTest.java
[m[m31.08.2022 - 15:52:40.278 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote Grandchild.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/Grandchild.java
[m[m31.08.2022 - 15:52:40.279 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CallableBackgroundInitializerTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java
[m[m31.08.2022 - 15:52:40.287 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote NumberUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/math/NumberUtilsTest.java
[m[m31.08.2022 - 15:52:40.291 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ArrayUtilsAddTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/ArrayUtilsAddTest.java
[m[m31.08.2022 - 15:52:40.295 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FastDateParserTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/FastDateParserTest.java
[m[m31.08.2022 - 15:52:40.296 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MutableIntTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/mutable/MutableIntTest.java
[m[m31.08.2022 - 15:52:40.297 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ReflectionToStringBuilderConcurrencyTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/ReflectionToStringBuilderConcurrencyTest.java
[m[m31.08.2022 - 15:52:40.298 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote EventListenerSupportTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/event/EventListenerSupportTest.java
[m[m31.08.2022 - 15:52:40.298 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote NumericEntityEscaperTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/translate/NumericEntityEscaperTest.java
[m[m31.08.2022 - 15:52:40.299 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote HashCodeBuilderAndEqualsBuilderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java
[m[m31.08.2022 - 15:52:40.300 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FastDateParserSDFTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/FastDateParserSDFTest.java
[m[m31.08.2022 - 15:52:40.307 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StrBuilderAppendInsertTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java
[m[m31.08.2022 - 15:52:40.307 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AtomicInitializerTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java
[m[m31.08.2022 - 15:52:40.310 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DiffBuilderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/DiffBuilderTest.java
[m[m31.08.2022 - 15:52:40.311 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CharEncodingTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/CharEncodingTest.java
[m[m31.08.2022 - 15:52:40.311 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StaticContainerChild.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/StaticContainerChild.java
[m[m31.08.2022 - 15:52:40.312 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MutableShortTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/mutable/MutableShortTest.java
[m[m31.08.2022 - 15:52:40.321 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DateUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/DateUtilsTest.java
[m[m31.08.2022 - 15:52:40.323 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CharUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/CharUtilsTest.java
[m[m31.08.2022 - 15:52:40.324 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StrMatcherTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/StrMatcherTest.java
[m[m31.08.2022 - 15:52:40.330 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StringUtilsEqualsIndexOfTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
[m[m31.08.2022 - 15:52:40.331 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TripleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/tuple/TripleTest.java
[m[m31.08.2022 - 15:52:40.340 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ArrayUtilsRemoveMultipleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java
[m[m31.08.2022 - 15:52:40.340 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote JavaVersionTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/JavaVersionTest.java
[m[m31.08.2022 - 15:52:40.342 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ConcurrentUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java
[m[m31.08.2022 - 15:52:40.343 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ReflectionToStringBuilderExcludeTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java
[m[m31.08.2022 - 15:52:40.344 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MultilineRecursiveToStringStyleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyleTest.java
[m[m31.08.2022 - 15:52:40.346 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote EventUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/event/EventUtilsTest.java
[m[m31.08.2022 - 15:52:40.346 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ContextedRuntimeExceptionTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java
[m[m31.08.2022 - 15:52:40.349 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote EnumUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/EnumUtilsTest.java
[m[m31.08.2022 - 15:52:40.350 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote HashSetvBitSetTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/HashSetvBitSetTest.java
[m[m31.08.2022 - 15:52:40.366 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StringUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/StringUtilsTest.java
[m[m31.08.2022 - 15:52:40.368 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote WordUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/WordUtilsTest.java
[m[m31.08.2022 - 15:52:40.371 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote LocaleUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/LocaleUtilsTest.java
[m[m31.08.2022 - 15:52:40.372 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StopWatchTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/StopWatchTest.java
[m[m31.08.2022 - 15:52:40.372 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ImmutablePairTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/tuple/ImmutablePairTest.java
[m[m31.08.2022 - 15:52:40.372 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote GenericTypeHolder.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/GenericTypeHolder.java
[m[m31.08.2022 - 15:52:40.375 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote RandomStringUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/RandomStringUtilsTest.java
[m[m31.08.2022 - 15:52:40.375 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FastDateFormat_ParserTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/FastDateFormat_ParserTest.java
[m[m31.08.2022 - 15:52:40.377 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MethodUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/MethodUtilsTest.java
[m[m31.08.2022 - 15:52:40.379 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MultiBackgroundInitializerTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java
[m[m31.08.2022 - 15:52:40.381 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CharRangeTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/CharRangeTest.java
[m[m31.08.2022 - 15:52:40.388 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ToStringBuilderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/ToStringBuilderTest.java
[m[m31.08.2022 - 15:52:40.388 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AnotherChild.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/AnotherChild.java
[m[m31.08.2022 - 15:52:40.388 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote LookupTranslatorTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java
[m[m31.08.2022 - 15:52:40.389 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StandardToStringStyleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/StandardToStringStyleTest.java
[m[m31.08.2022 - 15:52:40.390 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote OctalUnescaperTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java
[m[m31.08.2022 - 15:52:40.391 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MutableLongTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/mutable/MutableLongTest.java
[m[m31.08.2022 - 15:52:40.391 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote PubliclyShadowedChild.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/PubliclyShadowedChild.java
[m[m31.08.2022 - 15:52:40.392 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DefaultToStringStyleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java
[m[m31.08.2022 - 15:52:40.393 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FormattableUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/FormattableUtilsTest.java
[m[m31.08.2022 - 15:52:40.393 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CharSequenceUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/CharSequenceUtilsTest.java
[m[m31.08.2022 - 15:52:40.394 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote NoClassNameToStringStyleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/NoClassNameToStringStyleTest.java
[m[m31.08.2022 - 15:52:40.397 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DateUtilsRoundingTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/DateUtilsRoundingTest.java
[m[m31.08.2022 - 15:52:40.405 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ClassUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/ClassUtilsTest.java
[m[m31.08.2022 - 15:52:40.406 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ToStringStyleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/ToStringStyleTest.java
[m[m31.08.2022 - 15:52:40.407 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AbstractExceptionContextTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java
[m[m31.08.2022 - 15:52:40.410 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StrSubstitutorTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/StrSubstitutorTest.java
[m[m31.08.2022 - 15:52:40.410 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote SimpleToStringStyleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java
[m[m31.08.2022 - 15:52:40.411 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote GenericConsumer.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/GenericConsumer.java
[m[m31.08.2022 - 15:52:40.412 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DateFormatUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/DateFormatUtilsTest.java
[m[m31.08.2022 - 15:52:40.412 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote Annotated.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/Annotated.java
[m[m31.08.2022 - 15:52:40.413 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote UnicodeUnpairedSurrogateRemoverTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/translate/UnicodeUnpairedSurrogateRemoverTest.java
[m[m31.08.2022 - 15:52:40.413 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StrLookupTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/StrLookupTest.java
[m[m31.08.2022 - 15:52:40.414 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ReflectionToStringBuilderMutateInspectConcurrencyTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/ReflectionToStringBuilderMutateInspectConcurrencyTest.java
[m[m31.08.2022 - 15:52:40.414 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote GenericParent.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/GenericParent.java
[m[m31.08.2022 - 15:52:40.414 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote Bar.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/Bar.java
[m[m31.08.2022 - 15:52:40.418 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StrTokenizerTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/StrTokenizerTest.java
[m[m31.08.2022 - 15:52:40.421 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DateUtilsFragmentTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/DateUtilsFragmentTest.java
[m[m31.08.2022 - 15:52:40.422 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ShortPrefixToStringStyleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java
[m[m31.08.2022 - 15:52:40.423 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ConstantInitializerTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java
[m[m31.08.2022 - 15:52:40.423 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote RecursiveToStringStyleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/RecursiveToStringStyleTest.java
[m[m31.08.2022 - 15:52:40.424 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote RandomUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/RandomUtilsTest.java
[m[m31.08.2022 - 15:52:40.447 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ArrayUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/ArrayUtilsTest.java
[m[m31.08.2022 - 15:52:40.449 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TimedSemaphoreTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java
[m[m31.08.2022 - 15:52:40.449 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AbstractConcurrentInitializerTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java
[m[m31.08.2022 - 15:52:40.450 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TypeLiteralTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/TypeLiteralTest.java
[m[m31.08.2022 - 15:52:40.450 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote PublicChild.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/PublicChild.java
[m[m31.08.2022 - 15:52:40.451 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ConstructorUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java
[m[m31.08.2022 - 15:52:40.451 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AnotherParent.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/AnotherParent.java
[m[m31.08.2022 - 15:52:40.453 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote BasicThreadFactoryTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java
[m[m31.08.2022 - 15:52:40.453 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote UnicodeEscaperTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/translate/UnicodeEscaperTest.java
[m[m31.08.2022 - 15:52:40.453 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote NotImplementedExceptionTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/NotImplementedExceptionTest.java
[m[m31.08.2022 - 15:52:40.461 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CompareToBuilderTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/CompareToBuilderTest.java
[m[m31.08.2022 - 15:52:40.461 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote LazyInitializerTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/concurrent/LazyInitializerTest.java
[m[m31.08.2022 - 15:52:40.463 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote BitFieldTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/BitFieldTest.java
[m[m31.08.2022 - 15:52:40.463 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote PrivatelyShadowedChild.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/testbed/PrivatelyShadowedChild.java
[m[m31.08.2022 - 15:52:40.464 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StringUtilsIsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/StringUtilsIsTest.java
[m[m31.08.2022 - 15:52:40.464 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DiffTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/DiffTest.java
[m[m31.08.2022 - 15:52:40.466 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ExtendedMessageFormatTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java
[m[m31.08.2022 - 15:52:40.467 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote NoFieldNamesToStringStyleTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java
[m[m31.08.2022 - 15:52:40.473 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FieldUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/reflect/FieldUtilsTest.java
[m[m31.08.2022 - 15:52:40.473 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MutableBooleanTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/mutable/MutableBooleanTest.java
[m[m31.08.2022 - 15:52:40.474 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ClassPathUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/ClassPathUtilsTest.java
[m[m31.08.2022 - 15:52:40.475 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CharSetUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/CharSetUtilsTest.java
[m[m31.08.2022 - 15:52:40.479 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DurationFormatUtilsTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
[m[m31.08.2022 - 15:52:40.480 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MutableObjectTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/mutable/MutableObjectTest.java
[m[m31.08.2022 - 15:52:40.480 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DefaultExceptionContextTest.java to /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java
[m[m31.08.2022 - 15:52:40.480 [INFO ] JUnitJSRFacade.logTime() - ******************************************************************
[m[m31.08.2022 - 15:52:40.480 [INFO ] JUnitJSRFacade.logTime() - * Facade Statistics:
[m[m31.08.2022 - 15:52:40.480 [INFO ] JUnitJSRFacade.logTime() - * Parsing took: 2.759 seconds
[m[m31.08.2022 - 15:52:40.480 [INFO ] JUnitJSRFacade.logTime() - * Reduction took: 2235.463 seconds
[m[m31.08.2022 - 15:52:40.480 [INFO ] JUnitJSRFacade.logTime() - * Serialization took: 1.434 seconds
[m[m31.08.2022 - 15:52:40.480 [INFO ] JUnitJSRFacade.logTime() - * Overall: 2239.656 seconds
[m[m31.08.2022 - 15:52:40.480 [INFO ] JUnitJSRFacade.logTime() - ******************************************************************
[mSuccessfully reduced your test suite!
+----------------------------------- Summary -----------------------------------+
| Test suite size: 2622 test cases
+-------------------------------------------------------------------------------+
| Found 2499 relevant test cases:
|    org.apache.commons.lang3.tuple.PairTest:testPairOf
|    org.apache.commons.lang3.tuple.PairTest:testCompatibilityBetweenPairs
|    org.apache.commons.lang3.tuple.PairTest:testMapEntry
|    org.apache.commons.lang3.tuple.PairTest:testComparable1
|    org.apache.commons.lang3.tuple.PairTest:testComparable2
|    org.apache.commons.lang3.tuple.PairTest:testToString
|    org.apache.commons.lang3.tuple.PairTest:testToStringCustom
|    org.apache.commons.lang3.tuple.PairTest:testFormattable_simple
|    org.apache.commons.lang3.tuple.PairTest:testFormattable_padded
|    org.apache.commons.lang3.mutable.MutableFloatTest:testConstructors
|    org.apache.commons.lang3.mutable.MutableFloatTest:testConstructorNull
|    org.apache.commons.lang3.mutable.MutableFloatTest:testGetSet
|    org.apache.commons.lang3.mutable.MutableFloatTest:testSetNull
|    org.apache.commons.lang3.mutable.MutableFloatTest:testNanInfinite
|    org.apache.commons.lang3.mutable.MutableFloatTest:testEquals
|    org.apache.commons.lang3.mutable.MutableFloatTest:testHashCode
|    org.apache.commons.lang3.mutable.MutableFloatTest:testCompareToNull
|    org.apache.commons.lang3.mutable.MutableFloatTest:testPrimitiveValues
|    org.apache.commons.lang3.mutable.MutableFloatTest:testToFloat
|    org.apache.commons.lang3.mutable.MutableFloatTest:testIncrement
|    org.apache.commons.lang3.mutable.MutableFloatTest:testDecrement
|    org.apache.commons.lang3.mutable.MutableFloatTest:testAddValuePrimitive
|    org.apache.commons.lang3.mutable.MutableFloatTest:testAddValueObject
|    org.apache.commons.lang3.mutable.MutableFloatTest:testSubtractValuePrimitive
|    org.apache.commons.lang3.mutable.MutableFloatTest:testSubtractValueObject
|    org.apache.commons.lang3.mutable.MutableFloatTest:testToString
|    org.apache.commons.lang3.SerializationUtilsTest:testConstructor
|    org.apache.commons.lang3.SerializationUtilsTest:testException
|    org.apache.commons.lang3.SerializationUtilsTest:testSerializeStream
|    org.apache.commons.lang3.SerializationUtilsTest:testSerializeStreamUnserializable
|    org.apache.commons.lang3.SerializationUtilsTest:testSerializeStreamNullObj
|    org.apache.commons.lang3.SerializationUtilsTest:testSerializeStreamObjNull
|    org.apache.commons.lang3.SerializationUtilsTest:testSerializeStreamNullNull
|    org.apache.commons.lang3.SerializationUtilsTest:testSerializeIOException
|    org.apache.commons.lang3.SerializationUtilsTest:testDeserializeStream
|    org.apache.commons.lang3.SerializationUtilsTest:testDeserializeClassCastException
|    org.apache.commons.lang3.SerializationUtilsTest:testDeserializeStreamOfNull
|    org.apache.commons.lang3.SerializationUtilsTest:testDeserializeStreamNull
|    org.apache.commons.lang3.SerializationUtilsTest:testDeserializeStreamBadStream
|    org.apache.commons.lang3.SerializationUtilsTest:testDeserializeStreamClassNotFound
|    org.apache.commons.lang3.SerializationUtilsTest:testRoundtrip
|    org.apache.commons.lang3.SerializationUtilsTest:testSerializeBytes
|    org.apache.commons.lang3.SerializationUtilsTest:testSerializeBytesUnserializable
|    org.apache.commons.lang3.SerializationUtilsTest:testSerializeBytesNull
|    org.apache.commons.lang3.SerializationUtilsTest:testDeserializeBytes
|    org.apache.commons.lang3.SerializationUtilsTest:testDeserializeBytesOfNull
|    org.apache.commons.lang3.SerializationUtilsTest:testDeserializeBytesNull
|    org.apache.commons.lang3.SerializationUtilsTest:testDeserializeBytesBadStream
|    org.apache.commons.lang3.SerializationUtilsTest:testClone
|    org.apache.commons.lang3.SerializationUtilsTest:testCloneNull
|    org.apache.commons.lang3.SerializationUtilsTest:testCloneUnserializable
|    org.apache.commons.lang3.SerializationUtilsTest:testPrimitiveTypeClassSerialization
|    org.apache.commons.lang3.builder.JsonToStringStyleTest:testNull
|    org.apache.commons.lang3.builder.JsonToStringStyleTest:testBlank
|    org.apache.commons.lang3.builder.JsonToStringStyleTest:testAppendSuper
|    org.apache.commons.lang3.builder.JsonToStringStyleTest:testObject
|    org.apache.commons.lang3.builder.JsonToStringStyleTest:testObjectArray
|    org.apache.commons.lang3.builder.JsonToStringStyleTest:testLongArray
|    org.apache.commons.lang3.builder.JsonToStringStyleTest:testLongArrayArray
|    org.apache.commons.lang3.time.FastDatePrinterTest:testFormat
|    org.apache.commons.lang3.time.FastDatePrinterTest:testShortDateStyleWithLocales
|    org.apache.commons.lang3.time.FastDatePrinterTest:testLowYearPadding
|    org.apache.commons.lang3.time.FastDatePrinterTest:testMilleniumBug
|    org.apache.commons.lang3.time.FastDatePrinterTest:testSimpleDate
|    org.apache.commons.lang3.time.FastDatePrinterTest:testLang538
|    org.apache.commons.lang3.time.FastDatePrinterTest:testEquals
|    org.apache.commons.lang3.time.FastDatePrinterTest:testToStringContainsName
|    org.apache.commons.lang3.time.FastDatePrinterTest:testPatternMatches
|    org.apache.commons.lang3.time.FastDatePrinterTest:testLocaleMatches
|    org.apache.commons.lang3.time.FastDatePrinterTest:testTimeZoneMatches
|    org.apache.commons.lang3.time.FastDatePrinterTest:test1806Argument
|    org.apache.commons.lang3.time.FastDatePrinterTest:test1806
|    org.apache.commons.lang3.time.FastDatePrinterTest:testLang1103
|    org.apache.commons.lang3.AnnotationUtilsTest:testEquivalence
|    org.apache.commons.lang3.AnnotationUtilsTest:testNonEquivalentAnnotationsOfSameType
|    org.apache.commons.lang3.AnnotationUtilsTest:testAnnotationsOfDifferingTypes
|    org.apache.commons.lang3.AnnotationUtilsTest:testBothArgsNull
|    org.apache.commons.lang3.AnnotationUtilsTest:testIsValidAnnotationMemberType
|    org.apache.commons.lang3.AnnotationUtilsTest:testGeneratedAnnotationEquivalentToRealAnnotation
|    org.apache.commons.lang3.AnnotationUtilsTest:testHashCode
|    org.apache.commons.lang3.AnnotationUtilsTest:testToString
|    org.apache.commons.lang3.builder.DiffResultTest:testListIsNonModifiable
|    org.apache.commons.lang3.builder.DiffResultTest:testIterator
|    org.apache.commons.lang3.builder.DiffResultTest:testToStringOutput
|    org.apache.commons.lang3.builder.DiffResultTest:testToStringSpecifyStyleOutput
|    org.apache.commons.lang3.builder.DiffResultTest:testNullLhs
|    org.apache.commons.lang3.builder.DiffResultTest:testNullRhs
|    org.apache.commons.lang3.builder.DiffResultTest:testNullList
|    org.apache.commons.lang3.builder.DiffResultTest:testNullStyle
|    org.apache.commons.lang3.builder.DiffResultTest:testNoDifferencesString
|    org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest:testNumberOfInitializeInvocations
|    org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest:testGet
|    org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest:testGetMultipleTimes
|    org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest:testGetConcurrent
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testIsAssignable
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testIsInstance
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testGetTypeArguments
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testTypesSatisfyVariables
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testGetRawType
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testIsArrayTypeClasses
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testIsArrayGenericTypes
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testGetPrimitiveArrayComponentType
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testGetArrayComponentType
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testLang820
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testParameterize
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testParameterizeWithOwner
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testWildcardType
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testUnboundedWildcardType
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testLowerBoundedWildcardType
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testGenericArrayType
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testToLongString
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testWrap
|    org.apache.commons.lang3.ObjectUtilsTest:testConstructor
|    org.apache.commons.lang3.ObjectUtilsTest:testIsNull
|    org.apache.commons.lang3.ObjectUtilsTest:testFirstNonNull
|    org.apache.commons.lang3.ObjectUtilsTest:testEquals
|    org.apache.commons.lang3.ObjectUtilsTest:testNotEqual
|    org.apache.commons.lang3.ObjectUtilsTest:testHashCode
|    org.apache.commons.lang3.ObjectUtilsTest:testHashCodeMulti_multiple_emptyArray
|    org.apache.commons.lang3.ObjectUtilsTest:testHashCodeMulti_multiple_nullArray
|    org.apache.commons.lang3.ObjectUtilsTest:testHashCodeMulti_multiple_likeList
|    org.apache.commons.lang3.ObjectUtilsTest:testIdentityToStringStringBuffer
|    org.apache.commons.lang3.ObjectUtilsTest:testIdentityToStringStringBuilder
|    org.apache.commons.lang3.ObjectUtilsTest:testIdentityToStringStrBuilder
|    org.apache.commons.lang3.ObjectUtilsTest:testIdentityToStringAppendable
|    org.apache.commons.lang3.ObjectUtilsTest:testToString_Object
|    org.apache.commons.lang3.ObjectUtilsTest:testToString_ObjectString
|    org.apache.commons.lang3.ObjectUtilsTest:testNull
|    org.apache.commons.lang3.ObjectUtilsTest:testMax
|    org.apache.commons.lang3.ObjectUtilsTest:testMin
|    org.apache.commons.lang3.ObjectUtilsTest:testCompare
|    org.apache.commons.lang3.ObjectUtilsTest:testMedian
|    org.apache.commons.lang3.ObjectUtilsTest:testMedian_nullItems
|    org.apache.commons.lang3.ObjectUtilsTest:testComparatorMedian
|    org.apache.commons.lang3.ObjectUtilsTest:testComparatorMedian_nullComparator
|    org.apache.commons.lang3.ObjectUtilsTest:testComparatorMedian_nullItems
|    org.apache.commons.lang3.ObjectUtilsTest:testComparatorMedian_emptyItems
|    org.apache.commons.lang3.ObjectUtilsTest:testMode
|    org.apache.commons.lang3.ObjectUtilsTest:testCloneOfCloneable
|    org.apache.commons.lang3.ObjectUtilsTest:testCloneOfNotCloneable
|    org.apache.commons.lang3.ObjectUtilsTest:testCloneOfUncloneable
|    org.apache.commons.lang3.ObjectUtilsTest:testCloneOfStringArray
|    org.apache.commons.lang3.ObjectUtilsTest:testCloneOfPrimitiveArray
|    org.apache.commons.lang3.ObjectUtilsTest:testPossibleCloneOfNotCloneable
|    org.apache.commons.lang3.ObjectUtilsTest:testPossibleCloneOfUncloneable
|    org.apache.commons.lang3.ObjectUtilsTest:testConstMethods
|    org.apache.commons.lang3.text.StrBuilderTest:testConstructors
|    org.apache.commons.lang3.text.StrBuilderTest:testReadFromReader
|    org.apache.commons.lang3.text.StrBuilderTest:testReadFromReaderAppendsToEnd
|    org.apache.commons.lang3.text.StrBuilderTest:testReadFromCharBuffer
|    org.apache.commons.lang3.text.StrBuilderTest:testReadFromCharBufferAppendsToEnd
|    org.apache.commons.lang3.text.StrBuilderTest:testReadFromReadable
|    org.apache.commons.lang3.text.StrBuilderTest:testReadFromReadableAppendsToEnd
|    org.apache.commons.lang3.text.StrBuilderTest:testGetSetNewLineText
|    org.apache.commons.lang3.text.StrBuilderTest:testGetSetNullText
|    org.apache.commons.lang3.text.StrBuilderTest:testCapacityAndLength
|    org.apache.commons.lang3.text.StrBuilderTest:testLength
|    org.apache.commons.lang3.text.StrBuilderTest:testSetLength
|    org.apache.commons.lang3.text.StrBuilderTest:testCapacity
|    org.apache.commons.lang3.text.StrBuilderTest:testEnsureCapacity
|    org.apache.commons.lang3.text.StrBuilderTest:testMinimizeCapacity
|    org.apache.commons.lang3.text.StrBuilderTest:testSize
|    org.apache.commons.lang3.text.StrBuilderTest:testIsEmpty
|    org.apache.commons.lang3.text.StrBuilderTest:testClear
|    org.apache.commons.lang3.text.StrBuilderTest:testSetCharAt
|    org.apache.commons.lang3.text.StrBuilderTest:testDeleteCharAt
|    org.apache.commons.lang3.text.StrBuilderTest:testToCharArray
|    org.apache.commons.lang3.text.StrBuilderTest:testToCharArrayIntInt
|    org.apache.commons.lang3.text.StrBuilderTest:testGetChars
|    org.apache.commons.lang3.text.StrBuilderTest:testGetCharsIntIntCharArrayInt
|    org.apache.commons.lang3.text.StrBuilderTest:testDeleteIntInt
|    org.apache.commons.lang3.text.StrBuilderTest:testDeleteAll_char
|    org.apache.commons.lang3.text.StrBuilderTest:testDeleteFirst_char
|    org.apache.commons.lang3.text.StrBuilderTest:testDeleteAll_String
|    org.apache.commons.lang3.text.StrBuilderTest:testDeleteFirst_String
|    org.apache.commons.lang3.text.StrBuilderTest:testDeleteAll_StrMatcher
|    org.apache.commons.lang3.text.StrBuilderTest:testReplace_int_int_String
|    org.apache.commons.lang3.text.StrBuilderTest:testReplaceAll_char_char
|    org.apache.commons.lang3.text.StrBuilderTest:testReplaceFirst_char_char
|    org.apache.commons.lang3.text.StrBuilderTest:testReplaceAll_String_String
|    org.apache.commons.lang3.text.StrBuilderTest:testReplaceAll_StrMatcher_String
|    org.apache.commons.lang3.text.StrBuilderTest:testReplaceFirst_StrMatcher_String
|    org.apache.commons.lang3.text.StrBuilderTest:testReplace_StrMatcher_String_int_int_int_VaryMatcher
|    org.apache.commons.lang3.text.StrBuilderTest:testReplace_StrMatcher_String_int_int_int_VaryReplace
|    org.apache.commons.lang3.text.StrBuilderTest:testReplace_StrMatcher_String_int_int_int_VaryStartIndex
|    org.apache.commons.lang3.text.StrBuilderTest:testReplace_StrMatcher_String_int_int_int_VaryEndIndex
|    org.apache.commons.lang3.text.StrBuilderTest:testReplace_StrMatcher_String_int_int_int_VaryCount
|    org.apache.commons.lang3.text.StrBuilderTest:testReverse
|    org.apache.commons.lang3.text.StrBuilderTest:testTrim
|    org.apache.commons.lang3.text.StrBuilderTest:testStartsWith
|    org.apache.commons.lang3.text.StrBuilderTest:testEndsWith
|    org.apache.commons.lang3.text.StrBuilderTest:testSubSequenceIntInt
|    org.apache.commons.lang3.text.StrBuilderTest:testSubstringInt
|    org.apache.commons.lang3.text.StrBuilderTest:testSubstringIntInt
|    org.apache.commons.lang3.text.StrBuilderTest:testMidString
|    org.apache.commons.lang3.text.StrBuilderTest:testRightString
|    org.apache.commons.lang3.text.StrBuilderTest:testLeftString
|    org.apache.commons.lang3.text.StrBuilderTest:testContains_char
|    org.apache.commons.lang3.text.StrBuilderTest:testContains_String
|    org.apache.commons.lang3.text.StrBuilderTest:testContains_StrMatcher
|    org.apache.commons.lang3.text.StrBuilderTest:testIndexOf_char
|    org.apache.commons.lang3.text.StrBuilderTest:testIndexOf_char_int
|    org.apache.commons.lang3.text.StrBuilderTest:testLastIndexOf_char
|    org.apache.commons.lang3.text.StrBuilderTest:testIndexOf_String
|    org.apache.commons.lang3.text.StrBuilderTest:testIndexOf_String_int
|    org.apache.commons.lang3.text.StrBuilderTest:testLastIndexOf_String
|    org.apache.commons.lang3.text.StrBuilderTest:testLastIndexOf_String_int
|    org.apache.commons.lang3.text.StrBuilderTest:testIndexOf_StrMatcher
|    org.apache.commons.lang3.text.StrBuilderTest:testIndexOf_StrMatcher_int
|    org.apache.commons.lang3.text.StrBuilderTest:testLastIndexOf_StrMatcher
|    org.apache.commons.lang3.text.StrBuilderTest:testLastIndexOf_StrMatcher_int
|    org.apache.commons.lang3.text.StrBuilderTest:testAsTokenizer
|    org.apache.commons.lang3.text.StrBuilderTest:testAsReader
|    org.apache.commons.lang3.text.StrBuilderTest:testAsWriter
|    org.apache.commons.lang3.text.StrBuilderTest:testEqualsIgnoreCase
|    org.apache.commons.lang3.text.StrBuilderTest:testEquals
|    org.apache.commons.lang3.text.StrBuilderTest:testHashCode
|    org.apache.commons.lang3.text.StrBuilderTest:testToString
|    org.apache.commons.lang3.text.StrBuilderTest:testToStringBuffer
|    org.apache.commons.lang3.text.StrBuilderTest:testToStringBuilder
|    org.apache.commons.lang3.text.StrBuilderTest:testIndexOfLang294
|    org.apache.commons.lang3.text.StrBuilderTest:testLang295
|    org.apache.commons.lang3.text.StrBuilderTest:testLang412Right
|    org.apache.commons.lang3.text.StrBuilderTest:testAsBuilder
|    org.apache.commons.lang3.text.StrBuilderTest:testAppendCharBuffer
|    org.apache.commons.lang3.text.StrBuilderTest:testAppendToWriter
|    org.apache.commons.lang3.text.StrBuilderTest:testAppendToStringBuilder
|    org.apache.commons.lang3.text.StrBuilderTest:testAppendToStringBuffer
|    org.apache.commons.lang3.text.StrBuilderTest:testAppendToCharBuffer
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testContextedException
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testContextedExceptionString
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testContextedExceptionThrowable
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testContextedExceptionStringThrowable
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testContextedExceptionStringThrowableContext
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testNullExceptionPassing
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testRawMessage
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testAddContextValue
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testSetContextValue
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testGetFirstContextValue
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testGetContextValues
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testGetContextLabels
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testGetContextEntries
|    org.apache.commons.lang3.exception.ContextedExceptionTest:testJavaSerialization
|    org.apache.commons.lang3.StringUtilsSubstringTest:testSubstring_StringInt
|    org.apache.commons.lang3.StringUtilsSubstringTest:testSubstring_StringIntInt
|    org.apache.commons.lang3.StringUtilsSubstringTest:testLeft_String
|    org.apache.commons.lang3.StringUtilsSubstringTest:testRight_String
|    org.apache.commons.lang3.StringUtilsSubstringTest:testMid_String
|    org.apache.commons.lang3.StringUtilsSubstringTest:testSubstringBefore_StringString
|    org.apache.commons.lang3.StringUtilsSubstringTest:testSubstringAfter_StringString
|    org.apache.commons.lang3.StringUtilsSubstringTest:testSubstringBeforeLast_StringString
|    org.apache.commons.lang3.StringUtilsSubstringTest:testSubstringAfterLast_StringString
|    org.apache.commons.lang3.StringUtilsSubstringTest:testSubstringBetween_StringString
|    org.apache.commons.lang3.StringUtilsSubstringTest:testSubstringBetween_StringStringString
|    org.apache.commons.lang3.StringUtilsSubstringTest:testSubstringsBetween_StringStringString
|    org.apache.commons.lang3.StringUtilsSubstringTest:testCountMatches_String
|    org.apache.commons.lang3.StringUtilsSubstringTest:testCountMatches_char
|    org.apache.commons.lang3.CharSetTest:testClass
|    org.apache.commons.lang3.CharSetTest:testGetInstance
|    org.apache.commons.lang3.CharSetTest:testGetInstance_Stringarray
|    org.apache.commons.lang3.CharSetTest:testConstructor_String_simple
|    org.apache.commons.lang3.CharSetTest:testConstructor_String_comboNegated
|    org.apache.commons.lang3.CharSetTest:testConstructor_String_oddDash
|    org.apache.commons.lang3.CharSetTest:testConstructor_String_oddNegate
|    org.apache.commons.lang3.CharSetTest:testConstructor_String_oddCombinations
|    org.apache.commons.lang3.CharSetTest:testEquals_Object
|    org.apache.commons.lang3.CharSetTest:testHashCode
|    org.apache.commons.lang3.CharSetTest:testContains_Char
|    org.apache.commons.lang3.CharSetTest:testSerialization
|    org.apache.commons.lang3.CharSetTest:testStatics
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testConstructorExEvenFirst
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testConstructorExEvenSecond
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testConstructorExEvenNegative
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testReflectionHashCode
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testReflectionHierarchyHashCode
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testReflectionHierarchyHashCodeEx1
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testReflectionHierarchyHashCodeEx2
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testReflectionHashCodeEx1
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testReflectionHashCodeEx2
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testReflectionHashCodeEx3
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testSuper
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testObjectBuild
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testLong
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testInt
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testShort
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testChar
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testByte
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testDouble
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testFloat
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testBoolean
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testObjectArrayAsObject
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testLongArray
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testLongArrayAsObject
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testIntArray
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testIntArrayAsObject
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testShortArray
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testShortArrayAsObject
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testCharArray
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testCharArrayAsObject
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testByteArray
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testByteArrayAsObject
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testDoubleArray
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testDoubleArrayAsObject
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testFloatArray
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testFloatArrayAsObject
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testBooleanArray
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testBooleanArrayAsObject
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testBooleanMultiArray
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testReflectionHashCodeExcludeFields
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testReflectionObjectCycle
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testToHashCodeEqualsHashCode
|    org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest:testLinkedList
|    org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest:testArrayList
|    org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest:testCopyOnWriteArrayList
|    org.apache.commons.lang3.RangeTest:testComparableConstructors
|    org.apache.commons.lang3.RangeTest:testIsWithCompare
|    org.apache.commons.lang3.RangeTest:testRangeOfChars
|    org.apache.commons.lang3.RangeTest:testEqualsObject
|    org.apache.commons.lang3.RangeTest:testHashCode
|    org.apache.commons.lang3.RangeTest:testToString
|    org.apache.commons.lang3.RangeTest:testToStringFormat
|    org.apache.commons.lang3.RangeTest:testGetMinimum
|    org.apache.commons.lang3.RangeTest:testGetMaximum
|    org.apache.commons.lang3.RangeTest:testContains
|    org.apache.commons.lang3.RangeTest:testIsAfter
|    org.apache.commons.lang3.RangeTest:testIsStartedBy
|    org.apache.commons.lang3.RangeTest:testIsEndedBy
|    org.apache.commons.lang3.RangeTest:testIsBefore
|    org.apache.commons.lang3.RangeTest:testElementCompareTo
|    org.apache.commons.lang3.RangeTest:testContainsRange
|    org.apache.commons.lang3.RangeTest:testIsAfterRange
|    org.apache.commons.lang3.RangeTest:testIsOverlappedBy
|    org.apache.commons.lang3.RangeTest:testIsBeforeRange
|    org.apache.commons.lang3.RangeTest:testIntersectionWith
|    org.apache.commons.lang3.RangeTest:testIntersectionWithNull
|    org.apache.commons.lang3.RangeTest:testIntersectionWithNonOverlapping
|    org.apache.commons.lang3.RangeTest:testSerializing
|    org.apache.commons.lang3.tuple.MutablePairTest:testBasic
|    org.apache.commons.lang3.tuple.MutablePairTest:testDefault
|    org.apache.commons.lang3.tuple.MutablePairTest:testPairOf
|    org.apache.commons.lang3.tuple.MutablePairTest:testEquals
|    org.apache.commons.lang3.tuple.MutablePairTest:testHashCode
|    org.apache.commons.lang3.tuple.MutablePairTest:testToString
|    org.apache.commons.lang3.tuple.MutablePairTest:testSerialization
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testReflectionEquals
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testReflectionHierarchyEquals
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testSuper
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testObject
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testLong
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testChar
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testByte
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testDouble
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testFloat
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testAccessors
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testReset
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testBoolean
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testObjectArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testLongArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testIntArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testShortArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testCharArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testByteArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testDoubleArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testFloatArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testBooleanArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testMultiLongArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testMultiIntArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testMultiShortArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testMultiCharArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testMultiByteArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testMultiFloatArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testMultiDoubleArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testMultiBooleanArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testRaggedArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testMixedArray
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testObjectArrayHiddenByObject
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testLongArrayHiddenByObject
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testIntArrayHiddenByObject
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testShortArrayHiddenByObject
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testCharArrayHiddenByObject
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testByteArrayHiddenByObject
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testDoubleArrayHiddenByObject
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testFloatArrayHiddenByObject
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testBooleanArrayHiddenByObject
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testUnrelatedClasses
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testNpeForNullElement
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testReflectionEqualsExcludeFields
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testCyclicalObjectReferences
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testReflectionArrays
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testConstructors
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testConstructorNull
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testGetSet
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testSetNull
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testNanInfinite
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testEquals
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testHashCode
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testCompareTo
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testCompareToNull
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testPrimitiveValues
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testToDouble
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testIncrement
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testDecrement
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testAddValuePrimitive
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testAddValueObject
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testSubtractValuePrimitive
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testSubtractValueObject
|    org.apache.commons.lang3.mutable.MutableDoubleTest:testToString
|    org.apache.commons.lang3.BooleanUtilsTest:testConstructor
|    org.apache.commons.lang3.BooleanUtilsTest:test_negate_Boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_isTrue_Boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_isNotTrue_Boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_isFalse_Boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_isNotFalse_Boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBoolean_Boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBooleanDefaultIfNull_Boolean_boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBoolean_int
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBooleanObject_int
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBooleanObject_Integer
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBoolean_int_int_int
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBoolean_Integer_Integer_Integer_nullValue
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBoolean_Integer_Integer_Integer_noMatch
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBooleanObject_int_int_int
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBooleanObject_int_int_int_noMatch
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBooleanObject_Integer_Integer_Integer_Integer
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch
|    org.apache.commons.lang3.BooleanUtilsTest:test_toInteger_boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_toIntegerObject_boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_toIntegerObject_Boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_toInteger_boolean_int_int
|    org.apache.commons.lang3.BooleanUtilsTest:test_toInteger_Boolean_int_int_int
|    org.apache.commons.lang3.BooleanUtilsTest:test_toIntegerObject_boolean_Integer_Integer
|    org.apache.commons.lang3.BooleanUtilsTest:test_toIntegerObject_Boolean_Integer_Integer_Integer
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBooleanObject_String
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBooleanObject_String_String_String_String
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBooleanObject_String_String_String_String_nullValue
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBooleanObject_String_String_String_String_noMatch
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBoolean_String
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBoolean_String_String_String
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBoolean_String_String_String_nullValue
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBoolean_String_String_String_noMatch
|    org.apache.commons.lang3.BooleanUtilsTest:test_toStringTrueFalse_Boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_toStringOnOff_Boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_toStringYesNo_Boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_toString_Boolean_String_String_String
|    org.apache.commons.lang3.BooleanUtilsTest:test_toStringTrueFalse_boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_toStringOnOff_boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_toStringYesNo_boolean
|    org.apache.commons.lang3.BooleanUtilsTest:test_toString_boolean_String_String_String
|    org.apache.commons.lang3.BooleanUtilsTest:testXor_primitive_nullInput
|    org.apache.commons.lang3.BooleanUtilsTest:testXor_primitive_emptyInput
|    org.apache.commons.lang3.BooleanUtilsTest:testXor_primitive_validInput_3items
|    org.apache.commons.lang3.BooleanUtilsTest:testXor_object_nullInput
|    org.apache.commons.lang3.BooleanUtilsTest:testXor_object_emptyInput
|    org.apache.commons.lang3.BooleanUtilsTest:testXor_object_nullElementInput
|    org.apache.commons.lang3.BooleanUtilsTest:testXor_object_validInput_2items
|    org.apache.commons.lang3.BooleanUtilsTest:testXor_object_validInput_3items
|    org.apache.commons.lang3.BooleanUtilsTest:testAnd_primitive_nullInput
|    org.apache.commons.lang3.BooleanUtilsTest:testAnd_primitive_emptyInput
|    org.apache.commons.lang3.BooleanUtilsTest:testAnd_primitive_validInput_2items
|    org.apache.commons.lang3.BooleanUtilsTest:testAnd_primitive_validInput_3items
|    org.apache.commons.lang3.BooleanUtilsTest:testAnd_object_nullInput
|    org.apache.commons.lang3.BooleanUtilsTest:testAnd_object_nullElementInput
|    org.apache.commons.lang3.BooleanUtilsTest:testAnd_object_validInput_2items
|    org.apache.commons.lang3.BooleanUtilsTest:testAnd_object_validInput_3items
|    org.apache.commons.lang3.BooleanUtilsTest:testOr_primitive_nullInput
|    org.apache.commons.lang3.BooleanUtilsTest:testOr_primitive_emptyInput
|    org.apache.commons.lang3.BooleanUtilsTest:testOr_primitive_validInput_2items
|    org.apache.commons.lang3.BooleanUtilsTest:testOr_primitive_validInput_3items
|    org.apache.commons.lang3.BooleanUtilsTest:testOr_object_nullInput
|    org.apache.commons.lang3.BooleanUtilsTest:testOr_object_emptyInput
|    org.apache.commons.lang3.BooleanUtilsTest:testOr_object_nullElementInput
|    org.apache.commons.lang3.BooleanUtilsTest:testOr_object_validInput_2items
|    org.apache.commons.lang3.BooleanUtilsTest:testOr_object_validInput_3items
|    org.apache.commons.lang3.BooleanUtilsTest:testCompare
|    org.apache.commons.lang3.SystemUtilsTest:testConstructor
|    org.apache.commons.lang3.SystemUtilsTest:testGetJavaHome
|    org.apache.commons.lang3.SystemUtilsTest:testGetJavaIoTmpDir
|    org.apache.commons.lang3.SystemUtilsTest:testGetUserDir
|    org.apache.commons.lang3.SystemUtilsTest:testGetUserHome
|    org.apache.commons.lang3.SystemUtilsTest:testIS_JAVA
|    org.apache.commons.lang3.SystemUtilsTest:testIS_OS
|    org.apache.commons.lang3.SystemUtilsTest:testJavaVersionMatches
|    org.apache.commons.lang3.SystemUtilsTest:testOSMatchesName
|    org.apache.commons.lang3.SystemUtilsTest:testOSMatchesNameAndVersion
|    org.apache.commons.lang3.SystemUtilsTest:testOsVersionMatches
|    org.apache.commons.lang3.SystemUtilsTest:testJavaAwtHeadless
|    org.apache.commons.lang3.time.FastDateFormatTest:test_getInstance
|    org.apache.commons.lang3.time.FastDateFormatTest:test_getInstance_String
|    org.apache.commons.lang3.time.FastDateFormatTest:test_getInstance_String_TimeZone
|    org.apache.commons.lang3.time.FastDateFormatTest:test_getInstance_String_Locale
|    org.apache.commons.lang3.time.FastDateFormatTest:test_changeDefault_Locale_DateInstance
|    org.apache.commons.lang3.time.FastDateFormatTest:test_getInstance_String_TimeZone_Locale
|    org.apache.commons.lang3.time.FastDateFormatTest:testCheckDefaults
|    org.apache.commons.lang3.time.FastDateFormatTest:testCheckDifferingStyles
|    org.apache.commons.lang3.time.FastDateFormatTest:testDateDefaults
|    org.apache.commons.lang3.time.FastDateFormatTest:testTimeDefaults
|    org.apache.commons.lang3.time.FastDateFormatTest:testTimeDateDefaults
|    org.apache.commons.lang3.time.FastDateFormatTest:testLang954
|    org.apache.commons.lang3.time.FastDateFormatTest:testParseSync
|    org.apache.commons.lang3.text.translate.EntityArraysTest:testConstructorExists
|    org.apache.commons.lang3.text.translate.EntityArraysTest:testHTML40_EXTENDED_ESCAPE
|    org.apache.commons.lang3.text.translate.EntityArraysTest:testISO8859_1_ESCAPE
|    org.apache.commons.lang3.builder.MultiLineToStringStyleTest:testBlank
|    org.apache.commons.lang3.builder.MultiLineToStringStyleTest:testAppendSuper
|    org.apache.commons.lang3.builder.MultiLineToStringStyleTest:testObject
|    org.apache.commons.lang3.builder.MultiLineToStringStyleTest:testPerson
|    org.apache.commons.lang3.builder.MultiLineToStringStyleTest:testLong
|    org.apache.commons.lang3.builder.MultiLineToStringStyleTest:testObjectArray
|    org.apache.commons.lang3.builder.MultiLineToStringStyleTest:testLongArrayArray
|    org.apache.commons.lang3.tuple.ImmutableTripleTest:testBasic
|    org.apache.commons.lang3.tuple.ImmutableTripleTest:testTripleOf
|    org.apache.commons.lang3.tuple.ImmutableTripleTest:testEquals
|    org.apache.commons.lang3.tuple.ImmutableTripleTest:testHashCode
|    org.apache.commons.lang3.tuple.ImmutableTripleTest:testToString
|    org.apache.commons.lang3.tuple.ImmutableTripleTest:testSerialization
|    org.apache.commons.lang3.math.IEEE754rUtilsTest:testLang381
|    org.apache.commons.lang3.math.IEEE754rUtilsTest:testEnforceExceptions
|    org.apache.commons.lang3.math.IEEE754rUtilsTest:testConstructorExists
|    org.apache.commons.lang3.reflect.InheritanceUtilsTest:testConstructor
|    org.apache.commons.lang3.reflect.InheritanceUtilsTest:testDistanceGreaterThanZero
|    org.apache.commons.lang3.reflect.InheritanceUtilsTest:testDistanceEqual
|    org.apache.commons.lang3.reflect.InheritanceUtilsTest:testDistanceEqualObject
|    org.apache.commons.lang3.reflect.InheritanceUtilsTest:testDistanceNullChild
|    org.apache.commons.lang3.reflect.InheritanceUtilsTest:testDistanceNullParent
|    org.apache.commons.lang3.reflect.InheritanceUtilsTest:testDistanceNullParentNullChild
|    org.apache.commons.lang3.reflect.InheritanceUtilsTest:testDistanceReverseParentChild
|    org.apache.commons.lang3.StringEscapeUtilsTest:testConstructor
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeJava
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeJavaWithSlash
|    org.apache.commons.lang3.StringEscapeUtilsTest:testUnescapeJava
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeEcmaScript
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeHtml
|    org.apache.commons.lang3.StringEscapeUtilsTest:testUnescapeHtml4
|    org.apache.commons.lang3.StringEscapeUtilsTest:testUnescapeHexCharsHtml
|    org.apache.commons.lang3.StringEscapeUtilsTest:testUnescapeUnknownEntity
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeHtmlVersions
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeXml
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeXml10
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeXml11
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeXmlSupplementaryCharacters
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeXmlAllCharacters
|    org.apache.commons.lang3.StringEscapeUtilsTest:testUnescapeXmlSupplementaryCharacters
|    org.apache.commons.lang3.StringEscapeUtilsTest:testStandaloneAmphersand
|    org.apache.commons.lang3.StringEscapeUtilsTest:testLang313
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeCsvString
|    org.apache.commons.lang3.StringEscapeUtilsTest:testUnescapeCsvString
|    org.apache.commons.lang3.StringEscapeUtilsTest:testUnescapeCsvWriter
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeHtmlHighUnicode
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeHiragana
|    org.apache.commons.lang3.StringEscapeUtilsTest:testLang708
|    org.apache.commons.lang3.StringEscapeUtilsTest:testLang720
|    org.apache.commons.lang3.StringEscapeUtilsTest:testLang911
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeJson
|    org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest:testSupplementaryUnescaping
|    org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest:testOutOfBounds
|    org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest:testUnfinishedEntity
|    org.apache.commons.lang3.text.CompositeFormatTest:testCompositeFormat
|    org.apache.commons.lang3.text.CompositeFormatTest:testUsage
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testFormat
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testShortDateStyleWithLocales
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testLowYearPadding
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testMilleniumBug
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testSimpleDate
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testLang303
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testLang538
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testEquals
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testToStringContainsName
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testPatternMatches
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testLocaleMatches
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testTimeZoneMatches
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testTimeZoneAsZ
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:test1806Argument
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:test1806
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testLang1103
|    org.apache.commons.lang3.ValidateTest:testIsTrue1
|    org.apache.commons.lang3.ValidateTest:testIsTrue2
|    org.apache.commons.lang3.ValidateTest:testIsTrue3
|    org.apache.commons.lang3.ValidateTest:testIsTrue4
|    org.apache.commons.lang3.ValidateTest:testIsTrue5
|    org.apache.commons.lang3.ValidateTest:testNotNull1
|    org.apache.commons.lang3.ValidateTest:testNotNull2
|    org.apache.commons.lang3.ValidateTest:testNotEmptyArray1
|    org.apache.commons.lang3.ValidateTest:testNotEmptyArray2
|    org.apache.commons.lang3.ValidateTest:testNotEmptyCollection1
|    org.apache.commons.lang3.ValidateTest:testNotEmptyCollection2
|    org.apache.commons.lang3.ValidateTest:testNotEmptyMap1
|    org.apache.commons.lang3.ValidateTest:testNotEmptyMap2
|    org.apache.commons.lang3.ValidateTest:testNotEmptyString2
|    org.apache.commons.lang3.ValidateTest:testNotBlankNullStringShouldThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankMsgNullStringShouldThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankEmptyStringShouldThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankBlankStringWithWhitespacesShouldThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankBlankStringWithNewlinesShouldThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankMsgBlankStringWithWhitespacesShouldThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankMsgEmptyStringShouldThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankNotBlankStringShouldNotThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankNotBlankStringWithWhitespacesShouldNotThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankNotBlankStringWithNewlinesShouldNotThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankMsgNotBlankStringShouldNotThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankReturnValues1
|    org.apache.commons.lang3.ValidateTest:testNotBlankReturnValues2
|    org.apache.commons.lang3.ValidateTest:testNoNullElementsArray1
|    org.apache.commons.lang3.ValidateTest:testNoNullElementsArray2
|    org.apache.commons.lang3.ValidateTest:testNoNullElementsCollection1
|    org.apache.commons.lang3.ValidateTest:testNoNullElementsCollection2
|    org.apache.commons.lang3.ValidateTest:testConstructor
|    org.apache.commons.lang3.ValidateTest:testValidIndex_withMessage_array
|    org.apache.commons.lang3.ValidateTest:testValidIndex_array
|    org.apache.commons.lang3.ValidateTest:testValidIndex_withMessage_collection
|    org.apache.commons.lang3.ValidateTest:testValidIndex_collection
|    org.apache.commons.lang3.ValidateTest:testValidIndex_withMessage_charSequence
|    org.apache.commons.lang3.ValidateTest:testValidIndex_charSequence
|    org.apache.commons.lang3.ValidateTest:testMatchesPattern
|    org.apache.commons.lang3.ValidateTest:testMatchesPattern_withMessage
|    org.apache.commons.lang3.ValidateTest:testInclusiveBetween
|    org.apache.commons.lang3.ValidateTest:testInclusiveBetween_withMessage
|    org.apache.commons.lang3.ValidateTest:testInclusiveBetweenLong
|    org.apache.commons.lang3.ValidateTest:testInclusiveBetweenLong_withMessage
|    org.apache.commons.lang3.ValidateTest:testInclusiveBetweenDouble
|    org.apache.commons.lang3.ValidateTest:testInclusiveBetweenDouble_withMessage
|    org.apache.commons.lang3.ValidateTest:testExclusiveBetween
|    org.apache.commons.lang3.ValidateTest:testExclusiveBetween_withMessage
|    org.apache.commons.lang3.ValidateTest:testExclusiveBetweenLong
|    org.apache.commons.lang3.ValidateTest:testExclusiveBetweenLong_withMessage
|    org.apache.commons.lang3.ValidateTest:testExclusiveBetweenDouble
|    org.apache.commons.lang3.ValidateTest:testExclusiveBetweenDouble_withMessage
|    org.apache.commons.lang3.ValidateTest:testIsInstanceOf
|    org.apache.commons.lang3.ValidateTest:testIsInstanceOfExceptionMessage
|    org.apache.commons.lang3.ValidateTest:testIsInstanceOf_withMessage
|    org.apache.commons.lang3.ValidateTest:testIsInstanceOf_withMessageArgs
|    org.apache.commons.lang3.ValidateTest:testIsAssignable
|    org.apache.commons.lang3.ValidateTest:testIsAssignableExceptionMessage
|    org.apache.commons.lang3.ValidateTest:testIsAssignable_withMessage
|    org.apache.commons.lang3.StringUtilsStartsEndsWithTest:testStartsWith
|    org.apache.commons.lang3.StringUtilsStartsEndsWithTest:testStartsWithIgnoreCase
|    org.apache.commons.lang3.StringUtilsStartsEndsWithTest:testStartsWithAny
|    org.apache.commons.lang3.StringUtilsStartsEndsWithTest:testEndsWith
|    org.apache.commons.lang3.StringUtilsStartsEndsWithTest:testEndsWithIgnoreCase
|    org.apache.commons.lang3.StringUtilsStartsEndsWithTest:testEndsWithAny
|    org.apache.commons.lang3.mutable.MutableByteTest:testConstructors
|    org.apache.commons.lang3.mutable.MutableByteTest:testConstructorNull
|    org.apache.commons.lang3.mutable.MutableByteTest:testGetSet
|    org.apache.commons.lang3.mutable.MutableByteTest:testSetNull
|    org.apache.commons.lang3.mutable.MutableByteTest:testEquals
|    org.apache.commons.lang3.mutable.MutableByteTest:testHashCode
|    org.apache.commons.lang3.mutable.MutableByteTest:testCompareTo
|    org.apache.commons.lang3.mutable.MutableByteTest:testCompareToNull
|    org.apache.commons.lang3.mutable.MutableByteTest:testToByte
|    org.apache.commons.lang3.mutable.MutableByteTest:testIncrement
|    org.apache.commons.lang3.mutable.MutableByteTest:testDecrement
|    org.apache.commons.lang3.mutable.MutableByteTest:testAddValuePrimitive
|    org.apache.commons.lang3.mutable.MutableByteTest:testAddValueObject
|    org.apache.commons.lang3.mutable.MutableByteTest:testSubtractValuePrimitive
|    org.apache.commons.lang3.mutable.MutableByteTest:testSubtractValueObject
|    org.apache.commons.lang3.mutable.MutableByteTest:testToString
|    org.apache.commons.lang3.text.translate.UnicodeUnescaperTest:testUPlus
|    org.apache.commons.lang3.text.translate.UnicodeUnescaperTest:testUuuuu
|    org.apache.commons.lang3.text.translate.UnicodeUnescaperTest:testLessThanFour
|    org.apache.commons.lang3.ConversionTest:testHexDigitToInt
|    org.apache.commons.lang3.ConversionTest:testHexDigitMsb0ToInt
|    org.apache.commons.lang3.ConversionTest:testHexDigitToBinary
|    org.apache.commons.lang3.ConversionTest:testHexDigitMsb0ToBinary
|    org.apache.commons.lang3.ConversionTest:testBinaryToHexDigit
|    org.apache.commons.lang3.ConversionTest:testBinaryToHexDigit_2args
|    org.apache.commons.lang3.ConversionTest:testBinaryToHexDigitMsb0_bits
|    org.apache.commons.lang3.ConversionTest:testBinaryToHexDigitMsb0_4bits_2args
|    org.apache.commons.lang3.ConversionTest:testBinaryBeMsb0ToHexDigit
|    org.apache.commons.lang3.ConversionTest:testBinaryBeMsb0ToHexDigit_2args
|    org.apache.commons.lang3.ConversionTest:testIntToHexDigit
|    org.apache.commons.lang3.ConversionTest:testIntToHexDigitMsb0
|    org.apache.commons.lang3.ConversionTest:testIntArrayToLong
|    org.apache.commons.lang3.ConversionTest:testShortArrayToLong
|    org.apache.commons.lang3.ConversionTest:testByteArrayToLong
|    org.apache.commons.lang3.ConversionTest:testShortArrayToInt
|    org.apache.commons.lang3.ConversionTest:testByteArrayToInt
|    org.apache.commons.lang3.ConversionTest:testByteArrayToShort
|    org.apache.commons.lang3.ConversionTest:testHexToLong
|    org.apache.commons.lang3.ConversionTest:testHexToInt
|    org.apache.commons.lang3.ConversionTest:testHexToShort
|    org.apache.commons.lang3.ConversionTest:testHexToByte
|    org.apache.commons.lang3.ConversionTest:testBinaryToLong
|    org.apache.commons.lang3.ConversionTest:testBinaryToInt
|    org.apache.commons.lang3.ConversionTest:testBinaryToShort
|    org.apache.commons.lang3.ConversionTest:testBinaryToByte
|    org.apache.commons.lang3.ConversionTest:testLongToIntArray
|    org.apache.commons.lang3.ConversionTest:testLongToShortArray
|    org.apache.commons.lang3.ConversionTest:testIntToShortArray
|    org.apache.commons.lang3.ConversionTest:testLongToByteArray
|    org.apache.commons.lang3.ConversionTest:testIntToByteArray
|    org.apache.commons.lang3.ConversionTest:testShortToByteArray
|    org.apache.commons.lang3.ConversionTest:testLongToHex
|    org.apache.commons.lang3.ConversionTest:testIntToHex
|    org.apache.commons.lang3.ConversionTest:testShortToHex
|    org.apache.commons.lang3.ConversionTest:testByteToHex
|    org.apache.commons.lang3.ConversionTest:testLongToBinary
|    org.apache.commons.lang3.ConversionTest:testIntToBinary
|    org.apache.commons.lang3.ConversionTest:testShortToBinary
|    org.apache.commons.lang3.ConversionTest:testUuidToByteArray
|    org.apache.commons.lang3.ConversionTest:testByteArrayToUuid
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testInitialize
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testGetActiveExecutorBeforeStart
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testGetActiveExecutorExternal
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testGetActiveExecutorTemp
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testInitializeTempExecutor
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testSetExternalExecutor
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testSetExternalExecutorAfterStart
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testStartMultipleTimes
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testGetBeforeStart
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testGetCheckedException
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testGetInterruptedException
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testIsStartedFalse
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testIsStartedTrue
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testIsStartedAfterGet
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testIsEmpty
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testIsNotEmpty
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testIsBlank
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testIsNotBlank
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testTrim
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testTrimToNull
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testTrimToEmpty
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testStrip_String
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testStripToNull_String
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testStripToEmpty_String
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testStrip_StringString
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testStripStart_StringString
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testStripEnd_StringString
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testStripAll
|    org.apache.commons.lang3.StringUtilsTrimEmptyTest:testStripAccents
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveObjectArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveNumberArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveBooleanArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveByteArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveCharArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveDoubleArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveIntArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveLongArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveShortArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveElementObjectArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveElementBooleanArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveElementByteArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveElementCharArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveElementDoubleArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveElementFloatArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveElementIntArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveElementLongArray
|    org.apache.commons.lang3.math.FractionTest:testConstants
|    org.apache.commons.lang3.math.FractionTest:testFactory_int_int
|    org.apache.commons.lang3.math.FractionTest:testFactory_int_int_int
|    org.apache.commons.lang3.math.FractionTest:testReducedFactory_int_int
|    org.apache.commons.lang3.math.FractionTest:testFactory_double
|    org.apache.commons.lang3.math.FractionTest:testFactory_String
|    org.apache.commons.lang3.math.FractionTest:testFactory_String_double
|    org.apache.commons.lang3.math.FractionTest:testFactory_String_proper
|    org.apache.commons.lang3.math.FractionTest:testFactory_String_improper
|    org.apache.commons.lang3.math.FractionTest:testGets
|    org.apache.commons.lang3.math.FractionTest:testConversions
|    org.apache.commons.lang3.math.FractionTest:testReduce
|    org.apache.commons.lang3.math.FractionTest:testInvert
|    org.apache.commons.lang3.math.FractionTest:testNegate
|    org.apache.commons.lang3.math.FractionTest:testAbs
|    org.apache.commons.lang3.math.FractionTest:testPow
|    org.apache.commons.lang3.math.FractionTest:testAdd
|    org.apache.commons.lang3.math.FractionTest:testSubtract
|    org.apache.commons.lang3.math.FractionTest:testMultiply
|    org.apache.commons.lang3.math.FractionTest:testDivide
|    org.apache.commons.lang3.math.FractionTest:testEquals
|    org.apache.commons.lang3.math.FractionTest:testHashCode
|    org.apache.commons.lang3.math.FractionTest:testCompareTo
|    org.apache.commons.lang3.math.FractionTest:testToString
|    org.apache.commons.lang3.math.FractionTest:testToProperString
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetCause_Throwable
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetCause_ThrowableArray
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetRootCause_Throwable
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowableCount_Throwable
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowables_Throwable_null
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowables_Throwable_withoutCause
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowables_Throwable_nested
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowables_Throwable_withCause
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowables_Throwable_jdkNoCause
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowables_Throwable_recursiveCause
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowableList_Throwable_null
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowableList_Throwable_withoutCause
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowableList_Throwable_nested
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowableList_Throwable_withCause
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowableList_Throwable_jdkNoCause
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetThrowableList_Throwable_recursiveCause
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testIndexOf_ThrowableClass
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testIndexOf_ThrowableClassInt
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testIndexOfType_ThrowableClass
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testIndexOfType_ThrowableClassInt
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testPrintRootCauseStackTrace_Throwable
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testPrintRootCauseStackTrace_ThrowableStream
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testPrintRootCauseStackTrace_ThrowableWriter
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testGetRootCauseStackTrace_Throwable
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testRemoveCommonFrames_ListList
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:test_getMessage_Throwable
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:test_getRootCauseMessage_Throwable
|    org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest:testInitNullCallable
|    org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest:testInitExecutor
|    org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest:testInitExecutorNullCallable
|    org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest:testInitialize
|    org.apache.commons.lang3.math.NumberUtilsTest:testConstructor
|    org.apache.commons.lang3.math.NumberUtilsTest:testToIntString
|    org.apache.commons.lang3.math.NumberUtilsTest:testToIntStringI
|    org.apache.commons.lang3.math.NumberUtilsTest:testToLongString
|    org.apache.commons.lang3.math.NumberUtilsTest:testToLongStringL
|    org.apache.commons.lang3.math.NumberUtilsTest:testToFloatString
|    org.apache.commons.lang3.math.NumberUtilsTest:testToFloatStringF
|    org.apache.commons.lang3.math.NumberUtilsTest:testStringCreateNumberEnsureNoPrecisionLoss
|    org.apache.commons.lang3.math.NumberUtilsTest:testStringToDoubleString
|    org.apache.commons.lang3.math.NumberUtilsTest:testStringToDoubleStringD
|    org.apache.commons.lang3.math.NumberUtilsTest:testToByteStringI
|    org.apache.commons.lang3.math.NumberUtilsTest:testToShortString
|    org.apache.commons.lang3.math.NumberUtilsTest:testToShortStringI
|    org.apache.commons.lang3.math.NumberUtilsTest:testCreateNumber
|    org.apache.commons.lang3.math.NumberUtilsTest:testLang1087
|    org.apache.commons.lang3.math.NumberUtilsTest:TestLang747
|    org.apache.commons.lang3.math.NumberUtilsTest:testCreateNumberFailure_1
|    org.apache.commons.lang3.math.NumberUtilsTest:testCreateNumberFailure_2
|    org.apache.commons.lang3.math.NumberUtilsTest:testCreateNumberFailure_3
|    org.apache.commons.lang3.math.NumberUtilsTest:testCreateNumberFailure_4
|    org.apache.commons.lang3.math.NumberUtilsTest:testCreateNumberMagnitude
|    org.apache.commons.lang3.math.NumberUtilsTest:testCreateFloat
|    org.apache.commons.lang3.math.NumberUtilsTest:testCreateDouble
|    org.apache.commons.lang3.math.NumberUtilsTest:testCreateInteger
|    org.apache.commons.lang3.math.NumberUtilsTest:testCreateBigInteger
|    org.apache.commons.lang3.math.NumberUtilsTest:testCreateBigDecimal
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinLong_nullArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinLong_emptyArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinLong
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinInt_nullArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinInt_emptyArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinInt
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinShort_nullArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinShort_emptyArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinShort
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinByte_nullArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinByte
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinDouble_nullArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinDouble_emptyArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinDouble
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinFloat_nullArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinFloat_emptyArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinFloat
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxLong_nullArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxLong_emptyArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxLong
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxInt_nullArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxInt_emptyArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxInt
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxShort_nullArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxShort_emptyArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxShort
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxByte_nullArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxByte_emptyArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxByte
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxDouble_nullArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxDouble_emptyArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxDouble
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxFloat_emptyArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxFloat
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinimumLong
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinimumInt
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinimumShort
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinimumByte
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinimumDouble
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinimumFloat
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaximumLong
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaximumInt
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaximumShort
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaximumByte
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaximumDouble
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaximumFloat
|    org.apache.commons.lang3.math.NumberUtilsTest:testCompareDouble
|    org.apache.commons.lang3.math.NumberUtilsTest:testIsDigits
|    org.apache.commons.lang3.math.NumberUtilsTest:testIsNumber
|    org.apache.commons.lang3.math.NumberUtilsTest:testLANG971
|    org.apache.commons.lang3.math.NumberUtilsTest:testLANG992
|    org.apache.commons.lang3.math.NumberUtilsTest:testLANG972
|    org.apache.commons.lang3.math.NumberUtilsTest:testIsParsable
|    org.apache.commons.lang3.math.NumberUtilsTest:testConstants
|    org.apache.commons.lang3.math.NumberUtilsTest:testLang300
|    org.apache.commons.lang3.math.NumberUtilsTest:testLang381
|    org.apache.commons.lang3.math.NumberUtilsTest:compareInt
|    org.apache.commons.lang3.math.NumberUtilsTest:compareLong
|    org.apache.commons.lang3.math.NumberUtilsTest:compareShort
|    org.apache.commons.lang3.math.NumberUtilsTest:compareByte
|    org.apache.commons.lang3.ArrayUtilsAddTest:testJira567
|    org.apache.commons.lang3.ArrayUtilsAddTest:testAddObjectArrayBoolean
|    org.apache.commons.lang3.ArrayUtilsAddTest:testAddObjectArrayByte
|    org.apache.commons.lang3.ArrayUtilsAddTest:testAddObjectArrayChar
|    org.apache.commons.lang3.ArrayUtilsAddTest:testAddObjectArrayDouble
|    org.apache.commons.lang3.ArrayUtilsAddTest:testAddObjectArrayFloat
|    org.apache.commons.lang3.ArrayUtilsAddTest:testAddObjectArrayInt
|    org.apache.commons.lang3.ArrayUtilsAddTest:testAddObjectArrayLong
|    org.apache.commons.lang3.ArrayUtilsAddTest:testAddObjectArrayShort
|    org.apache.commons.lang3.ArrayUtilsAddTest:testAddObjectArrayObject
|    org.apache.commons.lang3.ArrayUtilsAddTest:testLANG571
|    org.apache.commons.lang3.ArrayUtilsAddTest:testAddObjectArrayToObjectArray
|    org.apache.commons.lang3.time.FastDateParserTest:test_Equality_Hash
|    org.apache.commons.lang3.time.FastDateParserTest:testParseZone
|    org.apache.commons.lang3.time.FastDateParserTest:testParseLongShort
|    org.apache.commons.lang3.time.FastDateParserTest:testAmPm
|    org.apache.commons.lang3.time.FastDateParserTest:testParses
|    org.apache.commons.lang3.time.FastDateParserTest:testTzParses
|    org.apache.commons.lang3.time.FastDateParserTest:testLocales_Long_AD
|    org.apache.commons.lang3.time.FastDateParserTest:testLocales_Long_BC
|    org.apache.commons.lang3.time.FastDateParserTest:testLocales_Short_AD
|    org.apache.commons.lang3.time.FastDateParserTest:testLocales_LongNoEra_AD
|    org.apache.commons.lang3.time.FastDateParserTest:testLocales_LongNoEra_BC
|    org.apache.commons.lang3.time.FastDateParserTest:testLocales_ShortNoEra_AD
|    org.apache.commons.lang3.time.FastDateParserTest:testLocales_ShortNoEra_BC
|    org.apache.commons.lang3.time.FastDateParserTest:testParseNumerics
|    org.apache.commons.lang3.time.FastDateParserTest:testQuotes
|    org.apache.commons.lang3.time.FastDateParserTest:testSpecialCharacters
|    org.apache.commons.lang3.time.FastDateParserTest:testLANG_832
|    org.apache.commons.lang3.time.FastDateParserTest:testLANG_831
|    org.apache.commons.lang3.time.FastDateParserTest:testDayOf
|    org.apache.commons.lang3.time.FastDateParserTest:testShortDateStyleWithLocales
|    org.apache.commons.lang3.time.FastDateParserTest:testLowYearPadding
|    org.apache.commons.lang3.time.FastDateParserTest:testMilleniumBug
|    org.apache.commons.lang3.time.FastDateParserTest:testLang303
|    org.apache.commons.lang3.time.FastDateParserTest:testLang538
|    org.apache.commons.lang3.time.FastDateParserTest:testEquals
|    org.apache.commons.lang3.time.FastDateParserTest:testToStringContainsName
|    org.apache.commons.lang3.time.FastDateParserTest:testPatternMatches
|    org.apache.commons.lang3.time.FastDateParserTest:testLocaleMatches
|    org.apache.commons.lang3.time.FastDateParserTest:testTimeZoneMatches
|    org.apache.commons.lang3.time.FastDateParserTest:testLang996
|    org.apache.commons.lang3.time.FastDateParserTest:test1806Argument
|    org.apache.commons.lang3.time.FastDateParserTest:test1806
|    org.apache.commons.lang3.mutable.MutableIntTest:testConstructors
|    org.apache.commons.lang3.mutable.MutableIntTest:testGetSet
|    org.apache.commons.lang3.mutable.MutableIntTest:testSetNull
|    org.apache.commons.lang3.mutable.MutableIntTest:testEquals
|    org.apache.commons.lang3.mutable.MutableIntTest:testHashCode
|    org.apache.commons.lang3.mutable.MutableIntTest:testCompareTo
|    org.apache.commons.lang3.mutable.MutableIntTest:testCompareToNull
|    org.apache.commons.lang3.mutable.MutableIntTest:testPrimitiveValues
|    org.apache.commons.lang3.mutable.MutableIntTest:testToInteger
|    org.apache.commons.lang3.mutable.MutableIntTest:testIncrement
|    org.apache.commons.lang3.mutable.MutableIntTest:testDecrement
|    org.apache.commons.lang3.mutable.MutableIntTest:testAddValuePrimitive
|    org.apache.commons.lang3.mutable.MutableIntTest:testAddValueObject
|    org.apache.commons.lang3.mutable.MutableIntTest:testSubtractValuePrimitive
|    org.apache.commons.lang3.mutable.MutableIntTest:testSubtractValueObject
|    org.apache.commons.lang3.mutable.MutableIntTest:testToString
|    org.apache.commons.lang3.event.EventListenerSupportTest:testAddNullListener
|    org.apache.commons.lang3.event.EventListenerSupportTest:testRemoveNullListener
|    org.apache.commons.lang3.event.EventListenerSupportTest:testEventDispatchOrder
|    org.apache.commons.lang3.event.EventListenerSupportTest:testCreateWithNonInterfaceParameter
|    org.apache.commons.lang3.event.EventListenerSupportTest:testCreateWithNullParameter
|    org.apache.commons.lang3.event.EventListenerSupportTest:testRemoveListenerDuringEvent
|    org.apache.commons.lang3.event.EventListenerSupportTest:testGetListeners
|    org.apache.commons.lang3.event.EventListenerSupportTest:testSerialization
|    org.apache.commons.lang3.event.EventListenerSupportTest:testSubclassInvocationHandling
|    org.apache.commons.lang3.text.translate.NumericEntityEscaperTest:testBelow
|    org.apache.commons.lang3.text.translate.NumericEntityEscaperTest:testBetween
|    org.apache.commons.lang3.text.translate.NumericEntityEscaperTest:testAbove
|    org.apache.commons.lang3.text.translate.NumericEntityEscaperTest:testSupplementary
|    org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest:testInteger
|    org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest:testIntegerWithTransients
|    org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest:testFixture
|    org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest:testFixtureWithTransients
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendNewLine
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendWithNullText
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_Object
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_StringBuilder
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_String
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_String_int_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_StringBuilder_int_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_StringBuffer
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_StringBuffer_int_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_StrBuilder
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_StrBuilder_int_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_CharArray
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_CharArray_int_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_Boolean
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_PrimitiveNumber
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_FormattedString
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_Object
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_String
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_String_int_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_StringBuffer
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_StringBuilder
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_StringBuffer_int_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_StringBuilder_int_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_StrBuilder
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_StrBuilder_int_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_CharArray
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_CharArray_int_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_Boolean
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendln_PrimitiveNumber
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendPadding
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendFixedWidthPadLeft
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendFixedWidthPadRight
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testLang299
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendFixedWidthPadRight_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppend_FormattedString
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendAll_Array
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendAll_Collection
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendAll_Iterator
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendWithSeparators_Array
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendWithSeparators_Collection
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendWithSeparators_Iterator
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendWithSeparatorsWithNullText
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendSeparator_String
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendSeparator_String_String
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendSeparator_char
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendSeparator_char_char
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendSeparator_String_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendSeparator_char_int
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testInsert
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testInsertWithNullText
|    org.apache.commons.lang3.concurrent.AtomicInitializerTest:testGet
|    org.apache.commons.lang3.concurrent.AtomicInitializerTest:testGetMultipleTimes
|    org.apache.commons.lang3.concurrent.AtomicInitializerTest:testGetConcurrent
|    org.apache.commons.lang3.builder.DiffBuilderTest:testBoolean
|    org.apache.commons.lang3.builder.DiffBuilderTest:testBooleanArray
|    org.apache.commons.lang3.builder.DiffBuilderTest:testByte
|    org.apache.commons.lang3.builder.DiffBuilderTest:testByteArray
|    org.apache.commons.lang3.builder.DiffBuilderTest:testChar
|    org.apache.commons.lang3.builder.DiffBuilderTest:testCharArray
|    org.apache.commons.lang3.builder.DiffBuilderTest:testDouble
|    org.apache.commons.lang3.builder.DiffBuilderTest:testDoubleArray
|    org.apache.commons.lang3.builder.DiffBuilderTest:testFloat
|    org.apache.commons.lang3.builder.DiffBuilderTest:testFloatArray
|    org.apache.commons.lang3.builder.DiffBuilderTest:testInt
|    org.apache.commons.lang3.builder.DiffBuilderTest:testIntArray
|    org.apache.commons.lang3.builder.DiffBuilderTest:testLong
|    org.apache.commons.lang3.builder.DiffBuilderTest:testLongArray
|    org.apache.commons.lang3.builder.DiffBuilderTest:testShort
|    org.apache.commons.lang3.builder.DiffBuilderTest:testShortArray
|    org.apache.commons.lang3.builder.DiffBuilderTest:testObject
|    org.apache.commons.lang3.builder.DiffBuilderTest:testObjectsSameAndEqual
|    org.apache.commons.lang3.builder.DiffBuilderTest:testObjectsNotSameButEqual
|    org.apache.commons.lang3.builder.DiffBuilderTest:testObjectsNotSameNorEqual
|    org.apache.commons.lang3.builder.DiffBuilderTest:testObjectArray
|    org.apache.commons.lang3.builder.DiffBuilderTest:testObjectArrayEqual
|    org.apache.commons.lang3.builder.DiffBuilderTest:testByteArrayEqualAsObject
|    org.apache.commons.lang3.builder.DiffBuilderTest:testNullLhs
|    org.apache.commons.lang3.builder.DiffBuilderTest:testNullRhs
|    org.apache.commons.lang3.builder.DiffBuilderTest:testSameObjectIgnoresAppends
|    org.apache.commons.lang3.builder.DiffBuilderTest:testSimilarObjectIgnoresAppends
|    org.apache.commons.lang3.builder.DiffBuilderTest:testStylePassedToDiffResult
|    org.apache.commons.lang3.builder.DiffBuilderTest:testTriviallyEqualTestDisabled
|    org.apache.commons.lang3.builder.DiffBuilderTest:testTriviallyEqualTestEnabled
|    org.apache.commons.lang3.CharEncodingTest:testConstructor
|    org.apache.commons.lang3.CharEncodingTest:testMustBeSupportedJava1_3_1
|    org.apache.commons.lang3.CharEncodingTest:testSupported
|    org.apache.commons.lang3.CharEncodingTest:testNotSupported
|    org.apache.commons.lang3.CharEncodingTest:testWorksOnJava1_1_8
|    org.apache.commons.lang3.CharEncodingTest:testWorksOnJava1_2_2
|    org.apache.commons.lang3.mutable.MutableShortTest:testConstructors
|    org.apache.commons.lang3.mutable.MutableShortTest:testEquals
|    org.apache.commons.lang3.mutable.MutableShortTest:testHashCode
|    org.apache.commons.lang3.mutable.MutableShortTest:testCompareTo
|    org.apache.commons.lang3.mutable.MutableShortTest:testPrimitiveValues
|    org.apache.commons.lang3.mutable.MutableShortTest:testToShort
|    org.apache.commons.lang3.mutable.MutableShortTest:testIncrement
|    org.apache.commons.lang3.mutable.MutableShortTest:testDecrement
|    org.apache.commons.lang3.mutable.MutableShortTest:testAddValuePrimitive
|    org.apache.commons.lang3.mutable.MutableShortTest:testAddValueObject
|    org.apache.commons.lang3.mutable.MutableShortTest:testSubtractValuePrimitive
|    org.apache.commons.lang3.mutable.MutableShortTest:testSubtractValueObject
|    org.apache.commons.lang3.mutable.MutableShortTest:testToString
|    org.apache.commons.lang3.time.DateUtilsTest:testConstructor
|    org.apache.commons.lang3.time.DateUtilsTest:testIsSameDay_Date
|    org.apache.commons.lang3.time.DateUtilsTest:testIsSameDay_Cal
|    org.apache.commons.lang3.time.DateUtilsTest:testIsSameInstant_Date
|    org.apache.commons.lang3.time.DateUtilsTest:testIsSameInstant_Cal
|    org.apache.commons.lang3.time.DateUtilsTest:testIsSameLocalTime_Cal
|    org.apache.commons.lang3.time.DateUtilsTest:testParseDate
|    org.apache.commons.lang3.time.DateUtilsTest:testParseDateWithLeniency
|    org.apache.commons.lang3.time.DateUtilsTest:testAddYears
|    org.apache.commons.lang3.time.DateUtilsTest:testAddMonths
|    org.apache.commons.lang3.time.DateUtilsTest:testAddWeeks
|    org.apache.commons.lang3.time.DateUtilsTest:testAddDays
|    org.apache.commons.lang3.time.DateUtilsTest:testAddHours
|    org.apache.commons.lang3.time.DateUtilsTest:testAddMinutes
|    org.apache.commons.lang3.time.DateUtilsTest:testAddSeconds
|    org.apache.commons.lang3.time.DateUtilsTest:testAddMilliseconds
|    org.apache.commons.lang3.time.DateUtilsTest:testSetYears
|    org.apache.commons.lang3.time.DateUtilsTest:testSetMonths
|    org.apache.commons.lang3.time.DateUtilsTest:testSetDays
|    org.apache.commons.lang3.time.DateUtilsTest:testSetHours
|    org.apache.commons.lang3.time.DateUtilsTest:testSetMinutes
|    org.apache.commons.lang3.time.DateUtilsTest:testSetSeconds
|    org.apache.commons.lang3.time.DateUtilsTest:testSetMilliseconds
|    org.apache.commons.lang3.time.DateUtilsTest:testToCalendar
|    org.apache.commons.lang3.time.DateUtilsTest:testRound
|    org.apache.commons.lang3.time.DateUtilsTest:testRoundLang346
|    org.apache.commons.lang3.time.DateUtilsTest:testTruncate
|    org.apache.commons.lang3.time.DateUtilsTest:testTruncateLang59
|    org.apache.commons.lang3.time.DateUtilsTest:testLang530
|    org.apache.commons.lang3.time.DateUtilsTest:testCeil
|    org.apache.commons.lang3.time.DateUtilsTest:testIteratorEx
|    org.apache.commons.lang3.time.DateUtilsTest:testMonthIterator
|    org.apache.commons.lang3.time.DateUtilsTest:testLANG799_EN_OK
|    org.apache.commons.lang3.time.DateUtilsTest:testLANG799_EN_FAIL
|    org.apache.commons.lang3.time.DateUtilsTest:testLANG799_DE_FAIL
|    org.apache.commons.lang3.CharUtilsTest:testToCharacterObject_char
|    org.apache.commons.lang3.CharUtilsTest:testToCharacterObject_String
|    org.apache.commons.lang3.CharUtilsTest:testToChar_Character
|    org.apache.commons.lang3.CharUtilsTest:testToChar_Character_char
|    org.apache.commons.lang3.CharUtilsTest:testToChar_String
|    org.apache.commons.lang3.CharUtilsTest:testToChar_String_char
|    org.apache.commons.lang3.CharUtilsTest:testToIntValue_char
|    org.apache.commons.lang3.CharUtilsTest:testToIntValue_char_int
|    org.apache.commons.lang3.CharUtilsTest:testToIntValue_Character
|    org.apache.commons.lang3.CharUtilsTest:testToIntValue_Character_int
|    org.apache.commons.lang3.CharUtilsTest:testToString_char
|    org.apache.commons.lang3.CharUtilsTest:testToString_Character
|    org.apache.commons.lang3.CharUtilsTest:testToUnicodeEscaped_char
|    org.apache.commons.lang3.CharUtilsTest:testToUnicodeEscaped_Character
|    org.apache.commons.lang3.CharUtilsTest:testIsAscii_char
|    org.apache.commons.lang3.CharUtilsTest:testIsAsciiPrintable_char
|    org.apache.commons.lang3.CharUtilsTest:testIsAsciiControl_char
|    org.apache.commons.lang3.CharUtilsTest:testIsAsciiAlpha_char
|    org.apache.commons.lang3.CharUtilsTest:testIsAsciiAlphaUpper_char
|    org.apache.commons.lang3.CharUtilsTest:testIsAsciiAlphaLower_char
|    org.apache.commons.lang3.CharUtilsTest:testIsAsciiNumeric_char
|    org.apache.commons.lang3.CharUtilsTest:testIsAsciiAlphanumeric_char
|    org.apache.commons.lang3.CharUtilsTest:testCompare
|    org.apache.commons.lang3.text.StrMatcherTest:testCommaMatcher
|    org.apache.commons.lang3.text.StrMatcherTest:testTabMatcher
|    org.apache.commons.lang3.text.StrMatcherTest:testSpaceMatcher
|    org.apache.commons.lang3.text.StrMatcherTest:testSplitMatcher
|    org.apache.commons.lang3.text.StrMatcherTest:testTrimMatcher
|    org.apache.commons.lang3.text.StrMatcherTest:testSingleQuoteMatcher
|    org.apache.commons.lang3.text.StrMatcherTest:testDoubleQuoteMatcher
|    org.apache.commons.lang3.text.StrMatcherTest:testQuoteMatcher
|    org.apache.commons.lang3.text.StrMatcherTest:testNoneMatcher
|    org.apache.commons.lang3.text.StrMatcherTest:testCharMatcher_char
|    org.apache.commons.lang3.text.StrMatcherTest:testCharSetMatcher_String
|    org.apache.commons.lang3.text.StrMatcherTest:testCharSetMatcher_charArray
|    org.apache.commons.lang3.text.StrMatcherTest:testStringMatcher_String
|    org.apache.commons.lang3.text.StrMatcherTest:testMatcherIndices
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContains_Char
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContains_String
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContains_StringWithBadSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContains_StringWithSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsAny_StringCharArray
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsAny_StringCharArrayWithBadSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsAny_StringCharArrayWithSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsAny_StringString
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsAny_StringWithBadSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsAny_StringWithSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsAny_StringStringArray
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsIgnoreCase_StringString
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsNone_CharArray
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsNone_CharArrayWithBadSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsNone_CharArrayWithSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsNone_String
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsNone_StringWithBadSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsNone_StringWithSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsOnly_CharArray
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsOnly_String
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsWhitespace
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testCustomCharSequence
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testEquals
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testEqualsOnStrings
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testEqualsIgnoreCase
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOf_char
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOf_String
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOf_StringInt
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOfAny_StringCharArrayWithSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOfAny_StringString
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOfAny_StringStringArray
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOfAny_StringStringWithSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOfAnyBut_StringCharArray
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOfAnyBut_StringCharArrayWithSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOfAnyBut_StringString
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOfAnyBut_StringStringWithSupplementaryChars
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOfIgnoreCase_StringInt
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testLastIndexOf_char
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testLastIndexOf_charInt
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testLastIndexOf_String
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testLastIndexOf_StringInt
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testLastIndexOfAny_StringStringArray
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testLastIndexOfIgnoreCase_String
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testLastOrdinalIndexOf
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testOrdinalIndexOf
|    org.apache.commons.lang3.tuple.TripleTest:testTripleOf
|    org.apache.commons.lang3.tuple.TripleTest:testCompatibilityBetweenTriples
|    org.apache.commons.lang3.tuple.TripleTest:testComparable1
|    org.apache.commons.lang3.tuple.TripleTest:testComparable2
|    org.apache.commons.lang3.tuple.TripleTest:testComparable3
|    org.apache.commons.lang3.tuple.TripleTest:testComparable4
|    org.apache.commons.lang3.tuple.TripleTest:testToString
|    org.apache.commons.lang3.tuple.TripleTest:testFormattable_simple
|    org.apache.commons.lang3.tuple.TripleTest:testFormattable_padded
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllObjectArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllObjectArrayRemoveNone
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllObjectArrayNegativeIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllObjectArrayOutOfBoundsIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllNullObjectArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllNumberArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllBooleanArrayRemoveNone
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllBooleanArrayNegativeIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllNullBooleanArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllByteArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllByteArrayRemoveNone
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllByteArrayNegativeIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllByteArrayOutOfBoundsIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllNullByteArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllCharArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllCharArrayRemoveNone
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllCharArrayNegativeIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllCharArrayOutOfBoundsIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllNullCharArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllDoubleArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllDoubleArrayRemoveNone
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllDoubleArrayNegativeIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllDoubleArrayOutOfBoundsIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllNullDoubleArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllFloatArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllFloatArrayRemoveNone
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllFloatArrayNegativeIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllFloatArrayOutOfBoundsIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllNullFloatArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllIntArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllIntArrayRemoveNone
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllIntArrayNegativeIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllIntArrayOutOfBoundsIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllLongArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllLongArrayRemoveNone
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllLongArrayNegativeIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllLongArrayOutOfBoundsIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllNullLongArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllShortArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllShortArrayRemoveNone
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllShortArrayNegativeIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllShortArrayOutOfBoundsIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllNullShortArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveElementsObjectArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveElementBooleanArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveElementByteArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveElementCharArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveElementDoubleArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveElementIntArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveElementLongArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveElementShortArray
|    org.apache.commons.lang3.JavaVersionTest:testGetJavaVersion
|    org.apache.commons.lang3.JavaVersionTest:testAtLeast
|    org.apache.commons.lang3.JavaVersionTest:testToString
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testConcurrentExceptionCauseError
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testConcurrentExceptionCauseNull
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testConcurrentRuntimeExceptionCauseUnchecked
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testConcurrentRuntimeExceptionCauseError
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testConcurrentRuntimeExceptionCauseNull
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testExtractCauseNull
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testExtractCauseNullCause
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testExtractCauseError
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testExtractCauseChecked
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testExtractCauseUncheckedNull
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testExtractCauseUncheckedNullCause
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testExtractCauseUncheckedError
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testExtractCauseUncheckedUncheckedException
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testExtractCauseUncheckedChecked
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testHandleCauseError
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testHandleCauseUncheckedException
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testHandleCauseNull
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testHandleCauseUncheckedUncheckedException
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testHandleCauseUncheckedNull
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testInitializeNull
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testInitialize
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testInitializeUncheckedNull
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testInitializeUnchecked
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testInitializeUncheckedEx
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testConstantFuture_Integer
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testConstantFuture_null
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testPutIfAbsentKeyPresent
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testPutIfAbsentKeyNotPresent
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testPutIfAbsentNullMap
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testCreateIfAbsentKeyPresent
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testCreateIfAbsentKeyNotPresent
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testCreateIfAbsentNullMap
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testCreateIfAbsentNullInit
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testCreateIfAbsentUncheckedSuccess
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testCreateIfAbsentUncheckedException
|    org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest:test_toStringExclude
|    org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest:test_toStringExcludeArray
|    org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest:test_toStringExcludeArrayWithNull
|    org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest:test_toStringExcludeArrayWithNulls
|    org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest:test_toStringExcludeCollection
|    org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest:test_toStringExcludeCollectionWithNull
|    org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest:test_toStringExcludeCollectionWithNulls
|    org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest:test_toStringExcludeEmptyArray
|    org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest:test_toStringExcludeEmptyCollection
|    org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest:test_toStringExcludeNullArray
|    org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest:test_toStringExcludeNullCollection
|    org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest:simpleObject
|    org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest:nestedElements
|    org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest:nestedAndArray
|    org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest:noArray
|    org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest:boolArray
|    org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest:charArray
|    org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest:intArray
|    org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest:doubleArray
|    org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest:longArray
|    org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest:stringArray
|    org.apache.commons.lang3.event.EventUtilsTest:testConstructor
|    org.apache.commons.lang3.event.EventUtilsTest:testAddEventListener
|    org.apache.commons.lang3.event.EventUtilsTest:testAddEventListenerWithNoAddMethod
|    org.apache.commons.lang3.event.EventUtilsTest:testAddEventListenerThrowsException
|    org.apache.commons.lang3.event.EventUtilsTest:testAddEventListenerWithPrivateAddMethod
|    org.apache.commons.lang3.event.EventUtilsTest:testBindEventsToMethod
|    org.apache.commons.lang3.event.EventUtilsTest:testBindEventsToMethodWithEvent
|    org.apache.commons.lang3.event.EventUtilsTest:testBindFilteredEventsToMethod
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testContextedException
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testContextedExceptionString
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testContextedExceptionThrowable
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testContextedExceptionStringThrowable
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testContextedExceptionStringThrowableContext
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testNullExceptionPassing
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testRawMessage
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testAddContextValue
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testGetFirstContextValue
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testGetContextValues
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testGetContextLabels
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testGetContextEntries
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testJavaSerialization
|    org.apache.commons.lang3.EnumUtilsTest:testConstructable
|    org.apache.commons.lang3.EnumUtilsTest:test_getEnumMap
|    org.apache.commons.lang3.EnumUtilsTest:test_getEnumList
|    org.apache.commons.lang3.EnumUtilsTest:test_isEnum
|    org.apache.commons.lang3.EnumUtilsTest:test_isEnum_nullClass
|    org.apache.commons.lang3.EnumUtilsTest:test_getEnum
|    org.apache.commons.lang3.EnumUtilsTest:test_getEnum_nullClass
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVector_nullClass
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVectors_nullClass
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVectors_nullIterable
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVector_nullElement
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVectors_nullElement
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVector_nullClassWithArray
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVectors_nullClassWithArray
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVector_nullArray
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVectors_nullArray
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVector_nullArrayElement
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVectors_nullArrayElement
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVector_longClass
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVector_longClassWithArray
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVector_nonEnumClass
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVectors_nonEnumClass
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVector_nonEnumClassWithArray
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVectors_nonEnumClassWithArray
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVector
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVectors
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVectorFromArray
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVectorsFromArray
|    org.apache.commons.lang3.EnumUtilsTest:test_processBitVector_nullClass
|    org.apache.commons.lang3.EnumUtilsTest:test_processBitVectors_nullClass
|    org.apache.commons.lang3.EnumUtilsTest:test_processBitVector
|    org.apache.commons.lang3.EnumUtilsTest:test_processBitVectors
|    org.apache.commons.lang3.EnumUtilsTest:test_processBitVector_longClass
|    org.apache.commons.lang3.HashSetvBitSetTest:testTimes
|    org.apache.commons.lang3.HashSetvBitSetTest:testTimesExtractOrBitset
|    org.apache.commons.lang3.StringUtilsTest:testConstructor
|    org.apache.commons.lang3.StringUtilsTest:testIsEmpty
|    org.apache.commons.lang3.StringUtilsTest:testIsNotEmpty
|    org.apache.commons.lang3.StringUtilsTest:testIsAnyEmpty
|    org.apache.commons.lang3.StringUtilsTest:testIsNoneEmpty
|    org.apache.commons.lang3.StringUtilsTest:testIsBlank
|    org.apache.commons.lang3.StringUtilsTest:testIsNotBlank
|    org.apache.commons.lang3.StringUtilsTest:testIsAnyBlank
|    org.apache.commons.lang3.StringUtilsTest:testIsNoneBlank
|    org.apache.commons.lang3.StringUtilsTest:testCaseFunctions
|    org.apache.commons.lang3.StringUtilsTest:testSwapCase_String
|    org.apache.commons.lang3.StringUtilsTest:testJoin_Objects
|    org.apache.commons.lang3.StringUtilsTest:testJoin_Objectarray
|    org.apache.commons.lang3.StringUtilsTest:testJoin_ArrayCharSeparator
|    org.apache.commons.lang3.StringUtilsTest:testJoin_ArrayOfChars
|    org.apache.commons.lang3.StringUtilsTest:testJoin_ArrayOfBytes
|    org.apache.commons.lang3.StringUtilsTest:testJoin_ArrayOfInts
|    org.apache.commons.lang3.StringUtilsTest:testJoin_ArrayOfLongs
|    org.apache.commons.lang3.StringUtilsTest:testJoin_ArrayOfFloats
|    org.apache.commons.lang3.StringUtilsTest:testJoin_ArrayOfDoubles
|    org.apache.commons.lang3.StringUtilsTest:testJoin_ArrayOfShorts
|    org.apache.commons.lang3.StringUtilsTest:testJoin_ArrayString
|    org.apache.commons.lang3.StringUtilsTest:testJoin_IteratorChar
|    org.apache.commons.lang3.StringUtilsTest:testJoin_IteratorString
|    org.apache.commons.lang3.StringUtilsTest:testJoin_IterableChar
|    org.apache.commons.lang3.StringUtilsTest:testJoin_IterableString
|    org.apache.commons.lang3.StringUtilsTest:testSplit_String
|    org.apache.commons.lang3.StringUtilsTest:testSplit_StringChar
|    org.apache.commons.lang3.StringUtilsTest:testSplit_StringString_StringStringInt
|    org.apache.commons.lang3.StringUtilsTest:testSplitByWholeString_StringStringBoolean
|    org.apache.commons.lang3.StringUtilsTest:testSplitByWholeString_StringStringBooleanInt
|    org.apache.commons.lang3.StringUtilsTest:testSplitPreserveAllTokens_String
|    org.apache.commons.lang3.StringUtilsTest:testSplitPreserveAllTokens_StringChar
|    org.apache.commons.lang3.StringUtilsTest:testSplitPreserveAllTokens_StringString_StringStringInt
|    org.apache.commons.lang3.StringUtilsTest:testSplitByCharacterType
|    org.apache.commons.lang3.StringUtilsTest:testSplitByCharacterTypeCamelCase
|    org.apache.commons.lang3.StringUtilsTest:testDeleteWhitespace_String
|    org.apache.commons.lang3.StringUtilsTest:testLang623
|    org.apache.commons.lang3.StringUtilsTest:testReplace_StringStringString
|    org.apache.commons.lang3.StringUtilsTest:testReplacePattern
|    org.apache.commons.lang3.StringUtilsTest:testRemovePattern
|    org.apache.commons.lang3.StringUtilsTest:testReplace_StringStringStringInt
|    org.apache.commons.lang3.StringUtilsTest:testReplaceOnce_StringStringString
|    org.apache.commons.lang3.StringUtilsTest:testReplace_StringStringArrayStringArray
|    org.apache.commons.lang3.StringUtilsTest:testReplace_StringStringArrayStringArrayBoolean
|    org.apache.commons.lang3.StringUtilsTest:testReplaceChars_StringCharChar
|    org.apache.commons.lang3.StringUtilsTest:testReplaceChars_StringStringString
|    org.apache.commons.lang3.StringUtilsTest:testOverlay_StringStringIntInt
|    org.apache.commons.lang3.StringUtilsTest:testRepeat_StringStringInt
|    org.apache.commons.lang3.StringUtilsTest:testChop
|    org.apache.commons.lang3.StringUtilsTest:testChomp
|    org.apache.commons.lang3.StringUtilsTest:testRightPad_StringInt
|    org.apache.commons.lang3.StringUtilsTest:testRightPad_StringIntChar
|    org.apache.commons.lang3.StringUtilsTest:testRightPad_StringIntString
|    org.apache.commons.lang3.StringUtilsTest:testLeftPad_StringInt
|    org.apache.commons.lang3.StringUtilsTest:testLeftPad_StringIntChar
|    org.apache.commons.lang3.StringUtilsTest:testLeftPad_StringIntString
|    org.apache.commons.lang3.StringUtilsTest:testLengthString
|    org.apache.commons.lang3.StringUtilsTest:testLengthStringBuffer
|    org.apache.commons.lang3.StringUtilsTest:testLengthStringBuilder
|    org.apache.commons.lang3.StringUtilsTest:testLength_CharBuffer
|    org.apache.commons.lang3.StringUtilsTest:testCenter_StringInt
|    org.apache.commons.lang3.StringUtilsTest:testCenter_StringIntChar
|    org.apache.commons.lang3.StringUtilsTest:testCenter_StringIntString
|    org.apache.commons.lang3.StringUtilsTest:testReverse_String
|    org.apache.commons.lang3.StringUtilsTest:testReverseDelimited_StringChar
|    org.apache.commons.lang3.StringUtilsTest:testDefault_String
|    org.apache.commons.lang3.StringUtilsTest:testDefault_StringString
|    org.apache.commons.lang3.StringUtilsTest:testDefaultIfEmpty_StringString
|    org.apache.commons.lang3.StringUtilsTest:testDefaultIfBlank_StringString
|    org.apache.commons.lang3.StringUtilsTest:testDefaultIfEmpty_StringBuilders
|    org.apache.commons.lang3.StringUtilsTest:testDefaultIfBlank_StringBuilders
|    org.apache.commons.lang3.StringUtilsTest:testDefaultIfEmpty_StringBuffers
|    org.apache.commons.lang3.StringUtilsTest:testDefaultIfBlank_StringBuffers
|    org.apache.commons.lang3.StringUtilsTest:testDefaultIfEmpty_CharBuffers
|    org.apache.commons.lang3.StringUtilsTest:testDefaultIfBlank_CharBuffers
|    org.apache.commons.lang3.StringUtilsTest:testAbbreviate_StringInt
|    org.apache.commons.lang3.StringUtilsTest:testAbbreviate_StringIntInt
|    org.apache.commons.lang3.StringUtilsTest:testAbbreviateMiddle
|    org.apache.commons.lang3.StringUtilsTest:testDifference_StringString
|    org.apache.commons.lang3.StringUtilsTest:testDifferenceAt_StringString
|    org.apache.commons.lang3.StringUtilsTest:testGetLevenshteinDistance_StringString
|    org.apache.commons.lang3.StringUtilsTest:testGetLevenshteinDistance_NullString
|    org.apache.commons.lang3.StringUtilsTest:testGetLevenshteinDistance_StringNull
|    org.apache.commons.lang3.StringUtilsTest:testGetLevenshteinDistance_StringStringInt
|    org.apache.commons.lang3.StringUtilsTest:testGetLevenshteinDistance_NullStringInt
|    org.apache.commons.lang3.StringUtilsTest:testGetLevenshteinDistance_StringNullInt
|    org.apache.commons.lang3.StringUtilsTest:testGetLevenshteinDistance_StringStringNegativeInt
|    org.apache.commons.lang3.StringUtilsTest:testGetJaroWinklerDistance_StringString
|    org.apache.commons.lang3.StringUtilsTest:testGetJaroWinklerDistance_NullNull
|    org.apache.commons.lang3.StringUtilsTest:testGetJaroWinklerDistance_StringNull
|    org.apache.commons.lang3.StringUtilsTest:testGetJaroWinklerDistance_NullString
|    org.apache.commons.lang3.StringUtilsTest:testGetFuzzyDistance
|    org.apache.commons.lang3.StringUtilsTest:testGetFuzzyDistance_NullNullNull
|    org.apache.commons.lang3.StringUtilsTest:testGetFuzzyDistance_StringNullLoclae
|    org.apache.commons.lang3.StringUtilsTest:testGetFuzzyDistance_NullStringLocale
|    org.apache.commons.lang3.StringUtilsTest:testGetFuzzyDistance_StringStringNull
|    org.apache.commons.lang3.StringUtilsTest:testEMPTY
|    org.apache.commons.lang3.StringUtilsTest:testIsAllLowerCase
|    org.apache.commons.lang3.StringUtilsTest:testIsAllUpperCase
|    org.apache.commons.lang3.StringUtilsTest:testRemoveStart
|    org.apache.commons.lang3.StringUtilsTest:testRemoveStartIgnoreCase
|    org.apache.commons.lang3.StringUtilsTest:testRemoveEnd
|    org.apache.commons.lang3.StringUtilsTest:testRemoveEndIgnoreCase
|    org.apache.commons.lang3.StringUtilsTest:testRemove_String
|    org.apache.commons.lang3.StringUtilsTest:testRemove_char
|    org.apache.commons.lang3.StringUtilsTest:testDifferenceAt_StringArray
|    org.apache.commons.lang3.StringUtilsTest:testGetCommonPrefix_StringArray
|    org.apache.commons.lang3.StringUtilsTest:testNormalizeSpace
|    org.apache.commons.lang3.StringUtilsTest:testLANG666
|    org.apache.commons.lang3.StringUtilsTest:testStringUtilsCharSequenceContract
|    org.apache.commons.lang3.StringUtilsTest:testToString
|    org.apache.commons.lang3.StringUtilsTest:testEscapeSurrogatePairs
|    org.apache.commons.lang3.StringUtilsTest:testEscapeSurrogatePairsLang858
|    org.apache.commons.lang3.StringUtilsTest:testUnescapeSurrogatePairs
|    org.apache.commons.lang3.StringUtilsTest:testAppendIfMissing
|    org.apache.commons.lang3.StringUtilsTest:testAppendIfMissingIgnoreCase
|    org.apache.commons.lang3.StringUtilsTest:testPrependIfMissing
|    org.apache.commons.lang3.StringUtilsTest:testPrependIfMissingIgnoreCase
|    org.apache.commons.lang3.StringUtilsTest:testToEncodedString
|    org.apache.commons.lang3.StringUtilsTest:testWrap_StringChar
|    org.apache.commons.lang3.StringUtilsTest:testWrap_StringString
|    org.apache.commons.lang3.text.WordUtilsTest:testConstructor
|    org.apache.commons.lang3.text.WordUtilsTest:testWrap_StringInt
|    org.apache.commons.lang3.text.WordUtilsTest:testWrap_StringIntStringBoolean
|    org.apache.commons.lang3.text.WordUtilsTest:testCapitalize_String
|    org.apache.commons.lang3.text.WordUtilsTest:testCapitalizeWithDelimiters_String
|    org.apache.commons.lang3.text.WordUtilsTest:testCapitalizeFully_String
|    org.apache.commons.lang3.text.WordUtilsTest:testCapitalizeFullyWithDelimiters_String
|    org.apache.commons.lang3.text.WordUtilsTest:testUncapitalize_String
|    org.apache.commons.lang3.text.WordUtilsTest:testUncapitalizeWithDelimiters_String
|    org.apache.commons.lang3.text.WordUtilsTest:testInitials_String
|    org.apache.commons.lang3.text.WordUtilsTest:testInitials_String_charArray
|    org.apache.commons.lang3.text.WordUtilsTest:testSwapCase_String
|    org.apache.commons.lang3.LocaleUtilsTest:testConstructor
|    org.apache.commons.lang3.LocaleUtilsTest:testToLocale_1Part
|    org.apache.commons.lang3.LocaleUtilsTest:testToLocale_2Part
|    org.apache.commons.lang3.LocaleUtilsTest:testToLocale_3Part
|    org.apache.commons.lang3.LocaleUtilsTest:testLocaleLookupList_Locale
|    org.apache.commons.lang3.LocaleUtilsTest:testLocaleLookupList_LocaleLocale
|    org.apache.commons.lang3.LocaleUtilsTest:testAvailableLocaleList
|    org.apache.commons.lang3.LocaleUtilsTest:testAvailableLocaleSet
|    org.apache.commons.lang3.LocaleUtilsTest:testIsAvailableLocale
|    org.apache.commons.lang3.LocaleUtilsTest:testThreeCharsLocale
|    org.apache.commons.lang3.LocaleUtilsTest:testLanguagesByCountry
|    org.apache.commons.lang3.LocaleUtilsTest:testCountriesByLanguage
|    org.apache.commons.lang3.LocaleUtilsTest:testLang865
|    org.apache.commons.lang3.time.StopWatchTest:testStopWatchSimple
|    org.apache.commons.lang3.time.StopWatchTest:testStopWatchSimpleGet
|    org.apache.commons.lang3.time.StopWatchTest:testStopWatchSplit
|    org.apache.commons.lang3.time.StopWatchTest:testStopWatchSuspend
|    org.apache.commons.lang3.time.StopWatchTest:testLang315
|    org.apache.commons.lang3.time.StopWatchTest:testBadStates
|    org.apache.commons.lang3.time.StopWatchTest:testGetStartTime
|    org.apache.commons.lang3.time.StopWatchTest:testBooleanStates
|    org.apache.commons.lang3.tuple.ImmutablePairTest:testBasic
|    org.apache.commons.lang3.tuple.ImmutablePairTest:testPairOf
|    org.apache.commons.lang3.tuple.ImmutablePairTest:testEquals
|    org.apache.commons.lang3.tuple.ImmutablePairTest:testHashCode
|    org.apache.commons.lang3.tuple.ImmutablePairTest:testToString
|    org.apache.commons.lang3.tuple.ImmutablePairTest:testSerialization
|    org.apache.commons.lang3.RandomStringUtilsTest:testConstructor
|    org.apache.commons.lang3.RandomStringUtilsTest:testRandomStringUtils
|    org.apache.commons.lang3.RandomStringUtilsTest:testLANG805
|    org.apache.commons.lang3.RandomStringUtilsTest:testLANG807
|    org.apache.commons.lang3.RandomStringUtilsTest:testExceptions
|    org.apache.commons.lang3.RandomStringUtilsTest:testRandomAlphaNumeric
|    org.apache.commons.lang3.RandomStringUtilsTest:testRandomNumeric
|    org.apache.commons.lang3.RandomStringUtilsTest:testRandomAlphabetic
|    org.apache.commons.lang3.RandomStringUtilsTest:testRandomAscii
|    org.apache.commons.lang3.RandomStringUtilsTest:testRandomStringUtilsHomog
|    org.apache.commons.lang3.RandomStringUtilsTest:testLang100
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:test_Equality_Hash
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testParseZone
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testParseLongShort
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testAmPm
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testParses
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testTzParses
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLocales_Long_AD
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLocales_Long_BC
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLocales_Short_AD
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLocales_Short_BC
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLocales_LongNoEra_AD
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLocales_LongNoEra_BC
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLocales_ShortNoEra_AD
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLocales_ShortNoEra_BC
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testParseNumerics
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testQuotes
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testSpecialCharacters
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLANG_832
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLANG_831
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testShortDateStyleWithLocales
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLowYearPadding
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testMilleniumBug
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLang303
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLang538
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testEquals
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testToStringContainsName
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testPatternMatches
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLocaleMatches
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testTimeZoneMatches
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testLang996
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:test1806Argument
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testConstructor
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testInvokeMethod
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testInvokeExactMethod
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testInvokeStaticMethod
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testInvokeExactStaticMethod
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetAccessibleInterfaceMethod
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetAccessibleMethodPrivateInterface
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetAccessibleInterfaceMethodFromDescription
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetAccessiblePublicMethod
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetAccessiblePublicMethodFromDescription
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetAccessibleMethodInaccessible
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetMatchingAccessibleMethod
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testNullArgument
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetOverrideHierarchyIncludingInterfaces
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetOverrideHierarchyExcludingInterfaces
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetMethodsWithAnnotation
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetMethodsWithAnnotationIllegalArgumentException1
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetMethodsWithAnnotationIllegalArgumentException2
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetMethodsWithAnnotationIllegalArgumentException3
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetMethodsListWithAnnotation
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetMethodsListWithAnnotationIllegalArgumentException1
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetMethodsListWithAnnotationIllegalArgumentException2
|    org.apache.commons.lang3.reflect.MethodUtilsTest:testGetMethodsListWithAnnotationIllegalArgumentException3
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testAddInitializerNullName
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testAddInitializerNullInit
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testInitializeNoChildren
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testInitializeTempExec
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testInitializeExternalExec
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testInitializeChildWithExecutor
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testAddInitializerAfterStart
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testResultGetInitializerUnknown
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testResultGetResultObjectUnknown
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testResultGetExceptionUnknown
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testResultIsExceptionUnknown
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testResultInitializerNamesModify
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testInitializeRuntimeEx
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testInitializeEx
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testInitializeResultsIsSuccessfulTrue
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testInitializeResultsIsSuccessfulFalse
|    org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest:testInitializeNested
|    org.apache.commons.lang3.CharRangeTest:testClass
|    org.apache.commons.lang3.CharRangeTest:testConstructorAccessors_is
|    org.apache.commons.lang3.CharRangeTest:testConstructorAccessors_isNot
|    org.apache.commons.lang3.CharRangeTest:testConstructorAccessors_isIn_Same
|    org.apache.commons.lang3.CharRangeTest:testConstructorAccessors_isIn_Normal
|    org.apache.commons.lang3.CharRangeTest:testConstructorAccessors_isIn_Reversed
|    org.apache.commons.lang3.CharRangeTest:testConstructorAccessors_isNotIn_Same
|    org.apache.commons.lang3.CharRangeTest:testConstructorAccessors_isNotIn_Normal
|    org.apache.commons.lang3.CharRangeTest:testConstructorAccessors_isNotIn_Reversed
|    org.apache.commons.lang3.CharRangeTest:testEquals_Object
|    org.apache.commons.lang3.CharRangeTest:testHashCode
|    org.apache.commons.lang3.CharRangeTest:testContains_Char
|    org.apache.commons.lang3.CharRangeTest:testContains_Charrange
|    org.apache.commons.lang3.CharRangeTest:testContainsNullArg
|    org.apache.commons.lang3.CharRangeTest:testIterator
|    org.apache.commons.lang3.CharRangeTest:testSerialization
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testConstructorEx1
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testConstructorEx2
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testConstructorEx3
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testGetSetDefault
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testSetDefaultEx
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testBlank
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionInteger
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionCharacter
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionBoolean
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionObjectArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionLongArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionIntArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionShortArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionyteArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionCharArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionDoubleArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionFloatArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionBooleanArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionFloatArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionLongArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionIntArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionhortArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionByteArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionCharArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionDoubleArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionBooleanArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionHierarchy
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testInnerClassReflection
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionArrayCycle
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionArrayCycleLevel2
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionArrayArrayCycle
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testSimpleReflectionObjectCycle
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testSelfInstanceVarReflectionObjectCycle
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testSelfInstanceTwoVarsReflectionObjectCycle
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionObjectCycle
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionArrayAndObjectCycle
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testAppendSuper
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testAppendToString
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testObject
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testObjectBuild
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testLong
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testInt
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testShort
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testChar
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testByte
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testDouble
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testFloat
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testBoolean
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testObjectArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testLongArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testIntArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testShortArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testByteArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testCharArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testDoubleArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testFloatArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testBooleanArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testLongArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testIntArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testShortArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testByteArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testCharArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testDoubleArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testFloatArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testBooleanArrayArray
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testObjectCycle
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testSimpleReflectionStatics
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionStatics
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testInheritedReflectionStatics
|    org.apache.commons.lang3.builder.ToStringBuilderTest:test_setUpToClass_valid
|    org.apache.commons.lang3.builder.ToStringBuilderTest:test_setUpToClass_invalid
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testReflectionNull
|    org.apache.commons.lang3.builder.ToStringBuilderTest:testAppendToStringUsingMultiLineStyle
|    org.apache.commons.lang3.text.translate.LookupTranslatorTest:testBasicLookup
|    org.apache.commons.lang3.text.translate.LookupTranslatorTest:testLang882
|    org.apache.commons.lang3.builder.StandardToStringStyleTest:testBlank
|    org.apache.commons.lang3.builder.StandardToStringStyleTest:testAppendSuper
|    org.apache.commons.lang3.builder.StandardToStringStyleTest:testObject
|    org.apache.commons.lang3.builder.StandardToStringStyleTest:testPerson
|    org.apache.commons.lang3.builder.StandardToStringStyleTest:testLong
|    org.apache.commons.lang3.builder.StandardToStringStyleTest:testObjectArray
|    org.apache.commons.lang3.builder.StandardToStringStyleTest:testLongArray
|    org.apache.commons.lang3.builder.StandardToStringStyleTest:testLongArrayArray
|    org.apache.commons.lang3.text.translate.OctalUnescaperTest:testBetween
|    org.apache.commons.lang3.mutable.MutableLongTest:testConstructors
|    org.apache.commons.lang3.mutable.MutableLongTest:testConstructorNull
|    org.apache.commons.lang3.mutable.MutableLongTest:testGetSet
|    org.apache.commons.lang3.mutable.MutableLongTest:testEquals
|    org.apache.commons.lang3.mutable.MutableLongTest:testHashCode
|    org.apache.commons.lang3.mutable.MutableLongTest:testCompareTo
|    org.apache.commons.lang3.mutable.MutableLongTest:testCompareToNull
|    org.apache.commons.lang3.mutable.MutableLongTest:testPrimitiveValues
|    org.apache.commons.lang3.mutable.MutableLongTest:testToLong
|    org.apache.commons.lang3.mutable.MutableLongTest:testIncrement
|    org.apache.commons.lang3.mutable.MutableLongTest:testDecrement
|    org.apache.commons.lang3.mutable.MutableLongTest:testAddValuePrimitive
|    org.apache.commons.lang3.mutable.MutableLongTest:testAddValueObject
|    org.apache.commons.lang3.mutable.MutableLongTest:testSubtractValuePrimitive
|    org.apache.commons.lang3.mutable.MutableLongTest:testSubtractValueObject
|    org.apache.commons.lang3.mutable.MutableLongTest:testToString
|    org.apache.commons.lang3.builder.DefaultToStringStyleTest:testBlank
|    org.apache.commons.lang3.builder.DefaultToStringStyleTest:testAppendSuper
|    org.apache.commons.lang3.builder.DefaultToStringStyleTest:testObject
|    org.apache.commons.lang3.builder.DefaultToStringStyleTest:testPerson
|    org.apache.commons.lang3.builder.DefaultToStringStyleTest:testLong
|    org.apache.commons.lang3.builder.DefaultToStringStyleTest:testObjectArray
|    org.apache.commons.lang3.builder.DefaultToStringStyleTest:testLongArray
|    org.apache.commons.lang3.builder.DefaultToStringStyleTest:testLongArrayArray
|    org.apache.commons.lang3.text.FormattableUtilsTest:testDefaultAppend
|    org.apache.commons.lang3.text.FormattableUtilsTest:testAlternatePadCharacter
|    org.apache.commons.lang3.text.FormattableUtilsTest:testEllipsis
|    org.apache.commons.lang3.text.FormattableUtilsTest:testIllegalEllipsis
|    org.apache.commons.lang3.text.FormattableUtilsTest:testAlternatePadCharAndEllipsis
|    org.apache.commons.lang3.tuple.MutableTripleTest:testBasic
|    org.apache.commons.lang3.tuple.MutableTripleTest:testDefault
|    org.apache.commons.lang3.tuple.MutableTripleTest:testMutate
|    org.apache.commons.lang3.tuple.MutableTripleTest:testTripleOf
|    org.apache.commons.lang3.tuple.MutableTripleTest:testEquals
|    org.apache.commons.lang3.tuple.MutableTripleTest:testHashCode
|    org.apache.commons.lang3.tuple.MutableTripleTest:testToString
|    org.apache.commons.lang3.CharSequenceUtilsTest:testConstructor
|    org.apache.commons.lang3.CharSequenceUtilsTest:testSubSequence
|    org.apache.commons.lang3.builder.NoClassNameToStringStyleTest:testBlank
|    org.apache.commons.lang3.builder.NoClassNameToStringStyleTest:testAppendSuper
|    org.apache.commons.lang3.builder.NoClassNameToStringStyleTest:testObject
|    org.apache.commons.lang3.builder.NoClassNameToStringStyleTest:testPerson
|    org.apache.commons.lang3.builder.NoClassNameToStringStyleTest:testLong
|    org.apache.commons.lang3.builder.NoClassNameToStringStyleTest:testObjectArray
|    org.apache.commons.lang3.builder.NoClassNameToStringStyleTest:testLongArray
|    org.apache.commons.lang3.builder.NoClassNameToStringStyleTest:testLongArrayArray
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testRoundYear
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testRoundMonth
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testRoundDate
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testRoundDayOfMonth
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testRoundAmPm
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testRoundHourOfDay
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testRoundHour
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testRoundMinute
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testRoundSecond
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testRoundMilliSecond
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testTruncateYear
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testTruncateMonth
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testTruncateDate
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testTruncateDayOfMonth
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testTruncateHour
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testTruncateHourOfDay
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testTruncateMinute
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testTruncateSecond
|    org.apache.commons.lang3.ClassUtilsTest:testConstructor
|    org.apache.commons.lang3.ClassUtilsTest:test_getShortClassName_Object
|    org.apache.commons.lang3.ClassUtilsTest:test_getShortClassName_Class
|    org.apache.commons.lang3.ClassUtilsTest:test_getShortClassName_String
|    org.apache.commons.lang3.ClassUtilsTest:test_getSimpleName_Class
|    org.apache.commons.lang3.ClassUtilsTest:test_getSimpleName_Object
|    org.apache.commons.lang3.ClassUtilsTest:test_getPackageName_Object
|    org.apache.commons.lang3.ClassUtilsTest:test_getPackageName_Class
|    org.apache.commons.lang3.ClassUtilsTest:test_getPackageName_String
|    org.apache.commons.lang3.ClassUtilsTest:test_getAbbreviatedName_Class
|    org.apache.commons.lang3.ClassUtilsTest:test_getAbbreviatedName_Class_ZeroLen
|    org.apache.commons.lang3.ClassUtilsTest:test_getAbbreviatedName_Class_NegativeLen
|    org.apache.commons.lang3.ClassUtilsTest:test_getAbbreviatedName_String
|    org.apache.commons.lang3.ClassUtilsTest:test_getAllSuperclasses_Class
|    org.apache.commons.lang3.ClassUtilsTest:test_getAllInterfaces_Class
|    org.apache.commons.lang3.ClassUtilsTest:test_convertClassNamesToClasses_List
|    org.apache.commons.lang3.ClassUtilsTest:test_convertClassesToClassNames_List
|    org.apache.commons.lang3.ClassUtilsTest:test_isInnerClass_Class
|    org.apache.commons.lang3.ClassUtilsTest:test_isAssignable_ClassArray_ClassArray
|    org.apache.commons.lang3.ClassUtilsTest:test_isAssignable_ClassArray_ClassArray_Autoboxing
|    org.apache.commons.lang3.ClassUtilsTest:test_isAssignable_ClassArray_ClassArray_NoAutoboxing
|    org.apache.commons.lang3.ClassUtilsTest:test_isAssignable
|    org.apache.commons.lang3.ClassUtilsTest:test_isAssignable_Autoboxing
|    org.apache.commons.lang3.ClassUtilsTest:test_isAssignable_NoAutoboxing
|    org.apache.commons.lang3.ClassUtilsTest:test_isAssignable_Widening
|    org.apache.commons.lang3.ClassUtilsTest:test_isAssignable_DefaultUnboxing_Widening
|    org.apache.commons.lang3.ClassUtilsTest:test_isAssignable_Unboxing_Widening
|    org.apache.commons.lang3.ClassUtilsTest:testIsPrimitiveOrWrapper
|    org.apache.commons.lang3.ClassUtilsTest:testIsPrimitiveWrapper
|    org.apache.commons.lang3.ClassUtilsTest:testPrimitiveToWrapper
|    org.apache.commons.lang3.ClassUtilsTest:testPrimitivesToWrappers
|    org.apache.commons.lang3.ClassUtilsTest:testWrapperToPrimitive
|    org.apache.commons.lang3.ClassUtilsTest:testWrapperToPrimitiveNoWrapper
|    org.apache.commons.lang3.ClassUtilsTest:testWrapperToPrimitiveNull
|    org.apache.commons.lang3.ClassUtilsTest:testWrappersToPrimitives
|    org.apache.commons.lang3.ClassUtilsTest:testWrappersToPrimitivesNull
|    org.apache.commons.lang3.ClassUtilsTest:testWrappersToPrimitivesEmpty
|    org.apache.commons.lang3.ClassUtilsTest:testGetClassClassNotFound
|    org.apache.commons.lang3.ClassUtilsTest:testGetClassInvalidArguments
|    org.apache.commons.lang3.ClassUtilsTest:testWithInterleavingWhitespace
|    org.apache.commons.lang3.ClassUtilsTest:testGetInnerClass
|    org.apache.commons.lang3.ClassUtilsTest:testGetClassByNormalNameArrays
|    org.apache.commons.lang3.ClassUtilsTest:testGetClassByNormalNameArrays2D
|    org.apache.commons.lang3.ClassUtilsTest:testGetClassWithArrayClasses2D
|    org.apache.commons.lang3.ClassUtilsTest:testGetClassWithArrayClasses
|    org.apache.commons.lang3.ClassUtilsTest:testGetClassRawPrimitives
|    org.apache.commons.lang3.ClassUtilsTest:testShowJavaBug
|    org.apache.commons.lang3.ClassUtilsTest:testGetPublicMethod
|    org.apache.commons.lang3.ClassUtilsTest:test_getShortCanonicalName_Object
|    org.apache.commons.lang3.ClassUtilsTest:test_getShortCanonicalName_Class
|    org.apache.commons.lang3.ClassUtilsTest:test_getPackageCanonicalName_Object
|    org.apache.commons.lang3.ClassUtilsTest:test_getPackageCanonicalName_Class
|    org.apache.commons.lang3.ClassUtilsTest:test_getPackageCanonicalName_String
|    org.apache.commons.lang3.ClassUtilsTest:testHierarchyIncludingInterfaces
|    org.apache.commons.lang3.ClassUtilsTest:testHierarchyExcludingInterfaces
|    org.apache.commons.lang3.builder.ToStringStyleTest:testSetArrayStart
|    org.apache.commons.lang3.builder.ToStringStyleTest:testSetArrayEnd
|    org.apache.commons.lang3.builder.ToStringStyleTest:testSetArraySeparator
|    org.apache.commons.lang3.builder.ToStringStyleTest:testSetContentStart
|    org.apache.commons.lang3.builder.ToStringStyleTest:testSetContentEnd
|    org.apache.commons.lang3.builder.ToStringStyleTest:testSetFieldNameValueSeparator
|    org.apache.commons.lang3.builder.ToStringStyleTest:testSetFieldSeparator
|    org.apache.commons.lang3.builder.ToStringStyleTest:testSetNullText
|    org.apache.commons.lang3.builder.ToStringStyleTest:testSetSizeStartText
|    org.apache.commons.lang3.builder.ToStringStyleTest:testSetSizeEndText
|    org.apache.commons.lang3.builder.ToStringStyleTest:testSetSummaryObjectStartText
|    org.apache.commons.lang3.builder.ToStringStyleTest:testSetSummaryObjectEndText
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceSimple
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceSolo
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceNoVariables
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceNull
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceEmpty
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceChangedMap
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceUnknownKey
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceAdjacentAtStart
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceAdjacentAtEnd
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceRecursive
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceEscaping
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceSoloEscaping
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceComplexEscaping
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceNoPrefixNoSuffix
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceIncompletePrefix
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplacePrefixNoSuffix
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceNoPrefixSuffix
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceEmptyKeys
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceToIdentical
|    org.apache.commons.lang3.text.StrSubstitutorTest:testCyclicReplacement
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceWeirdPattens
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplacePartialString_noReplace
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceInVariable
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceInVariableDisabled
|    org.apache.commons.lang3.text.StrSubstitutorTest:testReplaceInVariableRecursive
|    org.apache.commons.lang3.text.StrSubstitutorTest:testDefaultValueDelimiters
|    org.apache.commons.lang3.text.StrSubstitutorTest:testResolveVariable
|    org.apache.commons.lang3.text.StrSubstitutorTest:testConstructorNoArgs
|    org.apache.commons.lang3.text.StrSubstitutorTest:testConstructorMapPrefixSuffix
|    org.apache.commons.lang3.text.StrSubstitutorTest:testConstructorMapFull
|    org.apache.commons.lang3.text.StrSubstitutorTest:testGetSetEscape
|    org.apache.commons.lang3.text.StrSubstitutorTest:testGetSetPrefix
|    org.apache.commons.lang3.text.StrSubstitutorTest:testGetSetSuffix
|    org.apache.commons.lang3.text.StrSubstitutorTest:testGetSetValueDelimiter
|    org.apache.commons.lang3.text.StrSubstitutorTest:testStaticReplace
|    org.apache.commons.lang3.text.StrSubstitutorTest:testStaticReplacePrefixSuffix
|    org.apache.commons.lang3.text.StrSubstitutorTest:testStaticReplaceSystemProperties
|    org.apache.commons.lang3.text.StrSubstitutorTest:testLANG1055
|    org.apache.commons.lang3.text.StrSubstitutorTest:testSubstituteDefaultProperties
|    org.apache.commons.lang3.text.StrSubstitutorTest:testSamePrefixAndSuffix
|    org.apache.commons.lang3.builder.SimpleToStringStyleTest:testBlank
|    org.apache.commons.lang3.builder.SimpleToStringStyleTest:testAppendSuper
|    org.apache.commons.lang3.builder.SimpleToStringStyleTest:testObject
|    org.apache.commons.lang3.builder.SimpleToStringStyleTest:testPerson
|    org.apache.commons.lang3.builder.SimpleToStringStyleTest:testLong
|    org.apache.commons.lang3.builder.SimpleToStringStyleTest:testObjectArray
|    org.apache.commons.lang3.builder.SimpleToStringStyleTest:testLongArray
|    org.apache.commons.lang3.builder.SimpleToStringStyleTest:testLongArrayArray
|    org.apache.commons.lang3.time.DateFormatUtilsTest:testConstructor
|    org.apache.commons.lang3.time.DateFormatUtilsTest:testFormat
|    org.apache.commons.lang3.time.DateFormatUtilsTest:testFormatUTC
|    org.apache.commons.lang3.time.DateFormatUtilsTest:testDateTimeISO
|    org.apache.commons.lang3.time.DateFormatUtilsTest:testDateISO
|    org.apache.commons.lang3.time.DateFormatUtilsTest:testTimeISO
|    org.apache.commons.lang3.time.DateFormatUtilsTest:testTimeNoTISO
|    org.apache.commons.lang3.time.DateFormatUtilsTest:testLANG1000
|    org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemoverTest:testValidCharacters
|    org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemoverTest:testInvalidCharacters
|    org.apache.commons.lang3.text.StrLookupTest:testNoneLookup
|    org.apache.commons.lang3.text.StrLookupTest:testSystemProperiesLookup
|    org.apache.commons.lang3.text.StrLookupTest:testSystemPropertiesLookupNotSingleton
|    org.apache.commons.lang3.text.StrLookupTest:testMapLookup
|    org.apache.commons.lang3.text.StrLookupTest:testMapLookup_nullMap
|    org.apache.commons.lang3.text.StrTokenizerTest:test1
|    org.apache.commons.lang3.text.StrTokenizerTest:test2
|    org.apache.commons.lang3.text.StrTokenizerTest:test3
|    org.apache.commons.lang3.text.StrTokenizerTest:test4
|    org.apache.commons.lang3.text.StrTokenizerTest:test5
|    org.apache.commons.lang3.text.StrTokenizerTest:test7
|    org.apache.commons.lang3.text.StrTokenizerTest:test8
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasic1
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasic2
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasic3
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasic4
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasic5
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicDelim1
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicDelim2
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicEmpty1
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicEmpty2
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicQuoted1
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicQuoted2
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicQuoted3
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicQuoted4
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicQuoted5
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicQuoted6
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicQuoted7
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicQuotedTrimmed1
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicTrimmed1
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicTrimmed2
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicIgnoreTrimmed1
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicIgnoreTrimmed2
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicIgnoreTrimmed3
|    org.apache.commons.lang3.text.StrTokenizerTest:testBasicIgnoreTrimmed4
|    org.apache.commons.lang3.text.StrTokenizerTest:testListArray
|    org.apache.commons.lang3.text.StrTokenizerTest:testCSVEmpty
|    org.apache.commons.lang3.text.StrTokenizerTest:testCSVSimple
|    org.apache.commons.lang3.text.StrTokenizerTest:testCSVSimpleNeedsTrim
|    org.apache.commons.lang3.text.StrTokenizerTest:testGetContent
|    org.apache.commons.lang3.text.StrTokenizerTest:testChaining
|    org.apache.commons.lang3.text.StrTokenizerTest:testCloneNotSupportedException
|    org.apache.commons.lang3.text.StrTokenizerTest:testCloneNull
|    org.apache.commons.lang3.text.StrTokenizerTest:testCloneReset
|    org.apache.commons.lang3.text.StrTokenizerTest:testConstructor_String
|    org.apache.commons.lang3.text.StrTokenizerTest:testConstructor_String_char
|    org.apache.commons.lang3.text.StrTokenizerTest:testConstructor_String_char_char
|    org.apache.commons.lang3.text.StrTokenizerTest:testConstructor_charArray
|    org.apache.commons.lang3.text.StrTokenizerTest:testConstructor_charArray_char
|    org.apache.commons.lang3.text.StrTokenizerTest:testConstructor_charArray_char_char
|    org.apache.commons.lang3.text.StrTokenizerTest:testReset
|    org.apache.commons.lang3.text.StrTokenizerTest:testReset_String
|    org.apache.commons.lang3.text.StrTokenizerTest:testReset_charArray
|    org.apache.commons.lang3.text.StrTokenizerTest:testTSV
|    org.apache.commons.lang3.text.StrTokenizerTest:testTSVEmpty
|    org.apache.commons.lang3.text.StrTokenizerTest:testIteration
|    org.apache.commons.lang3.text.StrTokenizerTest:testTokenizeSubclassInputChange
|    org.apache.commons.lang3.text.StrTokenizerTest:testTokenizeSubclassOutputChange
|    org.apache.commons.lang3.text.StrTokenizerTest:testToString
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testNullDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testNullCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testInvalidFragmentWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testInvalidFragmentWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondFragmentInLargerUnitWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondFragmentInLargerUnitWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testSecondFragmentInLargerUnitWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMinuteFragmentInLargerUnitWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMinuteFragmentInLargerUnitWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testHourOfDayFragmentInLargerUnitWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testHourOfDayFragmentInLargerUnitWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testDayOfYearFragmentInLargerUnitWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testDayOfYearFragmentInLargerUnitWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testDateFragmentInLargerUnitWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testDateFragmentInLargerUnitWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondsOfSecondWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondsOfSecondWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondsOfMinuteWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testSecondsofMinuteWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testSecondsofMinuteWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondsOfHourWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondsOfHourWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testSecondsofHourWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testSecondsofHourWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMinutesOfHourWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMinutesOfHourWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondsOfDayWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondsOfDayWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testSecondsOfDayWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testSecondsOfDayWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMinutesOfDayWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testHoursOfDayWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testHoursOfDayWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondsOfMonthWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testSecondsOfMonthWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMinutesOfMonthWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMinutesOfMonthWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testHoursOfMonthWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testHoursOfMonthWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondsOfYearWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondsOfYearWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testSecondsOfYearWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testSecondsOfYearWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMinutesOfYearWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMinutesOfYearWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMinutesOfYearWithWrongOffsetBugWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testHoursOfYearWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testHoursOfYearWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testDaysOfMonthWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testDaysOfMonthWithDate
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testDaysOfYearWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testDaysOfYearWithDate
|    org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest:testBlank
|    org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest:testAppendSuper
|    org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest:testObject
|    org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest:testPerson
|    org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest:testLong
|    org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest:testObjectArray
|    org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest:testLongArray
|    org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest:testLongArrayArray
|    org.apache.commons.lang3.concurrent.ConstantInitializerTest:testGetObject
|    org.apache.commons.lang3.concurrent.ConstantInitializerTest:testGet
|    org.apache.commons.lang3.concurrent.ConstantInitializerTest:testEqualsTrue
|    org.apache.commons.lang3.concurrent.ConstantInitializerTest:testEqualsFalse
|    org.apache.commons.lang3.concurrent.ConstantInitializerTest:testEqualsWithOtherObjects
|    org.apache.commons.lang3.concurrent.ConstantInitializerTest:testToString
|    org.apache.commons.lang3.concurrent.ConstantInitializerTest:testToStringNull
|    org.apache.commons.lang3.builder.RecursiveToStringStyleTest:testBlank
|    org.apache.commons.lang3.builder.RecursiveToStringStyleTest:testAppendSuper
|    org.apache.commons.lang3.builder.RecursiveToStringStyleTest:testObject
|    org.apache.commons.lang3.builder.RecursiveToStringStyleTest:testPerson
|    org.apache.commons.lang3.builder.RecursiveToStringStyleTest:testLong
|    org.apache.commons.lang3.builder.RecursiveToStringStyleTest:testObjectArray
|    org.apache.commons.lang3.builder.RecursiveToStringStyleTest:testLongArray
|    org.apache.commons.lang3.builder.RecursiveToStringStyleTest:testLongArrayArray
|    org.apache.commons.lang3.RandomUtilsTest:testNextBytesNegative
|    org.apache.commons.lang3.RandomUtilsTest:testNextIntNegative
|    org.apache.commons.lang3.RandomUtilsTest:testNextLongNegative
|    org.apache.commons.lang3.RandomUtilsTest:testNextDoubleNegative
|    org.apache.commons.lang3.RandomUtilsTest:testNextFloatNegative
|    org.apache.commons.lang3.RandomUtilsTest:testNextLongLowerGreaterUpper
|    org.apache.commons.lang3.RandomUtilsTest:testNextDoubleLowerGreaterUpper
|    org.apache.commons.lang3.RandomUtilsTest:testZeroLengthNextBytes
|    org.apache.commons.lang3.RandomUtilsTest:testNextBytes
|    org.apache.commons.lang3.RandomUtilsTest:testNextIntMinimalRange
|    org.apache.commons.lang3.RandomUtilsTest:testNextInt
|    org.apache.commons.lang3.RandomUtilsTest:testNextDoubleMinimalRange
|    org.apache.commons.lang3.RandomUtilsTest:testNextFloatMinimalRange
|    org.apache.commons.lang3.RandomUtilsTest:testNextDouble
|    org.apache.commons.lang3.RandomUtilsTest:testNextFloat
|    org.apache.commons.lang3.RandomUtilsTest:testNextLongMinimalRange
|    org.apache.commons.lang3.RandomUtilsTest:testNextLong
|    org.apache.commons.lang3.RandomUtilsTest:testExtremeRangeInt
|    org.apache.commons.lang3.RandomUtilsTest:testExtremeRangeLong
|    org.apache.commons.lang3.RandomUtilsTest:testExtremeRangeFloat
|    org.apache.commons.lang3.RandomUtilsTest:testExtremeRangeDouble
|    org.apache.commons.lang3.ArrayUtilsTest:testConstructor
|    org.apache.commons.lang3.ArrayUtilsTest:testToString
|    org.apache.commons.lang3.ArrayUtilsTest:testHashCode
|    org.apache.commons.lang3.ArrayUtilsTest:testIsEquals
|    org.apache.commons.lang3.ArrayUtilsTest:testArrayCreation
|    org.apache.commons.lang3.ArrayUtilsTest:testArrayCreationWithGeneralReturnType
|    org.apache.commons.lang3.ArrayUtilsTest:testArrayCreationWithDifferentTypes
|    org.apache.commons.lang3.ArrayUtilsTest:testIndirectArrayCreation
|    org.apache.commons.lang3.ArrayUtilsTest:testEmptyArrayCreation
|    org.apache.commons.lang3.ArrayUtilsTest:testIndirectEmptyArrayCreation
|    org.apache.commons.lang3.ArrayUtilsTest:testToMap
|    org.apache.commons.lang3.ArrayUtilsTest:testClone
|    org.apache.commons.lang3.ArrayUtilsTest:testCloneBoolean
|    org.apache.commons.lang3.ArrayUtilsTest:testCloneLong
|    org.apache.commons.lang3.ArrayUtilsTest:testCloneInt
|    org.apache.commons.lang3.ArrayUtilsTest:testCloneShort
|    org.apache.commons.lang3.ArrayUtilsTest:testCloneChar
|    org.apache.commons.lang3.ArrayUtilsTest:testCloneByte
|    org.apache.commons.lang3.ArrayUtilsTest:testCloneDouble
|    org.apache.commons.lang3.ArrayUtilsTest:testCloneFloat
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyBooleanNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyBooleanEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyBoolean
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyLongNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyLongEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyLong
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyIntNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyIntEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyInt
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyShortEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyShort
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyCharNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyCharEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyChar
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyByteNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyByteEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyByte
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyDoubleNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyDoubleEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyDouble
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyFloatNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyFloatEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyFloat
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyObjectNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyObjectEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyObject
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyClassNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyClassEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyClass
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyStringNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyStringEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyString
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyBooleanObjectNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyBooleanObjectEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyLongObjectNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyLongObjectEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyLongObject
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyIntObjectNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyIntObjectEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyIntObject
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyShortObjectNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyShortObjectEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyShortObject
|    org.apache.commons.lang3.ArrayUtilsTest:testNUllToEmptyCharObjectNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyCharObjectEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyCharObject
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyByteObjectEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyByteObject
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyDoubleObjectNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyDoubleObjectEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyDoubleObject
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyFloatObjectNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyFloatObjectEmptyArray
|    org.apache.commons.lang3.ArrayUtilsTest:testSubarrayObject
|    org.apache.commons.lang3.ArrayUtilsTest:testSubarrayLong
|    org.apache.commons.lang3.ArrayUtilsTest:testSubarrayShort
|    org.apache.commons.lang3.ArrayUtilsTest:testSubarrChar
|    org.apache.commons.lang3.ArrayUtilsTest:testSubarrayByte
|    org.apache.commons.lang3.ArrayUtilsTest:testSubarrayDouble
|    org.apache.commons.lang3.ArrayUtilsTest:testSubarrayFloat
|    org.apache.commons.lang3.ArrayUtilsTest:testSubarrayBoolean
|    org.apache.commons.lang3.ArrayUtilsTest:testSameLengthBoolean
|    org.apache.commons.lang3.ArrayUtilsTest:testSameLengthLong
|    org.apache.commons.lang3.ArrayUtilsTest:testSameLengthInt
|    org.apache.commons.lang3.ArrayUtilsTest:testSameLengthShort
|    org.apache.commons.lang3.ArrayUtilsTest:testSameLengthChar
|    org.apache.commons.lang3.ArrayUtilsTest:testSameLengthByte
|    org.apache.commons.lang3.ArrayUtilsTest:testSameLengthDouble
|    org.apache.commons.lang3.ArrayUtilsTest:testSameLengthFloat
|    org.apache.commons.lang3.ArrayUtilsTest:testReverse
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseLong
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseInt
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseShort
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseByte
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseDouble
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseFloat
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseBoolean
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseBooleanRange
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseByteRange
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseCharRange
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseDoubleRange
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseFloatRange
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseIntRange
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseLongRange
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseShortRange
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseObjectRange
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOf
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOf
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testContains
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfLong
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfLongWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfLong
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfLongWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testContainsLong
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfInt
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfIntWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfInt
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfIntWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testContainsInt
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfShort
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfShortWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfChar
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfCharWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfChar
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfCharWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testContainsChar
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfByte
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfByteWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfByte
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfByteWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testContainsByte
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfDouble
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfDoubleTolerance
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfDoubleWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfDoubleWithStartIndexTolerance
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfDoubleTolerance
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfDoubleWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfDoubleWithStartIndexTolerance
|    org.apache.commons.lang3.ArrayUtilsTest:testContainsDouble
|    org.apache.commons.lang3.ArrayUtilsTest:testContainsDoubleTolerance
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfFloat
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfFloatWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfFloat
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfFloatWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testContainsFloat
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfBoolean
|    org.apache.commons.lang3.ArrayUtilsTest:testIndexOfBooleanWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfBoolean
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfBooleanWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testContainsBoolean
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_boolean
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_boolean_boolean
|    org.apache.commons.lang3.ArrayUtilsTest:testToObject_boolean
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_char
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_char_char
|    org.apache.commons.lang3.ArrayUtilsTest:testToObject_char
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_byte
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_byte_byte
|    org.apache.commons.lang3.ArrayUtilsTest:testToObject_byte
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_short
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_short_short
|    org.apache.commons.lang3.ArrayUtilsTest:testToObject_short
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_int
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_int_int
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_intNull
|    org.apache.commons.lang3.ArrayUtilsTest:testToObject_int
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_long
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_long_long
|    org.apache.commons.lang3.ArrayUtilsTest:testToObject_long
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_float
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_float_float
|    org.apache.commons.lang3.ArrayUtilsTest:testToObject_float
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_double
|    org.apache.commons.lang3.ArrayUtilsTest:testToPrimitive_double_double
|    org.apache.commons.lang3.ArrayUtilsTest:testToObject_double
|    org.apache.commons.lang3.ArrayUtilsTest:testIsEmptyPrimitives
|    org.apache.commons.lang3.ArrayUtilsTest:testIsNotEmptyPrimitives
|    org.apache.commons.lang3.ArrayUtilsTest:testIsSorted
|    org.apache.commons.lang3.ArrayUtilsTest:testIsSortedComparator
|    org.apache.commons.lang3.ArrayUtilsTest:testIsSortedNullComparator
|    org.apache.commons.lang3.ArrayUtilsTest:testIsSortedInt
|    org.apache.commons.lang3.ArrayUtilsTest:testIsSortedFloat
|    org.apache.commons.lang3.ArrayUtilsTest:testIsSortedLong
|    org.apache.commons.lang3.ArrayUtilsTest:testIsSortedDouble
|    org.apache.commons.lang3.ArrayUtilsTest:testIsSortedChar
|    org.apache.commons.lang3.ArrayUtilsTest:testIsSortedByte
|    org.apache.commons.lang3.ArrayUtilsTest:testIsSortedShort
|    org.apache.commons.lang3.ArrayUtilsTest:testIsSortedBool
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testInit
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testInitInvalidPeriod
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testInitDefaultService
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testStartTimer
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testShutdownOwnExecutor
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testShutdownSharedExecutorNoTask
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testShutdownSharedExecutorTask
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testShutdownMultipleTimes
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testAcquireLimit
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testAcquireMultipleThreads
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testAcquireNoLimit
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testPassAfterShutdown
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testAcquireMultiplePeriods
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testGetAverageCallsPerPeriod
|    org.apache.commons.lang3.reflect.TypeLiteralTest:testBasic
|    org.apache.commons.lang3.reflect.TypeLiteralTest:testTyped
|    org.apache.commons.lang3.reflect.TypeLiteralTest:testEquals
|    org.apache.commons.lang3.reflect.TypeLiteralTest:testRaw
|    org.apache.commons.lang3.reflect.ConstructorUtilsTest:testConstructor
|    org.apache.commons.lang3.reflect.ConstructorUtilsTest:testInvokeConstructor
|    org.apache.commons.lang3.reflect.ConstructorUtilsTest:testGetAccessibleConstructor
|    org.apache.commons.lang3.reflect.ConstructorUtilsTest:testGetAccessibleConstructorFromDescription
|    org.apache.commons.lang3.reflect.ConstructorUtilsTest:testGetMatchingAccessibleMethod
|    org.apache.commons.lang3.reflect.ConstructorUtilsTest:testNullArgument
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testBuildDefaults
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testBuildNamingPatternNull
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testBuildWrappedFactoryNull
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testBuildUncaughtExceptionHandlerNull
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testBuilderResetAfterBuild
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testNewThreadNamingPattern
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testNewThreadNoNamingPattern
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testNewThreadDaemonTrue
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testNewThreadDaemonFalse
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testNewThreadNoDaemonFlag
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testNewThreadPriority
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testNewThreadNoPriority
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testNewThreadExHandler
|    org.apache.commons.lang3.text.translate.UnicodeEscaperTest:testBelow
|    org.apache.commons.lang3.text.translate.UnicodeEscaperTest:testBetween
|    org.apache.commons.lang3.text.translate.UnicodeEscaperTest:testAbove
|    org.apache.commons.lang3.NotImplementedExceptionTest:testConstructors
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testReflectionCompare
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testReflectionCompareEx1
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testReflectionCompareEx2
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testReflectionHierarchyCompare
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testReflectionHierarchyCompareExcludeFields
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testReflectionHierarchyCompareTransients
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testAppendSuper
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testObject
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testObjectBuild
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testObjectEx2
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testObjectComparator
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testObjectComparatorNull
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testLong
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testInt
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testChar
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testByte
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testDouble
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testFloat
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testBoolean
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testObjectArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testLongArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testIntArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testShortArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testCharArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testByteArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testDoubleArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testFloatArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testBooleanArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testMultiLongArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testMultiIntArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testMultiShortArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testMultiCharArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testMultiByteArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testMultiFloatArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testMultiDoubleArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testMultiBooleanArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testRaggedArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testMixedArray
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testObjectArrayHiddenByObject
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testLongArrayHiddenByObject
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testIntArrayHiddenByObject
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testShortArrayHiddenByObject
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testCharArrayHiddenByObject
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testByteArrayHiddenByObject
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testDoubleArrayHiddenByObject
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testFloatArrayHiddenByObject
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testBooleanArrayHiddenByObject
|    org.apache.commons.lang3.concurrent.LazyInitializerTest:testGet
|    org.apache.commons.lang3.concurrent.LazyInitializerTest:testGetMultipleTimes
|    org.apache.commons.lang3.concurrent.LazyInitializerTest:testGetConcurrent
|    org.apache.commons.lang3.BitFieldTest:testGetValue
|    org.apache.commons.lang3.BitFieldTest:testGetShortValue
|    org.apache.commons.lang3.BitFieldTest:testGetShortRawValue
|    org.apache.commons.lang3.BitFieldTest:testIsSet
|    org.apache.commons.lang3.BitFieldTest:testIsAllSet
|    org.apache.commons.lang3.BitFieldTest:testSetValue
|    org.apache.commons.lang3.BitFieldTest:testSetShortValue
|    org.apache.commons.lang3.BitFieldTest:testByte
|    org.apache.commons.lang3.BitFieldTest:testClear
|    org.apache.commons.lang3.BitFieldTest:testClearShort
|    org.apache.commons.lang3.BitFieldTest:testSet
|    org.apache.commons.lang3.BitFieldTest:testSetShort
|    org.apache.commons.lang3.BitFieldTest:testSetBoolean
|    org.apache.commons.lang3.StringUtilsIsTest:testIsAlphanumeric
|    org.apache.commons.lang3.StringUtilsIsTest:testIsWhitespace
|    org.apache.commons.lang3.StringUtilsIsTest:testIsAlphaspace
|    org.apache.commons.lang3.StringUtilsIsTest:testIsAlphanumericSpace
|    org.apache.commons.lang3.StringUtilsIsTest:testIsAsciiPrintable_String
|    org.apache.commons.lang3.StringUtilsIsTest:testIsNumeric
|    org.apache.commons.lang3.builder.DiffTest:testGetFieldName
|    org.apache.commons.lang3.builder.DiffTest:testGetType
|    org.apache.commons.lang3.builder.DiffTest:testToString
|    org.apache.commons.lang3.text.ExtendedMessageFormatTest:testExtendedFormats
|    org.apache.commons.lang3.text.ExtendedMessageFormatTest:testEscapedQuote_LANG_477
|    org.apache.commons.lang3.text.ExtendedMessageFormatTest:testEmbeddedPatternInChoice
|    org.apache.commons.lang3.text.ExtendedMessageFormatTest:testEscapedBraces_LANG_948
|    org.apache.commons.lang3.text.ExtendedMessageFormatTest:testExtendedAndBuiltInFormats
|    org.apache.commons.lang3.text.ExtendedMessageFormatTest:testBuiltInChoiceFormat
|    org.apache.commons.lang3.text.ExtendedMessageFormatTest:testBuiltInDateTimeFormat
|    org.apache.commons.lang3.text.ExtendedMessageFormatTest:testOverriddenBuiltinFormat
|    org.apache.commons.lang3.text.ExtendedMessageFormatTest:testBuiltInNumberFormat
|    org.apache.commons.lang3.text.ExtendedMessageFormatTest:testEqualsHashcode
|    org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest:testBlank
|    org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest:testAppendSuper
|    org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest:testObject
|    org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest:testPerson
|    org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest:testLong
|    org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest:testObjectArray
|    org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest:testLongArray
|    org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest:testLongArrayArray
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testConstructor
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldIllegalArgumentException1
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldIllegalArgumentException2
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldIllegalArgumentException3
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldIllegalArgumentException4
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldForceAccessIllegalArgumentException1
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldForceAccessIllegalArgumentException2
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldForceAccessIllegalArgumentException3
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldForceAccessIllegalArgumentException4
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldsWithAnnotation
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldsWithAnnotationIllegalArgumentException1
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldsWithAnnotationIllegalArgumentException2
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldsWithAnnotationIllegalArgumentException3
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldsListWithAnnotation
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldsListWithAnnotationIllegalArgumentException1
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldsListWithAnnotationIllegalArgumentException2
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetFieldsListWithAnnotationIllegalArgumentException3
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetDeclaredField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetDeclaredFieldAccessIllegalArgumentException2
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetDeclaredFieldAccessIllegalArgumentException3
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetDeclaredFieldAccessIllegalArgumentException4
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetDeclaredFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetDeclaredFieldForceAccessIllegalArgumentException1
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetDeclaredFieldForceAccessIllegalArgumentException2
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetDeclaredFieldForceAccessIllegalArgumentException3
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetDeclaredFieldForceAccessIllegalArgumentException4
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadStaticField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadStaticFieldIllegalArgumentException1
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadStaticFieldIllegalArgumentException2
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadStaticFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadStaticFieldForceAccessIllegalArgumentException1
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadStaticFieldForceAccessIllegalArgumentException2
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadNamedStaticField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadNamedStaticFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadDeclaredNamedStaticField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadDeclaredNamedStaticFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadNamedField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadNamedFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadDeclaredNamedField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testReadDeclaredNamedFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testWriteStaticField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testWriteStaticFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testWriteNamedStaticField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testWriteNamedStaticFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testWriteDeclaredNamedStaticField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testWriteDeclaredNamedStaticFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testWriteField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testWriteFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testWriteNamedField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testWriteNamedFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testWriteDeclaredNamedField
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testWriteDeclaredNamedFieldForceAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testAmbig
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testRemoveFinalModifier
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testRemoveFinalModifierWithAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testRemoveFinalModifierWithoutAccess
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testRemoveFinalModifierAccessNotNeeded
|    org.apache.commons.lang3.mutable.MutableBooleanTest:testCompareTo
|    org.apache.commons.lang3.mutable.MutableBooleanTest:testCompareToNull
|    org.apache.commons.lang3.mutable.MutableBooleanTest:testConstructors
|    org.apache.commons.lang3.mutable.MutableBooleanTest:testConstructorNull
|    org.apache.commons.lang3.mutable.MutableBooleanTest:testEquals
|    org.apache.commons.lang3.mutable.MutableBooleanTest:testGetSet
|    org.apache.commons.lang3.mutable.MutableBooleanTest:testSetNull
|    org.apache.commons.lang3.mutable.MutableBooleanTest:testHashCode
|    org.apache.commons.lang3.mutable.MutableBooleanTest:testToString
|    org.apache.commons.lang3.ClassPathUtilsTest:testConstructor
|    org.apache.commons.lang3.ClassPathUtilsTest:testToFullyQualifiedNameNullClassString
|    org.apache.commons.lang3.ClassPathUtilsTest:testToFullyQualifiedNameClassNull
|    org.apache.commons.lang3.ClassPathUtilsTest:testToFullyQualifiedNameClassString
|    org.apache.commons.lang3.ClassPathUtilsTest:testToFullyQualifiedNameNullPackageString
|    org.apache.commons.lang3.ClassPathUtilsTest:testToFullyQualifiedNamePackageNull
|    org.apache.commons.lang3.ClassPathUtilsTest:testToFullyQualifiedNamePackageString
|    org.apache.commons.lang3.ClassPathUtilsTest:testToFullyQualifiedPathClassNullString
|    org.apache.commons.lang3.ClassPathUtilsTest:testToFullyQualifiedPathClassNull
|    org.apache.commons.lang3.ClassPathUtilsTest:testToFullyQualifiedPathClass
|    org.apache.commons.lang3.ClassPathUtilsTest:testToFullyQualifiedPathPackageNullString
|    org.apache.commons.lang3.ClassPathUtilsTest:testToFullyQualifiedPathPackageNull
|    org.apache.commons.lang3.ClassPathUtilsTest:testToFullyQualifiedPathPackage
|    org.apache.commons.lang3.CharSetUtilsTest:testConstructor
|    org.apache.commons.lang3.CharSetUtilsTest:testSqueeze_StringString
|    org.apache.commons.lang3.CharSetUtilsTest:testSqueeze_StringStringarray
|    org.apache.commons.lang3.CharSetUtilsTest:testContainsAny_StringString
|    org.apache.commons.lang3.CharSetUtilsTest:testContainsAny_StringStringarray
|    org.apache.commons.lang3.CharSetUtilsTest:testCount_StringString
|    org.apache.commons.lang3.CharSetUtilsTest:testCount_StringStringarray
|    org.apache.commons.lang3.CharSetUtilsTest:testKeep_StringString
|    org.apache.commons.lang3.CharSetUtilsTest:testKeep_StringStringarray
|    org.apache.commons.lang3.CharSetUtilsTest:testDelete_StringString
|    org.apache.commons.lang3.CharSetUtilsTest:testDelete_StringStringarray
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testConstructor
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatDurationWords
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatDurationPluralWords
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatNegativeDurationWords
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatDurationHMS
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatNegativeDurationHMS
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatDurationISO
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatNegativeDurationISO
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatDuration
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatNegativeDuration
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatPeriodISO
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatPeriodISOStartGreaterEnd
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatPeriodISOMethod
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatPeriod
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testFormatPeriodeStartGreaterEnd
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testLexx
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testBugzilla38401
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testLANG815
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testLowDurations
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testEdgeDurations
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testLANG984
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testLANG982
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testDurationsByBruteForce
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testLANG981
|    org.apache.commons.lang3.mutable.MutableObjectTest:testConstructors
|    org.apache.commons.lang3.mutable.MutableObjectTest:testGetSet
|    org.apache.commons.lang3.mutable.MutableObjectTest:testEquals
|    org.apache.commons.lang3.mutable.MutableObjectTest:testHashCode
|    org.apache.commons.lang3.mutable.MutableObjectTest:testToString
|    org.apache.commons.lang3.exception.DefaultExceptionContextTest:testFormattedExceptionMessageNull
|    org.apache.commons.lang3.exception.DefaultExceptionContextTest:testAddContextValue
|    org.apache.commons.lang3.exception.DefaultExceptionContextTest:testSetContextValue
|    org.apache.commons.lang3.exception.DefaultExceptionContextTest:testGetFirstContextValue
|    org.apache.commons.lang3.exception.DefaultExceptionContextTest:testGetContextValues
|    org.apache.commons.lang3.exception.DefaultExceptionContextTest:testGetContextLabels
|    org.apache.commons.lang3.exception.DefaultExceptionContextTest:testGetContextEntries
|    org.apache.commons.lang3.exception.DefaultExceptionContextTest:testJavaSerialization
+-------------------------------------------------------------------------------+
| Found 123 redundant test cases:
|    org.apache.commons.lang3.mutable.MutableFloatTest:testCompareTo
|    org.apache.commons.lang3.builder.JsonToStringStyleTest:testPerson
|    org.apache.commons.lang3.builder.JsonToStringStyleTest:testLong
|    org.apache.commons.lang3.time.FastDatePrinterTest:testLang303
|    org.apache.commons.lang3.time.FastDatePrinterTest:testLang645
|    org.apache.commons.lang3.AnnotationUtilsTest:testSameInstance
|    org.apache.commons.lang3.AnnotationUtilsTest:testOneArgNull
|    org.apache.commons.lang3.reflect.TypeUtilsTest:testDetermineTypeVariableAssignments
|    org.apache.commons.lang3.ObjectUtilsTest:testMedian_emptyItems
|    org.apache.commons.lang3.ObjectUtilsTest:testPossibleCloneOfCloneable
|    org.apache.commons.lang3.text.StrBuilderTest:testChaining
|    org.apache.commons.lang3.text.StrBuilderTest:testCharAt
|    org.apache.commons.lang3.text.StrBuilderTest:testDeleteFirst_StrMatcher
|    org.apache.commons.lang3.text.StrBuilderTest:testReplaceFirst_String_String
|    org.apache.commons.lang3.text.StrBuilderTest:testLastIndexOf_char_int
|    org.apache.commons.lang3.text.StrBuilderTest:testLang294
|    org.apache.commons.lang3.text.StrBuilderTest:testLang412Left
|    org.apache.commons.lang3.CharSetTest:testConstructor_String_combo
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testConstructorExZero
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testObject
|    org.apache.commons.lang3.builder.HashCodeBuilderTest:testObjectArray
|    org.apache.commons.lang3.RangeTest:testBetweenWithCompare
|    org.apache.commons.lang3.tuple.MutablePairTest:testMutate
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testObjectBuild
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testInt
|    org.apache.commons.lang3.builder.EqualsBuilderTest:testShort
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBoolean_int_int_int_noMatch
|    org.apache.commons.lang3.BooleanUtilsTest:test_toBoolean_Integer_Integer_Integer
|    org.apache.commons.lang3.BooleanUtilsTest:testXor_primitive_validInput_2items
|    org.apache.commons.lang3.BooleanUtilsTest:testAnd_object_emptyInput
|    org.apache.commons.lang3.time.FastDateFormatTest:test_changeDefault_Locale_DateTimeInstance
|    org.apache.commons.lang3.builder.MultiLineToStringStyleTest:testLongArray
|    org.apache.commons.lang3.reflect.InheritanceUtilsTest:testDistanceDisjoint
|    org.apache.commons.lang3.StringEscapeUtilsTest:testEscapeCsvWriter
|    org.apache.commons.lang3.time.FastDateFormat_PrinterTest:testLang645
|    org.apache.commons.lang3.ValidateTest:testNotEmptyString1
|    org.apache.commons.lang3.ValidateTest:testNotBlankMsgBlankStringShouldThrow
|    org.apache.commons.lang3.ValidateTest:testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow
|    org.apache.commons.lang3.mutable.MutableByteTest:testPrimitiveValues
|    org.apache.commons.lang3.ConversionTest:testByteToBinary
|    org.apache.commons.lang3.concurrent.BackgroundInitializerTest:testGetRuntimeException
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveFloatArray
|    org.apache.commons.lang3.ArrayUtilsRemoveTest:testRemoveElementShortArray
|    org.apache.commons.lang3.exception.ExceptionUtilsTest:testConstructor
|    org.apache.commons.lang3.math.NumberUtilsTest:testToByteString
|    org.apache.commons.lang3.math.NumberUtilsTest:testCreateLong
|    org.apache.commons.lang3.math.NumberUtilsTest:testMinByte_emptyArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testMaxFloat_nullArray
|    org.apache.commons.lang3.math.NumberUtilsTest:testCompareFloat
|    org.apache.commons.lang3.ArrayUtilsAddTest:testAddObjectAtIndex
|    org.apache.commons.lang3.time.FastDateParserTest:testLocales_Short_BC
|    org.apache.commons.lang3.mutable.MutableIntTest:testConstructorNull
|    org.apache.commons.lang3.text.StrBuilderAppendInsertTest:testAppendFixedWidthPadLeft_int
|    org.apache.commons.lang3.mutable.MutableShortTest:testGetSet
|    org.apache.commons.lang3.time.DateUtilsTest:testWeekIterator
|    org.apache.commons.lang3.CharUtilsTest:testConstructor
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testContainsIgnoreCase_LocaleIndependence
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOf_charInt
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOfAny_StringCharArray
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testIndexOfIgnoreCase_String
|    org.apache.commons.lang3.StringUtilsEqualsIndexOfTest:testLastIndexOfIgnoreCase_StringInt
|    org.apache.commons.lang3.tuple.TripleTest:testToStringCustom
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllBooleanArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllBooleanArrayOutOfBoundsIndex
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveAllNullIntArray
|    org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest:testRemoveElementFloatArray
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testConcurrentExceptionCauseUnchecked
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testExtractCauseUncheckedException
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testHandleCauseChecked
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testHandleCauseUncheckedError
|    org.apache.commons.lang3.concurrent.ConcurrentUtilsTest:testHandleCauseUncheckedChecked
|    org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest:testSetContextValue
|    org.apache.commons.lang3.EnumUtilsTest:test_generateBitVector_nullIterable
|    org.apache.commons.lang3.StringUtilsTest:testSplitByWholeSeparatorPreserveAllTokens_StringStringInt
|    org.apache.commons.lang3.StringUtilsTest:testRepeat_StringInt
|    org.apache.commons.lang3.LocaleUtilsTest:testLang328
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:testDayOf
|    org.apache.commons.lang3.time.FastDateFormat_ParserTest:test1806
|    org.apache.commons.lang3.mutable.MutableLongTest:testSetNull
|    org.apache.commons.lang3.tuple.MutableTripleTest:testSerialization
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testRoundSemiMonth
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testTruncateSemiMonth
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testTruncateAmPm
|    org.apache.commons.lang3.time.DateUtilsRoundingTest:testTruncateMilliSecond
|    org.apache.commons.lang3.ClassUtilsTest:testToClass_object
|    org.apache.commons.lang3.ClassUtilsTest:test_getShortCanonicalName_String
|    org.apache.commons.lang3.time.DateFormatUtilsTest:testFormatCalendar
|    org.apache.commons.lang3.time.DateFormatUtilsTest:testSMTP
|    org.apache.commons.lang3.text.StrTokenizerTest:test6
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testSecondFragmentInLargerUnitWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondsOfMinuteWithCalender
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMinutesOfDayWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testMillisecondsOfMonthWithCalendar
|    org.apache.commons.lang3.time.DateUtilsFragmentTest:testSecondsOfMonthWithDate
|    org.apache.commons.lang3.RandomUtilsTest:testNextIntLowerGreaterUpper
|    org.apache.commons.lang3.RandomUtilsTest:testNextFloatLowerGreaterUpper
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyShortNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyBooleanObject
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyByteObjectNull
|    org.apache.commons.lang3.ArrayUtilsTest:testNullToEmptyFloatObject
|    org.apache.commons.lang3.ArrayUtilsTest:testSubarrayInt
|    org.apache.commons.lang3.ArrayUtilsTest:testSameLength
|    org.apache.commons.lang3.ArrayUtilsTest:testSameType
|    org.apache.commons.lang3.ArrayUtilsTest:testReverseChar
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfShort
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfShortWithStartIndex
|    org.apache.commons.lang3.ArrayUtilsTest:testContainsShort
|    org.apache.commons.lang3.ArrayUtilsTest:testLastIndexOfDouble
|    org.apache.commons.lang3.ArrayUtilsTest:testIsEmptyObject
|    org.apache.commons.lang3.ArrayUtilsTest:testIsNotEmptyObject
|    org.apache.commons.lang3.ArrayUtilsTest:testGetLength
|    org.apache.commons.lang3.concurrent.TimedSemaphoreTest:testGetAvailablePermits
|    org.apache.commons.lang3.reflect.ConstructorUtilsTest:testInvokeExactConstructor
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testBuilderReset
|    org.apache.commons.lang3.concurrent.BasicThreadFactoryTest:testNewThreadNoExHandler
|    org.apache.commons.lang3.builder.CompareToBuilderTest:testShort
|    org.apache.commons.lang3.BitFieldTest:testGetRawValue
|    org.apache.commons.lang3.BitFieldTest:testSetShortBoolean
|    org.apache.commons.lang3.StringUtilsIsTest:testIsAlpha
|    org.apache.commons.lang3.StringUtilsIsTest:testIsNumericSpace
|    org.apache.commons.lang3.builder.DiffTest:testCannotModify
|    org.apache.commons.lang3.reflect.FieldUtilsTest:testGetDeclaredFieldAccessIllegalArgumentException1
|    org.apache.commons.lang3.time.DurationFormatUtilsTest:testJiraLang281
+-------------------------------------------------------------------------------+
| Wrote reduced test suite code to: /home/thomas/Desktop/bachelor_thesis/bachelor_thesis/Tool/Benchmarks/results/commons-lang/lc/genetic_0.15_0.4/gen
+-------------------------------------------------------------------------------+
